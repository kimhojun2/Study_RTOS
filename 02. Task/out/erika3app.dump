
erika3app.elf:     file format elf32-tricore
erika3app.elf
architecture: TriCore:V1_6_1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000020

Program Header:
    LOAD off    0x00004020 vaddr 0x80000020 paddr 0x80000020 align 2**14
         filesz 0x0000dfb8 memsz 0x0000dfb8 flags r-x
    LOAD off    0x00014000 vaddr 0x70000000 paddr 0x8000dfd8 align 2**14
         filesz 0x00000930 memsz 0x00000930 flags rw-
    LOAD off    0x00016600 vaddr 0x5001a600 paddr 0x8000e908 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x5001b700 paddr 0x8000e908 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00016600 vaddr 0x6001a600 paddr 0x8000e908 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00017700 vaddr 0x6001b700 paddr 0x8000e908 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00014930 vaddr 0x70000930 paddr 0x8000e908 align 2**14
         filesz 0x00000000 memsz 0x00000320 flags rw-
    LOAD off    0x00018600 vaddr 0x70018600 paddr 0x8000e908 align 2**14
         filesz 0x00000000 memsz 0x00001000 flags rw-
    LOAD off    0x00015700 vaddr 0x70019700 paddr 0x8000e908 align 2**14
         filesz 0x00000000 memsz 0x00000400 flags rw-
    LOAD off    0x00017c00 vaddr 0x5001bc00 paddr 0x8000e940 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00017c00 vaddr 0x6001bc00 paddr 0x8000e940 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-
    LOAD off    0x00015c00 vaddr 0x70019c00 paddr 0x8000e940 align 2**14
         filesz 0x00000000 memsz 0x00002000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .startup      00000006  80000020  80000020  00004020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00001100  80000028  80000028  00004028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00000320  70000930  8000e908  00014930  2**3
                  ALLOC
  3 .data         00000930  70000000  8000dfd8  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .traptab      00000100  80001200  80001200  00005200  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .ctors        00000008  80001300  80001300  00005300  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .dtors        00000008  80001308  80001308  00005308  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .inttab_cpu0  00002000  80002000  80002000  00006000  2**13
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text         00009fd8  80004000  80004000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .CPU2.ustack  00001000  5001a600  8000e908  00016600  2**3
                  ALLOC, CPU2
 10 .CPU2.istack  00000400  5001b700  8000e908  00017700  2**3
                  ALLOC, CPU2
 11 .CPU2.csa     00002000  5001bc00  8000e940  00017c00  2**6
                  ALLOC, CPU2
 12 .CPU1.ustack  00001000  6001a600  8000e908  00016600  2**3
                  ALLOC, CPU1
 13 .CPU1.istack  00000400  6001b700  8000e908  00017700  2**3
                  ALLOC, CPU1
 14 .CPU1.csa     00002000  6001bc00  8000e940  00017c00  2**6
                  ALLOC, CPU1
 15 .CPU0.ustack  00001000  70018600  8000e908  00018600  2**3
                  ALLOC, CPU0
 16 .CPU0.istack  00000400  70019700  8000e908  00015700  2**3
                  ALLOC, CPU0
 17 .CPU0.csa     00002000  70019c00  8000e940  00015c00  2**6
                  ALLOC, CPU0
 18 .comment      00000053  00000000  00000000  00014930  2**0
                  CONTENTS, READONLY
 19 .debug_aranges 00000ca8  00000000  00000000  00014988  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_info   000bad34  00000000  00000000  00015630  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_abbrev 0000b667  00000000  00000000  000d0364  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0000d9b6  00000000  00000000  000db9cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_frame  000020f0  00000000  00000000  000e9384  2**2
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_str    00001ecb  00000000  00000000  000eb474  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_loc    000138a3  00000000  00000000  000ed33f  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_ranges 000012c8  00000000  00000000  00100be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .version_info 0004c67a  00000000  00000000  00101eaa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
80000020 l    d  .startup	00000000 .startup
80000028 l    d  .rodata	00000000 .rodata
70000930 l    d  .bss	00000000 .bss
70000000 l    d  .data	00000000 .data
80001200 l    d  .traptab	00000000 .traptab
80001300 l    d  .ctors	00000000 .ctors
80001308 l    d  .dtors	00000000 .dtors
80002000 l    d  .inttab_cpu0	00000000 .inttab_cpu0
80004000 l    d  .text	00000000 .text
5001a600 l    d  .CPU2.ustack	00000000 .CPU2.ustack
5001b700 l    d  .CPU2.istack	00000000 .CPU2.istack
5001bc00 l    d  .CPU2.csa	00000000 .CPU2.csa
6001a600 l    d  .CPU1.ustack	00000000 .CPU1.ustack
6001b700 l    d  .CPU1.istack	00000000 .CPU1.istack
6001bc00 l    d  .CPU1.csa	00000000 .CPU1.csa
70018600 l    d  .CPU0.ustack	00000000 .CPU0.ustack
70019700 l    d  .CPU0.istack	00000000 .CPU0.istack
70019c00 l    d  .CPU0.csa	00000000 .CPU0.csa
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .version_info	00000000 .version_info
00000000 l    df *ABS*	00000000 ee_tc_cstart.c
00000000 l    df *ABS*	00000000 asw.c
00000000 l    df *ABS*	00000000 bsw.c
70000000 l     O .data	00000004 c.16159
00000000 l    df *ABS*	00000000 ee_applcfg.c
80000160 l     O .rodata	0000001c osEE_tdb_ptr_array
80000154 l     O .rodata	00000004 osEE_res_db_ptr_array
8000017c l     O .rodata	000000e0 osEE_tdb_array
70000028 l     O .data	00000030 osEE_sn_array
80000158 l     O .rodata	00000008 osEE_res_db_array
70000bec l     O .bss	0000000c osEE_res_cb_array
8000025c l     O .rodata	00000008 osEE_sdb_array
70000bf8 l     O .bss	00000004 osEE_scb_array
70000058 l     O .data	0000008c osEE_tcb_array
00000000 l    df *ABS*	00000000 IfxVadc.c
80000264 l     O .rodata	00000006 CSWTCH.25
00000000 l    df *ABS*	00000000 IfxVadc_cfg.c
00000000 l    df *ABS*	00000000 IfxAsclin_PinMap.c
00000000 l    df *ABS*	00000000 IfxAsclin_cfg.c
00000000 l    df *ABS*	00000000 IfxPort_cfg.c
00000000 l    df *ABS*	00000000 IfxScuCcu.c
700000e8 l     O .data	00000004 IfxScuCcu_xtalFrequency
80005f4c l     F .text	00000034 IfxScuCcu_wait
80000b38 l     O .rodata	00000024 IfxScuCcu_aDefaultPllConfigSteps
00000000 l    df *ABS*	00000000 IfxScu_PinMap.c
00000000 l    df *ABS*	00000000 IfxVadc_Adc.c
80000dd4 l     O .rodata	00000040 IfxVadc_Adc_masterIndex
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 impure.c
70000504 l     O .data	00000424 impure_data
00000000 l    df *ABS*	00000000 vfprintf.c
80000e74 l     O .rodata	00000010 blanks.4035
80000e64 l     O .rodata	00000010 zeroes.4036
00000000 l    df *ABS*	00000000 dtoa.c
8000c220 l     F .text	0000011a quorem
00000000 l    df *ABS*	00000000 locale.c
80000ea0 l     O .rodata	00000038 lconv
00000000 l    df *ABS*	00000000 mprec.c
80000ed8 l     O .rodata	0000000c p05.2553
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_sbrk.c
70000928 l     O .data	00000004 heap_top.2289
00000000 l    df *ABS*	00000000 ee_tc_trapvec.c
00000000 l    df *ABS*	00000000 ee_tc_intvec.c
8000905a l     F .text	0000000e osEE_tc_isr2_wrapper
00000000 l    df *ABS*	00000000 IfxAsclin.c
00000000 l    df *ABS*	00000000 IfxAsclin_Asc.c
00000000 l    df *ABS*	00000000 IfxPort.c
00000000 l    df *ABS*	00000000 IfxScuEru.c
00000000 l    df *ABS*	00000000 IfxScuWdt.c
00000000 l    df *ABS*	00000000 Ifx_CircularBuffer.c
00000000 l    df *ABS*	00000000 Ifx_Fifo.c
00000000 l    df *ABS*	00000000 ee_tc_system.c
80008b8a l     F .text	00000054 osEE_tc_stm_us_ticks
70000c00 l     O .bss	00000004 osEE_tc_stm_freq_khz
00000000 l    df *ABS*	00000000 ee_oo_api_osek.c
80009068 l     F .text	0000001e osEE_shutdown_os
00000000 l    df *ABS*	00000000 ee_oo_sched_entry_points.c
8000992c l     F .text	00000022 osEE_release_all_m
00000000 l    df *ABS*	00000000 ee_oo_scheduler.c
00000000 l    df *ABS*	00000000 ee_oo_kernel.c
00000000 l    df *ABS*	00000000 ee_oo_sched_partitioned.c
00000000 l    df *ABS*	00000000 ee_std_change_context.c
00000000 l    df *ABS*	00000000 ee_tc_hal.c
00000000 l    df *ABS*	00000000 ee_tc_ctx.c
80009e22 l     F .text	00000022 osEE_tc_change_context_from_task_end
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
80009ffa l     F .text	0000019c _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libos_exit.c
00000000 l    df *ABS*	00000000 libos.c
00000000 l    df *ABS*	00000000 libos_abort.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udivdi3.c
00000000 l    df *ABS*	00000000 umoddi3.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 udiv6432.c
00000000 l    df *ABS*	00000000 Bsp.c
00000000 l    df *ABS*	00000000 CompilerGnuc.c
00000000 l    df *ABS*	00000000 IfxCpu.c
00000000 l    df *ABS*	00000000 IfxCpu_Irq.c
00000000 l    df *ABS*	00000000 IfxCpu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc.c
00000000 l    df *ABS*	00000000 IfxStdIf_DPipe.c
00000000 l    df *ABS*	00000000 IfxStm.c
00000000 l    df *ABS*	00000000 IfxStm_cfg.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 IfxScu_cfg.c
00000000 l    df *ABS*	00000000 IfxSrc_cfg.c
8000046c g     O .rodata	00000010 IfxAsclin1_TX_P33_12_OUT
800031c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_142
80002d20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_105
70000008 g     O .data	00000020 osEE_ccb_var
70000c50 g     O .text	00000001 __HEAP
80003980 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_204
80005740 g     F .text	00000062 IfxAsclin_Asc_write
80004fde g     F .text	0000000a IfxAsclin_Asc_getWriteEvent
80007068 g     F .text	00000032 IfxScuWdt_clearSafetyEndinit
80002c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_100
8000729c g     F .text	00000036 IfxScuWdt_setCpuEndinit
80000ee4 g     O .rodata	00000028 __mprec_tinytens
80000b7c g     O .rodata	00000010 IfxScu_WDT1LCK_P20_7_OUT
800041f0 g     F .text	000000e8 mdelay
8000a59e g     F .text	0000001a .hidden __ashldi3
80006ffe g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogReload
800021e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_15
800093d8 g     F .text	0000005a TerminateTask
8000505a g     F .text	00000006 IfxAsclin_Asc_resetSendCount
8000026c g     O .rodata	000000a0 IfxVadc_cfg_srcAddresses
70000be8 g     O .bss	00000004 osEE_kcb_var
8000041c g     O .rodata	00000010 IfxAsclin2_TX_P14_2_OUT
80002f60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_123
80008046 g     F .text	00000020 Ifx_CircularBuffer_addDataIncr
80004b0a g     F .text	00000014 IfxVadc_setScan
8000dc40 g     F .text	00000040 .hidden __eqdf2
80005670 g     F .text	00000088 IfxAsclin_Asc_initModuleConfig
80006f92 g     F .text	00000038 IfxScuWdt_changeCpuWatchdogReload
8000477c g     F .text	00000010 IfxVadc_getQueueStatus
00000000 g       *ABS*	00000000 __HEAP_SIZE
800082fc g     F .text	00000176 Ifx_Fifo_read
80004b64 g     F .text	0000001c IfxAsclin_disableModule
800007bc g     O .rodata	00000010 IfxAsclin3_RXC_P20_3_IN
80009a02 g     F .text	00000022 osEE_idle_hook_wrapper
6001a600 g       .CPU1.ustack	00000000 __USTACK1_AREA_END
80003e40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_242
80002300 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_24
80003580 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_172
8000871e g     F .text	0000046c osEE_tc_core0_start
800024c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_38
800081c2 g     F .text	00000004 Ifx_Fifo_destroy
70019b00 g     O .CPU0.istack	00000000 __ISTACK0
800074d6 g     F .text	00000108 IfxVadc_Adc_getChannelConfig
8000472c g     F .text	00000018 IfxVadc_getAdcAnalogFrequency
70000000 g       *ABS*	00000000 __DSPR0_START
80002be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_95
80002740 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_58
80009e82 g     F .text	00000024 osEE_hal_save_ctx_and_ready2stacked
80002c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_97
80006808 g     F .text	00000012 IfxScuCcu_initErayPllConfig
80009d4a g     F .text	00000028 osEE_change_context_from_running
80004fd0 g     F .text	0000000e IfxAsclin_Asc_getWriteCount
800007dc g     O .rodata	00000010 IfxAsclin3_RXA_P15_7_IN
80006f28 g     F .text	00000032 IfxScuEru_setInterruptGatingPattern
8000511c g     F .text	00000014 IfxAsclin_Asc_clearTx
800057be g     F .text	000000c6 IfxAsclin_Asc_stdIfDPipeInit
80002560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_43
8000ad82 g     F .text	00000002 __malloc_unlock
80004fba g     F .text	0000000a IfxAsclin_Asc_getReadEvent
8000450c g     F .text	00000036 TimerISR
800084a8 g     F .text	000000f0 Ifx_Fifo_canWriteCount
80007e0e g     F .text	000000e8 IfxVadc_Adc_initModule
800032e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_151
80002ec0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_118
80002c60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_99
80004646 g     F .text	0000003c IfxVadc_disablePostCalibration
80002680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_52
8000482a g     F .text	00000028 IfxVadc_getSrcAddress
80004876 g     F .text	00000024 IfxVadc_initialiseAdcConverterClock
80004c8e g     F .text	00000024 IfxAsclin_getOvsFrequency
800097f2 g     F .text	00000096 SetEvent
800075de g     F .text	00000038 IfxVadc_Adc_getChannelConversionTime
80003e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_244
80002380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_28
80006eea g     F .text	00000012 IfxScuEru_setEventFlag
80003920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_201
8000994e g     F .text	0000000a osEE_scheduler_task_wrapper_restore
80000d84 g     O .rodata	00000010 IfxScu_EVRWUPA_P14_1_IN
8000058c g     O .rodata	00000010 IfxAsclin3_SLSO_P12_1_OUT
70019600 g     O .CPU0.ustack	00000000 __USTACK0
80003720 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_185
8000d788 g     F .text	00000050 memmove
70018600 g       .CPU0.ustack	00000000 __USTACK0_AREA_END
8000d04e g     F .text	00000056 _Balloc
80000d64 g     O .rodata	00000010 IfxScu_EXTCLK0_P23_1_OUT
80003b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_216
8000087c g     O .rodata	00000010 IfxAsclin1_RXE_P11_10_IN
8000065c g     O .rodata	00000010 IfxAsclin3_SCLK_P15_8_OUT
80006122 g     F .text	0000004a IfxScuCcu_getModuleFrequency
80003aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_213
800028e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_71
80006294 g     F .text	000003be IfxScuCcu_init
8000dcc0 g     F .text	00000040 .hidden __gtdf2
8000dc24  w    F .text	0000000a __errno
800037e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_191
80003380 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_156
800090b8 g     F .text	00000042 SuspendAllInterrupts
80002140 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_10
80005060 g     F .text	00000008 IfxAsclin_Asc_canReadCount
80003180 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_140
80002ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_103
00001000 g       *ABS*	00000000 __USTACK0_SIZE
8000085c g     O .rodata	00000010 IfxAsclin1_RXG_P02_3_IN
80009ef0 g     F .text	00000066 osEE_hal_terminate_ctx
8000030c g     O .rodata	00000010 IfxAsclin3_TX_P32_3_OUT
80009a94 g     F .text	00000048 osEE_sn_priority_insert
80003480 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_164
80003ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_215
80009700 g     F .text	00000078 GetTaskState
80008004 g     F .text	00000020 Ifx_CircularBuffer_get32
80009b46 g     F .text	00000022 osEE_task_event_set_mask
8000039c g     O .rodata	00000010 IfxAsclin3_TX_P11_1_OUT
800007cc g     O .rodata	00000010 IfxAsclin3_RXB_P11_0_IN
800072d2 g     F .text	0000009e IfxScuWdt_initCpuWatchdog
80005a24 g     F .text	00000092 IfxPort_setGroupModeOutput
80002080 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_4
00000400 g       *ABS*	00000000 __ISTACK1_SIZE
80005e72 g     F .text	00000072 IfxScuCcu_getPllFrequency
80002a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_82
70000c40 g     O .bss	00000004 errno
8000a512 g     F .text	0000001e .hidden __make_dp
80002e40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_114
0001a600 g       *ABS*	00000000 __USTACK1_OFFSET
800022a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_21
80001260 g       .traptab	00000000 osEE_tc_trap_context
80007454 g     F .text	00000040 IfxScuWdt_enableWatchdogWithDebugger
80002ea0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_117
8000076c g     O .rodata	00000010 IfxAsclin3_RXG_P21_3_IN
8000090c g     O .rodata	00000010 IfxAsclin2_RTS_P33_4_OUT
800005cc g     O .rodata	00000010 IfxAsclin2_SLSO_P02_3_OUT
800027e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_63
8000a632 g     F .text	00000016 .hidden __make_fp
80003560 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_171
80004398 g     F .text	0000007e initVADCChannels
800023c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_30
8000033c g     O .rodata	00000010 IfxAsclin3_TX_P22_0_OUT
800020c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_6
80003780 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_188
80000c64 g     O .rodata	00000014 IfxScu_REQ15_P14_1_IN
80000cdc g     O .rodata	00000014 IfxScu_REQ0_P15_4_IN
80002260 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_19
80006f5a g     F .text	00000038 IfxScuWdt_changeCpuWatchdogPassword
800098ba g     F .text	00000058 ClearEvent
800061e6 g     F .text	00000042 IfxScuCcu_getCpuFrequency
80003d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_232
800028a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_69
80009958 g     F .text	000000aa osEE_scheduler_task_wrapper_run
80003f60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_251
800035c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_174
800006ac g     O .rodata	00000010 IfxAsclin3_SCLK_P00_0_OUT
80003700 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_184
800009dc g     O .rodata	00000080 IfxPort_cfg_indexMap
800052c2 g     F .text	000003ae IfxAsclin_Asc_initModule
80009ce6 g     F .text	00000026 osEE_scheduler_task_preemption_point
8000d032 g     F .text	0000001c memcpy
800021c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_14
80004000 g     F .text	00000066 FuncTask1
8000b07c g     F .text	000011a4 _svfprintf_r
8000a4ca g     F .text	00000048 .hidden __floatsidf
80007616 g     F .text	0000023e IfxVadc_Adc_getGroupConfig
80006dbc g     F .text	00000026 IfxScuEru_enablePatternDetectionTrigger
80009adc g     F .text	0000000e osEE_scheduler_rq_insert
80002940 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_74
8000dd40 g     F .text	00000040 .hidden __ltdf2
80004820 g     F .text	0000000a IfxVadc_getScanStatus
80001310 g       .dtors	00000000 __DTOR_END__
8000681a g     F .text	00000076 IfxScuCcu_setCpuFrequency
80006efc g     F .text	0000002c IfxScuEru_setFlagPatternDetection
80009d92 g     F .text	00000026 osEE_idle_task_terminate
80000cc8 g     O .rodata	00000014 IfxScu_REQ10_P14_3_IN
80003c80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_228
800008fc g     O .rodata	00000010 IfxAsclin3_RTS_P00_9_OUT
8000072c g     O .rodata	00000010 IfxAsclin1_SCLK_P20_10_OUT
8000d5f4 g     F .text	00000042 __fpclassifyd
800023a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_29
80006fca g     F .text	00000034 IfxScuWdt_changeSafetyWatchdogPassword
80003a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_211
80002340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_26
80007164 g     F .text	0000005c IfxScuWdt_enableCpuWatchdog
80002540 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_42
80009c20 g     F .text	0000003c osEE_scheduler_task_unblocked
80002960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_75
80003820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_193
800033c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_158
8000a8cc g     F .text	0000000c malloc
80002cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_102
80006c2c g     F .text	00000028 IfxScuEru_clearInputChannelConfiguration
00000000 g       *ABS*	00000000 NULL
8000078c g     O .rodata	00000010 IfxAsclin3_RXF_P21_6_IN
80008f68 g     F .text	0000001e osEE_tc_stm_set_sr0_next_match
80001240 g       .traptab	00000000 osEE_tc_trap_instruction
80000f34 g     O .rodata	000000c8 __mprec_tens
70000004 g     O .data	00000004 g_vadcChannelIDs
80005104 g     F .text	00000008 IfxAsclin_Asc_canWriteCount
800094a6 g     F .text	000000b2 GetResource
8000042c g     O .rodata	00000010 IfxAsclin2_TX_P10_5_OUT
8000051c g     O .rodata	00000010 IfxAsclin0_TX_P15_2_OUT
8000ae00 g     F .text	00000016 vsnprintf
80003ac0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_214
800029a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_77
8000095c g     O .rodata	00000010 IfxAsclin3_CTSA_P00_12_IN
800038a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_197
70000c38 g     O .bss	00000004 __malloc_top_pad
80004438 g     F .text	00000026 readADCValue
80006890 g     F .text	0000008e IfxScuCcu_setGtmFrequency
80005bb0 g     F .text	00000064 IfxPort_setPinModeLvdsHigh
80009ea6 g     F .text	0000002c osEE_hal_ready2stacked
80002660 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_51
80000c3c g     O .rodata	00000014 IfxScu_REQ1_P15_8_IN
80008172 g     F .text	00000050 Ifx_CircularBuffer_write32
8000d010 g     F .text	0000000a _localeconv_r
80003460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_163
80004066 g     F .text	0000005a FuncTask2
80004c54 g     F .text	00000022 IfxAsclin_getIndex
8000d1e0 g     F .text	00000010 __i2b
80009432 g     F .text	00000074 Schedule
80004cb2 g     F .text	00000016 IfxAsclin_getShiftFrequency
80007854 g     F .text	000001ec IfxVadc_Adc_initChannel
80003f40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_250
8000032c g     O .rodata	00000010 IfxAsclin3_TX_P22_1_OUT
80006af2 g     F .text	00000112 IfxScuCcu_switchToBackupClock
80003100 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_136
8000074c g     O .rodata	00000010 IfxAsclin0_SCLK_P15_2_OUT
800071c0 g     F .text	00000072 IfxScuWdt_enableSafetyWatchdog
80002060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_3
80003e00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_240
8000ad84 g     F .text	0000001e _sbrk_r
800004dc g     O .rodata	00000010 IfxAsclin1_TX_P11_12_OUT
80000cfc g     O .rodata	0000000c IfxScu_HWCFG5_P10_6_IN
800004ec g     O .rodata	00000010 IfxAsclin1_TX_P02_2_OUT
80003040 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_130
80002b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_89
800025c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_46
70000950 g     O .bss	0000000c g_vadcGroup
80006d70 g     F .text	00000026 IfxScuEru_enableAutoClear
8000073c g     O .rodata	00000010 IfxAsclin1_SCLK_P15_0_OUT
800027a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_61
80002800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_64
8000a75a g     F .text	000000ac .hidden __unpack_d
00002700 g     O *ABS*	00000000 __TRICORE_DERIVATE_NAME__
80005c56 g     F .text	0000003c IfxPort_setPinPadDriver
80003ec0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_246
80002480 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_36
8000049c g     O .rodata	00000010 IfxAsclin1_TX_P15_4_OUT
70000c34 g     O .bss	00000004 __malloc_max_sbrked_mem
80002a20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_81
800012a0 g       .traptab	00000000 osEE_tc_trap_assertion
80002ba0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_93
80008000 g       *ABS*	00000000 __A1_MEM
80009fc8 g     F .text	00000032 .hidden __extendsfdf2
80002700 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_56
80004bca g     F .text	00000016 IfxAsclin_getAddress
8000a196 g     F .text	00000038 .hidden __adddf3
80009264 g     F .text	0000001a GetActiveApplicationMode
8000616c g     F .text	0000007a IfxScuCcu_getSriFrequency
800030c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_134
800090fa g     F .text	00000026 ResumeAllInterrupts
800036c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_182
800038e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_199
80006a72 g     F .text	00000080 IfxScuCcu_setSriFrequency
8000de6e g     F .text	00000026 .hidden __umoddi3
80003740 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_186
70019c00 g     O .CPU0.csa	00000000 __CSA0
80003840 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_194
800033e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_159
80003280 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_148
80002180 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_12
8000092c g     O .rodata	00000010 IfxAsclin1_RTS_P23_1_OUT
80000e28 g     O .rodata	00000004 _global_impure_ptr
80006c7c g     F .text	00000036 IfxScuEru_connectTrigger
70000930 g     O .bss	00000020 g_vadcChannel
80006228 g     F .text	00000036 IfxScuCcu_getFsi2Frequency
8000d7e8 g     F .text	000003f0 _realloc_r
8000070c g     O .rodata	00000010 IfxAsclin1_SCLK_P33_12_OUT
80004d04 g     F .text	00000012 IfxAsclin_read16
80005958 g     F .text	0000003c IfxPort_enableEmergencyStop
8000035c g     O .rodata	00000010 IfxAsclin3_TX_P20_3_OUT
80003fc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_254
8000ddce g     F .text	000000a0 .hidden __udivdi3
800008dc g     O .rodata	00000010 IfxAsclin0_RXB_P15_3_IN
8000036c g     O .rodata	00000010 IfxAsclin3_TX_P20_0_OUT
70008000 g       *ABS*	00000000 __A0_MEM
80009a24 g     F .text	00000070 osEE_scheduler_core_rq_preempt_stk
8000052c g     O .rodata	00000010 IfxAsclin0_TX_P14_1_OUT
80000f0c g     O .rodata	00000028 __mprec_bigtens
8000dc2e g     F .text	00000012 abort
8000a56c g     F .text	00000032 .hidden __floatunsidf
80002aa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_85
8000d440 g     F .text	00000042 __mcmp
800038c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_198
80005130 g     F .text	0000001c IfxAsclin_Asc_read
8000927e g     F .text	00000084 ActivateTask
80000c78 g     O .rodata	00000014 IfxScu_REQ14_P02_1_IN
80003300 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_152
80006cd8 g     F .text	00000026 IfxScuEru_disableFallingEdgeDetection
80002040 g       .inttab_cpu0	00000000 osEE_tc_isr2_entry_2
80002de0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_111
800081c6 g     F .text	0000003a Ifx_Fifo_init
80002420 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_33
70000c48  w    O .bss	00000004 _my_errno
8000056c g     O .rodata	00000010 IfxAsclin3_SLSO_P21_2_OUT
80005884 g     F .text	00000030 IfxPort_getAddress
80003760 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_187
00019c00 g       *ABS*	00000000 __CSA0_OFFSET
8000098c g     O .rodata	00000010 IfxAsclin1_CTSB_P32_4_IN
800096a8 g     F .text	00000058 GetTaskID
80006666 g     F .text	000001a2 IfxScuCcu_initErayPll
8000040c g     O .rodata	00000010 IfxAsclin2_TX_P14_3_OUT
80003de0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_239
800003ac g     O .rodata	00000010 IfxAsclin3_TX_P11_0_OUT
80000ae4 g     O .rodata	00000054 IfxScuCcu_defaultClockConfig
0001bc00 g       *ABS*	00000000 __CSA1_OFFSET
80006e2e g     F .text	0000000e IfxScuEru_getAllEventFlagsStatus
80000d20 g     O .rodata	0000000c IfxScu_HWCFG2EVR13_P14_2_IN
80009120 g     F .text	0000005c SuspendOSInterrupts
80003a40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_210
8000709a g     F .text	0000005a IfxScuWdt_disableCpuWatchdog
8000a5b8 g     F .text	0000007a .hidden __unpack_f
80008eb0 g     F .text	00000034 osEE_tc_stm_set_clockpersec
80003a00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_208
80004416 g     F .text	00000022 initADC
800031e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_143
80002d40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_106
80009d0c g     F .text	0000003e osEE_scheduler_task_set_running
b0008000 g     O *ABS*	00000000 _SMALL_DATA4_
80008f86 g     F .text	0000008e osEE_tc_stm_set_sr1
800007ac g     O .rodata	00000010 IfxAsclin3_RXD_P32_2_IN
80004500 g     F .text	0000000c asclin0TxISR
8000068c g     O .rodata	00000010 IfxAsclin3_SCLK_P11_1_OUT
800070f4 g     F .text	00000070 IfxScuWdt_disableSafetyWatchdog
80002c00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_96
80007450 g     F .text	00000004 IfxScuWdt_serviceSafetyWatchdog
8000080c g     O .rodata	00000010 IfxAsclin2_RXE_P33_8_IN
800006bc g     O .rodata	00000010 IfxAsclin2_SCLK_P33_9_OUT
8000d138 g     F .text	00000042 __hi0bits
80002760 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_59
800008ac g     O .rodata	00000010 IfxAsclin1_RXB_P15_5_IN
80002e60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_115
8000047c g     O .rodata	00000010 IfxAsclin1_TX_P20_10_OUT
8000048c g     O .rodata	00000010 IfxAsclin1_TX_P15_5_OUT
8000dd80 g     F .text	0000004e .hidden __fixdfsi
80003160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_139
80009b8a g     F .text	00000068 osEE_scheduler_task_activated
80005f80 g     F .text	00000078 IfxScuCcu_getBbbFrequency
0001bc00 g       *ABS*	00000000 __CSA2_OFFSET
0001e000 g       *ABS*	00000000 __DSPR2_SIZE
800003bc g     O .rodata	00000010 IfxAsclin3_TX_P00_1_OUT
8000053c g     O .rodata	00000010 IfxAsclin0_TX_P14_0_OUT
80002f20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_121
8000625e g     F .text	00000036 IfxScuCcu_getFsiFrequency
80000b8c g     O .rodata	00000010 IfxScu_WDT0LCK_P20_8_OUT
80002100 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_8
80002580 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_44
80003d40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_234
800032a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_149
80007032 g     F .text	00000036 IfxScuWdt_clearCpuEndinit
80002e20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_113
80003320 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_153
800025e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_47
800022e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_23
800006dc g     O .rodata	00000010 IfxAsclin2_SCLK_P14_2_OUT
80004dfa g     F .text	00000182 IfxAsclin_setBitTiming
80000d44 g     O .rodata	00000010 IfxScu_EXTCLK1_P32_4_OUT
8000054c g     O .rodata	00000010 IfxAsclin3_SLSO_P33_1_OUT
8000037c g     O .rodata	00000010 IfxAsclin3_TX_P15_7_OUT
8000088c g     O .rodata	00000010 IfxAsclin1_RXD_P14_8_IN
80000d08 g     O .rodata	0000000c IfxScu_HWCFG4_P10_5_IN
80007494 g     F .text	00000026 IfxVadc_Adc_deInitGroup
80009f56 g     F .text	00000026 .hidden __lshrdi3
8000079c g     O .rodata	00000010 IfxAsclin3_RXE_P00_1_IN
800039a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_205
800008cc g     O .rodata	00000010 IfxAsclin0_RXD_P34_2_IN
8000062c g     O .rodata	00000010 IfxAsclin3_SCLK_P21_7_OUT
80007a56 g     F .text	0000038a IfxVadc_Adc_initGroup
8000d30a g     F .text	0000007c __pow5mult
70000960 g     O .bss	0000000c g_ERUconfig
80003fe0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_255
80002860 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_67
80002e00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_112
80006d24 g     F .text	00000026 IfxScuEru_disableRisingEdgeDetection
800005ec g     O .rodata	00000010 IfxAsclin1_SLSO_P20_8_OUT
80009c5c g     F .text	0000008a osEE_scheduler_task_terminated
800003cc g     O .rodata	00000010 IfxAsclin3_TX_P00_0_OUT
80002460 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_35
800036a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_181
8000a806 g     F .text	000000c6 .hidden __pack_f
80003ea0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_245
80008066 g     F .text	0000005e Ifx_CircularBuffer_read8
8000091c g     O .rodata	00000010 IfxAsclin2_RTS_P10_8_OUT
00002700 g       *ABS*	00000000 __TRICORE_DERIVATE_MEMORY_MAP__
80003b60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_219
800040c0 g     F .text	0000003e FuncTask3
80002360 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_27
800037a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_189
80007282 g     F .text	0000001a IfxScuWdt_initConfig
80001300 g       .ctors	00000000 __CTOR_LIST__
80008e0c g     F .text	000000a4 osEE_tc_get_fsource
80004d16 g     F .text	00000012 IfxAsclin_read32
80000ca0 g     O .rodata	00000014 IfxScu_REQ12_P11_10_IN
80007370 g     F .text	00000004 IfxScuWdt_serviceCpuWatchdog
80003ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_247
8000094c g     O .rodata	00000010 IfxAsclin0_RTS_P14_7_OUT
80002ac0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_86
8000081c g     O .rodata	00000010 IfxAsclin2_RXD_P10_6_IN
80008ee4 g     F .text	00000084 osEE_tc_stm_set_sr0
80000b9c g     O .rodata	00000014 IfxScu_REQ9_P20_0_IN
800006ec g     O .rodata	00000010 IfxAsclin2_SCLK_P10_6_OUT
80002e80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_116
80009ed2 g     F .text	0000001e osEE_tc_change_context_from_isr2_end
80002a60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_83
8000d01a g     F .text	00000018 memchr
80003400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_160
8000aed0 g     F .text	000001ac _free_r
800056f8 g     F .text	00000048 IfxAsclin_Asc_initiateTransmission
80002220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_17
800023e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_31
80009912 g     F .text	00000018 GetISRID
80009e44 g     F .text	00000024 osEE_hal_save_ctx_and_restore_ctx
80001280 g       .traptab	00000000 osEE_tc_trap_bus
800040fe g     F .text	00000010 FuncTaskM
80005c94 g     F .text	000000f8 IfxScuCcu_calculateSysPllDividers
8000096c g     O .rodata	00000010 IfxAsclin2_CTSB_P33_5_IN
700000f0 g     O .data	00000004 __malloc_sbrk_base
80000020 g     F .startup	00000006 _start
80003520 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_169
80008200 g     F .text	00000022 Ifx_Fifo_create
80003f20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_249
80007252 g     F .text	0000001c IfxScuWdt_getCpuWatchdogEndInit
00001000 g       *ABS*	00000000 __USTACK2_SIZE
800012e0 g       .traptab	00000000 osEE_tc_trap_nmi
800020a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_5
8000d386 g     F .text	000000ba __lshift
80003600 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_176
800006cc g     O .rodata	00000010 IfxAsclin2_SCLK_P33_7_OUT
800074ba g     F .text	0000001c IfxVadc_Adc_disableModule
00002000 g       *ABS*	00000000 __CSA_SIZE
8000d636 g     F .text	000000f0 __ssprint_r
80004744 g     F .text	0000001a IfxVadc_getAdcDigitalFrequency
5001bc00 g       .CPU2.csa	00000000 __CSA2
800034a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_165
80003c60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_227
7001bc00 g     O .CPU0.csa	00000000 __CSA0_END
800045c8 g     F .text	00000038 IfxVadc_enableAccess
800027c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_62
8000d1f0 g     F .text	0000011a __multiply
00000001 g       *ABS*	00000000 _.
80006e3c g     F .text	00000012 IfxScuEru_getEventFlagStatus
800005ac g     O .rodata	00000010 IfxAsclin2_SLSO_P33_6_OUT
800003fc g     O .rodata	00000010 IfxAsclin2_TX_P32_5_OUT
80004a90 g     F .text	00000024 IfxVadc_selectPowerSupplyVoltage
80006cfe g     F .text	00000026 IfxScuEru_disablePatternDetectionTrigger
70000c08 g     O .bss	00000028 __malloc_current_mallinfo
8000d54c g     F .text	000000a8 __d2b
80003c40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_226
800037c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_190
80003360 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_155
800026c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_54
80002fa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_125
80002b60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_91
80000bd8 g     O .rodata	00000014 IfxScu_REQ6_P02_0_IN
80008024 g     F .text	00000022 Ifx_CircularBuffer_get16
800004cc g     O .rodata	00000010 IfxAsclin1_TX_P14_10_OUT
80003680 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_180
80005e2e g     F .text	00000044 IfxScuCcu_getPllErayVcoFrequency
80001300 g       .ctors	00000000 __EH_FRAME_END__
80006cb2 g     F .text	00000026 IfxScuEru_disableAutoClear
8000691e g     F .text	00000050 IfxScuCcu_setPll2ErayFrequency
6001bb00 g       .CPU1.istack	00000000 __ISTACK1
80003800 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_192
800033a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_157
80006088 g     F .text	00000022 IfxScuCcu_getBaud2Frequency
80003240 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_146
80002da0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_109
8000066c g     O .rodata	00000010 IfxAsclin3_SCLK_P15_6_OUT
8000de94 g     F .text	000000a6 .hidden __fpcmp_parts_d
80004bae g     F .text	0000001c IfxAsclin_enableModule
0001a600 g       *ABS*	00000000 __USTACK2_OFFSET
80009aea g     F .text	00000026 osEE_scheduler_core_pop_running
800021a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_13
80003f80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_252
80009db8 g     F .text	0000006a osEE_cpu_startos
80003b40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_218
80006de2 g     F .text	00000026 IfxScuEru_enableRisingEdgeDetection
8000084c g     O .rodata	00000010 IfxAsclin2_RXA_P14_3_IN
80003e20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_241
800029c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_78
800058b4 g     F .text	00000022 IfxPort_getIndex
800030a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_133
80009888 g     F .text	00000032 GetEvent
800052a6 g     F .text	0000001c IfxAsclin_Asc_disableModule
80009f7c g     F .text	0000004c .hidden __floatundisf
6001b600 g       .CPU1.ustack	00000000 __USTACK1
80004d28 g     F .text	00000012 IfxAsclin_read8
80009bf2 g     F .text	0000002e osEE_scheduler_task_insert
80003be0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_223
80002620 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_49
8000a3b2 g     F .text	00000118 .hidden __divdf3
80000da4 g     O .rodata	00000010 IfxScu_EMGSTOPA_P33_8_IN
80000d54 g     O .rodata	00000010 IfxScu_EXTCLK1_P11_12_OUT
800057a2 g     F .text	0000001c IfxAsclin_Asc_blockingWrite
80007ef6 g     F .text	0000003a IfxVadc_Adc_initModuleConfig
700000f8 g     O .data	00000408 __malloc_av_
80002f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_120
80009644 g     F .text	00000064 ShutdownOS
80003060 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_131
8000adb6 g     F .text	0000004a _vsnprintf_r
800035e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_175
70018600 g     O .CPU0.ustack	00000000 __USTACK0_END
80003900 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_200
80002120 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_9
8000a20e g     F .text	000001a4 .hidden __muldf3
80002500 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_40
8000075c g     O .rodata	00000010 IfxAsclin0_SCLK_P14_0_OUT
80002520 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_41
80000d94 g     O .rodata	00000010 IfxScu_EMGSTOPB_P21_2_IN
8000ad80 g     F .text	00000002 __malloc_lock
8000dbe8 g     F .text	0000003c sbrk
80005d8c g     F .text	0000000e IfxScuCcu_getOsc0Frequency
80004590 g     F .text	00000038 IfxVadc_disableAccess
80000000 g       .startup	00000000 BootModeHeader0
800012c0 g       .traptab	00000000 osEE_tc_trap_system
80000d14 g     O .rodata	0000000c IfxScu_HWCFG3_BMI_P14_3_IN
80004cf0 g     F .text	00000014 IfxAsclin_getSrcPointerTx
8000478c g     F .text	00000094 IfxVadc_getResultBasedOnRequestSource
8000d726 g     F .text	00000062 _calloc_r
00002000 g       *ABS*	00000000 __CSA0_SIZE
800060aa g     F .text	00000078 IfxScuCcu_getSpbFrequency
80002820 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_65
8000083c g     O .rodata	00000010 IfxAsclin2_RXB_P02_1_IN
80004682 g     F .text	000000aa IfxVadc_enableGroupSync
80006e96 g     F .text	00000012 IfxScuEru_getPatternDetectionResult
800024a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_37
8000514c g     F .text	0000009e IfxAsclin_Asc_isrTransmit
800003ec g     O .rodata	00000010 IfxAsclin2_TX_P33_8_OUT
80003d20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_233
80003960 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_203
8000d7d8 g     F .text	00000010 memset
800034e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_167
80002640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_50
80004542 g     F .text	0000004c main
80007232 g     F .text	00000020 IfxScuWdt_getCpuWatchdogPassword
80006e08 g     F .text	00000026 IfxScuEru_enableTriggerPulse
80002200 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_16
70000c30 g     O .bss	00000004 __malloc_max_total_mem
80003540 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_170
80004b80 g     F .text	0000002e IfxAsclin_enableAscErrorFlags
8000df3a g     F .text	0000009c .hidden __udiv6432
00000400 g       *ABS*	00000000 __ISTACK_SIZE
80006068 g     F .text	00000020 IfxScuCcu_getBaud1Frequency
800025a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_45
80007f72 g     F .text	00000092 IfxVadc_Adc_initExternalMultiplexerMode
80000c50 g     O .rodata	00000014 IfxScu_REQ16_P15_1_IN
7000096c g     O .bss	0000027c g_AsclinAsc
80002b00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_88
80000cf0 g     O .rodata	0000000c IfxScu_HWCFG6_P14_4_IN
80009b10 g     F .text	00000018 osEE_task_activated
5001bb00 g       .CPU2.istack	00000000 __ISTACK2
80000138 g     O .rodata	00000014 osEE_kdb_var
00018600 g       *ABS*	00000000 __USTACK0_OFFSET
8000726e g     F .text	00000014 IfxScuWdt_getSafetyWatchdogPassword
8000a530 g     F .text	0000003c .hidden __truncdfsf2
80003b80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_220
80003020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_129
8000c33c g     F .text	00000cd2 _dtoa_r
0001b700 g       *ABS*	00000000 __ISTACK1_OFFSET
8000a8e6 g     F .text	0000049a _malloc_r
8000055c g     O .rodata	00000010 IfxAsclin3_SLSO_P21_6_OUT
80005c14 g     F .text	00000042 IfxPort_setPinModeLvdsMedium
8000082c g     O .rodata	00000010 IfxAsclin2_RXC_P02_10_IN
800039e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_207
80005280 g     F .text	00000026 IfxAsclin_Asc_blockingRead
80003d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_235
800024e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_39
80002020 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_1
8000061c g     O .rodata	00000010 IfxAsclin3_SCLK_P32_3_OUT
80004fb4 g     F .text	00000006 IfxAsclin_Asc_getReadCount
80002a00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_80
80008000 g       *ABS*	00000000 __A8_MEM
8000060c g     O .rodata	00000010 IfxAsclin3_SCLK_P33_2_OUT
b0008000 g       *ABS*	00000000 __A9_MEM
80004f90 g     F .text	00000012 IfxAsclin_write32
80003ce0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_231
80003340 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_154
80002c40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_98
80004182 g     F .text	0000006e printfSerial
80000e14 g     O .rodata	00000014 .hidden __thenan_df
8000ae16 g     F .text	000000ba _malloc_trim_r
80001308 g       .ctors	00000000 __CTOR_END__
80008000 g     O *ABS*	00000000 _SMALL_DATA2_
8000043c g     O .rodata	00000010 IfxAsclin2_TX_P02_9_OUT
80004994 g     F .text	000000aa IfxVadc_getChannelConversionTime
50000000 g       *ABS*	00000000 __DSPR2_START
800028c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_70
80004600 g     F .text	00000046 IfxVadc_configExternalMultiplexerMode
80009558 g     F .text	000000ec ReleaseResource
80007f30 g     F .text	00000042 IfxVadc_Adc_initExternalMultiplexerModeConfig
80004c76 g     F .text	00000018 IfxAsclin_getPdFrequency
80004762 g     F .text	0000001a IfxVadc_getBackgroundScanStatus
80003da0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_237
80001308 g       .dtors	00000000 __DTOR_LIST__
60000000 g       *ABS*	00000000 __DSPR1_START
80003c00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_224
800026a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_53
00001000 g       *ABS*	00000000 __USTACK1_SIZE
80002b40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_90
80004a3e g     F .text	00000052 IfxVadc_resetKernel
8000093c g     O .rodata	00000010 IfxAsclin1_RTS_P20_6_OUT
80000d38 g     O .rodata	0000000c IfxScu_HWCFG0DCLDO_P14_6_IN
8000dc80 g     F .text	00000040 .hidden __nedf2
80004da8 g     F .text	00000052 IfxAsclin_setBaudrateBitFields
80003a20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_209
80003880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_196
80005ee4 g     F .text	00000044 IfxScuCcu_getPllVcoFrequency
800069be g     F .text	000000b4 IfxScuCcu_setSpbFrequency
80003220 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_145
80002d80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_108
80006e72 g     F .text	00000024 IfxScuEru_getOutputChannelConfiguration
80000b6c g     O .rodata	00000010 IfxScu_WDT2LCK_P20_6_OUT
80000a5c g     O .rodata	00000080 IfxPort_cfg_esrMasks
80002a80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_84
8000077c g     O .rodata	00000010 IfxAsclin3_RXG_P21_2_IN
800042d8 g     F .text	00000070 printState
80003500 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_168
8000510c g     F .text	00000010 IfxAsclin_Asc_clearRx
800009ac g     O .rodata	00000010 IfxAsclin0_CTSA_P14_9_IN
80002400 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_32
80003000 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_128
80000dc4 g     O .rodata	00000010 IfxScu_DCDCSYNC_P32_2_OUT
8000592e g     F .text	0000002a IfxPort_setESR
8000057c g     O .rodata	00000010 IfxAsclin3_SLSO_P14_3_OUT
80003620 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_177
800004bc g     O .rodata	00000010 IfxAsclin1_TX_P15_0_OUT
80003120 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_137
80002900 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_72
8000099c g     O .rodata	00000010 IfxAsclin1_CTSA_P20_7_IN
80002600 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_48
80000c14 g     O .rodata	00000014 IfxScu_REQ3_P10_3_IN
800004ac g     O .rodata	00000010 IfxAsclin1_TX_P15_1_OUT
70000500 g     O .data	00000004 _impure_ptr
80003660 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_179
800058d6 g     F .text	00000028 IfxPort_resetESR
80004fe8 g     F .text	00000072 IfxAsclin_Asc_isrError
80004852 g     F .text	00000024 IfxVadc_initialiseAdcArbiterClock
80004cdc g     F .text	00000014 IfxAsclin_getSrcPointerRx
800036e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_183
8000050c g     O .rodata	00000010 IfxAsclin0_TX_P15_3_OUT
80003cc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_230
80004cc8 g     F .text	00000014 IfxAsclin_getSrcPointerEr
00002000 g       *ABS*	00000000 __CSA1_SIZE
800022c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_22
8000045c g     O .rodata	00000010 IfxAsclin1_TX_P33_13_OUT
8000089c g     O .rodata	00000010 IfxAsclin1_RXC_P20_9_IN
80009086 g     F .text	00000016 DisableAllInterrupts
80008114 g     F .text	0000005e Ifx_CircularBuffer_write8
800051ea g     F .text	00000096 IfxAsclin_Asc_isrReceive
80005994 g     F .text	00000090 IfxPort_setGroupModeInput
80008222 g     F .text	000000da Ifx_Fifo_canReadCount
00001000 g       *ABS*	00000000 __USTACK_SIZE
80009302 g     F .text	000000d6 ChainTask
80006eb6 g     F .text	00000034 IfxScuEru_selectExternalInput
80006d96 g     F .text	00000026 IfxScuEru_enableFallingEdgeDetection
80002ca0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_101
8000097c g     O .rodata	00000010 IfxAsclin2_CTSA_P10_7_IN
5001a600 g       .CPU2.ustack	00000000 __USTACK2_AREA_END
800007fc g     O .rodata	00000010 IfxAsclin2_RXF_P32_6_IN
80002fc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_126
8000067c g     O .rodata	00000010 IfxAsclin3_SCLK_P11_4_OUT
80006652 g     F .text	00000014 IfxScuCcu_initConfig
80003b20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_217
80003ba0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_221
8000034c g     O .rodata	00000010 IfxAsclin3_TX_P21_7_OUT
800048c4 g     F .text	00000066 IfxVadc_initializeFAdcI
800005bc g     O .rodata	00000010 IfxAsclin2_SLSO_P10_5_OUT
80000bb0 g     O .rodata	00000014 IfxScu_REQ8_P33_7_IN
8000031c g     O .rodata	00000010 IfxAsclin3_TX_P32_2_OUT
80001200 g       .traptab	00000000 osEE_tc_trap_mmu
800080c4 g     F .text	00000050 Ifx_CircularBuffer_read32
80002ae0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_87
80005068 g     F .text	0000009c IfxAsclin_Asc_flushTx
80009032 g     F .text	00000028 osEE_tc_delay
8000069c g     O .rodata	00000010 IfxAsclin3_SCLK_P00_2_OUT
80000ffc g     O .rodata	00000000 __clear_table
80005dca g     F .text	00000064 IfxScuCcu_getPllErayFrequency
8000086c g     O .rodata	00000010 IfxAsclin1_RXF_P33_13_IN
80009b28 g     F .text	0000001e osEE_task_end
8000064c g     O .rodata	00000010 IfxAsclin3_SCLK_P20_0_OUT
80002dc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_110
80002f80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_124
80003bc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_222
80002240 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_18
80002440 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_34
800008bc g     O .rodata	00000010 IfxAsclin1_RXA_P15_1_IN
80001300 g       .ctors	00000000 __EH_FRAME_BEGIN__
8000059c g     O .rodata	00000010 IfxAsclin3_SLSO_P00_3_OUT
80002840 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_66
80003140 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_138
80003e60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_243
80005f28 g     F .text	00000024 IfxScuCcu_getSourceFrequency
800004fc g     O .rodata	00000010 IfxAsclin0_TX_P34_1_OUT
80000db4 g     O .rodata	00000010 IfxScu_DCDCSYNC_P33_13_OUT
80000c8c g     O .rodata	00000014 IfxScu_REQ13_P15_5_IN
80009d72 g     F .text	00000020 osEE_change_context_from_task_end
80009778 g     F .text	0000007a WaitEvent
800058fe g     F .text	00000030 IfxPort_disableEmergencyStop
80003fa0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_253
80003c20 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_225
8000038c g     O .rodata	00000010 IfxAsclin3_TX_P15_6_OUT
80002880 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_68
80007de0 g     F .text	0000002e IfxVadc_Adc_initGroupConfig
00000400 g       *ABS*	00000000 __ISTACK0_SIZE
80002980 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_76
5001b600 g       .CPU2.ustack	00000000 __USTACK2
80003940 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_202
80009014 g     F .text	0000001e osEE_tc_stm_set_sr1_next_match
0001e000 g       *ABS*	00000000 __DSPR1_SIZE
80003260 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_147
80000020 g       .startup	00000000 BootModeIndex
800032c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_150
80003d80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_236
700000f4 g     O .data	00000004 __malloc_trim_threshold
800031a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_141
80002d00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_104
8000475e g     F .text	00000004 IfxVadc_getAdcModuleFrequency
80008598 g     F .text	00000186 Ifx_Fifo_write
8000d482 g     F .text	000000ca __mdiff
800020e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_7
80002920 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_73
80009b68 g     F .text	00000022 osEE_activate_isr2
80007a40 g     F .text	00000016 IfxVadc_Adc_initChannelConfig
80004be0 g     F .text	00000074 IfxAsclin_getFaFrequency
8000696e g     F .text	00000050 IfxScuCcu_setPll2Frequency
80003dc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_238
80020000 g       .startup	00000000 BootModeHeader1
80008bde g     F .text	0000022e osEE_tc_set_pll_fsource
8000489a g     F .text	0000002a IfxVadc_initializeFAdcD
80004110 g     F .text	00000072 UART_init
80005ab6 g     F .text	000000a4 IfxPort_setGroupPadDriver
800026e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_55
0001c000 g       *ABS*	00000000 __DSPR0_SIZE
80002fe0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_127
80002b80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_92
80000d74 g     O .rodata	00000010 IfxScu_EVRWUPB_P15_1_IN
800008ec g     O .rodata	00000010 IfxAsclin0_RXA_P14_1_IN
80004fa2 g     F .text	00000012 IfxAsclin_write8
80006ea8 g     F .text	0000000e IfxScuEru_getWholePatternDetectionResult
80002320 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_25
800039c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_206
800029e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_79
80001064 g     O .rodata	00000000 __copy_table
00019700 g       *ABS*	00000000 __ISTACK0_OFFSET
80004f7c g     F .text	00000014 IfxAsclin_write16
80008472 g     F .text	00000036 Ifx_Fifo_clear
80000c28 g     O .rodata	00000014 IfxScu_REQ2_P10_2_IN
00000400 g       *ABS*	00000000 __ISTACK2_SIZE
80002ee0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_119
8000dbd8 g     F .text	00000010 _exit
80002280 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_20
80001220 g       .traptab	00000000 osEE_tc_trap_protection
80001200 g     F .traptab	00000000 __TRAPTAB
80000cb4 g     O .rodata	00000014 IfxScu_REQ11_P20_9_IN
00002000 g       *ABS*	00000000 __CSA2_SIZE
80006c54 g     F .text	00000028 IfxScuEru_clearOutputChannelConfiguration
800035a0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_173
80006d4a g     F .text	00000026 IfxScuEru_disableTriggerPulse
800073a6 g     F .text	000000aa IfxScuWdt_initSafetyWatchdog
80004fc4 g     F .text	00000006 IfxAsclin_Asc_getSendCount
8000ada2 g     F .text	00000014 strlen
80003860 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_195
0001b700 g       *ABS*	00000000 __ISTACK2_OFFSET
80004d86 g     F .text	00000022 IfxAsclin_setClockSource
8000dd00 g     F .text	00000040 .hidden __gedf2
80000adc g     O .rodata	00000008 IfxScuCcu_defaultErayPllConfig
8000445e g     F .text	000000a2 initPeripheralsAndERU
800007ec g     O .rodata	00000010 IfxAsclin2_RXG_P02_0_IN
80002bc0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_94
80002720 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_57
80003420 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_161
8000044c g     O .rodata	00000010 IfxAsclin2_TX_P02_0_OUT
80002f40 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_122
80000bec g     O .rodata	00000014 IfxScu_REQ5_P10_8_IN
80004ab4 g     F .text	00000056 IfxVadc_setArbiterPriority
70000c50 g     O .text	00000001 __HEAP_END
800005dc g     O .rodata	00000010 IfxAsclin1_SLSO_P33_10_OUT
6001bc00 g       .CPU1.csa	00000000 __CSA1
80005ff8 g     F .text	00000070 IfxScuCcu_getMaxFrequency
8000909c g     F .text	0000001c EnableAllInterrupts
800005fc g     O .rodata	00000010 IfxAsclin1_SLSO_P14_3_OUT
80004b1e g     F .text	00000044 IfxVadc_startupCalibration
7000095c g     O .bss	00000004 g_vadc
80005b5a g     F .text	00000056 IfxPort_setPinMode
80003640 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_178
80002780 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_60
80000bc4 g     O .rodata	00000014 IfxScu_REQ7_P00_4_IN
80009e68 g     F .text	0000001a osEE_hal_restore_ctx
80004366 g     F .text	00000032 initVADCGroup
8000063c g     O .rodata	00000010 IfxAsclin3_SCLK_P21_5_OUT
8000a1ce g     F .text	00000040 .hidden __subdf3
70008000 g     O *ABS*	00000000 _SMALL_DATA_
80004fca g     F .text	00000006 IfxAsclin_Asc_getTxTimeStamp
8000492a g     F .text	0000006a IfxVadc_isPostCalibration
80004348 g     F .text	0000001e initVADCModule
80003f00 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_248
80006c16 g     F .text	00000016 IfxScuEru_clearEventFlag
80007374 g     F .text	00000032 IfxScuWdt_setSafetyEndinit
8000d17a g     F .text	00000066 __lo0bits
800034c0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_166
80002000 g     F .inttab_cpu0	00002000 __INTTAB0
800003dc g     O .rodata	00000010 IfxAsclin2_TX_P33_9_OUT
80003080 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_132
80005d9a g     F .text	00000030 IfxScuCcu_getOscFrequency
8000917c g     F .text	0000003c ResumeOSInterrupts
800030e0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_135
80004d3a g     F .text	0000004c IfxAsclin_resetModule
80006e4e g     F .text	00000024 IfxScuEru_getInputChannelConfiguration
800006fc g     O .rodata	00000010 IfxAsclin2_SCLK_P02_4_OUT
80006c04 g     F .text	00000012 IfxScuEru_clearAllEventFlags
80003200 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_144
80002d60 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_107
80002160 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_11
8000014c g     O .rodata	00000008 osEE_cdb_var
8000a648 g     F .text	00000112 .hidden __pack_d
800009bc g     O .rodata	00000020 IfxAsclin_cfg_indexMap
800091b8 g     F .text	000000ac StartOS
80003ca0 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_229
80000d2c g     O .rodata	0000000c IfxScu_HWCFG1EVR33_P14_5_IN
80000c00 g     O .rodata	00000014 IfxScu_REQ4_P10_7_IN
80003440 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_162
8000a8d8 g     F .text	0000000e free
80000b5c g     O .rodata	00000010 IfxScu_WDTSLCK_P20_9_OUT
8000d0b6 g     F .text	00000082 __multadd
8000d0a4 g     F .text	00000012 _Bfree
8000071c g     O .rodata	00000010 IfxAsclin1_SCLK_P33_11_OUT
80008000 g     O *ABS*	00000000 _SMALL_DATA3_
80003a80 g       .inttab_cpu0	00000000 osEE_tc_isr_dummy_entry_212



Disassembly of section .startup:

80000020 <_start>:
#endif

void _start(void)
{
  /* asm instruction to jump to the core startup */
  osEE_tc_jump_abs(osEE_tc_core0_start);
80000020:	9d 80 8f 43 	ja 8000871e <osEE_tc_core0_start>
80000024:	00 90       	ret 

Disassembly of section .traptab:

80001200 <__TRAPTAB>:
80001200:	00 a0       	debug 
80001202:	1d ff ff ff 	j 80001200 <__TRAPTAB>
	...

80001220 <osEE_tc_trap_protection>:
80001220:	00 a0       	debug 
80001222:	1d ff ff ff 	j 80001220 <osEE_tc_trap_protection>
	...

80001240 <osEE_tc_trap_instruction>:
80001240:	00 a0       	debug 
80001242:	1d ff ff ff 	j 80001240 <osEE_tc_trap_instruction>
	...

80001260 <osEE_tc_trap_context>:
80001260:	00 a0       	debug 
80001262:	1d ff ff ff 	j 80001260 <osEE_tc_trap_context>
	...

80001280 <osEE_tc_trap_bus>:
80001280:	00 a0       	debug 
80001282:	1d ff ff ff 	j 80001280 <osEE_tc_trap_bus>
	...

800012a0 <osEE_tc_trap_assertion>:
800012a0:	00 a0       	debug 
800012a2:	1d ff ff ff 	j 800012a0 <osEE_tc_trap_assertion>
	...

800012c0 <osEE_tc_trap_system>:
800012c0:	00 a0       	debug 
800012c2:	1d ff ff ff 	j 800012c0 <osEE_tc_trap_system>
	...

800012e0 <osEE_tc_trap_nmi>:
800012e0:	00 a0       	debug 
800012e2:	1d ff ff ff 	j 800012e0 <osEE_tc_trap_nmi>
	...

Disassembly of section .ctors:

80001300 <__CTOR_LIST__>:
	...

Disassembly of section .dtors:

80001308 <__DTOR_LIST__>:
	...

Disassembly of section .inttab_cpu0:

80002000 <__INTTAB0>:
	...

80002020 <osEE_tc_isr_dummy_entry_1>:
80002020:	3c 00       	j 80002020 <osEE_tc_isr_dummy_entry_1>
	...

80002040 <osEE_tc_isr2_entry_2>:
80002040:	0d 00 00 02 	svlcx 
80002044:	82 14       	mov %d4,1
80002046:	1d 00 0a 38 	j 8000905a <osEE_tc_isr2_wrapper>
	...

80002060 <osEE_tc_isr_dummy_entry_3>:
80002060:	3c 00       	j 80002060 <osEE_tc_isr_dummy_entry_3>
	...

80002080 <osEE_tc_isr_dummy_entry_4>:
80002080:	3c 00       	j 80002080 <osEE_tc_isr_dummy_entry_4>
	...

800020a0 <osEE_tc_isr_dummy_entry_5>:
800020a0:	3c 00       	j 800020a0 <osEE_tc_isr_dummy_entry_5>
	...

800020c0 <osEE_tc_isr_dummy_entry_6>:
800020c0:	3c 00       	j 800020c0 <osEE_tc_isr_dummy_entry_6>
	...

800020e0 <osEE_tc_isr_dummy_entry_7>:
800020e0:	3c 00       	j 800020e0 <osEE_tc_isr_dummy_entry_7>
	...

80002100 <osEE_tc_isr_dummy_entry_8>:
80002100:	3c 00       	j 80002100 <osEE_tc_isr_dummy_entry_8>
	...

80002120 <osEE_tc_isr_dummy_entry_9>:
80002120:	3c 00       	j 80002120 <osEE_tc_isr_dummy_entry_9>
	...

80002140 <osEE_tc_isr_dummy_entry_10>:
80002140:	3c 00       	j 80002140 <osEE_tc_isr_dummy_entry_10>
	...

80002160 <osEE_tc_isr_dummy_entry_11>:
80002160:	3c 00       	j 80002160 <osEE_tc_isr_dummy_entry_11>
	...

80002180 <osEE_tc_isr_dummy_entry_12>:
80002180:	3c 00       	j 80002180 <osEE_tc_isr_dummy_entry_12>
	...

800021a0 <osEE_tc_isr_dummy_entry_13>:
800021a0:	3c 00       	j 800021a0 <osEE_tc_isr_dummy_entry_13>
	...

800021c0 <osEE_tc_isr_dummy_entry_14>:
800021c0:	3c 00       	j 800021c0 <osEE_tc_isr_dummy_entry_14>
	...

800021e0 <osEE_tc_isr_dummy_entry_15>:
800021e0:	3c 00       	j 800021e0 <osEE_tc_isr_dummy_entry_15>
	...

80002200 <osEE_tc_isr_dummy_entry_16>:
80002200:	3c 00       	j 80002200 <osEE_tc_isr_dummy_entry_16>
	...

80002220 <osEE_tc_isr_dummy_entry_17>:
80002220:	3c 00       	j 80002220 <osEE_tc_isr_dummy_entry_17>
	...

80002240 <osEE_tc_isr_dummy_entry_18>:
80002240:	3c 00       	j 80002240 <osEE_tc_isr_dummy_entry_18>
	...

80002260 <osEE_tc_isr2_entry_19>:
80002260:	0d 00 00 02 	svlcx 
80002264:	82 04       	mov %d4,0
80002266:	1d 00 fa 36 	j 8000905a <osEE_tc_isr2_wrapper>
	...

80002280 <osEE_tc_isr_dummy_entry_20>:
80002280:	3c 00       	j 80002280 <osEE_tc_isr_dummy_entry_20>
	...

800022a0 <osEE_tc_isr_dummy_entry_21>:
800022a0:	3c 00       	j 800022a0 <osEE_tc_isr_dummy_entry_21>
	...

800022c0 <osEE_tc_isr_dummy_entry_22>:
800022c0:	3c 00       	j 800022c0 <osEE_tc_isr_dummy_entry_22>
	...

800022e0 <osEE_tc_isr_dummy_entry_23>:
800022e0:	3c 00       	j 800022e0 <osEE_tc_isr_dummy_entry_23>
	...

80002300 <osEE_tc_isr_dummy_entry_24>:
80002300:	3c 00       	j 80002300 <osEE_tc_isr_dummy_entry_24>
	...

80002320 <osEE_tc_isr_dummy_entry_25>:
80002320:	3c 00       	j 80002320 <osEE_tc_isr_dummy_entry_25>
	...

80002340 <osEE_tc_isr_dummy_entry_26>:
80002340:	3c 00       	j 80002340 <osEE_tc_isr_dummy_entry_26>
	...

80002360 <osEE_tc_isr_dummy_entry_27>:
80002360:	3c 00       	j 80002360 <osEE_tc_isr_dummy_entry_27>
	...

80002380 <osEE_tc_isr_dummy_entry_28>:
80002380:	3c 00       	j 80002380 <osEE_tc_isr_dummy_entry_28>
	...

800023a0 <osEE_tc_isr_dummy_entry_29>:
800023a0:	3c 00       	j 800023a0 <osEE_tc_isr_dummy_entry_29>
	...

800023c0 <osEE_tc_isr_dummy_entry_30>:
800023c0:	3c 00       	j 800023c0 <osEE_tc_isr_dummy_entry_30>
	...

800023e0 <osEE_tc_isr_dummy_entry_31>:
800023e0:	3c 00       	j 800023e0 <osEE_tc_isr_dummy_entry_31>
	...

80002400 <osEE_tc_isr_dummy_entry_32>:
80002400:	3c 00       	j 80002400 <osEE_tc_isr_dummy_entry_32>
	...

80002420 <osEE_tc_isr_dummy_entry_33>:
80002420:	3c 00       	j 80002420 <osEE_tc_isr_dummy_entry_33>
	...

80002440 <osEE_tc_isr_dummy_entry_34>:
80002440:	3c 00       	j 80002440 <osEE_tc_isr_dummy_entry_34>
	...

80002460 <osEE_tc_isr_dummy_entry_35>:
80002460:	3c 00       	j 80002460 <osEE_tc_isr_dummy_entry_35>
	...

80002480 <osEE_tc_isr_dummy_entry_36>:
80002480:	3c 00       	j 80002480 <osEE_tc_isr_dummy_entry_36>
	...

800024a0 <osEE_tc_isr_dummy_entry_37>:
800024a0:	3c 00       	j 800024a0 <osEE_tc_isr_dummy_entry_37>
	...

800024c0 <osEE_tc_isr_dummy_entry_38>:
800024c0:	3c 00       	j 800024c0 <osEE_tc_isr_dummy_entry_38>
	...

800024e0 <osEE_tc_isr_dummy_entry_39>:
800024e0:	3c 00       	j 800024e0 <osEE_tc_isr_dummy_entry_39>
	...

80002500 <osEE_tc_isr_dummy_entry_40>:
80002500:	3c 00       	j 80002500 <osEE_tc_isr_dummy_entry_40>
	...

80002520 <osEE_tc_isr_dummy_entry_41>:
80002520:	3c 00       	j 80002520 <osEE_tc_isr_dummy_entry_41>
	...

80002540 <osEE_tc_isr_dummy_entry_42>:
80002540:	3c 00       	j 80002540 <osEE_tc_isr_dummy_entry_42>
	...

80002560 <osEE_tc_isr_dummy_entry_43>:
80002560:	3c 00       	j 80002560 <osEE_tc_isr_dummy_entry_43>
	...

80002580 <osEE_tc_isr_dummy_entry_44>:
80002580:	3c 00       	j 80002580 <osEE_tc_isr_dummy_entry_44>
	...

800025a0 <osEE_tc_isr_dummy_entry_45>:
800025a0:	3c 00       	j 800025a0 <osEE_tc_isr_dummy_entry_45>
	...

800025c0 <osEE_tc_isr_dummy_entry_46>:
800025c0:	3c 00       	j 800025c0 <osEE_tc_isr_dummy_entry_46>
	...

800025e0 <osEE_tc_isr_dummy_entry_47>:
800025e0:	3c 00       	j 800025e0 <osEE_tc_isr_dummy_entry_47>
	...

80002600 <osEE_tc_isr_dummy_entry_48>:
80002600:	3c 00       	j 80002600 <osEE_tc_isr_dummy_entry_48>
	...

80002620 <osEE_tc_isr_dummy_entry_49>:
80002620:	3c 00       	j 80002620 <osEE_tc_isr_dummy_entry_49>
	...

80002640 <osEE_tc_isr_dummy_entry_50>:
80002640:	3c 00       	j 80002640 <osEE_tc_isr_dummy_entry_50>
	...

80002660 <osEE_tc_isr_dummy_entry_51>:
80002660:	3c 00       	j 80002660 <osEE_tc_isr_dummy_entry_51>
	...

80002680 <osEE_tc_isr_dummy_entry_52>:
80002680:	3c 00       	j 80002680 <osEE_tc_isr_dummy_entry_52>
	...

800026a0 <osEE_tc_isr_dummy_entry_53>:
800026a0:	3c 00       	j 800026a0 <osEE_tc_isr_dummy_entry_53>
	...

800026c0 <osEE_tc_isr_dummy_entry_54>:
800026c0:	3c 00       	j 800026c0 <osEE_tc_isr_dummy_entry_54>
	...

800026e0 <osEE_tc_isr_dummy_entry_55>:
800026e0:	3c 00       	j 800026e0 <osEE_tc_isr_dummy_entry_55>
	...

80002700 <osEE_tc_isr_dummy_entry_56>:
80002700:	3c 00       	j 80002700 <osEE_tc_isr_dummy_entry_56>
	...

80002720 <osEE_tc_isr_dummy_entry_57>:
80002720:	3c 00       	j 80002720 <osEE_tc_isr_dummy_entry_57>
	...

80002740 <osEE_tc_isr_dummy_entry_58>:
80002740:	3c 00       	j 80002740 <osEE_tc_isr_dummy_entry_58>
	...

80002760 <osEE_tc_isr_dummy_entry_59>:
80002760:	3c 00       	j 80002760 <osEE_tc_isr_dummy_entry_59>
	...

80002780 <osEE_tc_isr_dummy_entry_60>:
80002780:	3c 00       	j 80002780 <osEE_tc_isr_dummy_entry_60>
	...

800027a0 <osEE_tc_isr_dummy_entry_61>:
800027a0:	3c 00       	j 800027a0 <osEE_tc_isr_dummy_entry_61>
	...

800027c0 <osEE_tc_isr_dummy_entry_62>:
800027c0:	3c 00       	j 800027c0 <osEE_tc_isr_dummy_entry_62>
	...

800027e0 <osEE_tc_isr_dummy_entry_63>:
800027e0:	3c 00       	j 800027e0 <osEE_tc_isr_dummy_entry_63>
	...

80002800 <osEE_tc_isr_dummy_entry_64>:
80002800:	3c 00       	j 80002800 <osEE_tc_isr_dummy_entry_64>
	...

80002820 <osEE_tc_isr_dummy_entry_65>:
80002820:	3c 00       	j 80002820 <osEE_tc_isr_dummy_entry_65>
	...

80002840 <osEE_tc_isr_dummy_entry_66>:
80002840:	3c 00       	j 80002840 <osEE_tc_isr_dummy_entry_66>
	...

80002860 <osEE_tc_isr_dummy_entry_67>:
80002860:	3c 00       	j 80002860 <osEE_tc_isr_dummy_entry_67>
	...

80002880 <osEE_tc_isr_dummy_entry_68>:
80002880:	3c 00       	j 80002880 <osEE_tc_isr_dummy_entry_68>
	...

800028a0 <osEE_tc_isr_dummy_entry_69>:
800028a0:	3c 00       	j 800028a0 <osEE_tc_isr_dummy_entry_69>
	...

800028c0 <osEE_tc_isr_dummy_entry_70>:
800028c0:	3c 00       	j 800028c0 <osEE_tc_isr_dummy_entry_70>
	...

800028e0 <osEE_tc_isr_dummy_entry_71>:
800028e0:	3c 00       	j 800028e0 <osEE_tc_isr_dummy_entry_71>
	...

80002900 <osEE_tc_isr_dummy_entry_72>:
80002900:	3c 00       	j 80002900 <osEE_tc_isr_dummy_entry_72>
	...

80002920 <osEE_tc_isr_dummy_entry_73>:
80002920:	3c 00       	j 80002920 <osEE_tc_isr_dummy_entry_73>
	...

80002940 <osEE_tc_isr_dummy_entry_74>:
80002940:	3c 00       	j 80002940 <osEE_tc_isr_dummy_entry_74>
	...

80002960 <osEE_tc_isr_dummy_entry_75>:
80002960:	3c 00       	j 80002960 <osEE_tc_isr_dummy_entry_75>
	...

80002980 <osEE_tc_isr_dummy_entry_76>:
80002980:	3c 00       	j 80002980 <osEE_tc_isr_dummy_entry_76>
	...

800029a0 <osEE_tc_isr_dummy_entry_77>:
800029a0:	3c 00       	j 800029a0 <osEE_tc_isr_dummy_entry_77>
	...

800029c0 <osEE_tc_isr_dummy_entry_78>:
800029c0:	3c 00       	j 800029c0 <osEE_tc_isr_dummy_entry_78>
	...

800029e0 <osEE_tc_isr_dummy_entry_79>:
800029e0:	3c 00       	j 800029e0 <osEE_tc_isr_dummy_entry_79>
	...

80002a00 <osEE_tc_isr_dummy_entry_80>:
80002a00:	3c 00       	j 80002a00 <osEE_tc_isr_dummy_entry_80>
	...

80002a20 <osEE_tc_isr_dummy_entry_81>:
80002a20:	3c 00       	j 80002a20 <osEE_tc_isr_dummy_entry_81>
	...

80002a40 <osEE_tc_isr_dummy_entry_82>:
80002a40:	3c 00       	j 80002a40 <osEE_tc_isr_dummy_entry_82>
	...

80002a60 <osEE_tc_isr_dummy_entry_83>:
80002a60:	3c 00       	j 80002a60 <osEE_tc_isr_dummy_entry_83>
	...

80002a80 <osEE_tc_isr_dummy_entry_84>:
80002a80:	3c 00       	j 80002a80 <osEE_tc_isr_dummy_entry_84>
	...

80002aa0 <osEE_tc_isr_dummy_entry_85>:
80002aa0:	3c 00       	j 80002aa0 <osEE_tc_isr_dummy_entry_85>
	...

80002ac0 <osEE_tc_isr_dummy_entry_86>:
80002ac0:	3c 00       	j 80002ac0 <osEE_tc_isr_dummy_entry_86>
	...

80002ae0 <osEE_tc_isr_dummy_entry_87>:
80002ae0:	3c 00       	j 80002ae0 <osEE_tc_isr_dummy_entry_87>
	...

80002b00 <osEE_tc_isr_dummy_entry_88>:
80002b00:	3c 00       	j 80002b00 <osEE_tc_isr_dummy_entry_88>
	...

80002b20 <osEE_tc_isr_dummy_entry_89>:
80002b20:	3c 00       	j 80002b20 <osEE_tc_isr_dummy_entry_89>
	...

80002b40 <osEE_tc_isr_dummy_entry_90>:
80002b40:	3c 00       	j 80002b40 <osEE_tc_isr_dummy_entry_90>
	...

80002b60 <osEE_tc_isr_dummy_entry_91>:
80002b60:	3c 00       	j 80002b60 <osEE_tc_isr_dummy_entry_91>
	...

80002b80 <osEE_tc_isr_dummy_entry_92>:
80002b80:	3c 00       	j 80002b80 <osEE_tc_isr_dummy_entry_92>
	...

80002ba0 <osEE_tc_isr_dummy_entry_93>:
80002ba0:	3c 00       	j 80002ba0 <osEE_tc_isr_dummy_entry_93>
	...

80002bc0 <osEE_tc_isr_dummy_entry_94>:
80002bc0:	3c 00       	j 80002bc0 <osEE_tc_isr_dummy_entry_94>
	...

80002be0 <osEE_tc_isr_dummy_entry_95>:
80002be0:	3c 00       	j 80002be0 <osEE_tc_isr_dummy_entry_95>
	...

80002c00 <osEE_tc_isr_dummy_entry_96>:
80002c00:	3c 00       	j 80002c00 <osEE_tc_isr_dummy_entry_96>
	...

80002c20 <osEE_tc_isr_dummy_entry_97>:
80002c20:	3c 00       	j 80002c20 <osEE_tc_isr_dummy_entry_97>
	...

80002c40 <osEE_tc_isr_dummy_entry_98>:
80002c40:	3c 00       	j 80002c40 <osEE_tc_isr_dummy_entry_98>
	...

80002c60 <osEE_tc_isr_dummy_entry_99>:
80002c60:	3c 00       	j 80002c60 <osEE_tc_isr_dummy_entry_99>
	...

80002c80 <osEE_tc_isr_dummy_entry_100>:
80002c80:	3c 00       	j 80002c80 <osEE_tc_isr_dummy_entry_100>
	...

80002ca0 <osEE_tc_isr_dummy_entry_101>:
80002ca0:	3c 00       	j 80002ca0 <osEE_tc_isr_dummy_entry_101>
	...

80002cc0 <osEE_tc_isr_dummy_entry_102>:
80002cc0:	3c 00       	j 80002cc0 <osEE_tc_isr_dummy_entry_102>
	...

80002ce0 <osEE_tc_isr_dummy_entry_103>:
80002ce0:	3c 00       	j 80002ce0 <osEE_tc_isr_dummy_entry_103>
	...

80002d00 <osEE_tc_isr_dummy_entry_104>:
80002d00:	3c 00       	j 80002d00 <osEE_tc_isr_dummy_entry_104>
	...

80002d20 <osEE_tc_isr_dummy_entry_105>:
80002d20:	3c 00       	j 80002d20 <osEE_tc_isr_dummy_entry_105>
	...

80002d40 <osEE_tc_isr_dummy_entry_106>:
80002d40:	3c 00       	j 80002d40 <osEE_tc_isr_dummy_entry_106>
	...

80002d60 <osEE_tc_isr_dummy_entry_107>:
80002d60:	3c 00       	j 80002d60 <osEE_tc_isr_dummy_entry_107>
	...

80002d80 <osEE_tc_isr_dummy_entry_108>:
80002d80:	3c 00       	j 80002d80 <osEE_tc_isr_dummy_entry_108>
	...

80002da0 <osEE_tc_isr_dummy_entry_109>:
80002da0:	3c 00       	j 80002da0 <osEE_tc_isr_dummy_entry_109>
	...

80002dc0 <osEE_tc_isr_dummy_entry_110>:
80002dc0:	3c 00       	j 80002dc0 <osEE_tc_isr_dummy_entry_110>
	...

80002de0 <osEE_tc_isr_dummy_entry_111>:
80002de0:	3c 00       	j 80002de0 <osEE_tc_isr_dummy_entry_111>
	...

80002e00 <osEE_tc_isr_dummy_entry_112>:
80002e00:	3c 00       	j 80002e00 <osEE_tc_isr_dummy_entry_112>
	...

80002e20 <osEE_tc_isr_dummy_entry_113>:
80002e20:	3c 00       	j 80002e20 <osEE_tc_isr_dummy_entry_113>
	...

80002e40 <osEE_tc_isr_dummy_entry_114>:
80002e40:	3c 00       	j 80002e40 <osEE_tc_isr_dummy_entry_114>
	...

80002e60 <osEE_tc_isr_dummy_entry_115>:
80002e60:	3c 00       	j 80002e60 <osEE_tc_isr_dummy_entry_115>
	...

80002e80 <osEE_tc_isr_dummy_entry_116>:
80002e80:	3c 00       	j 80002e80 <osEE_tc_isr_dummy_entry_116>
	...

80002ea0 <osEE_tc_isr_dummy_entry_117>:
80002ea0:	3c 00       	j 80002ea0 <osEE_tc_isr_dummy_entry_117>
	...

80002ec0 <osEE_tc_isr_dummy_entry_118>:
80002ec0:	3c 00       	j 80002ec0 <osEE_tc_isr_dummy_entry_118>
	...

80002ee0 <osEE_tc_isr_dummy_entry_119>:
80002ee0:	3c 00       	j 80002ee0 <osEE_tc_isr_dummy_entry_119>
	...

80002f00 <osEE_tc_isr_dummy_entry_120>:
80002f00:	3c 00       	j 80002f00 <osEE_tc_isr_dummy_entry_120>
	...

80002f20 <osEE_tc_isr_dummy_entry_121>:
80002f20:	3c 00       	j 80002f20 <osEE_tc_isr_dummy_entry_121>
	...

80002f40 <osEE_tc_isr_dummy_entry_122>:
80002f40:	3c 00       	j 80002f40 <osEE_tc_isr_dummy_entry_122>
	...

80002f60 <osEE_tc_isr_dummy_entry_123>:
80002f60:	3c 00       	j 80002f60 <osEE_tc_isr_dummy_entry_123>
	...

80002f80 <osEE_tc_isr_dummy_entry_124>:
80002f80:	3c 00       	j 80002f80 <osEE_tc_isr_dummy_entry_124>
	...

80002fa0 <osEE_tc_isr_dummy_entry_125>:
80002fa0:	3c 00       	j 80002fa0 <osEE_tc_isr_dummy_entry_125>
	...

80002fc0 <osEE_tc_isr_dummy_entry_126>:
80002fc0:	3c 00       	j 80002fc0 <osEE_tc_isr_dummy_entry_126>
	...

80002fe0 <osEE_tc_isr_dummy_entry_127>:
80002fe0:	3c 00       	j 80002fe0 <osEE_tc_isr_dummy_entry_127>
	...

80003000 <osEE_tc_isr_dummy_entry_128>:
80003000:	3c 00       	j 80003000 <osEE_tc_isr_dummy_entry_128>
	...

80003020 <osEE_tc_isr_dummy_entry_129>:
80003020:	3c 00       	j 80003020 <osEE_tc_isr_dummy_entry_129>
	...

80003040 <osEE_tc_isr_dummy_entry_130>:
80003040:	3c 00       	j 80003040 <osEE_tc_isr_dummy_entry_130>
	...

80003060 <osEE_tc_isr_dummy_entry_131>:
80003060:	3c 00       	j 80003060 <osEE_tc_isr_dummy_entry_131>
	...

80003080 <osEE_tc_isr_dummy_entry_132>:
80003080:	3c 00       	j 80003080 <osEE_tc_isr_dummy_entry_132>
	...

800030a0 <osEE_tc_isr_dummy_entry_133>:
800030a0:	3c 00       	j 800030a0 <osEE_tc_isr_dummy_entry_133>
	...

800030c0 <osEE_tc_isr_dummy_entry_134>:
800030c0:	3c 00       	j 800030c0 <osEE_tc_isr_dummy_entry_134>
	...

800030e0 <osEE_tc_isr_dummy_entry_135>:
800030e0:	3c 00       	j 800030e0 <osEE_tc_isr_dummy_entry_135>
	...

80003100 <osEE_tc_isr_dummy_entry_136>:
80003100:	3c 00       	j 80003100 <osEE_tc_isr_dummy_entry_136>
	...

80003120 <osEE_tc_isr_dummy_entry_137>:
80003120:	3c 00       	j 80003120 <osEE_tc_isr_dummy_entry_137>
	...

80003140 <osEE_tc_isr_dummy_entry_138>:
80003140:	3c 00       	j 80003140 <osEE_tc_isr_dummy_entry_138>
	...

80003160 <osEE_tc_isr_dummy_entry_139>:
80003160:	3c 00       	j 80003160 <osEE_tc_isr_dummy_entry_139>
	...

80003180 <osEE_tc_isr_dummy_entry_140>:
80003180:	3c 00       	j 80003180 <osEE_tc_isr_dummy_entry_140>
	...

800031a0 <osEE_tc_isr_dummy_entry_141>:
800031a0:	3c 00       	j 800031a0 <osEE_tc_isr_dummy_entry_141>
	...

800031c0 <osEE_tc_isr_dummy_entry_142>:
800031c0:	3c 00       	j 800031c0 <osEE_tc_isr_dummy_entry_142>
	...

800031e0 <osEE_tc_isr_dummy_entry_143>:
800031e0:	3c 00       	j 800031e0 <osEE_tc_isr_dummy_entry_143>
	...

80003200 <osEE_tc_isr_dummy_entry_144>:
80003200:	3c 00       	j 80003200 <osEE_tc_isr_dummy_entry_144>
	...

80003220 <osEE_tc_isr_dummy_entry_145>:
80003220:	3c 00       	j 80003220 <osEE_tc_isr_dummy_entry_145>
	...

80003240 <osEE_tc_isr_dummy_entry_146>:
80003240:	3c 00       	j 80003240 <osEE_tc_isr_dummy_entry_146>
	...

80003260 <osEE_tc_isr_dummy_entry_147>:
80003260:	3c 00       	j 80003260 <osEE_tc_isr_dummy_entry_147>
	...

80003280 <osEE_tc_isr_dummy_entry_148>:
80003280:	3c 00       	j 80003280 <osEE_tc_isr_dummy_entry_148>
	...

800032a0 <osEE_tc_isr_dummy_entry_149>:
800032a0:	3c 00       	j 800032a0 <osEE_tc_isr_dummy_entry_149>
	...

800032c0 <osEE_tc_isr_dummy_entry_150>:
800032c0:	3c 00       	j 800032c0 <osEE_tc_isr_dummy_entry_150>
	...

800032e0 <osEE_tc_isr_dummy_entry_151>:
800032e0:	3c 00       	j 800032e0 <osEE_tc_isr_dummy_entry_151>
	...

80003300 <osEE_tc_isr_dummy_entry_152>:
80003300:	3c 00       	j 80003300 <osEE_tc_isr_dummy_entry_152>
	...

80003320 <osEE_tc_isr_dummy_entry_153>:
80003320:	3c 00       	j 80003320 <osEE_tc_isr_dummy_entry_153>
	...

80003340 <osEE_tc_isr_dummy_entry_154>:
80003340:	3c 00       	j 80003340 <osEE_tc_isr_dummy_entry_154>
	...

80003360 <osEE_tc_isr_dummy_entry_155>:
80003360:	3c 00       	j 80003360 <osEE_tc_isr_dummy_entry_155>
	...

80003380 <osEE_tc_isr_dummy_entry_156>:
80003380:	3c 00       	j 80003380 <osEE_tc_isr_dummy_entry_156>
	...

800033a0 <osEE_tc_isr_dummy_entry_157>:
800033a0:	3c 00       	j 800033a0 <osEE_tc_isr_dummy_entry_157>
	...

800033c0 <osEE_tc_isr_dummy_entry_158>:
800033c0:	3c 00       	j 800033c0 <osEE_tc_isr_dummy_entry_158>
	...

800033e0 <osEE_tc_isr_dummy_entry_159>:
800033e0:	3c 00       	j 800033e0 <osEE_tc_isr_dummy_entry_159>
	...

80003400 <osEE_tc_isr_dummy_entry_160>:
80003400:	3c 00       	j 80003400 <osEE_tc_isr_dummy_entry_160>
	...

80003420 <osEE_tc_isr_dummy_entry_161>:
80003420:	3c 00       	j 80003420 <osEE_tc_isr_dummy_entry_161>
	...

80003440 <osEE_tc_isr_dummy_entry_162>:
80003440:	3c 00       	j 80003440 <osEE_tc_isr_dummy_entry_162>
	...

80003460 <osEE_tc_isr_dummy_entry_163>:
80003460:	3c 00       	j 80003460 <osEE_tc_isr_dummy_entry_163>
	...

80003480 <osEE_tc_isr_dummy_entry_164>:
80003480:	3c 00       	j 80003480 <osEE_tc_isr_dummy_entry_164>
	...

800034a0 <osEE_tc_isr_dummy_entry_165>:
800034a0:	3c 00       	j 800034a0 <osEE_tc_isr_dummy_entry_165>
	...

800034c0 <osEE_tc_isr_dummy_entry_166>:
800034c0:	3c 00       	j 800034c0 <osEE_tc_isr_dummy_entry_166>
	...

800034e0 <osEE_tc_isr_dummy_entry_167>:
800034e0:	3c 00       	j 800034e0 <osEE_tc_isr_dummy_entry_167>
	...

80003500 <osEE_tc_isr_dummy_entry_168>:
80003500:	3c 00       	j 80003500 <osEE_tc_isr_dummy_entry_168>
	...

80003520 <osEE_tc_isr_dummy_entry_169>:
80003520:	3c 00       	j 80003520 <osEE_tc_isr_dummy_entry_169>
	...

80003540 <osEE_tc_isr_dummy_entry_170>:
80003540:	3c 00       	j 80003540 <osEE_tc_isr_dummy_entry_170>
	...

80003560 <osEE_tc_isr_dummy_entry_171>:
80003560:	3c 00       	j 80003560 <osEE_tc_isr_dummy_entry_171>
	...

80003580 <osEE_tc_isr_dummy_entry_172>:
80003580:	3c 00       	j 80003580 <osEE_tc_isr_dummy_entry_172>
	...

800035a0 <osEE_tc_isr_dummy_entry_173>:
800035a0:	3c 00       	j 800035a0 <osEE_tc_isr_dummy_entry_173>
	...

800035c0 <osEE_tc_isr_dummy_entry_174>:
800035c0:	3c 00       	j 800035c0 <osEE_tc_isr_dummy_entry_174>
	...

800035e0 <osEE_tc_isr_dummy_entry_175>:
800035e0:	3c 00       	j 800035e0 <osEE_tc_isr_dummy_entry_175>
	...

80003600 <osEE_tc_isr_dummy_entry_176>:
80003600:	3c 00       	j 80003600 <osEE_tc_isr_dummy_entry_176>
	...

80003620 <osEE_tc_isr_dummy_entry_177>:
80003620:	3c 00       	j 80003620 <osEE_tc_isr_dummy_entry_177>
	...

80003640 <osEE_tc_isr_dummy_entry_178>:
80003640:	3c 00       	j 80003640 <osEE_tc_isr_dummy_entry_178>
	...

80003660 <osEE_tc_isr_dummy_entry_179>:
80003660:	3c 00       	j 80003660 <osEE_tc_isr_dummy_entry_179>
	...

80003680 <osEE_tc_isr_dummy_entry_180>:
80003680:	3c 00       	j 80003680 <osEE_tc_isr_dummy_entry_180>
	...

800036a0 <osEE_tc_isr_dummy_entry_181>:
800036a0:	3c 00       	j 800036a0 <osEE_tc_isr_dummy_entry_181>
	...

800036c0 <osEE_tc_isr_dummy_entry_182>:
800036c0:	3c 00       	j 800036c0 <osEE_tc_isr_dummy_entry_182>
	...

800036e0 <osEE_tc_isr_dummy_entry_183>:
800036e0:	3c 00       	j 800036e0 <osEE_tc_isr_dummy_entry_183>
	...

80003700 <osEE_tc_isr_dummy_entry_184>:
80003700:	3c 00       	j 80003700 <osEE_tc_isr_dummy_entry_184>
	...

80003720 <osEE_tc_isr_dummy_entry_185>:
80003720:	3c 00       	j 80003720 <osEE_tc_isr_dummy_entry_185>
	...

80003740 <osEE_tc_isr_dummy_entry_186>:
80003740:	3c 00       	j 80003740 <osEE_tc_isr_dummy_entry_186>
	...

80003760 <osEE_tc_isr_dummy_entry_187>:
80003760:	3c 00       	j 80003760 <osEE_tc_isr_dummy_entry_187>
	...

80003780 <osEE_tc_isr_dummy_entry_188>:
80003780:	3c 00       	j 80003780 <osEE_tc_isr_dummy_entry_188>
	...

800037a0 <osEE_tc_isr_dummy_entry_189>:
800037a0:	3c 00       	j 800037a0 <osEE_tc_isr_dummy_entry_189>
	...

800037c0 <osEE_tc_isr_dummy_entry_190>:
800037c0:	3c 00       	j 800037c0 <osEE_tc_isr_dummy_entry_190>
	...

800037e0 <osEE_tc_isr_dummy_entry_191>:
800037e0:	3c 00       	j 800037e0 <osEE_tc_isr_dummy_entry_191>
	...

80003800 <osEE_tc_isr_dummy_entry_192>:
80003800:	3c 00       	j 80003800 <osEE_tc_isr_dummy_entry_192>
	...

80003820 <osEE_tc_isr_dummy_entry_193>:
80003820:	3c 00       	j 80003820 <osEE_tc_isr_dummy_entry_193>
	...

80003840 <osEE_tc_isr_dummy_entry_194>:
80003840:	3c 00       	j 80003840 <osEE_tc_isr_dummy_entry_194>
	...

80003860 <osEE_tc_isr_dummy_entry_195>:
80003860:	3c 00       	j 80003860 <osEE_tc_isr_dummy_entry_195>
	...

80003880 <osEE_tc_isr_dummy_entry_196>:
80003880:	3c 00       	j 80003880 <osEE_tc_isr_dummy_entry_196>
	...

800038a0 <osEE_tc_isr_dummy_entry_197>:
800038a0:	3c 00       	j 800038a0 <osEE_tc_isr_dummy_entry_197>
	...

800038c0 <osEE_tc_isr_dummy_entry_198>:
800038c0:	3c 00       	j 800038c0 <osEE_tc_isr_dummy_entry_198>
	...

800038e0 <osEE_tc_isr_dummy_entry_199>:
800038e0:	3c 00       	j 800038e0 <osEE_tc_isr_dummy_entry_199>
	...

80003900 <osEE_tc_isr_dummy_entry_200>:
80003900:	3c 00       	j 80003900 <osEE_tc_isr_dummy_entry_200>
	...

80003920 <osEE_tc_isr_dummy_entry_201>:
80003920:	3c 00       	j 80003920 <osEE_tc_isr_dummy_entry_201>
	...

80003940 <osEE_tc_isr_dummy_entry_202>:
80003940:	3c 00       	j 80003940 <osEE_tc_isr_dummy_entry_202>
	...

80003960 <osEE_tc_isr_dummy_entry_203>:
80003960:	3c 00       	j 80003960 <osEE_tc_isr_dummy_entry_203>
	...

80003980 <osEE_tc_isr_dummy_entry_204>:
80003980:	3c 00       	j 80003980 <osEE_tc_isr_dummy_entry_204>
	...

800039a0 <osEE_tc_isr_dummy_entry_205>:
800039a0:	3c 00       	j 800039a0 <osEE_tc_isr_dummy_entry_205>
	...

800039c0 <osEE_tc_isr_dummy_entry_206>:
800039c0:	3c 00       	j 800039c0 <osEE_tc_isr_dummy_entry_206>
	...

800039e0 <osEE_tc_isr_dummy_entry_207>:
800039e0:	3c 00       	j 800039e0 <osEE_tc_isr_dummy_entry_207>
	...

80003a00 <osEE_tc_isr_dummy_entry_208>:
80003a00:	3c 00       	j 80003a00 <osEE_tc_isr_dummy_entry_208>
	...

80003a20 <osEE_tc_isr_dummy_entry_209>:
80003a20:	3c 00       	j 80003a20 <osEE_tc_isr_dummy_entry_209>
	...

80003a40 <osEE_tc_isr_dummy_entry_210>:
80003a40:	3c 00       	j 80003a40 <osEE_tc_isr_dummy_entry_210>
	...

80003a60 <osEE_tc_isr_dummy_entry_211>:
80003a60:	3c 00       	j 80003a60 <osEE_tc_isr_dummy_entry_211>
	...

80003a80 <osEE_tc_isr_dummy_entry_212>:
80003a80:	3c 00       	j 80003a80 <osEE_tc_isr_dummy_entry_212>
	...

80003aa0 <osEE_tc_isr_dummy_entry_213>:
80003aa0:	3c 00       	j 80003aa0 <osEE_tc_isr_dummy_entry_213>
	...

80003ac0 <osEE_tc_isr_dummy_entry_214>:
80003ac0:	3c 00       	j 80003ac0 <osEE_tc_isr_dummy_entry_214>
	...

80003ae0 <osEE_tc_isr_dummy_entry_215>:
80003ae0:	3c 00       	j 80003ae0 <osEE_tc_isr_dummy_entry_215>
	...

80003b00 <osEE_tc_isr_dummy_entry_216>:
80003b00:	3c 00       	j 80003b00 <osEE_tc_isr_dummy_entry_216>
	...

80003b20 <osEE_tc_isr_dummy_entry_217>:
80003b20:	3c 00       	j 80003b20 <osEE_tc_isr_dummy_entry_217>
	...

80003b40 <osEE_tc_isr_dummy_entry_218>:
80003b40:	3c 00       	j 80003b40 <osEE_tc_isr_dummy_entry_218>
	...

80003b60 <osEE_tc_isr_dummy_entry_219>:
80003b60:	3c 00       	j 80003b60 <osEE_tc_isr_dummy_entry_219>
	...

80003b80 <osEE_tc_isr_dummy_entry_220>:
80003b80:	3c 00       	j 80003b80 <osEE_tc_isr_dummy_entry_220>
	...

80003ba0 <osEE_tc_isr_dummy_entry_221>:
80003ba0:	3c 00       	j 80003ba0 <osEE_tc_isr_dummy_entry_221>
	...

80003bc0 <osEE_tc_isr_dummy_entry_222>:
80003bc0:	3c 00       	j 80003bc0 <osEE_tc_isr_dummy_entry_222>
	...

80003be0 <osEE_tc_isr_dummy_entry_223>:
80003be0:	3c 00       	j 80003be0 <osEE_tc_isr_dummy_entry_223>
	...

80003c00 <osEE_tc_isr_dummy_entry_224>:
80003c00:	3c 00       	j 80003c00 <osEE_tc_isr_dummy_entry_224>
	...

80003c20 <osEE_tc_isr_dummy_entry_225>:
80003c20:	3c 00       	j 80003c20 <osEE_tc_isr_dummy_entry_225>
	...

80003c40 <osEE_tc_isr_dummy_entry_226>:
80003c40:	3c 00       	j 80003c40 <osEE_tc_isr_dummy_entry_226>
	...

80003c60 <osEE_tc_isr_dummy_entry_227>:
80003c60:	3c 00       	j 80003c60 <osEE_tc_isr_dummy_entry_227>
	...

80003c80 <osEE_tc_isr_dummy_entry_228>:
80003c80:	3c 00       	j 80003c80 <osEE_tc_isr_dummy_entry_228>
	...

80003ca0 <osEE_tc_isr_dummy_entry_229>:
80003ca0:	3c 00       	j 80003ca0 <osEE_tc_isr_dummy_entry_229>
	...

80003cc0 <osEE_tc_isr_dummy_entry_230>:
80003cc0:	3c 00       	j 80003cc0 <osEE_tc_isr_dummy_entry_230>
	...

80003ce0 <osEE_tc_isr_dummy_entry_231>:
80003ce0:	3c 00       	j 80003ce0 <osEE_tc_isr_dummy_entry_231>
	...

80003d00 <osEE_tc_isr_dummy_entry_232>:
80003d00:	3c 00       	j 80003d00 <osEE_tc_isr_dummy_entry_232>
	...

80003d20 <osEE_tc_isr_dummy_entry_233>:
80003d20:	3c 00       	j 80003d20 <osEE_tc_isr_dummy_entry_233>
	...

80003d40 <osEE_tc_isr_dummy_entry_234>:
80003d40:	3c 00       	j 80003d40 <osEE_tc_isr_dummy_entry_234>
	...

80003d60 <osEE_tc_isr_dummy_entry_235>:
80003d60:	3c 00       	j 80003d60 <osEE_tc_isr_dummy_entry_235>
	...

80003d80 <osEE_tc_isr_dummy_entry_236>:
80003d80:	3c 00       	j 80003d80 <osEE_tc_isr_dummy_entry_236>
	...

80003da0 <osEE_tc_isr_dummy_entry_237>:
80003da0:	3c 00       	j 80003da0 <osEE_tc_isr_dummy_entry_237>
	...

80003dc0 <osEE_tc_isr_dummy_entry_238>:
80003dc0:	3c 00       	j 80003dc0 <osEE_tc_isr_dummy_entry_238>
	...

80003de0 <osEE_tc_isr_dummy_entry_239>:
80003de0:	3c 00       	j 80003de0 <osEE_tc_isr_dummy_entry_239>
	...

80003e00 <osEE_tc_isr_dummy_entry_240>:
80003e00:	3c 00       	j 80003e00 <osEE_tc_isr_dummy_entry_240>
	...

80003e20 <osEE_tc_isr_dummy_entry_241>:
80003e20:	3c 00       	j 80003e20 <osEE_tc_isr_dummy_entry_241>
	...

80003e40 <osEE_tc_isr_dummy_entry_242>:
80003e40:	3c 00       	j 80003e40 <osEE_tc_isr_dummy_entry_242>
	...

80003e60 <osEE_tc_isr_dummy_entry_243>:
80003e60:	3c 00       	j 80003e60 <osEE_tc_isr_dummy_entry_243>
	...

80003e80 <osEE_tc_isr_dummy_entry_244>:
80003e80:	3c 00       	j 80003e80 <osEE_tc_isr_dummy_entry_244>
	...

80003ea0 <osEE_tc_isr_dummy_entry_245>:
80003ea0:	3c 00       	j 80003ea0 <osEE_tc_isr_dummy_entry_245>
	...

80003ec0 <osEE_tc_isr_dummy_entry_246>:
80003ec0:	3c 00       	j 80003ec0 <osEE_tc_isr_dummy_entry_246>
	...

80003ee0 <osEE_tc_isr_dummy_entry_247>:
80003ee0:	3c 00       	j 80003ee0 <osEE_tc_isr_dummy_entry_247>
	...

80003f00 <osEE_tc_isr_dummy_entry_248>:
80003f00:	3c 00       	j 80003f00 <osEE_tc_isr_dummy_entry_248>
	...

80003f20 <osEE_tc_isr_dummy_entry_249>:
80003f20:	3c 00       	j 80003f20 <osEE_tc_isr_dummy_entry_249>
	...

80003f40 <osEE_tc_isr_dummy_entry_250>:
80003f40:	3c 00       	j 80003f40 <osEE_tc_isr_dummy_entry_250>
	...

80003f60 <osEE_tc_isr_dummy_entry_251>:
80003f60:	3c 00       	j 80003f60 <osEE_tc_isr_dummy_entry_251>
	...

80003f80 <osEE_tc_isr_dummy_entry_252>:
80003f80:	3c 00       	j 80003f80 <osEE_tc_isr_dummy_entry_252>
	...

80003fa0 <osEE_tc_isr_dummy_entry_253>:
80003fa0:	3c 00       	j 80003fa0 <osEE_tc_isr_dummy_entry_253>
	...

80003fc0 <osEE_tc_isr_dummy_entry_254>:
80003fc0:	3c 00       	j 80003fc0 <osEE_tc_isr_dummy_entry_254>
	...

80003fe0 <osEE_tc_isr_dummy_entry_255>:
80003fe0:	3c 00       	j 80003fe0 <osEE_tc_isr_dummy_entry_255>
	...

Disassembly of section .text:

80004000 <FuncTask1>:
#include "bsw.h"

TASK(Task1)
{
    TaskType id;
    printfSerial("Task1 Begins...");
80004000:	91 00 00 48 	movh.a %a4,32768
#include "bsw.h"

TASK(Task1)
{
80004004:	20 10       	sub.a %sp,16
    TaskType id;
    printfSerial("Task1 Begins...");
80004006:	d9 44 28 00 	lea %a4,[%a4]40
8000400a:	6d 00 bc 00 	call 80004182 <printfSerial>
    printState(Task1);
8000400e:	82 24       	mov %d4,2
80004010:	6d 00 64 01 	call 800042d8 <printState>
    printState(Task2);
80004014:	82 34       	mov %d4,3
80004016:	6d 00 61 01 	call 800042d8 <printState>
    mdelay(2000);
8000401a:	3b 00 7d 40 	mov %d4,2000
8000401e:	6d 00 e9 00 	call 800041f0 <mdelay>
    ActivateTask(Task2);
80004022:	82 34       	mov %d4,3
80004024:	6d 00 2d 29 	call 8000927e <ActivateTask>
    printState(Task1);
80004028:	82 24       	mov %d4,2
8000402a:	6d 00 57 01 	call 800042d8 <printState>
    printState(Task2);
8000402e:	82 34       	mov %d4,3
80004030:	6d 00 54 01 	call 800042d8 <printState>
    mdelay(4000);
80004034:	3b 00 fa 40 	mov %d4,4000
80004038:	6d 00 dc 00 	call 800041f0 <mdelay>
    GetTaskID(&id);
8000403c:	d9 a4 0c 00 	lea %a4,[%sp]12
80004040:	6d 00 34 2b 	call 800096a8 <GetTaskID>
    printfSerial("Task ID = %d...", id);
80004044:	58 03       	ld.w %d15,[%sp]12
80004046:	91 00 00 48 	movh.a %a4,32768
8000404a:	d9 44 38 00 	lea %a4,[%a4]56 <80000038 <_start+0x18>>
8000404e:	78 00       	st.w [%sp]0,%d15
80004050:	6d 00 99 00 	call 80004182 <printfSerial>
    printfSerial("Task1 Finishes...");
80004054:	91 00 00 48 	movh.a %a4,32768
80004058:	d9 44 08 10 	lea %a4,[%a4]72 <80000048 <_start+0x28>>
8000405c:	6d 00 93 00 	call 80004182 <printfSerial>
    ChainTask(TaskM);
80004060:	82 54       	mov %d4,5
80004062:	1d 00 50 29 	j 80009302 <ChainTask>

80004066 <FuncTask2>:
}

TASK(Task2)
{
    TaskType id;
    printfSerial("Task2 Begins...");
80004066:	91 00 00 48 	movh.a %a4,32768
    printfSerial("Task1 Finishes...");
    ChainTask(TaskM);
}

TASK(Task2)
{
8000406a:	20 10       	sub.a %sp,16
    TaskType id;
    printfSerial("Task2 Begins...");
8000406c:	d9 44 1a 10 	lea %a4,[%a4]90
80004070:	6d 00 89 00 	call 80004182 <printfSerial>
    printState(Task1);
80004074:	82 24       	mov %d4,2
80004076:	6d 00 31 01 	call 800042d8 <printState>
    printState(Task2);
8000407a:	82 34       	mov %d4,3
8000407c:	6d 00 2e 01 	call 800042d8 <printState>
    mdelay(4000);
80004080:	3b 00 fa 40 	mov %d4,4000
80004084:	6d 00 b6 00 	call 800041f0 <mdelay>
    ActivateTask(Task3);
80004088:	82 44       	mov %d4,4
8000408a:	6d 00 fa 28 	call 8000927e <ActivateTask>
    mdelay(2000);
8000408e:	3b 00 7d 40 	mov %d4,2000
80004092:	6d 00 af 00 	call 800041f0 <mdelay>
    GetTaskID(&id);
80004096:	d9 a4 0c 00 	lea %a4,[%sp]12
8000409a:	6d 00 07 2b 	call 800096a8 <GetTaskID>
    printfSerial("Task ID = %d...", id);
8000409e:	58 03       	ld.w %d15,[%sp]12
800040a0:	91 00 00 48 	movh.a %a4,32768
800040a4:	d9 44 38 00 	lea %a4,[%a4]56 <80000038 <_start+0x18>>
800040a8:	78 00       	st.w [%sp]0,%d15
800040aa:	6d 00 6c 00 	call 80004182 <printfSerial>
    printfSerial("Task2 Finishes...");
800040ae:	91 00 00 48 	movh.a %a4,32768
800040b2:	d9 44 2a 10 	lea %a4,[%a4]106 <8000006a <_start+0x4a>>
800040b6:	6d 00 66 00 	call 80004182 <printfSerial>
    ChainTask(TaskM);
800040ba:	82 54       	mov %d4,5
800040bc:	1d 00 23 29 	j 80009302 <ChainTask>

800040c0 <FuncTask3>:
}

TASK(Task3)
{   
    TaskType id;
    printfSerial("Task3 Begins...");
800040c0:	91 00 00 48 	movh.a %a4,32768
    printfSerial("Task2 Finishes...");
    ChainTask(TaskM);
}

TASK(Task3)
{   
800040c4:	20 10       	sub.a %sp,16
    TaskType id;
    printfSerial("Task3 Begins...");
800040c6:	d9 44 3c 10 	lea %a4,[%a4]124
800040ca:	6d 00 5c 00 	call 80004182 <printfSerial>
    mdelay(3000);
800040ce:	3b 80 bb 40 	mov %d4,3000
800040d2:	6d 00 8f 00 	call 800041f0 <mdelay>
    GetTaskID(&id);
800040d6:	d9 a4 0c 00 	lea %a4,[%sp]12
800040da:	6d 00 e7 2a 	call 800096a8 <GetTaskID>
    printfSerial("Task ID = %d...", id);
800040de:	58 03       	ld.w %d15,[%sp]12
800040e0:	91 00 00 48 	movh.a %a4,32768
800040e4:	78 00       	st.w [%sp]0,%d15
800040e6:	d9 44 38 00 	lea %a4,[%a4]56 <80000038 <_start+0x18>>
800040ea:	6d 00 4c 00 	call 80004182 <printfSerial>
    printfSerial("Task3 Finishes...");
800040ee:	91 00 00 48 	movh.a %a4,32768
800040f2:	d9 44 0c 20 	lea %a4,[%a4]140 <8000008c <_start+0x6c>>
800040f6:	6d 00 46 00 	call 80004182 <printfSerial>
    TerminateTask();
800040fa:	1d 00 6f 29 	j 800093d8 <TerminateTask>

800040fe <FuncTaskM>:
}

TASK(TaskM){

    printState(Task1);
800040fe:	82 24       	mov %d4,2
80004100:	6d 00 ec 00 	call 800042d8 <printState>
    printState(Task2);
80004104:	82 34       	mov %d4,3
80004106:	6d 00 e9 00 	call 800042d8 <printState>
    TerminateTask();
8000410a:	1d 00 67 29 	j 800093d8 <TerminateTask>
	...

80004110 <UART_init>:
                                        IfxVadc_ChannelId_6,  /* AN38: channel 6 of group 4                         */
                                        IfxVadc_ChannelId_7}; /* AN39: channel 7 of group 4                         */


void UART_init(void)
{
80004110:	20 60       	sub.a %sp,96

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
80004112:	d9 a4 24 00 	lea %a4,[%sp]36
80004116:	c5 f5 80 40 	lea %a5,f0000900 <_SMALL_DATA4_+0x3fff8900>
    ascConfig.baudrate.prescaler    = 1;
8000411a:	82 1f       	mov %d15,1

void UART_init(void)
{

    IfxAsclin_Asc_Config ascConfig;
    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);
8000411c:	6d 00 aa 0a 	call 80005670 <IfxAsclin_Asc_initModuleConfig>
    ascConfig.baudrate.prescaler    = 1;
80004120:	f9 af 2c 00 	st.h [%sp]44,%d15
    ascConfig.baudrate.baudrate     = 115200;
80004124:	7b 10 7e f4 	movh %d15,18401
80004128:	78 0a       	st.w [%sp]40,%d15
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;
8000412a:	82 3f       	mov %d15,3
8000412c:	e9 af 2e 00 	st.b [%sp]46,%d15

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;
80004130:	da 13       	mov %d15,19
80004132:	f9 af 00 10 	st.h [%sp]64,%d15


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80004136:	4d c0 e1 ff 	mfcr %d15,$core_id
    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
8000413a:	7b 00 00 28 	movh %d2,32768
8000413e:	60 23       	mov.a %a3,%d2
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80004140:	37 0f 63 f0 	extr.u %d15,%d15,0,3
80004144:	d9 af 04 00 	lea %a15,[%sp]4
80004148:	40 f4       	mov.aa %a4,%a15
8000414a:	d9 32 20 20 	lea %a2,[%a3]160
    ascConfig.baudrate.baudrate     = 115200;
    ascConfig.baudrate.oversampling = IfxAsclin_OversamplingFactor_4;

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
8000414e:	e9 af 06 10 	st.b [%sp]70,%d15
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
    /* pin configuration */
    const IfxAsclin_Asc_Pins pins = {
80004152:	a0 33       	mov.a %a3,3
80004154:	09 22 48 01 	ld.d %e2,[%a2+]8
80004158:	89 42 48 01 	st.d [%a4+]8,%e2
8000415c:	fc 3c       	loop %a3,80004154 <UART_init+0x44>

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
8000415e:	7b 00 00 f7 	movh %d15,28672
80004162:	1b cf 96 f0 	addi %d15,%d15,2412
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004166:	91 00 00 47 	movh.a %a4,28672

    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
8000416a:	78 14       	st.w [%sp]80,%d15
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
8000416c:	d9 44 80 f0 	lea %a4,[%a4]3008 <70000bc0 <g_AsclinAsc+0x254>>
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80004170:	3b 20 10 f0 	mov %d15,258
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
80004174:	d9 a5 24 00 	lea %a5,[%sp]36
    ascConfig.interrupt.txPriority    = ISR_PRIORITY_ASC_3_TX;

    ascConfig.interrupt.typeOfService = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());
    /* FIFO configuration */
    ascConfig.txBuffer     = g_AsclinAsc.ascBuffer.tx;
    ascConfig.txBufferSize = ASC_TX_BUFFER_SIZE;
80004178:	f9 af 0e 10 	st.h [%sp]78,%d15
        &IfxAsclin3_RXD_P32_2_IN, IfxPort_InputMode_pullUp,        /* Rx pin */
        NULL_PTR,                     IfxPort_OutputMode_pushPull,     /* RTS pin not used */
        &IfxAsclin3_TX_P15_7_OUT, IfxPort_OutputMode_pushPull,     /* Tx pin */
        IfxPort_PadDriver_cmosAutomotiveSpeed1
    };
    ascConfig.pins = &pins;
8000417c:	f8 12       	st.a [%sp]72,%a15
    /* initialize module */
    IfxAsclin_Asc_initModule(&g_AsclinAsc.drivers.asc, &ascConfig);
8000417e:	1d 00 a2 08 	j 800052c2 <IfxAsclin_Asc_initModule>

80004182 <printfSerial>:
    //printf("Asclin Asc is initialised\n");
}


void printfSerial(const char *fmt,...)
{
80004182:	20 e8       	sub.a %sp,232
80004184:	40 4f       	mov.aa %a15,%a4
    EnableAllInterrupts();
80004186:	6d 00 8b 27 	call 8000909c <EnableAllInterrupts>
    char buf[LEN_BUF];
    va_list args;
    va_start (args, fmt );
    vsnprintf(buf, LEN_BUF, fmt, args);
8000418a:	40 f5       	mov.aa %a5,%a15
8000418c:	d9 a4 28 10 	lea %a4,[%sp]104
80004190:	3b 00 08 40 	mov %d4,128
80004194:	d9 a6 28 30 	lea %a6,[%sp]232
80004198:	6d 00 34 36 	call 8000ae00 <vsnprintf>
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
8000419c:	d9 a4 28 10 	lea %a4,[%sp]104
800041a0:	6d 00 01 36 	call 8000ada2 <strlen>
800041a4:	91 00 00 f7 	movh.a %a15,28672
800041a8:	d9 ff ac 50 	lea %a15,[%a15]2412 <7000096c <g_AsclinAsc>>
800041ac:	f9 f2 3a 90 	st.h [%a15]634 <7000027a <__malloc_av_+0x182>>,%d2
    unsigned int i =0;
800041b0:	82 0f       	mov %d15,0
    for(; i<strlen(buf);i++) {
800041b2:	d9 a4 28 10 	lea %a4,[%sp]104
800041b6:	6d 00 f6 35 	call 8000ada2 <strlen>
800041ba:	7f 2f 0c 80 	jge.u %d15,%d2,800041d2 <printfSerial+0x50>
        txData[i] = buf[i];
800041be:	d9 a3 04 00 	lea %a3,[%sp]4
800041c2:	10 32       	addsc.a %a2,%a3,%d15,0
800041c4:	d9 a3 28 10 	lea %a3,[%sp]104
800041c8:	10 3f       	addsc.a %a15,%a3,%d15,0
    va_end (args);
    /* prepare data to transmit and receive */
    uint8 txData[100];
    g_AsclinAsc.count = strlen(buf);
    unsigned int i =0;
    for(; i<strlen(buf);i++) {
800041ca:	c2 1f       	add %d15,1
        txData[i] = buf[i];
800041cc:	08 02       	ld.bu %d2,[%a15]0
800041ce:	34 22       	st.b [%a2],%d2
800041d0:	3c f1       	j 800041b2 <printfSerial+0x30>
    }
    /* Transmit data */
    IfxAsclin_Asc_write(&g_AsclinAsc.drivers.asc, txData, &g_AsclinAsc.count, TIME_INFINITE);
800041d2:	91 00 00 47 	movh.a %a4,28672
800041d6:	91 00 00 67 	movh.a %a6,28672
800041da:	82 f4       	mov %d4,-1
800041dc:	d9 44 80 f0 	lea %a4,[%a4]3008 <70000bc0 <g_AsclinAsc+0x254>>
800041e0:	d9 a5 04 00 	lea %a5,[%sp]4 <70000bc0 <g_AsclinAsc+0x254>>
800041e4:	d9 66 a6 f0 	lea %a6,[%a6]3046 <70000be6 <g_AsclinAsc+0x27a>>
800041e8:	9b 04 00 58 	addih %d5,%d4,32768
800041ec:	1d 00 aa 0a 	j 80005740 <IfxAsclin_Asc_write>

800041f0 <mdelay>:

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800041f0:	85 fa 10 00 	ld.w %d10,f0000010 <_SMALL_DATA4_+0x3fff8010>
}

void mdelay(unsigned long delay_ms)
{
800041f4:	02 4b       	mov %d11,%d4
    result |= ((uint64)stm->CAP.U) << 32;
800041f6:	85 fc 2c 00 	ld.w %d12,f000002c <_SMALL_DATA4_+0x3fff802c>
}


IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.STMDIV;
800041fa:	6d 00 97 0e 	call 80005f28 <IfxScuCcu_getSourceFrequency>
800041fe:	91 30 00 ff 	movh.a %a15,61443
80004202:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80004206:	4c f0       	ld.w %d15,[%a15]0

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004208:	53 1a 40 80 	mul.u %e8,%d10,1
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
8000420c:	0b ac 10 48 	mov %e4,%d12,%d10
80004210:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80004214:	a6 95       	or %d5,%d9
80004216:	02 28       	mov %d8,%d2
80004218:	6d 00 b2 2e 	call 80009f7c <__floatundisf>
8000421c:	4b 0f 41 f1 	itof %d15,%d15
80004220:	7b a0 47 a4 	movh %d10,17530
80004224:	4b f8 51 f0 	div.f %d15,%d8,%d15
80004228:	40 fc       	mov.aa %a12,%a15
8000422a:	40 fd       	mov.aa %a13,%a15
8000422c:	4b af 51 f0 	div.f %d15,%d15,%d10
80004230:	4b f2 51 20 	div.f %d2,%d2,%d15
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
80004234:	02 ae       	mov %d14,%d10
    IfxAsclin_Asc_write(&g_AsclinAsc.drivers.asc, txData, &g_AsclinAsc.count, TIME_INFINITE);
}

void mdelay(unsigned long delay_ms)
{
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
80004236:	4b 02 71 f1 	ftouz %d15,%d2
8000423a:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000423e:	85 f2 2c 00 	ld.w %d2,f000002c <_SMALL_DATA4_+0x3fff802c>
80004242:	6d 00 73 0e 	call 80005f28 <IfxScuCcu_getSourceFrequency>
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
80004246:	3b 40 01 40 	mov %d4,20
8000424a:	4b 4b 11 42 	div.u %e4,%d11,%d4
8000424e:	48 02       	ld.w %d2,[%a15]0
}

void mdelay(unsigned long delay_ms)
{
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
    unsigned long period_ms = 20, cnt = 0;
80004250:	82 0b       	mov %d11,0
    while (cnt < (delay_ms / period_ms)) {
80004252:	02 4d       	mov %d13,%d4
80004254:	5f db 41 00 	jeq %d11,%d13,800042d6 <mdelay+0xe6>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004258:	85 fc 10 00 	ld.w %d12,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000425c:	85 fe 2c 08 	ld.a %a14,f000002c <_SMALL_DATA4_+0x3fff802c>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80004260:	53 1c 40 80 	mul.u %e8,%d12,1
80004264:	6d 00 62 0e 	call 80005f28 <IfxScuCcu_getSourceFrequency>
80004268:	54 c3       	ld.w %d3,[%a12]
    result |= ((uint64)stm->CAP.U) << 32;
8000426a:	80 e5       	mov.d %d5,%a14
8000426c:	37 03 64 34 	extr.u %d3,%d3,8,4
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
80004270:	02 c4       	mov %d4,%d12
80004272:	a6 95       	or %d5,%d9
80004274:	60 3f       	mov.a %a15,%d3
80004276:	02 28       	mov %d8,%d2
80004278:	6d 00 82 2e 	call 80009f7c <__floatundisf>
8000427c:	80 f4       	mov.d %d4,%a15
8000427e:	4b 04 41 31 	itof %d3,%d4
80004282:	4b 38 51 80 	div.f %d8,%d8,%d3
80004286:	4b a8 51 80 	div.f %d8,%d8,%d10
8000428a:	4b 82 51 20 	div.f %d2,%d2,%d8
8000428e:	4b 02 71 21 	ftouz %d2,%d2
        if (current_ms - prev_ms >= period_ms) {
80004292:	a2 f2       	sub %d2,%d15
80004294:	8b 42 61 22 	lt.u %d2,%d2,20
80004298:	df 02 de ff 	jne %d2,0,80004254 <mdelay+0x64>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000429c:	85 fc 10 00 	ld.w %d12,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800042a0:	85 ff 2c 08 	ld.a %a15,f000002c <_SMALL_DATA4_+0x3fff802c>
800042a4:	6d 00 42 0e 	call 80005f28 <IfxScuCcu_getSourceFrequency>

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800042a8:	53 1c 40 80 	mul.u %e8,%d12,1
800042ac:	4c d0       	ld.w %d15,[%a13]0
    result |= ((uint64)stm->CAP.U) << 32;
800042ae:	80 f5       	mov.d %d5,%a15
800042b0:	37 0f 64 f4 	extr.u %d15,%d15,8,4
            cnt++;
            prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800042b4:	02 c4       	mov %d4,%d12
800042b6:	a6 95       	or %d5,%d9
800042b8:	02 28       	mov %d8,%d2
800042ba:	6d 00 61 2e 	call 80009f7c <__floatundisf>
800042be:	4b 0f 41 f1 	itof %d15,%d15
    unsigned long prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 )), current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
    unsigned long period_ms = 20, cnt = 0;
    while (cnt < (delay_ms / period_ms)) {
        current_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
        if (current_ms - prev_ms >= period_ms) {
            cnt++;
800042c2:	c2 1b       	add %d11,1
800042c4:	4b f8 51 f0 	div.f %d15,%d8,%d15
            prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
800042c8:	4b ef 51 f0 	div.f %d15,%d15,%d14
800042cc:	4b f2 51 20 	div.f %d2,%d2,%d15
800042d0:	4b 02 71 f1 	ftouz %d15,%d2
800042d4:	3c c0       	j 80004254 <mdelay+0x64>
        }
    }
}
800042d6:	00 90       	ret 

800042d8 <printState>:

void printState(TaskType id){
800042d8:	20 10       	sub.a %sp,16
    TaskStateType state;

    if(GetTaskState(id, &state) == E_OK){
800042da:	d9 a4 0f 00 	lea %a4,[%sp]15
            prev_ms = IfxStm_get(&MODULE_STM0) / (IfxStm_getFrequency(&MODULE_STM0) / ( 1000 /1 ));
        }
    }
}

void printState(TaskType id){
800042de:	02 4f       	mov %d15,%d4
    TaskStateType state;

    if(GetTaskState(id, &state) == E_OK){
800042e0:	6d 00 10 2a 	call 80009700 <GetTaskState>
800042e4:	df 02 31 80 	jne %d2,0,80004346 <printState+0x6e>
        switch(state){
800042e8:	39 a2 0f 00 	ld.bu %d2,[%sp]15
800042ec:	ff 52 2d 80 	jge.u %d2,5,80004346 <printState+0x6e>
800042f0:	91 00 00 f8 	movh.a %a15,32768
800042f4:	d9 ff 00 c4 	lea %a15,[%a15]17152 <80004300 <printState+0x28>>
800042f8:	01 f2 02 f6 	addsc.a %a15,%a15,%d2,2
800042fc:	dc 0f       	ji %a15
800042fe:	00 00       	nop 
80004300:	1d 00 0a 00 	j 80004314 <printState+0x3c>
80004304:	1d 00 0e 00 	j 80004320 <printState+0x48>
80004308:	1d 00 1f 00 	j 80004346 <printState+0x6e>
8000430c:	1d 00 10 00 	j 8000432c <printState+0x54>
80004310:	1d 00 14 00 	j 80004338 <printState+0x60>
            case SUSPENDED:
                printfSerial("%d: suspended...", id);
80004314:	91 00 00 48 	movh.a %a4,32768
80004318:	78 00       	st.w [%sp]0,%d15
8000431a:	d9 44 00 30 	lea %a4,[%a4]192 <800000c0 <_start+0xa0>>
8000431e:	3c 12       	j 80004342 <printState+0x6a>
                break;
            case READY:
                printfSerial("%d: ready...", id);
80004320:	91 00 00 48 	movh.a %a4,32768
80004324:	78 00       	st.w [%sp]0,%d15
80004326:	d9 44 11 30 	lea %a4,[%a4]209 <800000d1 <_start+0xb1>>
8000432a:	3c 0c       	j 80004342 <printState+0x6a>
                break;
            case WAITING:
                printfSerial("%d: waiting...", id);
8000432c:	91 00 00 48 	movh.a %a4,32768
80004330:	78 00       	st.w [%sp]0,%d15
80004332:	d9 44 1e 30 	lea %a4,[%a4]222 <800000de <_start+0xbe>>
80004336:	3c 06       	j 80004342 <printState+0x6a>
                break;
            case RUNNING:
                printfSerial("%d: running...", id);
80004338:	91 00 00 48 	movh.a %a4,32768
8000433c:	78 00       	st.w [%sp]0,%d15
8000433e:	d9 44 2d 30 	lea %a4,[%a4]237 <800000ed <_start+0xcd>>
80004342:	6d ff 20 ff 	call 80004182 <printfSerial>
80004346:	00 90       	ret 

80004348 <initVADCModule>:
    IfxVadc_Adc_startBackgroundScan(&g_vadc);
}

/* Function to initialize the VADC module with default parameters */
void initVADCModule(void)
{
80004348:	20 28       	sub.a %sp,40
    IfxVadc_Adc_Config adcConf;                                         /* Define a configuration structure         */
    IfxVadc_Adc_initModuleConfig(&adcConf, &MODULE_VADC);               /* Fill it with default values              */
8000434a:	d9 a4 04 00 	lea %a4,[%sp]4
8000434e:	91 20 00 5f 	movh.a %a5,61442
80004352:	6d 00 d2 1d 	call 80007ef6 <IfxVadc_Adc_initModuleConfig>
    IfxVadc_Adc_initModule(&g_vadc, &adcConf);                          /* Apply the configuration                  */
80004356:	91 00 00 47 	movh.a %a4,28672
8000435a:	d9 44 9c 50 	lea %a4,[%a4]2396 <7000095c <g_vadc>>
8000435e:	d9 a5 04 00 	lea %a5,[%sp]4 <7000095c <g_vadc>>
80004362:	1d 00 56 1d 	j 80007e0e <IfxVadc_Adc_initModule>

80004366 <initVADCGroup>:
}

/* Function to initialize the VADC group */
void initVADCGroup(void)
{
80004366:	20 38       	sub.a %sp,56
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */
80004368:	91 00 00 57 	movh.a %a5,28672
8000436c:	40 a4       	mov.aa %a4,%sp
8000436e:	d9 55 9c 50 	lea %a5,[%a5]2396 <7000095c <g_vadc>>
80004372:	6d 00 37 1d 	call 80007de0 <IfxVadc_Adc_initGroupConfig>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
80004376:	82 4f       	mov %d15,4
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
80004378:	91 00 00 47 	movh.a %a4,28672
void initVADCGroup(void)
{
    IfxVadc_Adc_GroupConfig adcGroupConf;                               /* Define a configuration structure         */
    IfxVadc_Adc_initGroupConfig(&adcGroupConf, &g_vadc);                /* Fill it with default values              */

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
8000437c:	2c a4       	st.b [%sp]4,%d15
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */
8000437e:	2c a5       	st.b [%sp]5,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
80004380:	d9 44 90 50 	lea %a4,[%a4]2384 <70000950 <g_vadcGroup>>

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
80004384:	82 1f       	mov %d15,1
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
80004386:	40 a5       	mov.aa %a5,%sp

    adcGroupConf.groupId = IfxVadc_GroupId_4;                           /* Select the Group 4                       */
    adcGroupConf.master = adcGroupConf.groupId;                         /* Set the same group as master group       */

    /* Enable the background scan source and the background auto scan functionality */
    adcGroupConf.arbiter.requestSlotBackgroundScanEnabled = TRUE;
80004388:	e9 af 35 00 	st.b [%sp]53,%d15
    adcGroupConf.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;
8000438c:	e9 af 28 00 	st.b [%sp]40,%d15

    /* Enable the gate in "always" mode (no edge detection) */
    adcGroupConf.backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80004390:	e9 af 2c 00 	st.b [%sp]44,%d15

    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
80004394:	1d 00 61 1b 	j 80007a56 <IfxVadc_Adc_initGroup>

80004398 <initVADCChannels>:
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
80004398:	91 00 00 e7 	movh.a %a14,28672

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
8000439c:	7b 00 00 b7 	movh %d11,28672
800043a0:	7b 00 00 a7 	movh %d10,28672
}


IFX_INLINE void IfxVadc_Adc_setBackgroundScan(IfxVadc_Adc *vadc, IfxVadc_Adc_Group *group, uint32 channels, uint32 mask)
{
    IfxVadc_setBackgroundScan(vadc->vadc, group->groupId, channels, mask);
800043a4:	91 00 00 d7 	movh.a %a13,28672
    IfxVadc_Adc_initGroup(&g_vadcGroup, &adcGroupConf);                 /* Apply the configuration                  */
}

/* Function to initialize the VADC used channels */
void initVADCChannels(void)
{
800043a8:	20 60       	sub.a %sp,96
800043aa:	82 0f       	mov %d15,0
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800043ac:	d9 ee 90 50 	lea %a14,[%a14]2384 <70000950 <g_vadcGroup>>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800043b0:	1b 4b 00 b0 	addi %d11,%d11,4
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
800043b4:	82 19       	mov %d9,1
800043b6:	1b 0a 93 a0 	addi %d10,%d10,2352
800043ba:	d9 dd 9c 50 	lea %a13,[%a13]2396
800043be:	53 8f 21 80 	mul %d8,%d15,24
800043c2:	40 ac       	mov.aa %a12,%sp
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800043c4:	40 e5       	mov.aa %a5,%a14
800043c6:	60 82       	mov.a %a2,%d8

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800043c8:	d9 af 20 10 	lea %a15,[%sp]96
800043cc:	30 2c       	add.a %a12,%a2
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);
800043ce:	40 c4       	mov.aa %a4,%a12
800043d0:	6d 00 38 1b 	call 80007a40 <IfxVadc_Adc_initChannelConfig>

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800043d4:	60 83       	mov.a %a3,%d8
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
800043d6:	40 c5       	mov.aa %a5,%a12
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800043d8:	30 3f       	add.a %a15,%a3
800043da:	60 b3       	mov.a %a3,%d11
800043dc:	10 32       	addsc.a %a2,%a3,%d15,0
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
800043de:	e9 ff ef ef 	st.b [%a15]-81,%d15
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800043e2:	14 22       	ld.bu %d2,[%a2]
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
800043e4:	60 a2       	mov.a %a2,%d10
800043e6:	d0 24       	addsc.a %a4,%a2,%d15,3
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
        /* Fill the configuration with default values */
        IfxVadc_Adc_initChannelConfig(&adcChannelConf[chn], &g_vadcGroup);

        /* Set the channel ID and the corresponding result register */
        adcChannelConf[chn].channelId = g_vadcChannelIDs[chn];          /* The channels 4..7 are initialized        */
800043e8:	e9 f2 ec ef 	st.b [%a15]-84,%d2
        adcChannelConf[chn].resultRegister = (IfxVadc_ChannelResult)(chn);
        adcChannelConf[chn].backgroundChannel = TRUE;                   /* Enable background scan for the channel   */
800043ec:	e9 f9 e2 ef 	st.b [%a15]-94,%d9


        /* Apply the channel configuration */
        IfxVadc_Adc_initChannel(&g_vadcChannel[chn], &adcChannelConf[chn]);
800043f0:	6d 00 32 1a 	call 80007854 <IfxVadc_Adc_initChannel>
800043f4:	d4 d2       	ld.a %a2,[%a13]
800043f6:	39 e2 08 00 	ld.bu %d2,[%a14]8 <70000008 <osEE_ccb_var>>
800043fa:	c2 1f       	add %d15,1
800043fc:	01 22 02 26 	addsc.a %a2,%a2,%d2,2

        /* Add the channel to background scan */
        unsigned chnEnableBit = (1 << adcChannelConf[chn].channelId);   /* Set the the corresponding input channel  */
80004400:	79 f2 ec ef 	ld.b %d2,[%a15]-84
}


IFX_INLINE void IfxVadc_setBackgroundScan(Ifx_VADC *vadc, IfxVadc_GroupId groupId, uint32 channels, uint32 mask)
{
    channels                = (vadc->BRSSEL[groupId].U & ~mask) | channels;
80004404:	19 23 00 60 	ld.w %d3,[%a2]384
80004408:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
    vadc->BRSSEL[groupId].U = channels;
8000440c:	59 22 00 60 	st.w [%a2]384,%d2
void initVADCChannels(void)
{
    IfxVadc_Adc_ChannelConfig adcChannelConf[CHANNELS_NUM];             /* Array of configuration structures        */

    uint16 chn;
    for (chn = 0; chn < CHANNELS_NUM; chn++) {                             /* Initialize all the channels in a loop    */
80004410:	df 4f d7 ff 	jne %d15,4,800043be <initVADCChannels+0x26>
        unsigned mask = chnEnableBit;                                   /* of the respective group to be added in   */
        IfxVadc_Adc_setBackgroundScan(&g_vadc, &g_vadcGroup, chnEnableBit, mask); /* the background scan sequence.  */

    }

}
80004414:	00 90       	ret 

80004416 <initADC>:
}


IFX_INLINE void IfxVadc_Adc_startBackgroundScan(IfxVadc_Adc *vadc)
{
    IfxVadc_startBackgroundScan(vadc->vadc);
80004416:	91 00 00 f7 	movh.a %a15,28672


/* Function to initialize the VADC module */
void initADC(void)
{
    initVADCModule();                                                   /* Initialize the VADC module               */
8000441a:	6d ff 97 ff 	call 80004348 <initVADCModule>
    initVADCGroup();                                                    /* Initialize the VADC group                */
8000441e:	6d ff a4 ff 	call 80004366 <initVADCGroup>
    initVADCChannels();                                                 /* Initialize the used channels             */
80004422:	6d ff bb ff 	call 80004398 <initVADCChannels>
80004426:	99 ff 9c 50 	ld.a %a15,[%a15]2396 <7000095c <g_vadc>>
}


IFX_INLINE void IfxVadc_startBackgroundScan(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.LDEV = 1;     /* execute Load event to start the conversion */
8000442a:	19 ff 04 80 	ld.w %d15,[%a15]516 <7000095c <g_vadc>>
8000442e:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80004432:	59 ff 04 80 	st.w [%a15]516,%d15
80004436:	00 90       	ret 

80004438 <readADCValue>:
}


IFX_INLINE Ifx_VADC_RES IfxVadc_Adc_getResult(IfxVadc_Adc_Channel *channel)
{
    return IfxVadc_getResult(channel->group->group, channel->resultreg);
80004438:	91 00 00 f7 	movh.a %a15,28672
8000443c:	d9 ff b0 40 	lea %a15,[%a15]2352 <70000930 <g_vadcChannel>>
80004440:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004444:	c8 12       	ld.a %a2,[%a15]4
80004446:	0c f1       	ld.bu %d15,[%a15]1
80004448:	99 22 04 00 	ld.a %a2,[%a2]4

IFX_INLINE Ifx_VADC_RES IfxVadc_getResult(Ifx_VADC_G *group, uint32 resultIdx)
{
    Ifx_VADC_RES tmpResult;

    tmpResult.U = group->RES[resultIdx].U;
8000444c:	1b 0f 0a f0 	addi %d15,%d15,160
80004450:	90 2f       	addsc.a %a15,%a2,%d15,2
80004452:	4c f0       	ld.w %d15,[%a15]0
80004454:	37 0f 70 20 	extr.u %d2,%d15,0,16
{
    Ifx_VADC_RES conversionResult;
    do
    {
        conversionResult = IfxVadc_Adc_getResult(&g_vadcChannel[channel]);
    } while(!conversionResult.B.VF);
80004458:	ff 0f fd 7f 	jge %d15,0,80004452 <readADCValue+0x1a>

    return conversionResult.B.RESULT;
}
8000445c:	00 90       	ret 

8000445e <initPeripheralsAndERU>:

void initPeripheralsAndERU(void)
{
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */
8000445e:	91 40 00 4f 	movh.a %a4,61444
80004462:	d9 44 00 0e 	lea %a4,[%a4]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
80004466:	82 74       	mov %d4,7
80004468:	3b 00 01 50 	mov %d5,16
8000446c:	6d 00 77 0b 	call 80005b5a <IfxPort_setPinMode>


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
80004470:	91 00 00 f8 	movh.a %a15,32768
80004474:	d9 ff 98 f0 	lea %a15,[%a15]3032 <80000bd8 <IfxScu_REQ6_P02_0_IN>>
}


IFX_INLINE void IfxPort_setPinModeInput(Ifx_P *port, uint8 pinIndex, IfxPort_InputMode mode)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)mode);
80004478:	c8 24       	ld.a %a4,[%a15]8
8000447a:	91 00 00 d7 	movh.a %a13,28672
8000447e:	08 c4       	ld.bu %d4,[%a15]12
80004480:	3b 80 00 50 	mov %d5,8
80004484:	b5 df a0 50 	st.a [%a13]2400 <70000960 <g_ERUconfig>>,%a15
80004488:	6d 00 69 0b 	call 80005b5a <IfxPort_setPinMode>
/******************************************************************************/

IFX_INLINE void IfxScuEru_initReqPin(IfxScu_Req_In *req, IfxPort_InputMode inputMode)
{
    IfxPort_setPinModeInput(req->pin.port, req->pin.pinIndex, inputMode);
    IfxScuEru_selectExternalInput((IfxScuEru_InputChannel)req->channelId, (IfxScuEru_ExternalInputSelection)req->select);
8000448c:	39 f5 10 00 	ld.bu %d5,[%a15]16 <80000010 <BootModeHeader0+0x10>>
80004490:	08 44       	ld.bu %d4,[%a15]4
80004492:	6d 00 12 15 	call 80006eb6 <IfxScuEru_selectExternalInput>
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
80004496:	99 df a0 50 	ld.a %a15,[%a13]2400 <70000960 <g_ERUconfig>>
    /* Initialize pins which are used to trigger and visualize the interrupt and set the default states */
    IfxPort_setPinMode(TRIGGER_PIN, IfxPort_Mode_inputPullUp);              /* Initialize TRIGGER_PIN port pin  */


    /* Trigger pin */
    g_ERUconfig.reqPin = REQ_IN; /* Select external request pin */
8000449a:	d9 dc a0 50 	lea %a12,[%a13]2400 <70000960 <g_ERUconfig>>
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
8000449e:	82 0f       	mov %d15,0
     * This function will also configure the input multiplexers of the ERU (Register EXISx)
     */
    IfxScuEru_initReqPin(g_ERUconfig.reqPin, IfxPort_InputMode_pullDown);

    /* Determine input channel depending on input pin */
    g_ERUconfig.inputChannel = (IfxScuEru_InputChannel) g_ERUconfig.reqPin->channelId;
800044a0:	08 44       	ld.bu %d4,[%a15]4
800044a2:	e9 c4 04 00 	st.b [%a12]4 <70000004 <g_vadcChannelIDs>>,%d4

    /* Input channel configuration */
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */
800044a6:	6d 00 78 14 	call 80006d96 <IfxScuEru_enableFallingEdgeDetection>
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
800044aa:	39 c4 04 00 	ld.bu %d4,[%a12]4
  //  IfxScuEru_enableRisingEdgeDetection(g_ERUconfig.inputChannel);          /* Interrupt triggers on
                                                                             //  rising edge (Register RENx) and  */
    IfxScuEru_enableFallingEdgeDetection(g_ERUconfig.inputChannel);         /* on falling edge (Register FENx)  */

    /* Signal destination */
    g_ERUconfig.outputChannel = IfxScuEru_OutputChannel_0;                  /* OGU channel 0                    */
800044ae:	2c c6       	st.b [%a12]6,%d15
    /* Event from input ETL0 triggers output OGU0 (signal TRx0) */
    g_ERUconfig.triggerSelect = IfxScuEru_InputNodePointer_0;
800044b0:	2c c5       	st.b [%a12]5,%d15

    /* Connecting Matrix, Event Trigger Logic ETL block */
    /* Enable generation of trigger event (Register EIENx) */
    IfxScuEru_enableTriggerPulse(g_ERUconfig.inputChannel);
800044b2:	6d 00 ab 14 	call 80006e08 <IfxScuEru_enableTriggerPulse>
    /* Determination of output channel for trigger event (Register INPx) */
    IfxScuEru_connectTrigger(g_ERUconfig.inputChannel, g_ERUconfig.triggerSelect);
800044b6:	39 c4 04 00 	ld.bu %d4,[%a12]4
800044ba:	39 c5 05 00 	ld.bu %d5,[%a12]5
800044be:	6d 00 df 13 	call 80006c7c <IfxScuEru_connectTrigger>

    /* Configure Output channels, OutputGating Unit OGU (Register IGPy) */
    IfxScuEru_setInterruptGatingPattern(g_ERUconfig.outputChannel, IfxScuEru_InterruptGatingPattern_alwaysActive);
800044c2:	39 c4 06 00 	ld.bu %d4,[%a12]6
800044c6:	82 15       	mov %d5,1
800044c8:	6d 00 30 15 	call 80006f28 <IfxScuEru_setInterruptGatingPattern>

    /* Service request configuration */
    /* Get source pointer depending on outputChannel (SRC_SCUERU0 for outputChannel0) */
    g_ERUconfig.src = &MODULE_SRC.SCU.SCU.ERU[(int) g_ERUconfig.outputChannel % 4];
800044cc:	0c c6       	ld.bu %d15,[%a12]6
800044ce:	16 03       	and %d15,3
800044d0:	06 2f       	sh %d15,2
800044d2:	60 f2       	mov.a %a2,%d15
800044d4:	d9 2f d4 38 	lea %a15,[%a2]-29484
800044d8:	11 4f 00 ff 	addih.a %a15,%a15,61444
800044dc:	ec c2       	st.a [%a12]8,%a15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
800044de:	4c f0       	ld.w %d15,[%a15]0
800044e0:	b7 af 08 f0 	insert %d15,%d15,10,0,8
800044e4:	68 0f       	st.w [%a15]0,%d15
    src->B.TOS  = typOfService;
800044e6:	4c f0       	ld.w %d15,[%a15]0
800044e8:	b7 0f 82 f5 	insert %d15,%d15,0,11,2
800044ec:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
800044ee:	4c f0       	ld.w %d15,[%a15]0
800044f0:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
800044f4:	68 0f       	st.w [%a15]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
800044f6:	4c f0       	ld.w %d15,[%a15]0
800044f8:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
800044fc:	68 0f       	st.w [%a15]0,%d15
800044fe:	00 90       	ret 

80004500 <asclin0TxISR>:
    IfxSrc_enable(g_ERUconfig.src);
}

ISR(asclin0TxISR)
{
    IfxAsclin_Asc_isrTransmit(&g_AsclinAsc.drivers.asc);
80004500:	91 00 00 47 	movh.a %a4,28672
80004504:	d9 44 80 f0 	lea %a4,[%a4]3008 <70000bc0 <g_AsclinAsc+0x254>>
80004508:	1d 00 22 06 	j 8000514c <IfxAsclin_Asc_isrTransmit>

8000450c <TimerISR>:
}

ISR2(TimerISR)
{
    static long c = -1;
    osEE_tc_stm_set_sr0_next_match(1000000U);
8000450c:	7b f0 00 40 	movh %d4,15
{
    IfxAsclin_Asc_isrTransmit(&g_AsclinAsc.drivers.asc);
}

ISR2(TimerISR)
{
80004510:	20 08       	sub.a %sp,8
    static long c = -1;
    osEE_tc_stm_set_sr0_next_match(1000000U);
80004512:	1b 04 24 44 	addi %d4,%d4,16960
    if( c== 0)
80004516:	91 00 00 f7 	movh.a %a15,28672
}

ISR2(TimerISR)
{
    static long c = -1;
    osEE_tc_stm_set_sr0_next_match(1000000U);
8000451a:	6d 00 27 25 	call 80008f68 <osEE_tc_stm_set_sr0_next_match>
    if( c== 0)
8000451e:	19 ff 00 00 	ld.w %d15,[%a15]0 <70000000 <__DSPR0_START>>
80004522:	ee 04       	jnz %d15,8000452a <TimerISR+0x1e>
        ActivateTask(Task1);
80004524:	82 24       	mov %d4,2
80004526:	6d 00 ac 26 	call 8000927e <ActivateTask>
    printfSerial("\n%4ld: ", c++);
8000452a:	19 ff 00 00 	ld.w %d15,[%a15]0 <70000000 <__DSPR0_START>>
8000452e:	91 00 00 48 	movh.a %a4,32768
80004532:	78 00       	st.w [%sp]0,%d15
80004534:	d9 44 3c 30 	lea %a4,[%a4]252 <800000fc <_start+0xdc>>
80004538:	c2 1f       	add %d15,1
8000453a:	59 ff 00 00 	st.w [%a15]0 <70000000 <__DSPR0_START>>,%d15
8000453e:	1d ff 22 fe 	j 80004182 <printfSerial>

80004542 <main>:
}

int main(void)
{
    osEE_tc_stm_set_clockpersec();
80004542:	6d 00 b7 24 	call 80008eb0 <osEE_tc_stm_set_clockpersec>
    osEE_tc_stm_set_sr0(1000000U, 1U);
80004546:	7b f0 00 40 	movh %d4,15
8000454a:	82 15       	mov %d5,1
8000454c:	1b 04 24 44 	addi %d4,%d4,16960
80004550:	6d 00 ca 24 	call 80008ee4 <osEE_tc_stm_set_sr0>

    UART_init();
80004554:	6d ff de fd 	call 80004110 <UART_init>
    initADC();
80004558:	6d ff 5f ff 	call 80004416 <initADC>
    initPeripheralsAndERU();
8000455c:	6d ff 81 ff 	call 8000445e <initPeripheralsAndERU>

    printfSerial("\n...............\n");
80004560:	91 00 00 48 	movh.a %a4,32768
80004564:	d9 44 04 40 	lea %a4,[%a4]260 <80000104 <_start+0xe4>>
80004568:	6d ff 0d fe 	call 80004182 <printfSerial>
    printfSerial("...OS Starts...\n");
8000456c:	91 00 00 48 	movh.a %a4,32768
80004570:	d9 44 16 40 	lea %a4,[%a4]278 <80000116 <_start+0xf6>>
80004574:	6d ff 07 fe 	call 80004182 <printfSerial>
    printfSerial("...............\n");
80004578:	91 00 00 48 	movh.a %a4,32768
8000457c:	d9 44 27 40 	lea %a4,[%a4]295 <80000127 <_start+0x107>>
80004580:	6d ff 01 fe 	call 80004182 <printfSerial>

    StartOS(OSDEFAULTAPPMODE);
80004584:	82 04       	mov %d4,0
80004586:	6d 00 19 26 	call 800091b8 <StartOS>
    return 0;
}
8000458a:	82 02       	mov %d2,0
8000458c:	00 90       	ret 
	...

80004590 <IfxVadc_disableAccess>:
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
80004590:	02 4f       	mov %d15,%d4
80004592:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
80004594:	6d 00 6d 16 	call 8000726e <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
80004598:	02 24       	mov %d4,%d2
}


void IfxVadc_disableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
8000459a:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
8000459c:	6d 00 66 15 	call 80007068 <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
800045a0:	8b 0f a2 22 	ge.u %d2,%d15,32
800045a4:	f6 28       	jnz %d2,800045b4 <IfxVadc_disableAccess+0x24>
    {
        vadc->ACCPROT0.U |= (0x00000001 << protectionSet);
800045a6:	19 f2 08 20 	ld.w %d2,[%a15]136
800045aa:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
800045ae:	59 ff 08 20 	st.w [%a15]136,%d15
800045b2:	3c 08       	j 800045c2 <IfxVadc_disableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U |= (0x00000001 << (protectionSet & 0x1F));
800045b4:	19 f2 0c 20 	ld.w %d2,[%a15]140
800045b8:	16 1f       	and %d15,31
800045ba:	d7 12 01 ff 	insert %d15,%d2,1,%d15,1
800045be:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
800045c2:	02 84       	mov %d4,%d8
800045c4:	1d 00 d8 16 	j 80007374 <IfxScuWdt_setSafetyEndinit>

800045c8 <IfxVadc_enableAccess>:
    }
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
800045c8:	02 4f       	mov %d15,%d4
800045ca:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800045cc:	6d 00 51 16 	call 8000726e <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(passwd);
800045d0:	02 24       	mov %d4,%d2
}


void IfxVadc_enableAccess(Ifx_VADC *vadc, IfxVadc_Protection protectionSet)
{
    uint16 passwd = IfxScuWdt_getSafetyWatchdogPassword();
800045d2:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(passwd);
800045d4:	6d 00 4a 15 	call 80007068 <IfxScuWdt_clearSafetyEndinit>

    if (protectionSet < IFXVADC_MAXIMUM_BITFIELDS_IN_ACCPROT0_REGISTER)
800045d8:	8b 0f a2 22 	ge.u %d2,%d15,32
800045dc:	f6 28       	jnz %d2,800045ec <IfxVadc_enableAccess+0x24>
    {
        vadc->ACCPROT0.U &= ~(0x00000001 << protectionSet);
800045de:	19 f2 08 20 	ld.w %d2,[%a15]136
800045e2:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
800045e6:	59 ff 08 20 	st.w [%a15]136,%d15
800045ea:	3c 08       	j 800045fa <IfxVadc_enableAccess+0x32>
    }
    else
    {
        vadc->ACCPROT1.U &= ~(0x00000001 << (protectionSet & 0x1F));
800045ec:	19 f2 0c 20 	ld.w %d2,[%a15]140
800045f0:	16 1f       	and %d15,31
800045f2:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
800045f6:	59 ff 0c 20 	st.w [%a15]140,%d15
    }

    IfxScuWdt_setSafetyEndinit(passwd);
800045fa:	02 84       	mov %d4,%d8
800045fc:	1d 00 bc 16 	j 80007374 <IfxScuWdt_setSafetyEndinit>

80004600 <IfxVadc_configExternalMultiplexerMode>:

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
80004600:	82 0f       	mov %d15,0
80004602:	b7 1f 81 ff 	insert %d15,%d15,1,31,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
80004606:	39 a3 04 00 	ld.bu %d3,[%sp]4
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
8000460a:	37 4f 02 fd 	insert %d15,%d15,%d4,26,2
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
8000460e:	14 a2       	ld.bu %d2,[%sp]
    Ifx_VADC_G_EMUXCTR emuxctr;

    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
80004610:	67 3f 1e f0 	ins.t %d15,%d15,30,%d3,0
    emuxctr.B.EMUXCH   = channels;
80004614:	37 5f 0a f8 	insert %d15,%d15,%d5,16,10
    emuxctr.B.EMUXSET  = startChannel;
80004618:	37 6f 03 f0 	insert %d15,%d15,%d6,0,3
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
8000461c:	3b f0 00 40 	mov %d4,15
    emuxctr.B.EMXWC    = 1;
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
80004620:	67 7f 1c f0 	ins.t %d15,%d15,28,%d7,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
80004624:	40 5f       	mov.aa %a15,%a5
    emuxctr.B.EMUXMODE = mode;
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
80004626:	67 2f 1d f0 	ins.t %d15,%d15,29,%d2,0
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxVadc_configExternalMultiplexerMode(Ifx_VADC *vadc, Ifx_VADC_G *vadcG, IfxVadc_ExternalMultiplexerMode mode, uint8 channels, IfxVadc_EmuxSelectValue startChannel, IfxVadc_EmuxCodingScheme code, IfxVadc_EmuxSampleTimeControl sampleTimeControl, IfxVadc_ChannelSelectionStyle channelSelectionStyle)
{
8000462a:	40 4c       	mov.aa %a12,%a4
    emuxctr.B.EMXCSS   = channelSelectionStyle;
    emuxctr.B.EMUXCH   = channels;
    emuxctr.B.EMUXSET  = startChannel;
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
8000462c:	6d ff ce ff 	call 800045c8 <IfxVadc_enableAccess>
    vadcG->EMUXCTR.U   = emuxctr.U;
80004630:	59 ff 30 50 	st.w [%a15]368,%d15
    emuxctr.B.EMXWC    = 0;
80004634:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
    vadcG->EMUXCTR.U   = emuxctr.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
80004638:	40 c4       	mov.aa %a4,%a12
    emuxctr.B.EMXCOD   = code;
    emuxctr.B.EMXST    = sampleTimeControl;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
    vadcG->EMUXCTR.U   = emuxctr.U;
    emuxctr.B.EMXWC    = 0;
    vadcG->EMUXCTR.U   = emuxctr.U;
8000463a:	59 ff 30 50 	st.w [%a15]368,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_externalMultiplexer);
8000463e:	3b f0 00 40 	mov %d4,15
80004642:	1d ff a7 ff 	j 80004590 <IfxVadc_disableAccess>

80004646 <IfxVadc_disablePostCalibration>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_disablePostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group, boolean disable)
{
80004646:	40 4f       	mov.aa %a15,%a4
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
80004648:	ff 84 1c 80 	jge.u %d4,8,80004680 <IfxVadc_disablePostCalibration+0x3a>
8000464c:	02 4f       	mov %d15,%d4
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
8000464e:	3b f0 01 40 	mov %d4,31
80004652:	02 58       	mov %d8,%d5
80004654:	6d ff ba ff 	call 800045c8 <IfxVadc_enableAccess>

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
80004658:	1b 0f 01 40 	addi %d4,%d15,16

        if (disable == TRUE)
        {
            vadc->GLOBCFG.U |= mask;
8000465c:	19 f2 00 20 	ld.w %d2,[%a15]128
{
    if (group < IFXVADC_NUM_ADC_CAL_GROUPS)
    {
        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);

        uint32 mask = 1 << (IFX_VADC_GLOBCFG_DPCAL0_OFF + group);
80004660:	82 1f       	mov %d15,1
80004662:	0f 4f 00 f0 	sh %d15,%d15,%d4

        if (disable == TRUE)
80004666:	df 18 04 80 	jne %d8,1,8000466e <IfxVadc_disablePostCalibration+0x28>
        {
            vadc->GLOBCFG.U |= mask;
8000466a:	a6 2f       	or %d15,%d2
8000466c:	3c 03       	j 80004672 <IfxVadc_disablePostCalibration+0x2c>
        }
        else
        {
            vadc->GLOBCFG.U &= ~mask;
8000466e:	0f f2 e0 f0 	andn %d15,%d2,%d15
80004672:	59 ff 00 20 	st.w [%a15]128,%d15
        }

        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004676:	40 f4       	mov.aa %a4,%a15
80004678:	3b f0 01 40 	mov %d4,31
8000467c:	1d ff 8a ff 	j 80004590 <IfxVadc_disableAccess>
80004680:	00 90       	ret 

80004682 <IfxVadc_enableGroupSync>:
    IfxScuWdt_setSafetyEndinit(passwd);
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
80004682:	40 4f       	mov.aa %a15,%a4
80004684:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004686:	6d 00 d6 15 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
8000468a:	02 24       	mov %d4,%d2
}


void IfxVadc_enableGroupSync(Ifx_VADC *vadc, uint32 ccu6Num)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
8000468c:	02 29       	mov %d9,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
8000468e:	6d 00 d2 14 	call 80007032 <IfxScuWdt_clearCpuEndinit>
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004692:	40 f4       	mov.aa %a4,%a15
80004694:	3b f0 01 40 	mov %d4,31
    IfxScuWdt_clearCpuEndinit(passwd);

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
80004698:	19 ff 00 20 	ld.w %d15,[%a15]128
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
8000469c:	6d ff 96 ff 	call 800045c8 <IfxVadc_enableAccess>

    // VADC Config: enable ADC group sync
    {
        Ifx_VADC_GLOBCFG vadcGlobCfg;
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
800046a0:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
        vadcGlobCfg.B.DCMSB = 1;
800046a4:	b7 1f 81 f3 	insert %d15,%d15,1,7,1

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800046a8:	40 f4       	mov.aa %a4,%a15
        vadcGlobCfg.U       = vadc->GLOBCFG.U;
        vadcGlobCfg.B.DIVWC = 1;
        vadcGlobCfg.B.DCMSB = 1;

        IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
        vadc->GLOBCFG.U = vadcGlobCfg.U;
800046aa:	59 ff 00 20 	st.w [%a15]128,%d15
        IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
800046ae:	3b f0 01 40 	mov %d4,31
800046b2:	6d ff 6f ff 	call 80004590 <IfxVadc_disableAccess>
    }

    if (ccu6Num == 0)
800046b6:	df 08 1a 80 	jne %d8,0,800046ea <IfxVadc_enableGroupSync+0x68>
    {
        // CCU60 Config
        CCU60_CLC.U = 0;
800046ba:	a5 f8 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d8

        if (CCU60_CLC.U)
800046be:	85 ff 80 82 	ld.w %d15,f0002a00 <_SMALL_DATA4_+0x3fffaa00>
        {}

        CCU60_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
800046c2:	82 4f       	mov %d15,4
800046c4:	a5 ff 94 92 	st.w f0002a54 <_SMALL_DATA4_+0x3fffaa54>,%d15
        CCU60_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
800046c8:	a5 ff 9c 92 	st.w f0002a5c <_SMALL_DATA4_+0x3fffaa5c>,%d15
        CCU60_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
800046cc:	85 ff 80 a2 	ld.w %d15,f0002a80 <_SMALL_DATA4_+0x3fffaa80>
800046d0:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
800046d4:	a5 ff 80 a2 	st.w f0002a80 <_SMALL_DATA4_+0x3fffaa80>,%d15
        CCU60_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
800046d8:	3b 00 20 f4 	mov %d15,16896
800046dc:	a5 ff b8 92 	st.w f0002a78 <_SMALL_DATA4_+0x3fffaa78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 0;                                                                  // CCU60_COUT63 routed to output signal CCU6061 TRIG1
800046e0:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
800046e4:	8f 8f c3 f1 	andn %d15,%d15,56
800046e8:	3c 1d       	j 80004722 <IfxVadc_enableGroupSync+0xa0>
    }
    else if (ccu6Num == 1)
800046ea:	df 18 1e 80 	jne %d8,1,80004726 <IfxVadc_enableGroupSync+0xa4>
    {
        // CCU60 + CCU61 Config
        CCU60_CLC.U = 0;
800046ee:	82 0f       	mov %d15,0
800046f0:	a5 ff 80 82 	st.w f0002a00 <_SMALL_DATA4_+0x3fffaa00>,%d15
        CCU61_CLC.U = 0;
800046f4:	a5 ff 80 c2 	st.w f0002b00 <_SMALL_DATA4_+0x3fffab00>,%d15

        if (CCU61_CLC.U)
800046f8:	85 ff 80 c2 	ld.w %d15,f0002b00 <_SMALL_DATA4_+0x3fffab00>
        {}

        CCU61_T13PR.U          = 4;                                                                  // results in  4+1 clock periods (100MHz)  = 20MHz
800046fc:	82 4f       	mov %d15,4
800046fe:	a5 ff 94 d2 	st.w f0002b54 <_SMALL_DATA4_+0x3fffab54>,%d15
        CCU61_CC63SR.U         = 4;                                                                  // configures duty cycle of 40ns low and 10ns high
80004702:	a5 ff 9c d2 	st.w f0002b5c <_SMALL_DATA4_+0x3fffab5c>,%d15
        CCU61_MODCTR.B.ECT13O  = 1;                                                                  // bit ECT130 = 1 serves to route  CC63ST signals out to  COUT63
80004706:	85 ff 80 e2 	ld.w %d15,f0002b80 <_SMALL_DATA4_+0x3fffab80>
8000470a:	b7 ff 81 f7 	insert %d15,%d15,15,15,1
8000470e:	a5 ff 80 e2 	st.w f0002b80 <_SMALL_DATA4_+0x3fffab80>,%d15
        CCU61_TCTR4.U          = (1 << IFX_CCU6_TCTR4_T13STR_OFF) | (1 << IFX_CCU6_TCTR4_T13RS_OFF); // set bit T13STR  & T13RS  -> enable shadow transfer & start timer T13
80004712:	3b 00 20 f4 	mov %d15,16896
80004716:	a5 ff b8 d2 	st.w f0002b78 <_SMALL_DATA4_+0x3fffab78>,%d15
        CCU60_MOSEL.B.TRIG1SEL = 1;                                                                  // CCU61_COUT63 routed to output signal CCU6061 TRIG1
8000471a:	85 ff 8c 82 	ld.w %d15,f0002a0c <_SMALL_DATA4_+0x3fffaa0c>
8000471e:	b7 1f 83 f1 	insert %d15,%d15,1,3,3
80004722:	a5 ff 8c 82 	st.w f0002a0c <_SMALL_DATA4_+0x3fffaa0c>,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
80004726:	02 94       	mov %d4,%d9
80004728:	1d 00 ba 15 	j 8000729c <IfxScuWdt_setCpuEndinit>

8000472c <IfxVadc_getAdcAnalogFrequency>:
}


float32 IfxVadc_getAdcAnalogFrequency(Ifx_VADC *vadc)
{
8000472c:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVA);
8000472e:	6d 00 be 0c 	call 800060aa <IfxScuCcu_getSpbFrequency>
80004732:	19 ff 00 20 	ld.w %d15,[%a15]128
80004736:	16 1f       	and %d15,31
80004738:	c2 1f       	add %d15,1
8000473a:	4b 0f 41 f1 	itof %d15,%d15
}
8000473e:	4b f2 51 20 	div.f %d2,%d2,%d15
80004742:	00 90       	ret 

80004744 <IfxVadc_getAdcDigitalFrequency>:


float32 IfxVadc_getAdcDigitalFrequency(Ifx_VADC *vadc)
{
80004744:	40 4f       	mov.aa %a15,%a4
    return IfxScuCcu_getSpbFrequency() / (1U + vadc->GLOBCFG.B.DIVD);
80004746:	6d 00 b2 0c 	call 800060aa <IfxScuCcu_getSpbFrequency>
8000474a:	19 ff 00 20 	ld.w %d15,[%a15]128
8000474e:	37 0f 62 f4 	extr.u %d15,%d15,8,2
80004752:	c2 1f       	add %d15,1
80004754:	4b 0f 41 f1 	itof %d15,%d15
}
80004758:	4b f2 51 20 	div.f %d2,%d2,%d15
8000475c:	00 90       	ret 

8000475e <IfxVadc_getAdcModuleFrequency>:


float32 IfxVadc_getAdcModuleFrequency(void)
{
    return IfxScuCcu_getSpbFrequency();
8000475e:	1d 00 a6 0c 	j 800060aa <IfxScuCcu_getSpbFrequency>

80004762 <IfxVadc_getBackgroundScanStatus>:
}


IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
80004762:	82 0f       	mov %d15,0
80004764:	a0 7f       	mov.a %a15,7
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
    {
        if (vadc->BRSPND[i].U)
80004766:	1b 0f 07 20 	addi %d2,%d15,112
8000476a:	01 42 02 26 	addsc.a %a2,%a4,%d2,2
8000476e:	54 22       	ld.w %d2,[%a2]
80004770:	f6 24       	jnz %d2,80004778 <IfxVadc_getBackgroundScanStatus+0x16>
80004772:	c2 1f       	add %d15,1
IfxVadc_Status IfxVadc_getBackgroundScanStatus(Ifx_VADC *vadc)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    uint8          i;

    for (i = 0; i < IFXVADC_NUM_ADC_GROUPS; i++)
80004774:	fc f9       	loop %a15,80004766 <IfxVadc_getBackgroundScanStatus+0x4>
80004776:	00 90       	ret 
    {
        if (vadc->BRSPND[i].U)
        {
            return IfxVadc_Status_channelsStillPending;
80004778:	82 62       	mov %d2,6
            continue;
        }
    }

    return status;
}
8000477a:	00 90       	ret 

8000477c <IfxVadc_getQueueStatus>:
IfxVadc_Status IfxVadc_getQueueStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    /* just fill level is checked */
    if (0x7 == group->QSR0.B.FILL)
8000477c:	19 42 08 20 	ld.w %d2,[%a4]136
80004780:	8f f2 00 21 	and %d2,%d2,15
    {
        status = IfxVadc_Status_queueFull;
    }
    else
    {
        status = IfxVadc_Status_noError;
80004784:	8b 72 00 22 	eq %d2,%d2,7
    }

    return status;
}
80004788:	06 22       	sh %d2,2
8000478a:	00 90       	ret 

8000478c <IfxVadc_getResultBasedOnRequestSource>:
Ifx_VADC_RES IfxVadc_getResultBasedOnRequestSource(Ifx_VADC *vadc, Ifx_VADC_G *group, IfxVadc_ChannelId channel, IfxVadc_RequestSource sourceType)
{
    sint32       sourceResultRegister = -1;
    Ifx_VADC_RES tmpResult;

    switch (sourceType)
8000478c:	df 15 09 00 	jeq %d5,1,8000479e <IfxVadc_getResultBasedOnRequestSource+0x12>
80004790:	76 54       	jz %d5,80004798 <IfxVadc_getResultBasedOnRequestSource+0xc>
80004792:	df 25 0b 00 	jeq %d5,2,800047a8 <IfxVadc_getResultBasedOnRequestSource+0x1c>
80004796:	3c 39       	j 80004808 <IfxVadc_getResultBasedOnRequestSource+0x7c>
    {
    case IfxVadc_RequestSource_queue:
        sourceResultRegister = group->QCTRL0.B.SRCRESREG;
80004798:	19 5f 00 20 	ld.w %d15,[%a5]128
8000479c:	3c 03       	j 800047a2 <IfxVadc_getResultBasedOnRequestSource+0x16>
        break;

    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
8000479e:	19 5f 20 20 	ld.w %d15,[%a5]160
800047a2:	16 0f       	and %d15,15
    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
        break;
    }

    if (sourceResultRegister > 0)
800047a4:	ee 39       	jnz %d15,80004816 <IfxVadc_getResultBasedOnRequestSource+0x8a>
800047a6:	3c 31       	j 80004808 <IfxVadc_getResultBasedOnRequestSource+0x7c>
    case IfxVadc_RequestSource_scan:
        sourceResultRegister = group->ASCTRL.B.SRCRESREG;
        break;

    case IfxVadc_RequestSource_background:
        sourceResultRegister = vadc->BRSCTRL.B.SRCRESREG;
800047a8:	19 4f 00 80 	ld.w %d15,[%a4]512
800047ac:	16 0f       	and %d15,15
        break;
    }

    if (sourceResultRegister > 0)
800047ae:	ee 34       	jnz %d15,80004816 <IfxVadc_getResultBasedOnRequestSource+0x8a>

        return tmpResult;
    }
    else
    {
        if ((sourceType == IfxVadc_RequestSource_background) && (group->CHCTR[channel].B.RESTBS == 1))
800047b0:	1b 04 06 f0 	addi %d15,%d4,96
800047b4:	90 5f       	addsc.a %a15,%a5,%d15,2
800047b6:	4c f0       	ld.w %d15,[%a15]0
800047b8:	ef 4f 28 00 	jz.t %d15,20,80004808 <IfxVadc_getResultBasedOnRequestSource+0x7c>
        {
            tmpResult.B.VF     = vadc->GLOBRES.B.VF;
800047bc:	19 42 00 c0 	ld.w %d2,[%a4]768
800047c0:	82 0f       	mov %d15,0
800047c2:	67 2f 9f ff 	ins.t %d15,%d15,31,%d2,31
            tmpResult.B.FCR    = vadc->GLOBRES.B.FCR;
800047c6:	19 42 00 c0 	ld.w %d2,[%a4]768
800047ca:	67 2f 1e ff 	ins.t %d15,%d15,30,%d2,30
            tmpResult.B.CRS    = vadc->GLOBRES.B.CRS;
800047ce:	19 42 00 c0 	ld.w %d2,[%a4]768
800047d2:	37 02 62 2e 	extr.u %d2,%d2,28,2
800047d6:	37 2f 02 fe 	insert %d15,%d15,%d2,28,2
            tmpResult.B.EMUX   = vadc->GLOBRES.B.EMUX;
800047da:	19 42 00 c0 	ld.w %d2,[%a4]768
800047de:	37 02 e3 2c 	extr.u %d2,%d2,25,3
800047e2:	37 2f 83 fc 	insert %d15,%d15,%d2,25,3
            tmpResult.B.CHNR   = vadc->GLOBRES.B.CHNR;
800047e6:	19 42 00 c0 	ld.w %d2,[%a4]768
800047ea:	37 02 65 2a 	extr.u %d2,%d2,20,5
800047ee:	37 2f 05 fa 	insert %d15,%d15,%d2,20,5
            tmpResult.B.DRC    = vadc->GLOBRES.B.GNR; //The bitfields are the same but interpretation is different. TODO- define a generic result register type.
800047f2:	19 42 00 c0 	ld.w %d2,[%a4]768
800047f6:	37 02 64 28 	extr.u %d2,%d2,16,4
800047fa:	37 2f 04 f8 	insert %d15,%d15,%d2,16,4
            tmpResult.B.RESULT = vadc->GLOBRES.B.RESULT;
800047fe:	19 42 00 c0 	ld.w %d2,[%a4]768
80004802:	37 2f 10 20 	insert %d2,%d15,%d2,0,16

            return tmpResult;
80004806:	00 90       	ret 
        }
        else
        {
            tmpResult.U = group->RES[group->CHCTR[channel].B.RESREG].U;
80004808:	1b 04 06 40 	addi %d4,%d4,96
8000480c:	01 54 02 f6 	addsc.a %a15,%a5,%d4,2
80004810:	4c f0       	ld.w %d15,[%a15]0
80004812:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80004816:	1b 0f 0a f0 	addi %d15,%d15,160
8000481a:	90 55       	addsc.a %a5,%a5,%d15,2
8000481c:	54 52       	ld.w %d2,[%a5]

            return tmpResult;
8000481e:	00 90       	ret 

80004820 <IfxVadc_getScanStatus>:

IfxVadc_Status IfxVadc_getScanStatus(Ifx_VADC_G *group)
{
    IfxVadc_Status status = IfxVadc_Status_noError;

    if (group->ASPND.U)
80004820:	19 42 2c 20 	ld.w %d2,[%a4]172
    }
    else
    {
        return status;
    }
}
80004824:	ab 62 a0 22 	seln %d2,%d2,%d2,6
80004828:	00 90       	ret 

8000482a <IfxVadc_getSrcAddress>:

volatile Ifx_SRC_SRCR *IfxVadc_getSrcAddress(IfxVadc_GroupId group, IfxVadc_SrcNr index)
{
    Ifx_SRC_SRCR *base;

    if (IfxVadc_SrcNr_shared0 <= index)
8000482a:	bf 45 0a 80 	jlt.u %d5,4,8000483e <IfxVadc_getSrcAddress+0x14>
    {
        index -= 4;
8000482e:	9a c5       	add %d15,%d5,-4
80004830:	8f ff 0f 51 	and %d5,%d15,255

        if ((group & 0x1) != 0)
80004834:	8f 14 00 41 	and %d4,%d4,1
        {
            group = IfxVadc_GroupId_global1;    /* Shared interrupt common 1 is used */
80004838:	da 08       	mov %d15,8
8000483a:	ab 9f a0 44 	seln %d4,%d4,%d15,9
    else
    {
        /* do nothing */
    }

    base = (Ifx_SRC_SRCR *)IfxVadc_cfg_srcAddresses[(group * 4) + index];
8000483e:	13 44 20 45 	madd %d4,%d5,%d4,4
80004842:	91 00 00 f8 	movh.a %a15,32768
80004846:	d9 ff 2c 90 	lea %a15,[%a15]620 <8000026c <IfxVadc_cfg_srcAddresses>>
8000484a:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2

    return &(base[0]);
}
8000484e:	c8 02       	ld.a %a2,[%a15]0
80004850:	00 90       	ret 

80004852 <IfxVadc_initialiseAdcArbiterClock>:


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80004852:	19 4f 00 20 	ld.w %d15,[%a4]128
    return &(base[0]);
}


void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
80004856:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
80004858:	37 4f 02 f4 	insert %d15,%d15,%d4,8,2
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
8000485c:	3b f0 01 40 	mov %d4,31
80004860:	6d ff b4 fe 	call 800045c8 <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcArbiterClock(Ifx_VADC *vadc, uint32 arbiterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
80004864:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004868:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVD  = arbiterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
8000486a:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000486e:	3b f0 01 40 	mov %d4,31
80004872:	1d ff 8f fe 	j 80004590 <IfxVadc_disableAccess>

80004876 <IfxVadc_initialiseAdcConverterClock>:


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80004876:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
}


void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
8000487a:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
8000487c:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004880:	3b f0 01 40 	mov %d4,31
80004884:	6d ff a2 fe 	call 800045c8 <IfxVadc_enableAccess>
void IfxVadc_initialiseAdcConverterClock(Ifx_VADC *vadc, uint32 converterClockDivider)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
80004888:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
8000488c:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.DIVA  = converterClockDivider;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
8000488e:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004892:	3b f0 01 40 	mov %d4,31
80004896:	1d ff 7d fe 	j 80004590 <IfxVadc_disableAccess>

8000489a <IfxVadc_initializeFAdcD>:
}


uint32 IfxVadc_initializeFAdcD(Ifx_VADC *vadc, uint32 fAdcD)
{
8000489a:	02 4f       	mov %d15,%d4
8000489c:	40 4f       	mov.aa %a15,%a4
    uint32 divD;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
8000489e:	6d 00 06 0c 	call 800060aa <IfxScuCcu_getSpbFrequency>
800048a2:	4b 02 71 21 	ftouz %d2,%d2

    divD   = (fadc / fAdcD - 1);
800048a6:	4b f2 11 42 	div.u %e4,%d2,%d15
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800048aa:	82 3f       	mov %d15,3
800048ac:	c2 f4       	add %d4,-1
800048ae:	0b f4 90 41 	min.u %d4,%d4,%d15

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
800048b2:	1b 14 00 80 	addi %d8,%d4,1
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
800048b6:	40 f4       	mov.aa %a4,%a15

    divD   = (fadc / fAdcD - 1);

    divD   = __minu(divD, 0x3u);

    result = fadc / (divD + 1);
800048b8:	4b 82 11 82 	div.u %e8,%d2,%d8
    IfxVadc_initialiseAdcArbiterClock(vadc, divD);
800048bc:	6d ff cb ff 	call 80004852 <IfxVadc_initialiseAdcArbiterClock>
    return result;
}
800048c0:	02 82       	mov %d2,%d8
800048c2:	00 90       	ret 

800048c4 <IfxVadc_initializeFAdcI>:


uint32 IfxVadc_initializeFAdcI(Ifx_VADC *vadc, uint32 fAdcI)
{
800048c4:	02 4f       	mov %d15,%d4
800048c6:	40 4f       	mov.aa %a15,%a4
    uint32 divA;
    uint32 result;
    uint32 fadc = IfxScuCcu_getSpbFrequency();
800048c8:	6d 00 f1 0b 	call 800060aa <IfxScuCcu_getSpbFrequency>
800048cc:	4b 02 71 21 	ftouz %d2,%d2

    /*    DivA = min(max(0, Fadc / FAdcI - 1), 0x3F); */
    divA   = (fadc << 2) / fAdcI;
800048d0:	8f 22 00 40 	sh %d4,%d2,2
800048d4:	4b f4 11 42 	div.u %e4,%d4,%d15
800048d8:	3b f0 01 50 	mov %d5,31

    divA   = (divA + 2) >> 2; /* Round to nearest integer */
800048dc:	c2 24       	add %d4,2
800048de:	06 e4       	sh %d4,-2
    divA   = __minu(divA - 1, 0x1Fu);
800048e0:	c2 f4       	add %d4,-1
800048e2:	0b 54 90 41 	min.u %d4,%d4,%d5
    result = fadc / (divA + 1);
800048e6:	1b 14 00 30 	addi %d3,%d4,1
800048ea:	4b 32 11 62 	div.u %e6,%d2,%d3
800048ee:	02 6f       	mov %d15,%d6

    if (result > IFXVADC_ANALOG_FREQUENCY_MAX)
800048f0:	7b 10 13 60 	movh %d6,305
800048f4:	1b 16 d0 62 	addi %d6,%d6,11521
800048f8:	3f 6f 08 80 	jlt.u %d15,%d6,80004908 <IfxVadc_initializeFAdcI+0x44>
800048fc:	0b 53 90 41 	min.u %d4,%d3,%d5
    {
        divA   = __minu(divA + 1, 0x1Fu);

        result = fadc / (divA + 1);
80004900:	9a 14       	add %d15,%d4,1
80004902:	4b f2 11 22 	div.u %e2,%d2,%d15
80004906:	02 2f       	mov %d15,%d2
    else
    {
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
80004908:	1b 0f ee 25 	addi %d2,%d15,24288
8000490c:	7b a0 12 30 	movh %d3,298
80004910:	9b 82 ff 2f 	addih %d2,%d2,65528
80004914:	1b 13 be 38 	addi %d3,%d3,-29727
80004918:	7f 32 06 80 	jge.u %d2,%d3,80004924 <IfxVadc_initializeFAdcI+0x60>
    {
        result = 0;             /* Min / Max FAdcI frequency */
    }
    else
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
8000491c:	40 f4       	mov.aa %a4,%a15
8000491e:	6d ff ac ff 	call 80004876 <IfxVadc_initialiseAdcConverterClock>
80004922:	3c 02       	j 80004926 <IfxVadc_initializeFAdcI+0x62>
        /* do nothing */
    }

    if (!((result >= IFXVADC_ANALOG_FREQUENCY_MIN) && (result <= IFXVADC_ANALOG_FREQUENCY_MAX)))
    {
        result = 0;             /* Min / Max FAdcI frequency */
80004924:	82 0f       	mov %d15,0
    {
        IfxVadc_initialiseAdcConverterClock(vadc, divA);
    }

    return result;
}
80004926:	02 f2       	mov %d2,%d15
80004928:	00 90       	ret 

8000492a <IfxVadc_isPostCalibration>:
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
        break;
    default: pcEnabled                = FALSE;
8000492a:	82 02       	mov %d2,0

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
8000492c:	ff 84 33 80 	jge.u %d4,8,80004992 <IfxVadc_isPostCalibration+0x68>
80004930:	91 00 00 f8 	movh.a %a15,32768
80004934:	d9 ff 84 54 	lea %a15,[%a15]18756 <80004944 <IfxVadc_isPostCalibration+0x1a>>
80004938:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
        break;
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
        break;
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
        break;
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
8000493c:	19 42 00 20 	ld.w %d2,[%a4]128

boolean IfxVadc_isPostCalibration(Ifx_VADC *vadc, IfxVadc_GroupId group)
{
    boolean pcEnabled;

    switch (group)
80004940:	dc 0f       	ji %a15
80004942:	00 00       	nop 
80004944:	1d 00 10 00 	j 80004964 <IfxVadc_isPostCalibration+0x3a>
80004948:	1d 00 11 00 	j 8000496a <IfxVadc_isPostCalibration+0x40>
8000494c:	1d 00 12 00 	j 80004970 <IfxVadc_isPostCalibration+0x46>
80004950:	1d 00 13 00 	j 80004976 <IfxVadc_isPostCalibration+0x4c>
80004954:	1d 00 14 00 	j 8000497c <IfxVadc_isPostCalibration+0x52>
80004958:	1d 00 15 00 	j 80004982 <IfxVadc_isPostCalibration+0x58>
8000495c:	1d 00 16 00 	j 80004988 <IfxVadc_isPostCalibration+0x5e>
80004960:	1d 00 17 00 	j 8000498e <IfxVadc_isPostCalibration+0x64>
    {
    case IfxVadc_GroupId_0: pcEnabled = vadc->GLOBCFG.B.DPCAL0 == 0;
80004964:	07 22 10 28 	nand.t %d2,%d2,16,%d2,16
        break;
80004968:	00 90       	ret 
    case IfxVadc_GroupId_1: pcEnabled = vadc->GLOBCFG.B.DPCAL1 == 0;
8000496a:	07 22 91 28 	nand.t %d2,%d2,17,%d2,17
        break;
8000496e:	00 90       	ret 
    case IfxVadc_GroupId_2: pcEnabled = vadc->GLOBCFG.B.DPCAL2 == 0;
80004970:	07 22 12 29 	nand.t %d2,%d2,18,%d2,18
        break;
80004974:	00 90       	ret 
    case IfxVadc_GroupId_3: pcEnabled = vadc->GLOBCFG.B.DPCAL3 == 0;
80004976:	07 22 93 29 	nand.t %d2,%d2,19,%d2,19
        break;
8000497a:	00 90       	ret 
    case IfxVadc_GroupId_4: pcEnabled = vadc->GLOBCFG.B.DPCAL4 == 0;
8000497c:	07 22 14 2a 	nand.t %d2,%d2,20,%d2,20
        break;
80004980:	00 90       	ret 
    case IfxVadc_GroupId_5: pcEnabled = vadc->GLOBCFG.B.DPCAL5 == 0;
80004982:	07 22 95 2a 	nand.t %d2,%d2,21,%d2,21
        break;
80004986:	00 90       	ret 
    case IfxVadc_GroupId_6: pcEnabled = vadc->GLOBCFG.B.DPCAL6 == 0;
80004988:	07 22 16 2b 	nand.t %d2,%d2,22,%d2,22
        break;
8000498c:	00 90       	ret 
    case IfxVadc_GroupId_7: pcEnabled = vadc->GLOBCFG.B.DPCAL7 == 0;
8000498e:	07 22 97 2b 	nand.t %d2,%d2,23,%d2,23
    default: pcEnabled                = FALSE;
        break;
    }

    return pcEnabled;
}
80004992:	00 90       	ret 

80004994 <IfxVadc_getChannelConversionTime>:
    return status;
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
80004994:	02 40       	mov %d0,%d4
80004996:	02 68       	mov %d8,%d6
80004998:	02 7a       	mov %d10,%d7
8000499a:	14 a4       	ld.bu %d4,[%sp]
    IfxVadc_ChannelResolution resolution;
    uint32                    n;

    uint32                    inputClassNum;

    if (inputClass <= IfxVadc_InputClasses_group1)
8000499c:	ff 25 08 80 	jge.u %d5,2,800049ac <IfxVadc_getChannelConversionTime+0x18>
    {
        inputClassNum = inputClass;
        stcs          = vadcG->ICLASS[inputClassNum].B.STCS;
800049a0:	8f 80 00 f0 	sh %d15,%d0,8
800049a4:	42 f5       	add %d5,%d15
800049a6:	1b 85 12 50 	addi %d5,%d5,296
800049aa:	3c 03       	j 800049b0 <IfxVadc_getChannelConversionTime+0x1c>
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
800049ac:	1b 65 02 50 	addi %d5,%d5,38
800049b0:	01 45 02 f6 	addsc.a %a15,%a4,%d5,2
800049b4:	4c f0       	ld.w %d15,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
800049b6:	48 03       	ld.w %d3,[%a15]0
        resolution    = (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
800049b8:	16 1f       	and %d15,31
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
    }

    if (stcs > 16)
800049ba:	8b 1f 61 22 	lt.u %d2,%d15,17
    }
    else
    {
        inputClassNum = inputClass - IfxVadc_InputClasses_global0;
        stcs          = vadc->GLOBICLASS[inputClassNum].B.STCS;
        resolution    = (IfxVadc_ChannelResolution)vadc->GLOBICLASS[inputClassNum].B.CMS;
800049be:	37 03 63 34 	extr.u %d3,%d3,8,3
    }

    if (stcs > 16)
800049c2:	f6 24       	jnz %d2,800049ca <IfxVadc_getChannelConversionTime+0x36>
    {
        stcs = (stcs - 15) * 16; // Reference for the logic: Table 28-4 of TC29xB User Manual v1.3
800049c4:	1b 1f ff ff 	addi %d15,%d15,-15
800049c8:	06 4f       	sh %d15,4
800049ca:	ff 63 35 80 	jge.u %d3,6,80004a34 <IfxVadc_getChannelConversionTime+0xa0>
800049ce:	91 00 00 f8 	movh.a %a15,32768
800049d2:	d9 ff 24 90 	lea %a15,[%a15]612 <80000264 <CSWTCH.25>>
800049d6:	01 f3 00 f6 	addsc.a %a15,%a15,%d3,0
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
800049da:	82 02       	mov %d2,0
800049dc:	08 09       	ld.bu %d9,[%a15]0
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
800049de:	df 04 2f 80 	jne %d4,0,80004a3c <IfxVadc_getChannelConversionTime+0xa8>
    {
        if (resolution != IfxVadc_ChannelResolution_10bitFast)
800049e2:	df 53 0d 00 	jeq %d3,5,800049fc <IfxVadc_getChannelConversionTime+0x68>
        {
            /* Standard conversion */
            uint32 pc = IfxVadc_isPostCalibration(vadc, group) ? 2 : 0;
800049e6:	02 04       	mov %d4,%d0
800049e8:	6d ff a1 ff 	call 8000492a <IfxVadc_isPostCalibration>
800049ec:	92 24       	add %d4,%d15,2
800049ee:	ab 22 a0 22 	seln %d2,%d2,%d2,2
800049f2:	42 94       	add %d4,%d9
            conversionTime = (float32)(2 + stcs + n + pc) / analogFrequency + 2.0 / moduleFrequency;
800049f4:	42 24       	add %d4,%d2
800049f6:	4b 04 41 41 	itof %d4,%d4
800049fa:	3c 04       	j 80004a02 <IfxVadc_getChannelConversionTime+0x6e>
        }
        else
        {
            /* Fast compare mode */
            conversionTime = (float32)(2 + stcs + 2) / analogFrequency + 2.0 / moduleFrequency;
800049fc:	c2 4f       	add %d15,4
800049fe:	4b 0f 41 41 	itof %d4,%d15
80004a02:	4b 84 51 40 	div.f %d4,%d4,%d8
80004a06:	6d 00 e1 2a 	call 80009fc8 <__extendsfdf2>
80004a0a:	02 a4       	mov %d4,%d10
80004a0c:	0b 23 10 88 	mov %e8,%d3,%d2
80004a10:	6d 00 dc 2a 	call 80009fc8 <__extendsfdf2>
80004a14:	b7 00 21 4f 	imask %e4,0,30,1
80004a18:	0b 23 10 68 	mov %e6,%d3,%d2
80004a1c:	6d 00 cb 2c 	call 8000a3b2 <__divdf3>
80004a20:	0b 89 10 48 	mov %e4,%d9,%d8
80004a24:	0b 23 10 68 	mov %e6,%d3,%d2
80004a28:	6d 00 b7 2b 	call 8000a196 <__adddf3>
80004a2c:	0b 23 10 48 	mov %e4,%d3,%d2
80004a30:	1d 00 80 2d 	j 8000a530 <__truncdfsf2>
        break;
    default: n                                  = 0;
        break;
    }

    if (conversionMode == IfxVadc_ConversionType_Compatible)
80004a34:	82 09       	mov %d9,0
80004a36:	df 04 d8 7f 	jeq %d4,0,800049e6 <IfxVadc_getChannelConversionTime+0x52>
}


float32 IfxVadc_getChannelConversionTime(Ifx_VADC *vadc, IfxVadc_GroupId group, IfxVadc_InputClasses inputClass, float32 analogFrequency, float32 moduleFrequency, IfxVadc_ConversionType conversionMode)
{
    float32                   conversionTime = 0.0;
80004a3a:	82 02       	mov %d2,0
    {
        // do nothing
    }

    return conversionTime;
}
80004a3c:	00 90       	ret 

80004a3e <IfxVadc_resetKernel>:
    return pcEnabled;
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
80004a3e:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004a40:	6d 00 f9 13 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80004a44:	02 24       	mov %d4,%d2
}


void IfxVadc_resetKernel(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004a46:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80004a48:	6d 00 f5 12 	call 80007032 <IfxScuWdt_clearCpuEndinit>
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a4c:	3b f0 01 40 	mov %d4,31
80004a50:	40 f4       	mov.aa %a4,%a15
80004a52:	6d ff bb fd 	call 800045c8 <IfxVadc_enableAccess>
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004a56:	48 c2       	ld.w %d2,[%a15]48
    vadc->KRST0.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004a58:	02 f4       	mov %d4,%d15
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->KRST1.B.RST = 1;      /* Only if both Kernel reset bits are set a reset is executed */
80004a5a:	8f 12 40 21 	or %d2,%d2,1
80004a5e:	68 c2       	st.w [%a15]48,%d2
    vadc->KRST0.B.RST = 1;
80004a60:	48 d2       	ld.w %d2,[%a15]52
80004a62:	8f 12 40 21 	or %d2,%d2,1
80004a66:	68 d2       	st.w [%a15]52,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004a68:	6d 00 1a 14 	call 8000729c <IfxScuWdt_setCpuEndinit>

    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */
80004a6c:	48 d2       	ld.w %d2,[%a15]52
80004a6e:	6f 12 ff 7f 	jz.t %d2,1,80004a6c <IfxVadc_resetKernel+0x2e>

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004a72:	02 f4       	mov %d4,%d15
80004a74:	6d 00 df 12 	call 80007032 <IfxScuWdt_clearCpuEndinit>
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004a78:	48 b2       	ld.w %d2,[%a15]44
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a7a:	3b f0 01 40 	mov %d4,31
    while (vadc->KRST0.B.RSTSTAT == 0)  /* Wait until reset is executed */

    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->KRSTCLR.B.CLR = 1;    /* Clear Kernel reset status bit */
80004a7e:	8f 12 40 21 	or %d2,%d2,1
80004a82:	68 b2       	st.w [%a15]44,%d2
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a84:	40 f4       	mov.aa %a4,%a15
80004a86:	6d ff 85 fd 	call 80004590 <IfxVadc_disableAccess>
    IfxScuWdt_setCpuEndinit(passwd);
80004a8a:	02 f4       	mov %d4,%d15
80004a8c:	1d 00 08 14 	j 8000729c <IfxScuWdt_setCpuEndinit>

80004a90 <IfxVadc_selectPowerSupplyVoltage>:


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
80004a90:	19 4f 00 20 	ld.w %d15,[%a4]128
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
80004a94:	40 4f       	mov.aa %a15,%a4
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
80004a96:	67 4f 0e f0 	ins.t %d15,%d15,14,%d4,0
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004a9a:	3b f0 01 40 	mov %d4,31
80004a9e:	6d ff 95 fd 	call 800045c8 <IfxVadc_enableAccess>
void IfxVadc_selectPowerSupplyVoltage(Ifx_VADC *vadc, IfxVadc_LowSupplyVoltageSelect supplyVoltage)
{
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
80004aa2:	b7 1f 81 f7 	insert %d15,%d15,1,15,1
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004aa6:	40 f4       	mov.aa %a4,%a15
    Ifx_VADC_GLOBCFG tempGLOBCFG;
    tempGLOBCFG.U       = vadc->GLOBCFG.U;
    tempGLOBCFG.B.LOSUP = supplyVoltage;
    tempGLOBCFG.B.DIVWC = 1;
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
    vadc->GLOBCFG.U     = tempGLOBCFG.U;
80004aa8:	59 ff 00 20 	st.w [%a15]128,%d15
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004aac:	3b f0 01 40 	mov %d4,31
80004ab0:	1d ff 70 fd 	j 80004590 <IfxVadc_disableAccess>

80004ab4 <IfxVadc_setArbiterPriority>:
}


void IfxVadc_setArbiterPriority(Ifx_VADC_G *vadcG, boolean slotEnable, IfxVadc_RequestSlotPriority prio, IfxVadc_RequestSlotStartMode mode, IfxVadc_RequestSource slot)
{
80004ab4:	1b 87 01 f0 	addi %d15,%d7,24
    if (slotEnable != FALSE)
80004ab8:	df 04 23 00 	jeq %d4,0,80004afe <IfxVadc_setArbiterPriority+0x4a>
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
80004abc:	19 42 04 00 	ld.w %d2,[%a4]4
80004ac0:	0f f4 00 40 	sh %d4,%d4,%d15
80004ac4:	a6 24       	or %d4,%d2
80004ac6:	59 44 04 00 	st.w [%a4]4,%d4
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
80004aca:	19 42 04 00 	ld.w %d2,[%a4]4
80004ace:	06 27       	sh %d7,2
80004ad0:	82 3f       	mov %d15,3
80004ad2:	0f 7f 00 f0 	sh %d15,%d15,%d7
80004ad6:	0f f2 e0 f0 	andn %d15,%d2,%d15
80004ada:	6c 41       	st.w [%a4]4,%d15
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */
80004adc:	4c 41       	ld.w %d15,[%a4]4
80004ade:	0f 75 00 50 	sh %d5,%d5,%d7
80004ae2:	a6 f5       	or %d5,%d15
80004ae4:	59 45 04 00 	st.w [%a4]4,%d5

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004ae8:	4c 41       	ld.w %d15,[%a4]4
80004aea:	c2 37       	add %d7,3
    {
        vadcG->ARBPR.U |= slotEnable << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot); /* enable Slot */
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_PRIO0_MSK << (slot * 4u));      /* clear Priority */
        vadcG->ARBPR.U |= (prio << (slot * 4u));                             /* Set Priority */

        if (mode != IfxVadc_RequestSlotStartMode_waitForStart)
80004aec:	76 64       	jz %d6,80004af4 <IfxVadc_setArbiterPriority+0x40>
        {
            vadcG->ARBPR.U |= 0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)); /* Set cancel inject mode */
80004aee:	d7 1f 01 77 	insert %d7,%d15,1,%d7,1
80004af2:	3c 03       	j 80004af8 <IfxVadc_setArbiterPriority+0x44>
        }
        else
        {
            vadcG->ARBPR.U &= ~(0x1u << (IFX_VADC_G_ARBPR_CSM0_OFF + (slot * 4u)));  /* Set Wait for Start mode */
80004af4:	d7 0f 01 77 	insert %d7,%d15,0,%d7,1
80004af8:	59 47 04 00 	st.w [%a4]4,%d7
80004afc:	00 90       	ret 
        }
    }
    else
    {
        vadcG->ARBPR.U &= ~(IFX_VADC_G_ARBPR_ASEN0_MSK << (IFX_VADC_G_ARBPR_ASEN0_OFF + slot));  /* disable Slot */
80004afe:	19 44 04 00 	ld.w %d4,[%a4]4
80004b02:	d7 04 01 ff 	insert %d15,%d4,0,%d15,1
80004b06:	6c 41       	st.w [%a4]4,%d15
80004b08:	00 90       	ret 

80004b0a <IfxVadc_setScan>:

void IfxVadc_setScan(Ifx_VADC_G *group, uint32 channels, uint32 mask)
{
    /* select channels which should take part in the scan sequence */
    /* the mask allows to specify the channels which should be enabled/disabled */
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
80004b0a:	19 4f 28 20 	ld.w %d15,[%a4]168
80004b0e:	26 54       	and %d4,%d5
80004b10:	0f 5f e0 f0 	andn %d15,%d15,%d5
80004b14:	0f 4f a0 50 	or %d5,%d15,%d4
80004b18:	59 45 28 20 	st.w [%a4]168,%d5
80004b1c:	00 90       	ret 

80004b1e <IfxVadc_startupCalibration>:
{
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b1e:	3b f0 01 40 	mov %d4,31
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004b22:	40 4f       	mov.aa %a15,%a4
    boolean calibrationRunning;
    uint8   adcCalGroupNum;

    /* Start calibration */
    IfxVadc_enableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b24:	6d ff 52 fd 	call 800045c8 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_initiateStartupCalibration(Ifx_VADC *vadc)
{
    vadc->GLOBCFG.B.SUCAL = 1;
80004b28:	19 ff 00 20 	ld.w %d15,[%a15]128
    /* Set SUCAL bit */
    IfxVadc_initiateStartupCalibration(vadc);
    IfxVadc_disableAccess(vadc, IfxVadc_Protection_globalConfig);
80004b2c:	40 f4       	mov.aa %a4,%a15
80004b2e:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
80004b32:	3b f0 01 40 	mov %d4,31
80004b36:	59 ff 00 20 	st.w [%a15]128,%d15
80004b3a:	6d ff 2b fd 	call 80004590 <IfxVadc_disableAccess>
    group->ASSEL.U = (group->ASSEL.U & ~mask) | (channels & mask);
}


void IfxVadc_startupCalibration(Ifx_VADC *vadc)
{
80004b3e:	82 02       	mov %d2,0

    /* Wait for hardware self-test and calibration to complete */
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;
80004b40:	82 0f       	mov %d15,0
80004b42:	a0 72       	mov.a %a2,7


IFX_INLINE uint8 IfxVadc_getAdcCalibrationActiveState(Ifx_VADC *vadc, uint8 adcCalGroupNum)
{
    uint8 status;
    status = vadc->G[adcCalGroupNum].ARBCFG.B.CAL;
80004b44:	8f a2 00 30 	sh %d3,%d2,10
80004b48:	01 f3 00 36 	addsc.a %a3,%a15,%d3,0
80004b4c:	c2 12       	add %d2,1
80004b4e:	19 33 40 20 	ld.w %d3,[%a3]1152
80004b52:	37 03 61 3e 	extr.u %d3,%d3,28,1

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
        {
            if (IfxVadc_getAdcCalibrationActiveState(vadc, adcCalGroupNum) != 0)     /* Check ADC Calibration Flag CAL */
            {
                calibrationRunning = TRUE;
80004b56:	ab 1f a0 f3 	seln %d15,%d3,%d15,1
    /* Wait until Calibration is done */
    do
    {
        calibrationRunning = FALSE;

        for (adcCalGroupNum = 0; adcCalGroupNum < IFXVADC_NUM_ADC_CAL_GROUPS; adcCalGroupNum++)
80004b5a:	fc 25       	loop %a2,80004b44 <IfxVadc_startupCalibration+0x26>
            else
            {
                /* do nothing */
            }
        }
    } while (calibrationRunning == TRUE); /* wait until calibration of all calibrated kernels are done */
80004b5c:	df 1f f1 7f 	jeq %d15,1,80004b3e <IfxVadc_startupCalibration+0x20>
}
80004b60:	00 90       	ret 
	...

80004b64 <IfxAsclin_disableModule>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
80004b64:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004b66:	6d 00 66 13 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004b6a:	02 24       	mov %d4,%d2
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxAsclin_disableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004b6c:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);            /* clears the endinit protection*/
80004b6e:	6d 00 62 12 	call 80007032 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
80004b72:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclin); /* disables the module*/
    IfxScuWdt_setCpuEndinit(psw);              /* sets the endinit protection back on*/
80004b74:	02 f4       	mov %d4,%d15
80004b76:	8f 12 40 21 	or %d2,%d2,1
80004b7a:	68 02       	st.w [%a15]0,%d2
80004b7c:	1d 00 90 13 	j 8000729c <IfxScuWdt_setCpuEndinit>

80004b80 <IfxAsclin_enableAscErrorFlags>:
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80004b80:	7b 10 00 f0 	movh %d15,1
80004b84:	ab 0f 80 44 	sel %d4,%d4,%d15,0
80004b88:	19 4f 00 10 	ld.w %d15,[%a4]64
80004b8c:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
80004b90:	a6 f4       	or %d4,%d15
80004b92:	59 44 00 10 	st.w [%a4]64,%d4
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
80004b96:	7b 00 40 f0 	movh %d15,1024
80004b9a:	ab 0f 80 55 	sel %d5,%d5,%d15,0
80004b9e:	19 4f 00 10 	ld.w %d15,[%a4]64
80004ba2:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80004ba6:	a6 f5       	or %d5,%d15
80004ba8:	59 45 00 10 	st.w [%a4]64,%d5
80004bac:	00 90       	ret 

80004bae <IfxAsclin_enableModule>:
    IfxAsclin_enableRxFifoOverflowFlag(asclin, rfoEnable);  /* enables Rx fifo Overflow error*/
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
80004bae:	40 4f       	mov.aa %a15,%a4
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004bb0:	6d 00 41 13 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004bb4:	02 24       	mov %d4,%d2
}


void IfxAsclin_enableModule(Ifx_ASCLIN *asclin)
{
    uint16 psw = IfxScuWdt_getCpuWatchdogPassword();
80004bb6:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);           /* clears the endinit protection*/
80004bb8:	6d 00 3d 12 	call 80007032 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setEnableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 0;
80004bbc:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setEnableModuleRequest(asclin); /* enables the module*/
    IfxScuWdt_setCpuEndinit(psw);             /* sets the endinit protection back on*/
80004bbe:	02 f4       	mov %d4,%d15
80004bc0:	8f 12 c0 21 	andn %d2,%d2,1
80004bc4:	68 02       	st.w [%a15]0,%d2
80004bc6:	1d 00 6b 13 	j 8000729c <IfxScuWdt_setCpuEndinit>

80004bca <IfxAsclin_getAddress>:
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
    }
    else
    {
        module = NULL_PTR;
80004bca:	a0 02       	mov.a %a2,0

Ifx_ASCLIN *IfxAsclin_getAddress(IfxAsclin_Index asclin)
{
    Ifx_ASCLIN *module;

    if (asclin < IFXASCLIN_NUM_MODULES)
80004bcc:	ff 44 09 00 	jge %d4,4,80004bde <IfxAsclin_getAddress+0x14>
    {
        module = (Ifx_ASCLIN *)IfxAsclin_cfg_indexMap[asclin].module;
80004bd0:	91 00 00 f8 	movh.a %a15,32768
80004bd4:	d9 ff bc 60 	lea %a15,[%a15]2492 <800009bc <IfxAsclin_cfg_indexMap>>
80004bd8:	01 f4 03 f6 	addsc.a %a15,%a15,%d4,3
80004bdc:	c8 02       	ld.a %a2,[%a15]0
    {
        module = NULL_PTR;
    }

    return module;
}
80004bde:	00 90       	ret 

80004be0 <IfxAsclin_getFaFrequency>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004be0:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004be4:	16 1f       	and %d15,31
float32 IfxAsclin_getFaFrequency(Ifx_ASCLIN *asclin)
{
    float32               frequency;
    IfxAsclin_ClockSource clockSource = (IfxAsclin_ClockSource)IfxAsclin_getClockSource(asclin);    /* gets the current clock source*/

    switch (clockSource)
80004be6:	c2 ff       	add %d15,-1
80004be8:	8b 0f a1 22 	ge.u %d2,%d15,16
80004bec:	df 02 32 80 	jne %d2,0,80004c50 <IfxAsclin_getFaFrequency+0x70>
80004bf0:	91 00 00 f8 	movh.a %a15,32768
80004bf4:	d9 ff bc f4 	lea %a15,[%a15]19452 <80004bfc <IfxAsclin_getFaFrequency+0x1c>>
80004bf8:	90 ff       	addsc.a %a15,%a15,%d15,2
80004bfa:	dc 0f       	ji %a15
80004bfc:	1d 00 20 00 	j 80004c3c <IfxAsclin_getFaFrequency+0x5c>
80004c00:	1d 00 20 00 	j 80004c40 <IfxAsclin_getFaFrequency+0x60>
80004c04:	1d 00 26 00 	j 80004c50 <IfxAsclin_getFaFrequency+0x70>
80004c08:	1d 00 1e 00 	j 80004c44 <IfxAsclin_getFaFrequency+0x64>
80004c0c:	1d 00 22 00 	j 80004c50 <IfxAsclin_getFaFrequency+0x70>
80004c10:	1d 00 20 00 	j 80004c50 <IfxAsclin_getFaFrequency+0x70>
80004c14:	1d 00 1e 00 	j 80004c50 <IfxAsclin_getFaFrequency+0x70>
80004c18:	1d 00 18 00 	j 80004c48 <IfxAsclin_getFaFrequency+0x68>
80004c1c:	1d 00 1a 00 	j 80004c50 <IfxAsclin_getFaFrequency+0x70>
80004c20:	1d 00 18 00 	j 80004c50 <IfxAsclin_getFaFrequency+0x70>
80004c24:	1d 00 16 00 	j 80004c50 <IfxAsclin_getFaFrequency+0x70>
80004c28:	1d 00 14 00 	j 80004c50 <IfxAsclin_getFaFrequency+0x70>
80004c2c:	1d 00 12 00 	j 80004c50 <IfxAsclin_getFaFrequency+0x70>
80004c30:	1d 00 10 00 	j 80004c50 <IfxAsclin_getFaFrequency+0x70>
80004c34:	1d 00 0e 00 	j 80004c50 <IfxAsclin_getFaFrequency+0x70>
80004c38:	1d 00 0a 00 	j 80004c4c <IfxAsclin_getFaFrequency+0x6c>
    {
    case IfxAsclin_ClockSource_noClock: /* gets the respective frequency*/
        frequency = 0.0;
        break;
    case IfxAsclin_ClockSource_kernelClock:
        frequency = IfxScuCcu_getSpbFrequency();
80004c3c:	1d 00 37 0a 	j 800060aa <IfxScuCcu_getSpbFrequency>
        break;
    case IfxAsclin_ClockSource_oscillatorClock:
        frequency = IfxScuCcu_getOsc0Frequency();
80004c40:	1d 00 a6 08 	j 80005d8c <IfxScuCcu_getOsc0Frequency>
        break;
    case IfxAsclin_ClockSource_flexRayClock:
        frequency = IfxScuCcu_getPllErayFrequency();
80004c44:	1d 00 c3 08 	j 80005dca <IfxScuCcu_getPllErayFrequency>
        break;
    case IfxAsclin_ClockSource_ascFastClock:
        frequency = IfxScuCcu_getBaud2Frequency();
80004c48:	1d 00 20 0a 	j 80006088 <IfxScuCcu_getBaud2Frequency>
        break;
    case IfxAsclin_ClockSource_ascSlowClock:
        frequency = IfxScuCcu_getBaud1Frequency();
80004c4c:	1d 00 0e 0a 	j 80006068 <IfxScuCcu_getBaud1Frequency>
        frequency = 0.0;
        break;
    }

    return frequency;
}
80004c50:	82 02       	mov %d2,0
80004c52:	00 90       	ret 

80004c54 <IfxAsclin_getIndex>:

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004c54:	91 00 00 38 	movh.a %a3,32768
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004c58:	82 0f       	mov %d15,0
    {
        if (IfxAsclin_cfg_indexMap[index].module == asclin)
80004c5a:	d9 33 bc 60 	lea %a3,[%a3]2492 <800009bc <IfxAsclin_cfg_indexMap>>
80004c5e:	a0 3f       	mov.a %a15,3
80004c60:	d0 32       	addsc.a %a2,%a3,%d15,3
80004c62:	d4 25       	ld.a %a5,[%a2]
80004c64:	7d 45 05 80 	jne.a %a5,%a4,80004c6e <IfxAsclin_getIndex+0x1a>
        {
            result = (IfxAsclin_Index)IfxAsclin_cfg_indexMap[index].index;
80004c68:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
80004c6c:	00 90       	ret 
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;

    for (index = 0; index < IFXASCLIN_NUM_MODULES; index++)
80004c6e:	c2 1f       	add %d15,1
80004c70:	fc f8       	loop %a15,80004c60 <IfxAsclin_getIndex+0xc>
IfxAsclin_Index IfxAsclin_getIndex(Ifx_ASCLIN *asclin)
{
    uint32          index;
    IfxAsclin_Index result;

    result = IfxAsclin_Index_none;
80004c72:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
80004c74:	00 90       	ret 

80004c76 <IfxAsclin_getPdFrequency>:
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
}


float32 IfxAsclin_getPdFrequency(Ifx_ASCLIN *asclin)
{
80004c76:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
80004c78:	6d ff b4 ff 	call 80004be0 <IfxAsclin_getFaFrequency>
80004c7c:	4c f5       	ld.w %d15,[%a15]20
80004c7e:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004c82:	c2 1f       	add %d15,1
80004c84:	4b 0f 41 f1 	itof %d15,%d15
}
80004c88:	4b f2 51 20 	div.f %d2,%d2,%d15
80004c8c:	00 90       	ret 

80004c8e <IfxAsclin_getOvsFrequency>:
    return result;
}


float32 IfxAsclin_getOvsFrequency(Ifx_ASCLIN *asclin)
{
80004c8e:	40 4f       	mov.aa %a15,%a4
    return (IfxAsclin_getPdFrequency(asclin) * asclin->BRG.B.NUMERATOR) / asclin->BRG.B.DENOMINATOR;
80004c90:	6d ff f3 ff 	call 80004c76 <IfxAsclin_getPdFrequency>
80004c94:	48 83       	ld.w %d3,[%a15]32
80004c96:	4c f8       	ld.w %d15,[%a15]32
80004c98:	37 03 6c 38 	extr.u %d3,%d3,16,12
80004c9c:	b7 0f 14 f6 	insert %d15,%d15,0,12,20
80004ca0:	4b 03 41 31 	itof %d3,%d3
80004ca4:	4b 0f 41 f1 	itof %d15,%d15
80004ca8:	4b 32 41 20 	mul.f %d2,%d2,%d3
}
80004cac:	4b f2 51 20 	div.f %d2,%d2,%d15
80004cb0:	00 90       	ret 

80004cb2 <IfxAsclin_getShiftFrequency>:
    return IfxAsclin_getFaFrequency(asclin) / (asclin->BITCON.B.PRESCALER + 1);
}


float32 IfxAsclin_getShiftFrequency(Ifx_ASCLIN *asclin)
{
80004cb2:	40 4f       	mov.aa %a15,%a4
    return IfxAsclin_getOvsFrequency(asclin) / asclin->BITCON.B.OVERSAMPLING;
80004cb4:	6d ff ed ff 	call 80004c8e <IfxAsclin_getOvsFrequency>
80004cb8:	4c f5       	ld.w %d15,[%a15]20
80004cba:	37 0f 64 f8 	extr.u %d15,%d15,16,4
80004cbe:	4b 0f 41 f1 	itof %d15,%d15
}
80004cc2:	4b f2 51 20 	div.f %d2,%d2,%d15
80004cc6:	00 90       	ret 

80004cc8 <IfxAsclin_getSrcPointerEr>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerEr(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].ERR);
80004cc8:	6d ff c6 ff 	call 80004c54 <IfxAsclin_getIndex>
80004ccc:	53 c2 20 f0 	mul %d15,%d2,12
80004cd0:	60 ff       	mov.a %a15,%d15
80004cd2:	d9 f2 08 28 	lea %a2,[%a15]-32632
}
80004cd6:	11 42 00 2f 	addih.a %a2,%a2,61444
80004cda:	00 90       	ret 

80004cdc <IfxAsclin_getSrcPointerRx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerRx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].RX);
80004cdc:	6d ff bc ff 	call 80004c54 <IfxAsclin_getIndex>
80004ce0:	53 c2 20 f0 	mul %d15,%d2,12
80004ce4:	60 ff       	mov.a %a15,%d15
80004ce6:	d9 f2 04 28 	lea %a2,[%a15]-32636
}
80004cea:	11 42 00 2f 	addih.a %a2,%a2,61444
80004cee:	00 90       	ret 

80004cf0 <IfxAsclin_getSrcPointerTx>:


volatile Ifx_SRC_SRCR *IfxAsclin_getSrcPointerTx(Ifx_ASCLIN *asclin)
{
    return (volatile Ifx_SRC_SRCR *)(&MODULE_SRC.ASCLIN.ASCLIN[IfxAsclin_getIndex(asclin)].TX);
80004cf0:	6d ff b2 ff 	call 80004c54 <IfxAsclin_getIndex>
80004cf4:	53 c2 20 f0 	mul %d15,%d2,12
80004cf8:	60 ff       	mov.a %a15,%d15
80004cfa:	d9 f2 00 28 	lea %a2,[%a15]-32640
}
80004cfe:	11 42 00 2f 	addih.a %a2,%a2,61444
80004d02:	00 90       	ret 

80004d04 <IfxAsclin_read16>:


uint32 IfxAsclin_read16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
80004d04:	9f 04 04 80 	jned %d4,0,80004d0c <IfxAsclin_read16+0x8>
        *data++ = (uint16)rxData->U;
        count--;
    }

    return count;
}
80004d08:	82 02       	mov %d2,0
80004d0a:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint16)rxData->U;
80004d0c:	19 4f 08 10 	ld.w %d15,[%a4]72
80004d10:	ac 50       	st.h [%a5]0,%d15
80004d12:	b0 25       	add.a %a5,2
80004d14:	3c f8       	j 80004d04 <IfxAsclin_read16>

80004d16 <IfxAsclin_read32>:
    return count;
}


uint32 IfxAsclin_read32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
80004d16:	9f 04 04 80 	jned %d4,0,80004d1e <IfxAsclin_read32+0x8>
        *data++ = rxData->U;
        count--;
    }

    return count;
}
80004d1a:	82 02       	mov %d2,0
80004d1c:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = rxData->U;
80004d1e:	19 4f 08 10 	ld.w %d15,[%a4]72
80004d22:	6c 50       	st.w [%a5]0,%d15
80004d24:	b0 45       	add.a %a5,4
80004d26:	3c f8       	j 80004d16 <IfxAsclin_read32>

80004d28 <IfxAsclin_read8>:
    return count;
}


uint32 IfxAsclin_read8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80004d28:	9f 04 04 80 	jned %d4,0,80004d30 <IfxAsclin_read8+0x8>
        *data++ = (uint8)rxData->U;
        count--;
    }

    return count;
}
80004d2c:	82 02       	mov %d2,0
80004d2e:	00 90       	ret 
{
    volatile Ifx_ASCLIN_RXDATA *rxData = (volatile Ifx_ASCLIN_RXDATA *)&asclin->RXDATA.U;

    while (count > 0)
    {
        *data++ = (uint8)rxData->U;
80004d30:	19 4f 08 10 	ld.w %d15,[%a4]72
80004d34:	2c 50       	st.b [%a5]0,%d15
80004d36:	b0 15       	add.a %a5,1
80004d38:	3c f8       	j 80004d28 <IfxAsclin_read8>

80004d3a <IfxAsclin_resetModule>:
    return count;
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
80004d3a:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004d3c:	6d 00 7b 12 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
80004d40:	02 24       	mov %d4,%d2
}


void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80004d42:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
80004d44:	6d 00 77 11 	call 80007032 <IfxScuWdt_clearCpuEndinit>

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004d48:	19 f2 34 30 	ld.w %d2,[%a15]244
    asclin->KRST1.B.RST = 1;
    IfxScuWdt_setCpuEndinit(passwd);
80004d4c:	02 f4       	mov %d4,%d15
void IfxAsclin_resetModule(Ifx_ASCLIN *asclin)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);

    asclin->KRST0.B.RST = 1;            /* Only if both Kernel reset bits are set a reset is executed */
80004d4e:	8f 12 40 21 	or %d2,%d2,1
80004d52:	59 f2 34 30 	st.w [%a15]244,%d2
    asclin->KRST1.B.RST = 1;
80004d56:	19 f2 30 30 	ld.w %d2,[%a15]240
80004d5a:	8f 12 40 21 	or %d2,%d2,1
80004d5e:	59 f2 30 30 	st.w [%a15]240,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80004d62:	6d 00 9d 12 	call 8000729c <IfxScuWdt_setCpuEndinit>

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
80004d66:	19 f2 34 30 	ld.w %d2,[%a15]244
80004d6a:	6f 12 fe 7f 	jz.t %d2,1,80004d66 <IfxAsclin_resetModule+0x2c>
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
80004d6e:	02 f4       	mov %d4,%d15
80004d70:	6d 00 61 11 	call 80007032 <IfxScuWdt_clearCpuEndinit>
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004d74:	19 f2 2c 30 	ld.w %d2,[%a15]236

    IfxScuWdt_setCpuEndinit(passwd);
80004d78:	02 f4       	mov %d4,%d15

    while (0 == asclin->KRST0.B.RSTSTAT)    /* Wait until reset is executed */
    {}

    IfxScuWdt_clearCpuEndinit(passwd);
    asclin->KRSTCLR.B.CLR = 1;          /* Clear Kernel reset status bit */
80004d7a:	8f 12 40 21 	or %d2,%d2,1
80004d7e:	59 f2 2c 30 	st.w [%a15]236,%d2

    IfxScuWdt_setCpuEndinit(passwd);
80004d82:	1d 00 8d 12 	j 8000729c <IfxScuWdt_setCpuEndinit>

80004d86 <IfxAsclin_setClockSource>:
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004d86:	19 4f 0c 10 	ld.w %d15,[%a4]76
80004d8a:	37 4f 05 f0 	insert %d15,%d15,%d4,0,5
80004d8e:	59 4f 0c 10 	st.w [%a4]76,%d15

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
80004d92:	f6 46       	jnz %d4,80004d9e <IfxAsclin_setClockSource+0x18>
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004d94:	19 4f 0c 10 	ld.w %d15,[%a4]76
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004d98:	bf 0f fe 7f 	jlt %d15,0,80004d94 <IfxAsclin_setClockSource+0xe>
80004d9c:	00 90       	ret 
80004d9e:	19 4f 0c 10 	ld.w %d15,[%a4]76
        {}
    }
    else
    {
        while (IfxAsclin_getClockStatus(asclin) != 1U)
80004da2:	ff 0f fe 7f 	jge %d15,0,80004d9e <IfxAsclin_setClockSource+0x18>
80004da6:	00 90       	ret 

80004da8 <IfxAsclin_setBaudrateBitFields>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004da8:	19 4f 0c 10 	ld.w %d15,[%a4]76
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004dac:	19 42 0c 10 	ld.w %d2,[%a4]76
80004db0:	16 1f       	and %d15,31
80004db2:	8f f2 c1 21 	andn %d2,%d2,31
80004db6:	59 42 0c 10 	st.w [%a4]76,%d2
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004dba:	19 42 0c 10 	ld.w %d2,[%a4]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004dbe:	bf 02 fe 7f 	jlt %d2,0,80004dba <IfxAsclin_setBaudrateBitFields+0x12>
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
80004dc2:	19 42 14 00 	ld.w %d2,[%a4]20
80004dc6:	c2 f4       	add %d4,-1
80004dc8:	37 42 0c 40 	insert %d4,%d2,%d4,0,12
80004dcc:	59 44 14 00 	st.w [%a4]20,%d4
}


IFX_INLINE void IfxAsclin_setNumerator(Ifx_ASCLIN *asclin, uint16 numerator)
{
    asclin->BRG.B.NUMERATOR = numerator;
80004dd0:	19 42 20 00 	ld.w %d2,[%a4]32
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);                             /* turns off the clock for settings */
    IfxAsclin_setPrescaler(asclin, prescaler);                                                   /* sets the prescaler*/
    IfxAsclin_setNumerator(asclin, numerator);                                                   /* sets the numerator*/
    IfxAsclin_setDenominator(asclin, denominator);                                               /* sets the denominator*/
    IfxAsclin_setOversampling(asclin, oversampling);                                             /* sets the oversampling*/
    IfxAsclin_setClockSource(asclin, clockSource);                                               /* sets the clock source back on*/
80004dd4:	02 f4       	mov %d4,%d15
80004dd6:	37 52 0c 58 	insert %d5,%d2,%d5,16,12
80004dda:	59 45 20 00 	st.w [%a4]32,%d5
}


IFX_INLINE void IfxAsclin_setDenominator(Ifx_ASCLIN *asclin, uint16 denominator)
{
    asclin->BRG.B.DENOMINATOR = denominator;
80004dde:	19 42 20 00 	ld.w %d2,[%a4]32
80004de2:	37 62 0c 60 	insert %d6,%d2,%d6,0,12
80004de6:	59 46 20 00 	st.w [%a4]32,%d6
}


IFX_INLINE void IfxAsclin_setOversampling(Ifx_ASCLIN *asclin, IfxAsclin_OversamplingFactor ovsFactor)
{
    asclin->BITCON.B.OVERSAMPLING = ovsFactor;
80004dea:	19 42 14 00 	ld.w %d2,[%a4]20
80004dee:	37 72 04 78 	insert %d7,%d2,%d7,16,4
80004df2:	59 47 14 00 	st.w [%a4]20,%d7
80004df6:	1d ff c8 ff 	j 80004d86 <IfxAsclin_setClockSource>

80004dfa <IfxAsclin_setBitTiming>:
}


IFX_INLINE uint8 IfxAsclin_getClockSource(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CLKSEL;
80004dfa:	19 42 0c 10 	ld.w %d2,[%a4]76
}


boolean IfxAsclin_setBitTiming(Ifx_ASCLIN *asclin, float32 baudrate, IfxAsclin_OversamplingFactor oversampling, IfxAsclin_SamplePointPosition samplepoint, IfxAsclin_SamplesPerBit medianFilter)
{
80004dfe:	20 08       	sub.a %sp,8
80004e00:	8f f2 01 21 	and %d2,%d2,31
80004e04:	02 5f       	mov %d15,%d5
80004e06:	40 4f       	mov.aa %a15,%a4
80004e08:	02 48       	mov %d8,%d4
80004e0a:	02 6a       	mov %d10,%d6
80004e0c:	60 7d       	mov.a %a13,%d7
80004e0e:	60 2c       	mov.a %a12,%d2
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004e10:	6d ff 33 ff 	call 80004c76 <IfxAsclin_getPdFrequency>
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004e14:	92 15       	add %d5,%d15,1
    float32               fOvs;
    uint32                d      = 0, n, dBest = 1, nBest = 1;
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
80004e16:	02 29       	mov %d9,%d2
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80004e18:	82 4f       	mov %d15,4
80004e1a:	0b f5 b0 f1 	max.u %d15,%d5,%d15
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
80004e1e:	8f ff 0f 21 	and %d2,%d15,255
80004e22:	59 a2 04 00 	st.w [%sp]4,%d2
80004e26:	82 16       	mov %d6,1
80004e28:	0b 6a b0 61 	max.u %d6,%d10,%d6
80004e2c:	16 ff       	and %d15,255
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
80004e2e:	4b 0f 41 31 	itof %d3,%d15
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004e32:	8f f6 0f 61 	and %d6,%d6,255
    fOvs         = baudrate * oversampling;
80004e36:	4b 38 41 f0 	mul.f %d15,%d8,%d3
    float32               f;

    /* Set the PD frequency */
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
80004e3a:	60 6e       	mov.a %a14,%d6
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004e3c:	02 f4       	mov %d4,%d15
80004e3e:	6d 00 c5 28 	call 80009fc8 <__extendsfdf2>
80004e42:	7b 00 f5 73 	movh %d7,16208
80004e46:	0b 23 10 48 	mov %e4,%d3,%d2
80004e4a:	7b 20 2f 6d 	movh %d6,54002
80004e4e:	1b d7 24 76 	addi %d7,%d7,25165
80004e52:	1b c6 9f 6a 	addi %d6,%d6,-22020
80004e56:	6d 00 dc 29 	call 8000a20e <__muldf3>
80004e5a:	0b 23 10 48 	mov %e4,%d3,%d2
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
    nBest          = n;
80004e5e:	82 1c       	mov %d12,1
    float32               fpd = IfxAsclin_getPdFrequency(asclin);
    oversampling = (IfxAsclin_OversamplingFactor)__maxu((oversampling + 1), 4);
    samplepoint  = (IfxAsclin_SamplePointPosition)__maxu(samplepoint, 1);
    fOvs         = baudrate * oversampling;
    float32               relError   = fOvs;
    float32               limit      = 0.001 * fOvs;                     // save the error limit
80004e60:	6d 00 68 2b 	call 8000a530 <__truncdfsf2>

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80004e64:	4b f9 51 50 	div.f %d5,%d9,%d15
80004e68:	91 00 00 20 	movh.a %a2,0

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
    relError       = __absf(fOvs - f);
80004e6c:	82 01       	mov %d1,0

    boolean               terminated = FALSE;
    float32               newRelError;                                   //modified by Hassan
    uint32                adder_facL, adder_facH, adder_facL_min, count; //modified by Hassan

    d = (uint32)(fpd / fOvs);
80004e6e:	4b 05 71 51 	ftouz %d5,%d5
    }

    dBest          = d;
    nBest          = n;
    adder_facL_min = 0;
    f              = (fpd * n) / d;
80004e72:	4b 05 61 31 	utof %d3,%d5
80004e76:	4b 39 51 30 	div.f %d3,%d9,%d3
    relError       = __absf(fOvs - f);
80004e7a:	6b 03 31 3f 	sub.f %d3,%d15,%d3
80004e7e:	4b 13 01 00 	cmp.f %d0,%d3,%d1
80004e82:	37 00 61 00 	extr.u %d0,%d0,0,1
80004e86:	9b 03 00 48 	addih %d4,%d3,32768
80004e8a:	2b 34 40 30 	sel %d3,%d0,%d4,%d3
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80004e8e:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80004e92:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
80004e96:	df 00 45 80 	jne %d0,0,80004f20 <IfxAsclin_setBitTiming+0x126>
80004e9a:	8f 15 00 60 	sh %d6,%d5,1
            /* Increase the value of the oversampling to generate the required baudrate */
            IFX_ASSERT(IFX_VERBOSE_LEVEL_WARNING, FALSE);
        }
    }

    dBest          = d;
80004e9e:	02 51       	mov %d1,%d5
    nBest          = n;
    adder_facL_min = 0;
80004ea0:	82 0e       	mov %d14,0
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80004ea2:	82 28       	mov %d8,2
80004ea4:	3b 00 00 71 	mov %d7,4096
80004ea8:	7f 76 3b 80 	jge.u %d6,%d7,80004f1e <IfxAsclin_setBitTiming+0x124>
    {
        if (n == 2)
        {
            adder_facL = 1;
            adder_facH = 1;
80004eac:	a0 13       	mov.a %a3,1

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
        {
            adder_facL = 1;
80004eae:	82 1b       	mov %d11,1
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
    {
        if (n == 2)
80004eb0:	df 28 09 00 	jeq %d8,2,80004ec2 <IfxAsclin_setBitTiming+0xc8>
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
80004eb4:	73 8e 0a a0 	mul %d10,%d14,%d8
80004eb8:	4b ca 11 a2 	div.u %e10,%d10,%d12
            adder_facH = adder_facL + 1;
80004ebc:	60 a3       	mov.a %a3,%d10
            adder_facL = 1;
            adder_facH = 1;
        }
        else
        {
            adder_facL = (adder_facL_min * n) / nBest;
80004ebe:	02 ab       	mov %d11,%d10
            adder_facH = adder_facL + 1;
80004ec0:	b0 13       	add.a %a3,1
        }

        for (count = adder_facL; count <= adder_facH; count++)
80004ec2:	80 34       	mov.d %d4,%a3
80004ec4:	3f b4 25 80 	jlt.u %d4,%d11,80004f0e <IfxAsclin_setBitTiming+0x114>
        {
            f           = (fpd * n) / (n * d + count);
80004ec8:	4b 08 61 01 	utof %d0,%d8
80004ecc:	0b 6b 00 40 	add %d4,%d11,%d6
80004ed0:	4b 04 61 d1 	utof %d13,%d4
80004ed4:	4b 09 41 00 	mul.f %d0,%d9,%d0
            newRelError = __absf(fOvs - f);
80004ed8:	80 2a       	mov.d %d10,%a2
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
        {
            f           = (fpd * n) / (n * d + count);
80004eda:	4b d0 51 00 	div.f %d0,%d0,%d13
            newRelError = __absf(fOvs - f);
80004ede:	6b 00 31 0f 	sub.f %d0,%d15,%d0
80004ee2:	4b a0 01 d0 	cmp.f %d13,%d0,%d10
80004ee6:	37 0d 61 d0 	extr.u %d13,%d13,0,1
80004eea:	9b 00 00 a8 	addih %d10,%d0,32768
80004eee:	2b 0a 40 0d 	sel %d0,%d13,%d10,%d0

            if (relError > (newRelError))
80004ef2:	4b 03 01 d0 	cmp.f %d13,%d3,%d0
80004ef6:	37 0d 61 d1 	extr.u %d13,%d13,2,1
80004efa:	2b be 50 ed 	seln %d14,%d13,%d14,%d11
80004efe:	2b 03 50 3d 	seln %d3,%d13,%d3,%d0
80004f02:	2b 8c 50 cd 	seln %d12,%d13,%d12,%d8
80004f06:	2b 41 50 1d 	seln %d1,%d13,%d1,%d4
        {
            adder_facL = (adder_facL_min * n) / nBest;
            adder_facH = adder_facL + 1;
        }

        for (count = adder_facL; count <= adder_facH; count++)
80004f0a:	c2 1b       	add %d11,1
80004f0c:	3c db       	j 80004ec2 <IfxAsclin_setBitTiming+0xc8>
                dBest          = (n * d + count);
                adder_facL_min = count;
            }
        }

        if (relError <= limit)
80004f0e:	4b 23 01 00 	cmp.f %d0,%d3,%d2
80004f12:	87 00 a0 00 	or.t %d0,%d0,0,%d0,1
80004f16:	f6 04       	jnz %d0,80004f1e <IfxAsclin_setBitTiming+0x124>
    if (relError <= limit)
    {
        terminated = TRUE;
    }

    for (n = 2; ((!terminated) && ((n * d) <= 0xFFF)); n++)
80004f18:	c2 18       	add %d8,1
80004f1a:	42 56       	add %d6,%d5
80004f1c:	3c c6       	j 80004ea8 <IfxAsclin_setBitTiming+0xae>
80004f1e:	02 15       	mov %d5,%d1
}


void IfxAsclin_setClockSource(Ifx_ASCLIN *asclin, IfxAsclin_ClockSource clockSource)
{
    asclin->CSR.B.CLKSEL = clockSource; /* selects the given clock source*/
80004f20:	19 f3 0c 10 	ld.w %d3,[%a15]76
80004f24:	8f f3 c1 31 	andn %d3,%d3,31
80004f28:	59 f3 0c 10 	st.w [%a15]76,%d3
}


IFX_INLINE boolean IfxAsclin_getClockStatus(Ifx_ASCLIN *asclin)
{
    return asclin->CSR.B.CON;
80004f2c:	19 ff 0c 10 	ld.w %d15,[%a15]76

    /* Waits TW or polls for CSR.CON to change */
    if (clockSource == IfxAsclin_ClockSource_noClock)
    {
        while (IfxAsclin_getClockStatus(asclin) != 0U)
80004f30:	bf 0f fe 7f 	jlt %d15,0,80004f2c <IfxAsclin_setBitTiming+0x132>
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
80004f34:	4c f8       	ld.w %d15,[%a15]32
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80004f36:	19 a2 04 00 	ld.w %d2,[%sp]4
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
80004f3a:	37 5f 0c 50 	insert %d5,%d15,%d5,0,12
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80004f3e:	c2 f2       	add %d2,-1
            break;
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
80004f40:	68 85       	st.w [%a15]32,%d5
    asclin->BRG.B.NUMERATOR   = nBest;
80004f42:	4c f8       	ld.w %d15,[%a15]32

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80004f44:	80 ea       	mov.d %d10,%a14
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
80004f46:	37 cf 0c c8 	insert %d12,%d15,%d12,16,12
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
80004f4a:	80 c4       	mov.d %d4,%a12
        }
    }

    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;
80004f4c:	68 8c       	st.w [%a15]32,%d12

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80004f4e:	4c f5       	ld.w %d15,[%a15]20
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;

    IfxAsclin_setClockSource(asclin, source);
80004f50:	40 f4       	mov.aa %a4,%a15
    IfxAsclin_setClockSource(asclin, IfxAsclin_ClockSource_noClock);
    asclin->BRG.B.DENOMINATOR = dBest;
    asclin->BRG.B.NUMERATOR   = nBest;

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;
80004f52:	37 2f 04 28 	insert %d2,%d15,%d2,16,4
80004f56:	68 52       	st.w [%a15]20,%d2

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80004f58:	4c f5       	ld.w %d15,[%a15]20

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
80004f5a:	80 d2       	mov.d %d2,%a13

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80004f5c:	37 af 04 6c 	insert %d6,%d15,%d10,24,4

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
80004f60:	7b 00 00 f8 	movh %d15,32768

    /* Set the SHIFT frequency */
    asclin->BITCON.B.OVERSAMPLING = oversampling - 1;

    /* Set the sampling point */
    asclin->BITCON.B.SAMPLEPOINT = samplepoint;
80004f64:	68 56       	st.w [%a15]20,%d6

    /* Set the median filter */
    asclin->BITCON.B.SM = medianFilter ? 1 : 0;
80004f66:	ab 0f 80 72 	sel %d7,%d2,%d15,0
80004f6a:	4c f5       	ld.w %d15,[%a15]20
80004f6c:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
80004f70:	a6 7f       	or %d15,%d7
80004f72:	68 5f       	st.w [%a15]20,%d15

    IfxAsclin_setClockSource(asclin, source);
80004f74:	6d ff 09 ff 	call 80004d86 <IfxAsclin_setClockSource>

    return TRUE;
}
80004f78:	82 12       	mov %d2,1
80004f7a:	00 90       	ret 

80004f7c <IfxAsclin_write16>:
    }
}


uint32 IfxAsclin_write16(Ifx_ASCLIN *asclin, uint16 *data, uint32 count)
{
80004f7c:	9f 04 04 80 	jned %d4,0,80004f84 <IfxAsclin_write16+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
80004f80:	82 02       	mov %d2,0
80004f82:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
80004f84:	b9 5f 00 00 	ld.hu %d15,[%a5]0
80004f88:	b0 25       	add.a %a5,2
80004f8a:	59 4f 04 10 	st.w [%a4]68,%d15
80004f8e:	3c f7       	j 80004f7c <IfxAsclin_write16>

80004f90 <IfxAsclin_write32>:
    return count;
}


uint32 IfxAsclin_write32(Ifx_ASCLIN *asclin, uint32 *data, uint32 count)
{
80004f90:	9f 04 04 80 	jned %d4,0,80004f98 <IfxAsclin_write32+0x8>
        txData->U = *data++;
        count--;
    }

    return count;
}
80004f94:	82 02       	mov %d2,0
80004f96:	00 90       	ret 
{
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {
        txData->U = *data++;
80004f98:	4c 50       	ld.w %d15,[%a5]0
80004f9a:	b0 45       	add.a %a5,4
80004f9c:	59 4f 04 10 	st.w [%a4]68,%d15
80004fa0:	3c f8       	j 80004f90 <IfxAsclin_write32>

80004fa2 <IfxAsclin_write8>:
    return count;
}

#include <stdio.h>
uint32 IfxAsclin_write8(Ifx_ASCLIN *asclin, uint8 *data, uint32 count)
{
80004fa2:	9f 04 04 80 	jned %d4,0,80004faa <IfxAsclin_write8+0x8>
        count--;

    }

    return count;
}
80004fa6:	82 02       	mov %d2,0
80004fa8:	00 90       	ret 
    volatile Ifx_ASCLIN_TXDATA *txData = (volatile Ifx_ASCLIN_TXDATA *)&asclin->TXDATA.U;

    while ((count > 0))
    {

        txData->U = *data++;
80004faa:	0c 50       	ld.bu %d15,[%a5]0
80004fac:	b0 15       	add.a %a5,1
80004fae:	59 4f 04 10 	st.w [%a4]68,%d15
80004fb2:	3c f8       	j 80004fa2 <IfxAsclin_write8>

80004fb4 <IfxAsclin_Asc_getReadCount>:
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
80004fb4:	cc 42       	ld.a %a15,[%a4]8


sint32 IfxAsclin_Asc_getReadCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_readCount(asclin->rx);
}
80004fb6:	88 22       	ld.h %d2,[%a15]4
80004fb8:	00 90       	ret 

80004fba <IfxAsclin_Asc_getReadEvent>:


IfxStdIf_DPipe_ReadEvent IfxAsclin_Asc_getReadEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->rx->eventWriter;
80004fba:	99 42 08 00 	ld.a %a2,[%a4]8
}
80004fbe:	d9 22 1d 00 	lea %a2,[%a2]29
80004fc2:	00 90       	ret 

80004fc4 <IfxAsclin_Asc_getSendCount>:


uint32 IfxAsclin_Asc_getSendCount(IfxAsclin_Asc *asclin)
{
    return asclin->sendCount;
80004fc4:	19 42 10 00 	ld.w %d2,[%a4]16
}
80004fc8:	00 90       	ret 

80004fca <IfxAsclin_Asc_getTxTimeStamp>:


Ifx_TickTime IfxAsclin_Asc_getTxTimeStamp(IfxAsclin_Asc *asclin)
{
    return asclin->txTimestamp;
80004fca:	09 42 54 09 	ld.d %e2,[%a4]20
}
80004fce:	00 90       	ret 

80004fd0 <IfxAsclin_Asc_getWriteCount>:


sint32 IfxAsclin_Asc_getWriteCount(IfxAsclin_Asc *asclin)
{
    return Ifx_Fifo_writeCount(asclin->tx);
80004fd0:	cc 41       	ld.a %a15,[%a4]4
 *
 * \return Returns the free size in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_writeCount(Ifx_Fifo *fifo)
{
    return (Ifx_SizeT)(fifo->size - Ifx_Fifo_readCount(fifo));
80004fd2:	88 c2       	ld.h %d2,[%a15]24
80004fd4:	8c f2       	ld.h %d15,[%a15]4
80004fd6:	a2 f2       	sub %d2,%d15
}
80004fd8:	37 02 50 20 	extr %d2,%d2,0,16
80004fdc:	00 90       	ret 

80004fde <IfxAsclin_Asc_getWriteEvent>:


IfxStdIf_DPipe_WriteEvent IfxAsclin_Asc_getWriteEvent(IfxAsclin_Asc *asclin)
{
    return &asclin->tx->eventWriter;
80004fde:	99 42 04 00 	ld.a %a2,[%a4]4
}
80004fe2:	d9 22 1d 00 	lea %a2,[%a2]29
80004fe6:	00 90       	ret 

80004fe8 <IfxAsclin_Asc_isrError>:
}


void IfxAsclin_Asc_isrError(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin; /* getting the pointer to ASCLIN registers from module handler*/
80004fe8:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE boolean IfxAsclin_getParityErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.PE;
80004fea:	4c fd       	ld.w %d15,[%a15]52

    /* store all the flags in the variable */
    if (IfxAsclin_getParityErrorFlagStatus(asclinSFR))
80004fec:	ef 0f 0a 00 	jz.t %d15,16,80005000 <IfxAsclin_Asc_isrError+0x18>
}


IFX_INLINE void IfxAsclin_clearParityErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.PEC = 1;
80004ff0:	4c ff       	ld.w %d15,[%a15]60
80004ff2:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
80004ff6:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearParityErrorFlag(asclinSFR);
        asclin->errorFlags.flags.parityError = 1;
80004ff8:	0c 4e       	ld.bu %d15,[%a4]14
80004ffa:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
80004ffe:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getFrameErrorFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.FE;
80005000:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getFrameErrorFlagStatus(asclinSFR))
80005002:	ef 2f 0a 00 	jz.t %d15,18,80005016 <IfxAsclin_Asc_isrError+0x2e>
}


IFX_INLINE void IfxAsclin_clearFrameErrorFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.FEC = 1;
80005006:	4c ff       	ld.w %d15,[%a15]60
80005008:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
8000500c:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearFrameErrorFlag(asclinSFR);
        asclin->errorFlags.flags.frameError = 1;
8000500e:	0c 4e       	ld.bu %d15,[%a4]14
80005010:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
80005014:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFO;
80005016:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoOverflowFlagStatus(asclinSFR))
80005018:	ef af 0a 00 	jz.t %d15,26,8000502c <IfxAsclin_Asc_isrError+0x44>
}


IFX_INLINE void IfxAsclin_clearRxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFOC = 1;
8000501c:	4c ff       	ld.w %d15,[%a15]60
8000501e:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80005022:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoOverflow = 1;
80005024:	0c 4e       	ld.bu %d15,[%a4]14
80005026:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
8000502a:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getRxFifoUnderflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.RFU;
8000502c:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getRxFifoUnderflowFlagStatus(asclinSFR))
8000502e:	ef bf 0a 00 	jz.t %d15,27,80005042 <IfxAsclin_Asc_isrError+0x5a>
}


IFX_INLINE void IfxAsclin_clearRxFifoUnderflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.RFUC = 1;
80005032:	4c ff       	ld.w %d15,[%a15]60
80005034:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80005038:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearRxFifoUnderflowFlag(asclinSFR);
        asclin->errorFlags.flags.rxFifoUnderflow = 1;
8000503a:	0c 4e       	ld.bu %d15,[%a4]14
8000503c:	b7 1f 81 f1 	insert %d15,%d15,1,3,1
80005040:	2c 4e       	st.b [%a4]14,%d15
}


IFX_INLINE boolean IfxAsclin_getTxFifoOverflowFlagStatus(Ifx_ASCLIN *asclin)
{
    return asclin->FLAGS.B.TFO;
80005042:	4c fd       	ld.w %d15,[%a15]52
    }

    if (IfxAsclin_getTxFifoOverflowFlagStatus(asclinSFR))
80005044:	ef ef 0a 00 	jz.t %d15,30,80005058 <IfxAsclin_Asc_isrError+0x70>
}


IFX_INLINE void IfxAsclin_clearTxFifoOverflowFlag(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.B.TFOC = 1;
80005048:	4c ff       	ld.w %d15,[%a15]60
8000504a:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000504e:	68 ff       	st.w [%a15]60,%d15
    {
        IfxAsclin_clearTxFifoOverflowFlag(asclinSFR);
        asclin->errorFlags.flags.txFifoOverflow = 1;
80005050:	0c 4e       	ld.bu %d15,[%a4]14
80005052:	b7 1f 01 f2 	insert %d15,%d15,1,4,1
80005056:	2c 4e       	st.b [%a4]14,%d15
80005058:	00 90       	ret 

8000505a <IfxAsclin_Asc_resetSendCount>:
}


void IfxAsclin_Asc_resetSendCount(IfxAsclin_Asc *asclin)
{
    asclin->sendCount = 0;
8000505a:	82 0f       	mov %d15,0
8000505c:	6c 44       	st.w [%a4]16,%d15
8000505e:	00 90       	ret 

80005060 <IfxAsclin_Asc_canReadCount>:
}


boolean IfxAsclin_Asc_canReadCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canReadCount(asclin->rx, count, timeout);
80005060:	99 44 08 00 	ld.a %a4,[%a4]8
80005064:	1d 00 df 18 	j 80008222 <Ifx_Fifo_canReadCount>

80005068 <IfxAsclin_Asc_flushTx>:

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80005068:	82 f2       	mov %d2,-1
8000506a:	06 f2       	sh %d2,-1
8000506c:	ba f4       	eq %d15,%d4,-1
8000506e:	0b 52 00 f2 	and.eq %d15,%d2,%d5
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
}


boolean IfxAsclin_Asc_flushTx(IfxAsclin_Asc *asclin, Ifx_TickTime timeout)
{
80005072:	40 4f       	mov.aa %a15,%a4
80005074:	02 46       	mov %d6,%d4
    {
        deadLine = TIME_INFINITE;
80005076:	82 f9       	mov %d9,-1
80005078:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000507a:	ee 16       	jnz %d15,800050a6 <IfxAsclin_Asc_flushTx+0x3e>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000507c:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80005080:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80005084:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
80005088:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000508a:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000508e:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80005092:	02 39       	mov %d9,%d3
80005094:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80005098:	76 23       	jz %d2,8000509e <IfxAsclin_Asc_flushTx+0x36>
    {
        __enable();
8000509a:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
8000509e:	0b 69 40 90 	addx %d9,%d9,%d6
800050a2:	0b 58 50 80 	addc %d8,%d8,%d5
 *
 * \return TRUE if the buffer is emptied.
 */
IFX_INLINE boolean Ifx_Fifo_flush(Ifx_Fifo *fifo, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(fifo, fifo->size, timeout);
800050a6:	c8 14       	ld.a %a4,[%a15]4
800050a8:	02 57       	mov %d7,%d5
800050aa:	c9 44 18 00 	ld.h %d4,[%a4]24
800050ae:	6d 00 fd 19 	call 800084a8 <Ifx_Fifo_canWriteCount>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800050b2:	82 f4       	mov %d4,-1
800050b4:	06 f4       	sh %d4,-1
    boolean      result;

    /* Flush the software FIFO */
    result = Ifx_Fifo_flush(asclin->tx, timeout);

    if (result)
800050b6:	f6 23       	jnz %d2,800050bc <IfxAsclin_Asc_flushTx+0x54>
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
    {
        deadLine = TIME_INFINITE;
800050b8:	82 02       	mov %d2,0
800050ba:	00 90       	ret 
    {
        /* Flush the hardware FIFO (wait until all bytes have been transmitted) */
        do
        {
            result = IfxAsclin_getTxFifoFillLevel(asclin->asclin) == 0;
800050bc:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
800050be:	4c 23       	ld.w %d15,[%a2]12
800050c0:	37 0f 65 f8 	extr.u %d15,%d15,16,5
        } while (!result && !IfxStm_isDeadLine(deadline));
800050c4:	6e 1e       	jz %d15,80005100 <IfxAsclin_Asc_flushTx+0x98>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800050c6:	ba f9       	eq %d15,%d9,-1
800050c8:	0b 84 00 f2 	and.eq %d15,%d4,%d8
800050cc:	ee f9       	jnz %d15,800050be <IfxAsclin_Asc_flushTx+0x56>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800050ce:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800050d2:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800050d6:	0d 00 40 03 	disable 
800050da:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800050dc:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800050e0:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800050e4:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800050e8:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800050ec:	76 23       	jz %d2,800050f2 <IfxAsclin_Asc_flushTx+0x8a>
    {
        __enable();
800050ee:	0d 00 00 03 	enable 
800050f2:	0b 8f 00 21 	eq %d2,%d15,%d8
800050f6:	0b 93 30 22 	and.lt.u %d2,%d3,%d9
800050fa:	0b 8f 90 22 	or.lt %d2,%d15,%d8
800050fe:	3c dc       	j 800050b6 <IfxAsclin_Asc_flushTx+0x4e>
80005100:	82 12       	mov %d2,1
    }

    return result;
}
80005102:	00 90       	ret 

80005104 <IfxAsclin_Asc_canWriteCount>:
}


boolean IfxAsclin_Asc_canWriteCount(IfxAsclin_Asc *asclin, Ifx_SizeT count, Ifx_TickTime timeout)
{
    return Ifx_Fifo_canWriteCount(asclin->tx, count, timeout);
80005104:	99 44 04 00 	ld.a %a4,[%a4]4
80005108:	1d 00 d0 19 	j 800084a8 <Ifx_Fifo_canWriteCount>

8000510c <IfxAsclin_Asc_clearRx>:
}


void IfxAsclin_Asc_clearRx(IfxAsclin_Asc *asclin)
{
    IfxAsclin_flushRxFifo(asclin->asclin);
8000510c:	cc 40       	ld.a %a15,[%a4]0
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
8000510e:	4c f4       	ld.w %d15,[%a15]16
80005110:	96 01       	or %d15,1
80005112:	68 4f       	st.w [%a15]16,%d15
    Ifx_Fifo_clear(asclin->rx);
80005114:	99 44 08 00 	ld.a %a4,[%a4]8
80005118:	1d 00 ad 19 	j 80008472 <Ifx_Fifo_clear>

8000511c <IfxAsclin_Asc_clearTx>:
}


void IfxAsclin_Asc_clearTx(IfxAsclin_Asc *asclin)
{
8000511c:	40 4f       	mov.aa %a15,%a4
    Ifx_Fifo_clear(asclin->tx);
8000511e:	99 44 04 00 	ld.a %a4,[%a4]4
80005122:	6d 00 a8 19 	call 80008472 <Ifx_Fifo_clear>
    IfxAsclin_flushTxFifo(asclin->asclin);
80005126:	c8 0f       	ld.a %a15,[%a15]0
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
80005128:	4c f3       	ld.w %d15,[%a15]12
8000512a:	96 01       	or %d15,1
8000512c:	68 3f       	st.w [%a15]12,%d15
8000512e:	00 90       	ret 

80005130 <IfxAsclin_Asc_read>:
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
80005130:	99 44 08 00 	ld.a %a4,[%a4]8
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
80005134:	0b 45 10 68 	mov %e6,%d5,%d4
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
80005138:	94 64       	ld.h %d4,[%a6]
    }
}


boolean IfxAsclin_Asc_read(IfxAsclin_Asc *asclin, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
8000513a:	40 6f       	mov.aa %a15,%a6
    Ifx_SizeT left = Ifx_Fifo_read(asclin->rx, data, *count, timeout);
8000513c:	6d 00 e0 18 	call 800082fc <Ifx_Fifo_read>

    *count -= left;
80005140:	8c f0       	ld.h %d15,[%a15]0
80005142:	a2 2f       	sub %d15,%d2
80005144:	a8 0f       	st.h [%a15]0,%d15

    return left == 0;
}
80005146:	8b 02 00 22 	eq %d2,%d2,0
8000514a:	00 90       	ret 

8000514c <IfxAsclin_Asc_isrTransmit>:
    }
}

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
8000514c:	20 18       	sub.a %sp,24
8000514e:	40 4f       	mov.aa %a15,%a4
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80005150:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
80005154:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80005158:	0d 00 40 03 	disable 
8000515c:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000515e:	85 f5 10 00 	ld.w %d5,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005162:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80005166:	02 52       	mov %d2,%d5
80005168:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000516c:	76 43       	jz %d4,80005172 <IfxAsclin_Asc_isrTransmit+0x26>
    {
        __enable();
8000516e:	0d 00 00 03 	enable 
    asclin->txTimestamp = IfxStm_now();
80005172:	89 f2 54 09 	st.d [%a15]20,%e2
    asclin->sendCount++;

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80005176:	c8 14       	ld.a %a4,[%a15]4

#include <stdio.h>
void IfxAsclin_Asc_isrTransmit(IfxAsclin_Asc *asclin)
{
    asclin->txTimestamp = IfxStm_now();
    asclin->sendCount++;
80005178:	4c f4       	ld.w %d15,[%a15]16
 *
 * \return Returns the size of the data in the buffer in bytes
 */
IFX_INLINE Ifx_SizeT Ifx_Fifo_readCount(Ifx_Fifo *fifo)
{
    return fifo->shared.count;
8000517a:	c9 44 04 00 	ld.h %d4,[%a4]4
8000517e:	c2 1f       	add %d15,1
80005180:	68 4f       	st.w [%a15]16,%d15

    if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80005182:	df 04 32 00 	jeq %d4,0,800051e6 <IfxAsclin_Asc_isrTransmit+0x9a>
    {

        switch (asclin->dataBufferMode)
80005186:	0c ff       	ld.bu %d15,[%a15]15
80005188:	6e 03       	jz %d15,8000518e <IfxAsclin_Asc_isrTransmit+0x42>
8000518a:	9e 1d       	jeq %d15,1,800051c4 <IfxAsclin_Asc_isrTransmit+0x78>
8000518c:	00 90       	ret 
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
8000518e:	c8 02       	ld.a %a2,[%a15]0
        case Ifx_DataBufferMode_normal:
        {

            uint8          ascData[16];
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;
80005190:	2c a7       	st.b [%sp]7,%d15

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/
80005192:	37 04 70 40 	extr.u %d4,%d4,0,16
}


IFX_INLINE uint8 IfxAsclin_getTxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->TXFIFOCON.B.FILL;
80005196:	4c 23       	ld.w %d15,[%a2]12
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
80005198:	d2 06       	mov %e6,0
8000519a:	37 0f 65 f8 	extr.u %d15,%d15,16,5
8000519e:	d9 a5 08 00 	lea %a5,[%sp]8
            uint16         count            = 0, i_count = 0;
            volatile uint8 hw_tx_fill_level = 0;

            count            = Ifx_Fifo_readCount(asclin->tx); /*SW FIFO fill level*/

            hw_tx_fill_level = IfxAsclin_getTxFifoFillLevel(asclin->asclin);
800051a2:	2c a7       	st.b [%sp]7,%d15

            i_count          = (16 - hw_tx_fill_level);
800051a4:	0c a7       	ld.bu %d15,[%sp]7
800051a6:	8b 0f 01 f1 	rsub %d15,%d15,16
800051aa:	37 0f 70 f0 	extr.u %d15,%d15,0,16
800051ae:	0b 4f 90 f1 	min.u %d15,%d15,%d4
            if (i_count > count)
            {
                i_count = count;
            }

            Ifx_Fifo_read(asclin->tx, &ascData[0], i_count, TIME_NULL);
800051b2:	37 0f 50 40 	extr %d4,%d15,0,16
800051b6:	6d 00 a3 18 	call 800082fc <Ifx_Fifo_read>
            IfxAsclin_write8(asclin->asclin, &ascData[0], i_count);
800051ba:	c8 04       	ld.a %a4,[%a15]0
800051bc:	d9 a5 08 00 	lea %a5,[%sp]8
800051c0:	02 f4       	mov %d4,%d15
800051c2:	3c 10       	j 800051e2 <IfxAsclin_Asc_isrTransmit+0x96>
        {

            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
800051c4:	d2 06       	mov %e6,0
800051c6:	d9 a5 08 00 	lea %a5,[%sp]8
800051ca:	3b c0 00 40 	mov %d4,12
800051ce:	6d 00 97 18 	call 800082fc <Ifx_Fifo_read>

            ascData = packedData.data;
800051d2:	39 af 10 00 	ld.bu %d15,[%sp]16
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
800051d6:	c8 04       	ld.a %a4,[%a15]0
            Ifx_DataBufferMode_TimeStampSingle packedData;
            uint8                              ascData;

            Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);

            ascData = packedData.data;
800051d8:	d9 a5 18 00 	lea %a5,[%sp]24
800051dc:	89 5f 2f f4 	st.b [+%a5]-17,%d15
            IfxAsclin_write8(asclin->asclin, &ascData, 1);
800051e0:	82 14       	mov %d4,1
        }
        break;
800051e2:	1d ff e0 fe 	j 80004fa2 <IfxAsclin_write8>
    }
    else
    {

        /* Transmit buffer is empty */
        asclin->txInProgress = FALSE;
800051e6:	28 c4       	st.b [%a15]12,%d4
800051e8:	00 90       	ret 

800051ea <IfxAsclin_Asc_isrReceive>:

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
800051ea:	0c 4f       	ld.bu %d15,[%a4]15
    }
}


void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
800051ec:	20 20       	sub.a %sp,32
800051ee:	40 4f       	mov.aa %a15,%a4
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
800051f0:	6e 34       	jz %d15,80005258 <IfxAsclin_Asc_isrReceive+0x6e>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
800051f2:	82 18       	mov %d8,1

void IfxAsclin_Asc_isrReceive(IfxAsclin_Asc *asclin)
{
    uint8 ascData[16]; /*FIFO size is 16 bytes*/

    switch (asclin->dataBufferMode)
800051f4:	df 1f 45 80 	jne %d15,1,8000527e <IfxAsclin_Asc_isrReceive+0x94>
    }
    case Ifx_DataBufferMode_timeStampSingle:
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
800051f8:	c8 02       	ld.a %a2,[%a15]0
}


IFX_INLINE uint8 IfxAsclin_getRxFifoFillLevel(Ifx_ASCLIN *asclin)
{
    return asclin->RXFIFOCON.B.FILL;
800051fa:	4c 24       	ld.w %d15,[%a2]16
800051fc:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005200:	6e 2b       	jz %d15,80005256 <IfxAsclin_Asc_isrReceive+0x6c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80005202:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80005206:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000520a:	0d 00 40 03 	disable 
8000520e:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80005210:	85 f2 10 00 	ld.w %d2,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80005214:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80005218:	8f 02 40 21 	or %d2,%d2,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000521c:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80005220:	76 33       	jz %d3,80005226 <IfxAsclin_Asc_isrReceive+0x3c>
    {
        __enable();
80005222:	0d 00 00 03 	enable 
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
80005226:	c8 04       	ld.a %a4,[%a15]0
80005228:	d9 a5 10 00 	lea %a5,[%sp]16
8000522c:	82 14       	mov %d4,1
    {
        Ifx_DataBufferMode_TimeStampSingle packedData;

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
8000522e:	78 02       	st.w [%sp]8,%d15
80005230:	59 a2 04 00 	st.w [%sp]4,%d2
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
80005234:	6d ff 7a fd 	call 80004d28 <IfxAsclin_read8>
            packedData.data      = ascData[0];

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
80005238:	c8 24       	ld.a %a4,[%a15]8

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
8000523a:	39 af 10 00 	ld.bu %d15,[%sp]16

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
8000523e:	d2 06       	mov %e6,0
80005240:	d9 a5 04 00 	lea %a5,[%sp]4
80005244:	3b c0 00 40 	mov %d4,12

        while (IfxAsclin_getRxFifoFillLevel(asclin->asclin) > 0)
        {
            packedData.timestamp = IfxStm_now();
            IfxAsclin_read8(asclin->asclin, &ascData[0], 1);
            packedData.data      = ascData[0];
80005248:	2c ac       	st.b [%sp]12,%d15

            if (Ifx_Fifo_write(asclin->rx, &packedData, sizeof(packedData), TIME_NULL) != 0)
8000524a:	6d 00 a7 19 	call 80008598 <Ifx_Fifo_write>
8000524e:	df 02 d5 7f 	jeq %d2,0,800051f8 <IfxAsclin_Asc_isrReceive+0xe>
            {
                /* Receive buffer is full, data is discard */
                asclin->rxSwFifoOverflow = TRUE;
80005252:	28 d8       	st.b [%a15]13,%d8
80005254:	3c d2       	j 800051f8 <IfxAsclin_Asc_isrReceive+0xe>
80005256:	00 90       	ret 
    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
    {
        uint8 count;
        count = IfxAsclin_getRxFifoFillLevel(asclin->asclin);
80005258:	d4 44       	ld.a %a4,[%a4]
        IfxAsclin_read8(asclin->asclin, &ascData[0], count);
8000525a:	d9 a5 10 00 	lea %a5,[%sp]16
8000525e:	4c 44       	ld.w %d15,[%a4]16
80005260:	37 0f 65 f8 	extr.u %d15,%d15,16,5
80005264:	02 f4       	mov %d4,%d15
80005266:	6d ff 61 fd 	call 80004d28 <IfxAsclin_read8>

        if (Ifx_Fifo_write(asclin->rx, &ascData[0], count, TIME_NULL) != 0)
8000526a:	c8 24       	ld.a %a4,[%a15]8
8000526c:	d2 06       	mov %e6,0
8000526e:	d9 a5 10 00 	lea %a5,[%sp]16
80005272:	02 f4       	mov %d4,%d15
80005274:	6d 00 92 19 	call 80008598 <Ifx_Fifo_write>
80005278:	76 23       	jz %d2,8000527e <IfxAsclin_Asc_isrReceive+0x94>
        {
            /* Receive buffer is full, data is discard */
            asclin->rxSwFifoOverflow = TRUE;
8000527a:	82 1f       	mov %d15,1
8000527c:	28 df       	st.b [%a15]13,%d15
8000527e:	00 90       	ret 

80005280 <IfxAsclin_Asc_blockingRead>:
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
80005280:	20 08       	sub.a %sp,8
    Ifx_SizeT count = 1;
80005282:	82 1f       	mov %d15,1
/******************************************************************************/
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

uint8 IfxAsclin_Asc_blockingRead(IfxAsclin_Asc *asclin)
{
80005284:	40 4f       	mov.aa %a15,%a4
    Ifx_SizeT count = 1;
80005286:	ac a3       	st.h [%sp]6,%d15
    uint8     data;

    while (IfxAsclin_Asc_read(asclin, &data, &count, TIME_INFINITE) != TRUE)
80005288:	82 f4       	mov %d4,-1
8000528a:	40 f4       	mov.aa %a4,%a15
8000528c:	d9 a5 05 00 	lea %a5,[%sp]5
80005290:	d9 a6 06 00 	lea %a6,[%sp]6
80005294:	9b 04 00 58 	addih %d5,%d4,32768
80005298:	6d ff 4c ff 	call 80005130 <IfxAsclin_Asc_read>
8000529c:	df 12 f6 ff 	jne %d2,1,80005288 <IfxAsclin_Asc_blockingRead+0x8>
    {}

    return data;
}
800052a0:	39 a2 05 00 	ld.bu %d2,[%sp]5
800052a4:	00 90       	ret 

800052a6 <IfxAsclin_Asc_disableModule>:
}


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
800052a6:	cc 40       	ld.a %a15,[%a4]0
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
800052a8:	6d 00 c5 0f 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
800052ac:	02 24       	mov %d4,%d2


void IfxAsclin_Asc_disableModule(IfxAsclin_Asc *asclin)
{
    Ifx_ASCLIN *asclinSFR = asclin->asclin;       /* getting the pointer to ASCLIN registers from module handler*/
    uint16      psw       = IfxScuWdt_getCpuWatchdogPassword();
800052ae:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(psw);               /* clearing the endinit protection */
800052b0:	6d 00 c1 0e 	call 80007032 <IfxScuWdt_clearCpuEndinit>
}


IFX_INLINE void IfxAsclin_setDisableModuleRequest(Ifx_ASCLIN *asclin)
{
    asclin->CLC.B.DISR = 1;
800052b4:	48 02       	ld.w %d2,[%a15]0
    IfxAsclin_setDisableModuleRequest(asclinSFR); /* disabling the module */
    IfxScuWdt_setCpuEndinit(psw);                 /* setting the endinit protection back on */
800052b6:	02 f4       	mov %d4,%d15
800052b8:	8f 12 40 21 	or %d2,%d2,1
800052bc:	68 02       	st.w [%a15]0,%d2
800052be:	1d 00 ef 0f 	j 8000729c <IfxScuWdt_setCpuEndinit>

800052c2 <IfxAsclin_Asc_initModule>:
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
800052c2:	cc 50       	ld.a %a15,[%a5]0
    return &asclin->tx->eventWriter;
}


IfxAsclin_Status IfxAsclin_Asc_initModule(IfxAsclin_Asc *asclin, const IfxAsclin_Asc_Config *config)
{
800052c4:	40 4e       	mov.aa %a14,%a4
800052c6:	40 5c       	mov.aa %a12,%a5
    Ifx_ASCLIN      *asclinSFR = config->asclin;                        /* pointer to ASCLIN registers*/
    IfxAsclin_Status status    = IfxAsclin_Status_noError;

    asclin->asclin = asclinSFR;                                         /* adding register pointer to module handler*/
800052c8:	ec 40       	st.a [%a4]0,%a15

    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
800052ca:	40 f4       	mov.aa %a4,%a15
800052cc:	6d ff 71 fc 	call 80004bae <IfxAsclin_enableModule>
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
800052d0:	40 f4       	mov.aa %a4,%a15
800052d2:	82 04       	mov %d4,0
800052d4:	6d ff 59 fd 	call 80004d86 <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
800052d8:	4c f6       	ld.w %d15,[%a15]24
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
800052da:	40 f4       	mov.aa %a4,%a15
800052dc:	b7 0f 02 f8 	insert %d15,%d15,0,16,2
800052e0:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setPrescaler(Ifx_ASCLIN *asclin, uint16 prescaler)
{
    asclin->BITCON.B.PRESCALER = prescaler - 1;
800052e2:	8c c4       	ld.h %d15,[%a12]8
800052e4:	48 52       	ld.w %d2,[%a15]20
800052e6:	c2 ff       	add %d15,-1
800052e8:	37 f2 0c f0 	insert %d15,%d2,%d15,0,12
800052ec:	68 5f       	st.w [%a15]20,%d15
800052ee:	39 c4 28 00 	ld.bu %d4,[%a12]40
800052f2:	6d ff 4a fd 	call 80004d86 <IfxAsclin_setClockSource>
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
800052f6:	40 f4       	mov.aa %a4,%a15
800052f8:	19 c4 04 00 	ld.w %d4,[%a12]4
800052fc:	39 c5 0a 00 	ld.bu %d5,[%a12]10
80005300:	39 c6 0d 00 	ld.bu %d6,[%a12]13
80005304:	39 c7 0c 00 	ld.bu %d7,[%a12]12
80005308:	6d ff 79 fd 	call 80004dfa <IfxAsclin_setBitTiming>
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
8000530c:	40 f4       	mov.aa %a4,%a15
8000530e:	82 04       	mov %d4,0
    IfxAsclin_enableModule(asclinSFR);                                  /* enabling the module*/
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock); /* disabling the clock*/
    IfxAsclin_setFrameMode(asclinSFR, IfxAsclin_FrameMode_initialise);  /* setting the module in Initialise mode*/
    IfxAsclin_setPrescaler(asclinSFR, config->baudrate.prescaler);      /* sets the prescaler */
    IfxAsclin_setClockSource(asclinSFR, config->clockSource);           /* temporary set the clock source for baudrate configuration*/
    status = (IfxAsclin_Status)IfxAsclin_setBitTiming(asclinSFR,        /* setting the baudrate bit fields to generate the required baudrate*/
80005310:	02 29       	mov %d9,%d2
        config->baudrate.baudrate,
        config->baudrate.oversampling,
        config->bitTiming.samplePointPosition,
        config->bitTiming.medianFilter);
    IfxAsclin_setClockSource(asclinSFR, IfxAsclin_ClockSource_noClock);              /* disabling the clock again*/
80005312:	6d ff 3a fd 	call 80004d86 <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_enableLoopBackMode(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.LB = enable ? 1 : 0;
80005316:	39 c2 38 00 	ld.bu %d2,[%a12]56
8000531a:	7b 00 00 f1 	movh %d15,4096
8000531e:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80005322:	4c f1       	ld.w %d15,[%a15]4
80005324:	b7 0f 01 fe 	insert %d15,%d15,0,28,1
80005328:	a6 2f       	or %d15,%d2
8000532a:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxAsclin_enableParity(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FRAMECON.B.PEN = enable ? 1 : 0;
8000532c:	39 c2 14 00 	ld.bu %d2,[%a12]20
80005330:	7b 00 00 f4 	movh %d15,16384
80005334:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80005338:	4c f6       	ld.w %d15,[%a15]24
8000533a:	b7 0f 01 ff 	insert %d15,%d15,0,30,1
8000533e:	a6 2f       	or %d15,%d2
80005340:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setParityType(Ifx_ASCLIN *asclin, IfxAsclin_ParityType type)
{
    asclin->FRAMECON.B.ODD = type;
80005342:	48 62       	ld.w %d2,[%a15]24
80005344:	39 cf 12 00 	ld.bu %d15,[%a12]18
80005348:	37 f2 81 ff 	insert %d15,%d2,%d15,31,1
8000534c:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setStopBit(Ifx_ASCLIN *asclin, IfxAsclin_StopBit stopBit)
{
    asclin->FRAMECON.B.STOP = stopBit;
8000534e:	48 62       	ld.w %d2,[%a15]24
80005350:	0c cf       	ld.bu %d15,[%a12]15
80005352:	37 f2 83 f4 	insert %d15,%d2,%d15,9,3
80005356:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setShiftDirection(Ifx_ASCLIN *asclin, IfxAsclin_ShiftDirection dir)
{
    asclin->FRAMECON.B.MSB = dir;
80005358:	48 62       	ld.w %d2,[%a15]24
8000535a:	39 cf 11 00 	ld.bu %d15,[%a12]17
8000535e:	67 f2 1c f0 	ins.t %d15,%d2,28,%d15,0
80005362:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setDataLength(Ifx_ASCLIN *asclin, IfxAsclin_DataLength length)
{
    asclin->DATCON.B.DATLEN = length;
80005364:	48 72       	ld.w %d2,[%a15]28
80005366:	39 cf 13 00 	ld.bu %d15,[%a12]19
8000536a:	37 f2 04 f0 	insert %d15,%d2,%d15,0,4
8000536e:	68 7f       	st.w [%a15]28,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInletWidth(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInletWidth width)
{
    asclin->TXFIFOCON.B.INW = width;
80005370:	48 32       	ld.w %d2,[%a15]12
80005372:	39 cf 16 00 	ld.bu %d15,[%a12]22
80005376:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
8000537a:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_setRxFifoOutletWidth(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoOutletWidth width)
{
    asclin->RXFIFOCON.B.OUTW = width;
8000537c:	48 42       	ld.w %d2,[%a15]16
8000537e:	39 cf 17 00 	ld.bu %d15,[%a12]23
80005382:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
80005386:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setIdleDelay(Ifx_ASCLIN *asclin, IfxAsclin_IdleDelay delay)
{
    asclin->FRAMECON.B.IDLE = delay;
80005388:	48 62       	ld.w %d2,[%a15]24
8000538a:	0c ce       	ld.bu %d15,[%a12]14
8000538c:	37 f2 03 f3 	insert %d15,%d2,%d15,6,3
80005390:	68 6f       	st.w [%a15]24,%d15
}


IFX_INLINE void IfxAsclin_setTxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_TxFifoInterruptLevel level)
{
    asclin->TXFIFOCON.B.INTLEVEL = __minu(level, 15);
80005392:	39 c2 18 00 	ld.bu %d2,[%a12]24
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80005396:	da 0f       	mov %d15,15
80005398:	0b f2 90 21 	min.u %d2,%d2,%d15
8000539c:	48 33       	ld.w %d3,[%a15]12
8000539e:	37 23 04 24 	insert %d2,%d3,%d2,8,4
800053a2:	68 32       	st.w [%a15]12,%d2
}


IFX_INLINE void IfxAsclin_setRxFifoInterruptLevel(Ifx_ASCLIN *asclin, IfxAsclin_RxFifoInterruptLevel level)
{
    asclin->RXFIFOCON.B.INTLEVEL = __minu(level, 15);
800053a4:	39 c2 19 00 	ld.bu %d2,[%a12]25
800053a8:	0b f2 90 f1 	min.u %d15,%d2,%d15
800053ac:	48 42       	ld.w %d2,[%a15]16
800053ae:	37 f2 04 f4 	insert %d15,%d2,%d15,8,4
800053b2:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_setFrameMode(Ifx_ASCLIN *asclin, IfxAsclin_FrameMode mode)
{
    asclin->FRAMECON.B.MODE = mode;
800053b4:	39 cf 10 00 	ld.bu %d15,[%a12]16
800053b8:	48 62       	ld.w %d2,[%a15]24
800053ba:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
800053be:	68 6f       	st.w [%a15]24,%d15
    IfxAsclin_setTxFifoInterruptLevel(asclinSFR, config->fifo.txFifoInterruptLevel); /* setting Tx FIFO level at which a Tx interrupt will be triggered*/
    IfxAsclin_setRxFifoInterruptLevel(asclinSFR, config->fifo.rxFifoInterruptLevel); /* setting Rx FIFO interrupt level at which a Rx interrupt will be triggered*/
    IfxAsclin_setFrameMode(asclinSFR, config->frame.frameMode);                      /* selecting the frame mode*/

    /* Pin mapping */
    const IfxAsclin_Asc_Pins *pins = config->pins;
800053c0:	99 cd 24 00 	ld.a %a13,[%a12]36

    if (pins != NULL_PTR)
800053c4:	bd 0d 81 00 	jz.a %a13,800054c6 <IfxAsclin_Asc_initModule+0x204>
    {
        IfxAsclin_Cts_In *cts = pins->cts;
800053c8:	4c d0       	ld.w %d15,[%a13]0

        if (cts != NULL_PTR)
800053ca:	6e 27       	jz %d15,80005418 <IfxAsclin_Asc_initModule+0x156>
}


IFX_INLINE void IfxAsclin_initCtsPin(const IfxAsclin_Cts_In *cts, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (cts->pin.port != NULL_PTR)
800053cc:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initCtsPin(cts, pins->ctsMode, pins->pinDriver);
800053ce:	79 d5 04 00 	ld.b %d5,[%a13]4
800053d2:	99 24 04 00 	ld.a %a4,[%a2]4
800053d6:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800053da:	bd 04 1f 00 	jz.a %a4,80005418 <IfxAsclin_Asc_initModule+0x156>
800053de:	39 24 08 00 	ld.bu %d4,[%a2]8
800053e2:	8f f5 0f 51 	and %d5,%d5,255
800053e6:	6d 00 ba 03 	call 80005b5a <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
800053ea:	60 f3       	mov.a %a3,%d15
800053ec:	02 85       	mov %d5,%d8
800053ee:	99 34 04 00 	ld.a %a4,[%a3]4
800053f2:	39 34 08 00 	ld.bu %d4,[%a3]8
800053f6:	6d 00 30 04 	call 80005c56 <IfxPort_setPinPadDriver>
        IfxAsclin_enableCts(cts->module, TRUE);
800053fa:	60 f3       	mov.a %a3,%d15
800053fc:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_enableCts(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->IOCR.B.CTSEN = enable ? 1 : 0;
800053fe:	19 22 04 00 	ld.w %d2,[%a2]4
80005402:	b7 f2 81 2e 	insert %d2,%d2,15,29,1
80005406:	59 22 04 00 	st.w [%a2]4,%d2
    if (cts->pin.port != NULL_PTR)
    {
        IfxPort_setPinModeInput(cts->pin.port, cts->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(cts->pin.port, cts->pin.pinIndex, padDriver);
        IfxAsclin_enableCts(cts->module, TRUE);
        IfxAsclin_setCtsInput(cts->module, (IfxAsclin_CtsInputSelect)cts->select);
8000540a:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setCtsInput(Ifx_ASCLIN *asclin, IfxAsclin_CtsInputSelect ctsi)
{
    asclin->IOCR.B.CTS = ctsi;
8000540c:	0c 3c       	ld.bu %d15,[%a3]12
8000540e:	19 22 04 00 	ld.w %d2,[%a2]4
80005412:	37 f2 02 f8 	insert %d15,%d2,%d15,16,2
80005416:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rx_In *rx = pins->rx;
80005418:	4c d2       	ld.w %d15,[%a13]8

        if (rx != NULL_PTR)
8000541a:	6e 20       	jz %d15,8000545a <IfxAsclin_Asc_initModule+0x198>
}


IFX_INLINE void IfxAsclin_initRxPin(const IfxAsclin_Rx_In *rx, IfxPort_InputMode inputMode, IfxPort_PadDriver padDriver)
{
    if (rx->pin.port != NULL_PTR)
8000541c:	60 f2       	mov.a %a2,%d15
        {
            IfxAsclin_initRxPin(rx, pins->rxMode, pins->pinDriver);
8000541e:	79 d5 0c 00 	ld.b %d5,[%a13]12
80005422:	99 24 04 00 	ld.a %a4,[%a2]4
80005426:	39 d8 1d 00 	ld.bu %d8,[%a13]29
8000542a:	bd 04 18 00 	jz.a %a4,8000545a <IfxAsclin_Asc_initModule+0x198>
8000542e:	39 24 08 00 	ld.bu %d4,[%a2]8
80005432:	8f f5 0f 51 	and %d5,%d5,255
80005436:	6d 00 92 03 	call 80005b5a <IfxPort_setPinMode>
    {
        IfxPort_setPinModeInput(rx->pin.port, rx->pin.pinIndex, inputMode);
        IfxPort_setPinPadDriver(rx->pin.port, rx->pin.pinIndex, padDriver);
8000543a:	60 f3       	mov.a %a3,%d15
8000543c:	02 85       	mov %d5,%d8
8000543e:	99 34 04 00 	ld.a %a4,[%a3]4
80005442:	39 34 08 00 	ld.bu %d4,[%a3]8
80005446:	6d 00 08 04 	call 80005c56 <IfxPort_setPinPadDriver>
        IfxAsclin_setRxInput(rx->module, (IfxAsclin_RxInputSelect)rx->select);
8000544a:	60 f3       	mov.a %a3,%d15
8000544c:	d4 32       	ld.a %a2,[%a3]
}


IFX_INLINE void IfxAsclin_setRxInput(Ifx_ASCLIN *asclin, IfxAsclin_RxInputSelect alti)
{
    asclin->IOCR.B.ALTI = alti;
8000544e:	0c 3c       	ld.bu %d15,[%a3]12
80005450:	19 22 04 00 	ld.w %d2,[%a2]4
80005454:	37 f2 03 f0 	insert %d15,%d2,%d15,0,3
80005458:	6c 21       	st.w [%a2]4,%d15
        }

        IfxAsclin_Rts_Out *rts = pins->rts;
8000545a:	4c d4       	ld.w %d15,[%a13]16

        if (rts != NULL_PTR)
8000545c:	6e 1a       	jz %d15,80005490 <IfxAsclin_Asc_initModule+0x1ce>
}


IFX_INLINE void IfxPort_setPinModeOutput(Ifx_P *port, uint8 pinIndex, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
    IfxPort_setPinMode(port, pinIndex, (IfxPort_Mode)(index | mode));
8000545e:	60 f2       	mov.a %a2,%d15
80005460:	39 d2 14 00 	ld.bu %d2,[%a13]20
80005464:	39 23 0c 00 	ld.bu %d3,[%a2]12
80005468:	99 24 04 00 	ld.a %a4,[%a2]4
8000546c:	0f 23 a0 50 	or %d5,%d3,%d2
80005470:	39 24 08 00 	ld.bu %d4,[%a2]8
80005474:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initRtsPin(rts, pins->rtsMode, pins->pinDriver);
80005478:	39 d8 1d 00 	ld.bu %d8,[%a13]29
8000547c:	6d 00 6f 03 	call 80005b5a <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initRtsPin(const IfxAsclin_Rts_Out *rts, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(rts->pin.port, rts->pin.pinIndex, outputMode, rts->select);
    IfxPort_setPinPadDriver(rts->pin.port, rts->pin.pinIndex, padDriver);
80005480:	60 f3       	mov.a %a3,%d15
80005482:	02 85       	mov %d5,%d8
80005484:	99 34 04 00 	ld.a %a4,[%a3]4
80005488:	39 34 08 00 	ld.bu %d4,[%a3]8
8000548c:	6d 00 e5 03 	call 80005c56 <IfxPort_setPinPadDriver>
        }

        IfxAsclin_Tx_Out *tx = pins->tx;
80005490:	4c d6       	ld.w %d15,[%a13]24

        if (tx != NULL_PTR)
80005492:	6e 1a       	jz %d15,800054c6 <IfxAsclin_Asc_initModule+0x204>
80005494:	60 f2       	mov.a %a2,%d15
80005496:	39 d2 1c 00 	ld.bu %d2,[%a13]28
8000549a:	39 23 0c 00 	ld.bu %d3,[%a2]12
8000549e:	99 24 04 00 	ld.a %a4,[%a2]4
800054a2:	0f 23 a0 50 	or %d5,%d3,%d2
800054a6:	39 24 08 00 	ld.bu %d4,[%a2]8
800054aa:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxAsclin_initTxPin(tx, pins->txMode, pins->pinDriver);
800054ae:	39 d8 1d 00 	ld.bu %d8,[%a13]29
800054b2:	6d 00 54 03 	call 80005b5a <IfxPort_setPinMode>


IFX_INLINE void IfxAsclin_initTxPin(const IfxAsclin_Tx_Out *tx, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(tx->pin.port, tx->pin.pinIndex, outputMode, tx->select);
    IfxPort_setPinPadDriver(tx->pin.port, tx->pin.pinIndex, padDriver);
800054b6:	60 f3       	mov.a %a3,%d15
800054b8:	02 85       	mov %d5,%d8
800054ba:	99 34 04 00 	ld.a %a4,[%a3]4
800054be:	39 34 08 00 	ld.bu %d4,[%a3]8
800054c2:	6d 00 ca 03 	call 80005c56 <IfxPort_setPinPadDriver>
        }
    }

    IfxAsclin_setClockSource(asclinSFR, config->clockSource); /* select the clock source*/
800054c6:	40 f4       	mov.aa %a4,%a15
800054c8:	39 c4 28 00 	ld.bu %d4,[%a12]40
800054cc:	6d ff 5d fc 	call 80004d86 <IfxAsclin_setClockSource>
}


IFX_INLINE void IfxAsclin_disableAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSENABLE.U = 0x00000000;
800054d0:	82 0f       	mov %d15,0
800054d2:	59 ff 00 10 	st.w [%a15]64,%d15
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxAsclin_clearAllFlags(Ifx_ASCLIN *asclin)
{
    asclin->FLAGSCLEAR.U = 0xFFFFFFFF;
800054d6:	82 f2       	mov %d2,-1
800054d8:	68 f2       	st.w [%a15]60,%d2

    IfxAsclin_disableAllFlags(asclinSFR);                     /* disable all flags */
    IfxAsclin_clearAllFlags(asclinSFR);                       /* clear all flags */

    /* HW error flags */
    asclin->errorFlags.ALL = 0;
800054da:	2c ee       	st.b [%a14]14,%d15

    if (config->errorFlags.flags.parityError)
800054dc:	4c ca       	ld.w %d15,[%a12]40
800054de:	2e 87       	jz.t %d15,8,800054ec <IfxAsclin_Asc_initModule+0x22a>
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
800054e0:	19 ff 00 10 	ld.w %d15,[%a15]64
800054e4:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
800054e8:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableParityErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.frameError)
800054ec:	4c ca       	ld.w %d15,[%a12]40
800054ee:	2e 97       	jz.t %d15,9,800054fc <IfxAsclin_Asc_initModule+0x23a>
}


IFX_INLINE void IfxAsclin_enableFrameErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.FEE = enable ? 1 : 0;
800054f0:	19 ff 00 10 	ld.w %d15,[%a15]64
800054f4:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
800054f8:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableFrameErrorFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoOverflow)
800054fc:	4c ca       	ld.w %d15,[%a12]40
800054fe:	2e a7       	jz.t %d15,10,8000550c <IfxAsclin_Asc_initModule+0x24a>
}


IFX_INLINE void IfxAsclin_enableRxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFOE = enable ? 1 : 0;
80005500:	19 ff 00 10 	ld.w %d15,[%a15]64
80005504:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80005508:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoOverflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.rxFifoUnderflow)
8000550c:	4c ca       	ld.w %d15,[%a12]40
8000550e:	2e b7       	jz.t %d15,11,8000551c <IfxAsclin_Asc_initModule+0x25a>
}


IFX_INLINE void IfxAsclin_enableRxFifoUnderflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFUE = enable ? 1 : 0;
80005510:	19 ff 00 10 	ld.w %d15,[%a15]64
80005514:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80005518:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableRxFifoUnderflowFlag(asclinSFR, TRUE);
    }

    if (config->errorFlags.flags.txFifoOverflow)
8000551c:	4c ca       	ld.w %d15,[%a12]40
8000551e:	2e c7       	jz.t %d15,12,8000552c <IfxAsclin_Asc_initModule+0x26a>
}


IFX_INLINE void IfxAsclin_enableTxFifoOverflowFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFOE = enable ? 1 : 0;
80005520:	19 ff 00 10 	ld.w %d15,[%a15]64
80005524:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80005528:	59 ff 00 10 	st.w [%a15]64,%d15
    {
        IfxAsclin_enableTxFifoOverflowFlag(asclinSFR, TRUE);
    }

    /* transmission flags */
    asclin->rxSwFifoOverflow = FALSE;
8000552c:	82 0f       	mov %d15,0
8000552e:	2c ed       	st.b [%a14]13,%d15
    asclin->txInProgress     = FALSE;
80005530:	2c ec       	st.b [%a14]12,%d15

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
80005532:	d2 04       	mov %e4,0
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
80005534:	39 c3 39 00 	ld.bu %d3,[%a12]57
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;
80005538:	82 0f       	mov %d15,0
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
8000553a:	89 e4 54 09 	st.d [%a14]20,%e4
    asclin->sendCount      = 0;
8000553e:	6c e4       	st.w [%a14]16,%d15
    asclin->rxSwFifoOverflow = FALSE;
    asclin->txInProgress     = FALSE;

    /* Buffer mode */
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
80005540:	e9 e3 0f 00 	st.b [%a14]15,%d3
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
    {
    case Ifx_DataBufferMode_normal:
        elementSize = 1;
80005544:	82 1f       	mov %d15,1
    Ifx_SizeT elementSize;
    asclin->dataBufferMode = config->dataBufferMode;
    asclin->txTimestamp    = 0;
    asclin->sendCount      = 0;

    switch (asclin->dataBufferMode)
80005546:	76 34       	jz %d3,8000554e <IfxAsclin_Asc_initModule+0x28c>
        break;
    case Ifx_DataBufferMode_timeStampSingle:
        elementSize = sizeof(Ifx_DataBufferMode_TimeStampSingle);
        break;
    default:
        elementSize = 0;
80005548:	ba 13       	eq %d15,%d3,1
8000554a:	ab cf a0 ff 	seln %d15,%d15,%d15,12
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
8000554e:	99 c4 2c 00 	ld.a %a4,[%a12]44
80005552:	c9 c4 2a 00 	ld.h %d4,[%a12]42
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
80005556:	02 f5       	mov %d5,%d15
        IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE);
        break;
    }

    /* SW Fifos */
    if (config->txBuffer != NULL_PTR)
80005558:	bc 44       	jz.a %a4,80005560 <IfxAsclin_Asc_initModule+0x29e>
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
8000555a:	6d 00 36 16 	call 800081c6 <Ifx_Fifo_init>
8000555e:	3c 03       	j 80005564 <IfxAsclin_Asc_initModule+0x2a2>
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
80005560:	6d 00 50 16 	call 80008200 <Ifx_Fifo_create>
    }

    if (config->rxBuffer != NULL_PTR)
80005564:	99 c4 34 00 	ld.a %a4,[%a12]52
    {
        asclin->tx = Ifx_Fifo_init(config->txBuffer, config->txBufferSize, elementSize);
    }
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
80005568:	b5 e2 04 00 	st.a [%a14]4,%a2
8000556c:	c9 c4 30 00 	ld.h %d4,[%a12]48
    }

    if (config->rxBuffer != NULL_PTR)
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
80005570:	02 f5       	mov %d5,%d15
    else
    {
        asclin->tx = Ifx_Fifo_create(config->txBufferSize, elementSize);
    }

    if (config->rxBuffer != NULL_PTR)
80005572:	bc 44       	jz.a %a4,8000557a <IfxAsclin_Asc_initModule+0x2b8>
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
80005574:	6d 00 29 16 	call 800081c6 <Ifx_Fifo_init>
80005578:	3c 03       	j 8000557e <IfxAsclin_Asc_initModule+0x2bc>
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
8000557a:	6d 00 43 16 	call 80008200 <Ifx_Fifo_create>
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;
8000557e:	39 cf 22 00 	ld.bu %d15,[%a12]34

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
80005582:	b9 c2 1e 00 	ld.hu %d2,[%a12]30
80005586:	8b 3f 00 82 	eq %d8,%d15,3
8000558a:	02 83       	mov %d3,%d8
    {
        asclin->rx = Ifx_Fifo_init(config->rxBuffer, config->rxBufferSize, elementSize);
    }
    else
    {
        asclin->rx = Ifx_Fifo_create(config->rxBufferSize, elementSize);
8000558c:	b5 e2 08 00 	st.a [%a14]8,%a2
    }

    /* initialising the interrupts */
    IfxSrc_Tos tos = config->interrupt.typeOfService;

    if ((config->interrupt.rxPriority > 0) || (tos == IfxSrc_Tos_dma))
80005590:	8b 02 00 35 	or.ne %d3,%d2,0
80005594:	df 03 1e 00 	jeq %d3,0,800055d0 <IfxAsclin_Asc_initModule+0x30e>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerRx(asclinSFR);
80005598:	40 f4       	mov.aa %a4,%a15
8000559a:	6d ff a1 fb 	call 80004cdc <IfxAsclin_getSrcPointerRx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
8000559e:	54 22       	ld.w %d2,[%a2]
800055a0:	39 c3 1e 00 	ld.bu %d3,[%a12]30
800055a4:	8f f2 cf 21 	andn %d2,%d2,255
800055a8:	a6 32       	or %d2,%d3
800055aa:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800055ac:	54 22       	ld.w %d2,[%a2]
800055ae:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
800055b2:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
800055b4:	54 22       	ld.w %d2,[%a2]
800055b6:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
800055ba:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableRxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.RFLE = enable ? 1 : 0;
800055bc:	19 f2 00 10 	ld.w %d2,[%a15]64
800055c0:	b7 f2 01 2e 	insert %d2,%d2,15,28,1
800055c4:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
800055c8:	54 22       	ld.w %d2,[%a2]
800055ca:	b7 f2 01 25 	insert %d2,%d2,15,10,1
800055ce:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.rxPriority);
        IfxAsclin_enableRxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if ((config->interrupt.txPriority > 0) || (tos == IfxSrc_Tos_dma))
800055d0:	b9 c2 1c 00 	ld.hu %d2,[%a12]28
800055d4:	8b 02 00 85 	or.ne %d8,%d2,0
800055d8:	df 08 1e 00 	jeq %d8,0,80005614 <IfxAsclin_Asc_initModule+0x352>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerTx(asclinSFR);
800055dc:	40 f4       	mov.aa %a4,%a15
800055de:	6d ff 89 fb 	call 80004cf0 <IfxAsclin_getSrcPointerTx>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
800055e2:	54 22       	ld.w %d2,[%a2]
800055e4:	39 c3 1c 00 	ld.bu %d3,[%a12]28
800055e8:	8f f2 cf 21 	andn %d2,%d2,255
800055ec:	a6 32       	or %d2,%d3
800055ee:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
800055f0:	54 22       	ld.w %d2,[%a2]
800055f2:	37 f2 82 25 	insert %d2,%d2,%d15,11,2
800055f6:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
800055f8:	54 22       	ld.w %d2,[%a2]
800055fa:	b7 f2 81 2c 	insert %d2,%d2,15,25,1
800055fe:	74 22       	st.w [%a2],%d2
}


IFX_INLINE void IfxAsclin_enableTxFifoFillLevelFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.TFLE = enable ? 1 : 0;
80005600:	19 f2 00 10 	ld.w %d2,[%a15]64
80005604:	b7 f2 81 2f 	insert %d2,%d2,15,31,1
80005608:	59 f2 00 10 	st.w [%a15]64,%d2
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
8000560c:	54 22       	ld.w %d2,[%a2]
8000560e:	b7 f2 01 25 	insert %d2,%d2,15,10,1
80005612:	74 22       	st.w [%a2],%d2
        IfxSrc_init(src, tos, config->interrupt.txPriority);
        IfxAsclin_enableTxFifoFillLevelFlag(asclinSFR, TRUE);
        IfxSrc_enable(src);
    }

    if (config->interrupt.erPriority > 0) /*These interrupts are not serviced by dma*/
80005614:	b9 c2 20 00 	ld.hu %d2,[%a12]32
80005618:	df 02 1e 00 	jeq %d2,0,80005654 <IfxAsclin_Asc_initModule+0x392>
    {
        volatile Ifx_SRC_SRCR *src;
        src = IfxAsclin_getSrcPointerEr(asclinSFR);
8000561c:	40 f4       	mov.aa %a4,%a15
8000561e:	6d ff 55 fb 	call 80004cc8 <IfxAsclin_getSrcPointerEr>
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80005622:	54 22       	ld.w %d2,[%a2]
80005624:	39 c3 20 00 	ld.bu %d3,[%a12]32
80005628:	8f f2 cf 21 	andn %d2,%d2,255
8000562c:	a6 32       	or %d2,%d3
8000562e:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80005630:	54 22       	ld.w %d2,[%a2]
80005632:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80005636:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80005638:	4c 20       	ld.w %d15,[%a2]0
8000563a:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
8000563e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableParityErrorFlag(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->FLAGSENABLE.B.PEE = enable ? 1 : 0;
80005640:	19 ff 00 10 	ld.w %d15,[%a15]64
80005644:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
80005648:	59 ff 00 10 	st.w [%a15]64,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
8000564c:	4c 20       	ld.w %d15,[%a2]0
8000564e:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80005652:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxAsclin_enableRxFifoInlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->RXFIFOCON.B.ENI = enable ? 1 : 0;
80005654:	4c f4       	ld.w %d15,[%a15]16

    IfxAsclin_flushRxFifo(asclinSFR);              // flushing Rx FIFO
    IfxAsclin_flushTxFifo(asclinSFR);              // flushing Tx FIFO

    return status;
}
80005656:	02 92       	mov %d2,%d9
80005658:	96 02       	or %d15,2
8000565a:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_enableTxFifoOutlet(Ifx_ASCLIN *asclin, boolean enable)
{
    asclin->TXFIFOCON.B.ENO = enable ? 1 : 0;
8000565c:	4c f3       	ld.w %d15,[%a15]12
8000565e:	96 02       	or %d15,2
80005660:	68 3f       	st.w [%a15]12,%d15
}


IFX_INLINE void IfxAsclin_flushRxFifo(Ifx_ASCLIN *asclin)
{
    asclin->RXFIFOCON.B.FLUSH = 1;
80005662:	4c f4       	ld.w %d15,[%a15]16
80005664:	96 01       	or %d15,1
80005666:	68 4f       	st.w [%a15]16,%d15
}


IFX_INLINE void IfxAsclin_flushTxFifo(Ifx_ASCLIN *asclin)
{
    asclin->TXFIFOCON.B.FLUSH = 1;
80005668:	4c f3       	ld.w %d15,[%a15]12
8000566a:	96 01       	or %d15,1
8000566c:	68 3f       	st.w [%a15]12,%d15
8000566e:	00 90       	ret 

80005670 <IfxAsclin_Asc_initModuleConfig>:

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
80005670:	82 12       	mov %d2,1
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
80005672:	7b 10 7e 34 	movh %d3,18401

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
80005676:	e9 42 28 00 	st.b [%a4]40,%d2
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
8000567a:	82 12       	mov %d2,1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
8000567c:	82 0f       	mov %d15,0

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
8000567e:	f9 42 08 00 	st.h [%a4]8,%d2
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
80005682:	59 43 04 00 	st.w [%a4]4,%d3
    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
80005686:	e9 42 0f 00 	st.b [%a4]15,%d2

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
8000568a:	82 33       	mov %d3,3
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
8000568c:	e9 42 10 00 	st.b [%a4]16,%d2
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
80005690:	e9 42 16 00 	st.b [%a4]22,%d2
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
80005694:	e9 42 17 00 	st.b [%a4]23,%d2
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
80005698:	82 f2       	mov %d2,-1
void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;

    /* loop back disabled */
    config->loopBack = FALSE;                                                  /* no loop back*/
8000569a:	e9 4f 38 00 	st.b [%a4]56,%d15

    /* Default values for baudrate */
    config->clockSource           = IfxAsclin_ClockSource_kernelClock;         /* kernel clock, fclc*/
    config->baudrate.prescaler    = 1;                                         /* default prescaler*/
    config->baudrate.baudrate     = 115200;                                    /* default baudrate (the fractional dividier setup will be calculated in initModule*/
    config->baudrate.oversampling = IfxAsclin_OversamplingFactor_4;            /* default oversampling factor*/
8000569e:	e9 43 0a 00 	st.b [%a4]10,%d3

    /* Default Values for Bit Timings */
    config->bitTiming.medianFilter        = IfxAsclin_SamplesPerBit_one;       /* one sample per bit*/
800056a2:	2c 4c       	st.b [%a4]12,%d15
    config->bitTiming.samplePointPosition = IfxAsclin_SamplePointPosition_3;   /* sample point position at 3*/
800056a4:	e9 43 0d 00 	st.b [%a4]13,%d3
    /* Default Values for Frame Control */
    config->frame.idleDelay               = IfxAsclin_IdleDelay_0;             /* no idle delay*/
800056a8:	2c 4e       	st.b [%a4]14,%d15
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
800056aa:	e9 4f 11 00 	st.b [%a4]17,%d15
    config->frame.parityBit               = FALSE;                             /* disable parity*/
800056ae:	e9 4f 14 00 	st.b [%a4]20,%d15
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
800056b2:	e9 4f 12 00 	st.b [%a4]18,%d15
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
800056b6:	82 73       	mov %d3,7

    /* Default Values for Fifo Control */
    config->fifo.inWidth              = IfxAsclin_TxFifoInletWidth_1;          /* 8-bit wide write*/
    config->fifo.outWidth             = IfxAsclin_RxFifoOutletWidth_1;         /* 8-bit wide read*/
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
800056b8:	e9 4f 18 00 	st.b [%a4]24,%d15
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
800056bc:	e9 4f 19 00 	st.b [%a4]25,%d15
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/
800056c0:	e9 4f 1a 00 	st.b [%a4]26,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/
800056c4:	e9 42 29 00 	st.b [%a4]41,%d2
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
800056c8:	82 0f       	mov %d15,0

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
800056ca:	82 02       	mov %d2,0
}


void IfxAsclin_Asc_initModuleConfig(IfxAsclin_Asc_Config *config, Ifx_ASCLIN *asclin)
{
    config->asclin = asclin;
800056cc:	f4 45       	st.a [%a4],%a5
    config->frame.stopBit                 = IfxAsclin_StopBit_1;               /* one stop bit*/
    config->frame.frameMode               = IfxAsclin_FrameMode_asc;           /* ASC mode*/
    config->frame.shiftDir                = IfxAsclin_ShiftDirection_lsbFirst; /* shift diection LSB first*/
    config->frame.parityBit               = FALSE;                             /* disable parity*/
    config->frame.parityType              = IfxAsclin_ParityType_even;         /* even parity (if parity enabled)*/
    config->frame.dataLength              = IfxAsclin_DataLength_8;            /* number of bits per transfer 8*/
800056ce:	e9 43 13 00 	st.b [%a4]19,%d3
    config->fifo.txFifoInterruptLevel = IfxAsclin_TxFifoInterruptLevel_0;      /* txFifoInterruptLevel = 0. optimised to write upto 16 bytes at a time */
    config->fifo.rxFifoInterruptLevel = IfxAsclin_RxFifoInterruptLevel_1;
    config->fifo.buffMode             = IfxAsclin_ReceiveBufferMode_rxFifo;    /* RxFIFO*/

    /* Default Values for Interrupt Config */
    config->interrupt.rxPriority    = 0;                                       /* receive interrupt priority 0*/
800056d2:	ac 4f       	st.h [%a4]30,%d15
    config->interrupt.txPriority    = 0;                                       /* transmit interrupt priority 0*/
800056d4:	ac 4e       	st.h [%a4]28,%d15
    config->interrupt.erPriority    = 0;                                       /* error interrupt priority 0*/
800056d6:	f9 4f 20 00 	st.h [%a4]32,%d15
    config->interrupt.typeOfService = IfxSrc_Tos_cpu0;                         /* type of service CPU0*/
800056da:	e9 4f 22 00 	st.b [%a4]34,%d15

    /* Enable error flags */
    config->errorFlags.ALL = ~0;                                               /* all error flags enabled*/

    /* init pointers */
    config->pins           = NULL_PTR;                                         /* pins to null pointer*/
800056de:	59 42 24 00 	st.w [%a4]36,%d2
    config->rxBuffer       = NULL_PTR;                                         /* Rx Fifo buffer*/
800056e2:	59 42 34 00 	st.w [%a4]52,%d2
    config->txBuffer       = NULL_PTR;                                         /* Tx Fifo buffer*/
800056e6:	59 42 2c 00 	st.w [%a4]44,%d2

    config->txBufferSize   = 0;                                                /* Rx Fifo buffer size*/
800056ea:	f9 42 2a 00 	st.h [%a4]42,%d2
    config->rxBufferSize   = 0;                                                /* Rx Fifo buffer size*/
800056ee:	f9 42 30 00 	st.h [%a4]48,%d2

    config->dataBufferMode = Ifx_DataBufferMode_normal;
800056f2:	e9 4f 39 00 	st.b [%a4]57,%d15
800056f6:	00 90       	ret 

800056f8 <IfxAsclin_Asc_initiateTransmission>:
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
800056f8:	0c 4c       	ld.bu %d15,[%a4]12
    config->dataBufferMode = Ifx_DataBufferMode_normal;
}

#include <stdio.h>
void IfxAsclin_Asc_initiateTransmission(IfxAsclin_Asc *asclin)
{
800056fa:	20 10       	sub.a %sp,16
800056fc:	40 4f       	mov.aa %a15,%a4
    if (asclin->txInProgress == FALSE)     /* Send first byte: send init */
800056fe:	ee 20       	jnz %d15,8000573e <IfxAsclin_Asc_initiateTransmission+0x46>
    {

        if (Ifx_Fifo_isEmpty(asclin->tx) == FALSE)
80005700:	99 44 04 00 	ld.a %a4,[%a4]4
80005704:	8c 42       	ld.h %d15,[%a4]4
80005706:	6e 1c       	jz %d15,8000573e <IfxAsclin_Asc_initiateTransmission+0x46>
        {
            uint8 data;

            asclin->txInProgress = TRUE;
80005708:	82 1f       	mov %d15,1
8000570a:	28 cf       	st.b [%a15]12,%d15

            switch (asclin->dataBufferMode)
8000570c:	0c ff       	ld.bu %d15,[%a15]15
8000570e:	6e 0c       	jz %d15,80005726 <IfxAsclin_Asc_initiateTransmission+0x2e>
80005710:	de 11       	jne %d15,1,80005732 <IfxAsclin_Asc_initiateTransmission+0x3a>
            break;
            case Ifx_DataBufferMode_timeStampSingle:
            {

                Ifx_DataBufferMode_TimeStampSingle packedData;
                Ifx_Fifo_read(asclin->tx, &packedData, sizeof(packedData), TIME_NULL);
80005712:	d2 06       	mov %e6,0
80005714:	d9 a5 04 00 	lea %a5,[%sp]4
80005718:	3b c0 00 40 	mov %d4,12
8000571c:	6d 00 f0 15 	call 800082fc <Ifx_Fifo_read>
                data = packedData.data;
80005720:	0c ac       	ld.bu %d15,[%sp]12
80005722:	2c a3       	st.b [%sp]3,%d15
80005724:	3c 07       	j 80005732 <IfxAsclin_Asc_initiateTransmission+0x3a>
            switch (asclin->dataBufferMode)
            {
            case Ifx_DataBufferMode_normal: // here
            {

                Ifx_Fifo_read(asclin->tx, &data, 1, TIME_NULL);
80005726:	d2 06       	mov %e6,0
80005728:	d9 a5 03 00 	lea %a5,[%sp]3
8000572c:	82 14       	mov %d4,1
8000572e:	6d 00 e7 15 	call 800082fc <Ifx_Fifo_read>
                data = packedData.data;
            }
            break;
            }

            IfxAsclin_write8(asclin->asclin, &data, 1);
80005732:	c8 04       	ld.a %a4,[%a15]0
80005734:	d9 a5 03 00 	lea %a5,[%sp]3
80005738:	82 14       	mov %d4,1
8000573a:	6d ff 34 fc 	call 80004fa2 <IfxAsclin_write8>
8000573e:	00 90       	ret 

80005740 <IfxAsclin_Asc_write>:
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
80005740:	40 4f       	mov.aa %a15,%a4

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
80005742:	0c 4c       	ld.bu %d15,[%a4]12
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80005744:	99 44 04 00 	ld.a %a4,[%a4]4

    if (*count != 0)
80005748:	94 63       	ld.h %d3,[%a6]
    return TRUE;
}

#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{
8000574a:	0b 45 10 88 	mov %e8,%d5,%d4
8000574e:	40 5d       	mov.aa %a13,%a5

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
80005750:	c9 44 18 00 	ld.h %d4,[%a4]24
#include <stdio.h>
boolean IfxAsclin_Asc_write(IfxAsclin_Asc *asclin, const void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
80005754:	82 12       	mov %d2,1
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;

    if (*count != 0)
80005756:	df 03 25 00 	jeq %d3,0,800057a0 <IfxAsclin_Asc_write+0x60>
8000575a:	40 6c       	mov.aa %a12,%a6
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
8000575c:	ee 13       	jnz %d15,80005782 <IfxAsclin_Asc_write+0x42>
{

    Ifx_SizeT left;
    boolean   result       = TRUE;
    boolean   tx_status    = asclin->txInProgress;
    uint16    tx_fifo_size = (uint16)asclin->tx->size;
8000575e:	37 04 70 f0 	extr.u %d15,%d4,0,16

    if (*count != 0)
    {
        if ((!tx_status) && (*count > tx_fifo_size))                 /*Transmission not initialised and data size is greater than S/W FIFO*/
80005762:	7f 3f 10 00 	jge %d15,%d3,80005782 <IfxAsclin_Asc_write+0x42>
        {


            Ifx_Fifo_write(asclin->tx, data, tx_fifo_size, timeout); /*Fill upto the S/W FIFO size and initiate transmission*/
80005766:	0b 89 10 68 	mov %e6,%d9,%d8
8000576a:	6d 00 17 17 	call 80008598 <Ifx_Fifo_write>
            IfxAsclin_Asc_initiateTransmission(asclin);
8000576e:	40 f4       	mov.aa %a4,%a15
80005770:	6d ff c4 ff 	call 800056f8 <IfxAsclin_Asc_initiateTransmission>

            left = Ifx_Fifo_write(asclin->tx, (((const uint8 *)data) + tx_fifo_size), (*count) - tx_fifo_size, timeout);
80005774:	94 c4       	ld.h %d4,[%a12]
80005776:	c8 14       	ld.a %a4,[%a15]4
80005778:	a2 f4       	sub %d4,%d15
8000577a:	10 d5       	addsc.a %a5,%a13,%d15,0
8000577c:	37 04 50 40 	extr %d4,%d4,0,16
80005780:	3c 03       	j 80005786 <IfxAsclin_Asc_write+0x46>

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
80005782:	40 d5       	mov.aa %a5,%a13
80005784:	02 34       	mov %d4,%d3
80005786:	0b 89 10 68 	mov %e6,%d9,%d8
8000578a:	6d 00 07 17 	call 80008598 <Ifx_Fifo_write>

            IfxAsclin_Asc_initiateTransmission(asclin);
8000578e:	40 f4       	mov.aa %a4,%a15

        else
        {


            left = Ifx_Fifo_write(asclin->tx, data, *count, timeout);
80005790:	02 2f       	mov %d15,%d2

            IfxAsclin_Asc_initiateTransmission(asclin);
80005792:	6d ff b3 ff 	call 800056f8 <IfxAsclin_Asc_initiateTransmission>
        }

        *count -= left;
80005796:	94 c2       	ld.h %d2,[%a12]
80005798:	a2 f2       	sub %d2,%d15
8000579a:	b4 c2       	st.h [%a12],%d2
        result  = left == 0;
8000579c:	8b 0f 00 22 	eq %d2,%d15,0

    }

    return result;
}
800057a0:	00 90       	ret 

800057a2 <IfxAsclin_Asc_blockingWrite>:
    return data;
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
800057a2:	20 10       	sub.a %sp,16
800057a4:	e9 a4 07 00 	st.b [%sp]7,%d4
    Ifx_SizeT count = 1;

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
800057a8:	82 f4       	mov %d4,-1
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
800057aa:	82 1f       	mov %d15,1

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
800057ac:	d9 a5 07 00 	lea %a5,[%sp]7
800057b0:	d9 a6 0e 00 	lea %a6,[%sp]14
800057b4:	9b 04 00 58 	addih %d5,%d4,32768
}


boolean IfxAsclin_Asc_blockingWrite(IfxAsclin_Asc *asclin, uint8 data)
{
    Ifx_SizeT count = 1;
800057b8:	ac a7       	st.h [%sp]14,%d15

    return IfxAsclin_Asc_write(asclin, &data, &count, TIME_INFINITE);
}
800057ba:	1d ff c3 ff 	j 80005740 <IfxAsclin_Asc_write>

800057be <IfxAsclin_Asc_stdIfDPipeInit>:


boolean IfxAsclin_Asc_stdIfDPipeInit(IfxStdIf_DPipe *stdif, IfxAsclin_Asc *asclin)
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));
800057be:	40 42       	mov.aa %a2,%a4
800057c0:	82 0f       	mov %d15,0
800057c2:	c5 0f 0b 10 	lea %a15,4b <_.+0x4a>
800057c6:	24 2f       	st.b [%a2+],%d15
800057c8:	fc ff       	loop %a15,800057c6 <IfxAsclin_Asc_stdIfDPipeInit+0x8>

    /* Set the API link */
    stdif->driver         = asclin;
    stdif->write          = (IfxStdIf_DPipe_Write) & IfxAsclin_Asc_write;
800057ca:	7b 00 00 f8 	movh %d15,32768
800057ce:	1b 0f 74 f5 	addi %d15,%d15,22336
800057d2:	6c 42       	st.w [%a4]8,%d15
    stdif->read           = (IfxStdIf_DPipe_Read) & IfxAsclin_Asc_read;
800057d4:	7b 00 00 f8 	movh %d15,32768
800057d8:	1b 0f 13 f5 	addi %d15,%d15,20784
800057dc:	6c 43       	st.w [%a4]12,%d15
    stdif->getReadCount   = (IfxStdIf_DPipe_GetReadCount) & IfxAsclin_Asc_getReadCount;
800057de:	7b 00 00 f8 	movh %d15,32768
800057e2:	1b 4f fb f4 	addi %d15,%d15,20404
800057e6:	6c 44       	st.w [%a4]16,%d15
    stdif->getReadEvent   = (IfxStdIf_DPipe_GetReadEvent) & IfxAsclin_Asc_getReadEvent;
800057e8:	7b 00 00 f8 	movh %d15,32768
800057ec:	1b af fb f4 	addi %d15,%d15,20410
800057f0:	6c 45       	st.w [%a4]20,%d15
    stdif->getWriteCount  = (IfxStdIf_DPipe_GetWriteCount) & IfxAsclin_Asc_getWriteCount;
800057f2:	7b 00 00 f8 	movh %d15,32768
800057f6:	1b 0f fd f4 	addi %d15,%d15,20432
800057fa:	6c 46       	st.w [%a4]24,%d15
    stdif->getWriteEvent  = (IfxStdIf_DPipe_GetWriteEvent) & IfxAsclin_Asc_getWriteEvent;
800057fc:	7b 00 00 f8 	movh %d15,32768
80005800:	1b ef fd f4 	addi %d15,%d15,20446
80005804:	6c 47       	st.w [%a4]28,%d15
    stdif->canReadCount   = (IfxStdIf_DPipe_CanReadCount) & IfxAsclin_Asc_canReadCount;
80005806:	7b 00 00 f8 	movh %d15,32768
8000580a:	1b 0f 06 f5 	addi %d15,%d15,20576
8000580e:	6c 48       	st.w [%a4]32,%d15
    stdif->canWriteCount  = (IfxStdIf_DPipe_CanWriteCount) & IfxAsclin_Asc_canWriteCount;
80005810:	7b 00 00 f8 	movh %d15,32768
80005814:	1b 4f 10 f5 	addi %d15,%d15,20740
80005818:	6c 49       	st.w [%a4]36,%d15
    stdif->flushTx        = (IfxStdIf_DPipe_FlushTx) & IfxAsclin_Asc_flushTx;
8000581a:	7b 00 00 f8 	movh %d15,32768
8000581e:	1b 8f 06 f5 	addi %d15,%d15,20584
80005822:	6c 4a       	st.w [%a4]40,%d15
    stdif->clearTx        = (IfxStdIf_DPipe_ClearTx) & IfxAsclin_Asc_clearTx;
80005824:	7b 00 00 f8 	movh %d15,32768
80005828:	1b cf 11 f5 	addi %d15,%d15,20764
8000582c:	6c 4b       	st.w [%a4]44,%d15
    stdif->clearRx        = (IfxStdIf_DPipe_ClearRx) & IfxAsclin_Asc_clearRx;
8000582e:	7b 00 00 f8 	movh %d15,32768
80005832:	1b cf 10 f5 	addi %d15,%d15,20748
80005836:	6c 4c       	st.w [%a4]48,%d15
    stdif->onReceive      = (IfxStdIf_DPipe_OnReceive) & IfxAsclin_Asc_isrReceive;
80005838:	7b 00 00 f8 	movh %d15,32768
8000583c:	1b af 1e f5 	addi %d15,%d15,20970
80005840:	6c 4d       	st.w [%a4]52,%d15
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
80005842:	7b 00 00 f8 	movh %d15,32768
80005846:	1b cf 14 f5 	addi %d15,%d15,20812
8000584a:	6c 4e       	st.w [%a4]56,%d15
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
8000584c:	7b 00 00 f8 	movh %d15,32768
80005850:	1b 8f fe f4 	addi %d15,%d15,20456
80005854:	6c 4f       	st.w [%a4]60,%d15
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
80005856:	7b 00 00 f8 	movh %d15,32768
8000585a:	1b 4f fc f4 	addi %d15,%d15,20420
8000585e:	59 4f 00 10 	st.w [%a4]64,%d15
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
80005862:	7b 00 00 f8 	movh %d15,32768
80005866:	1b af fc f4 	addi %d15,%d15,20426
8000586a:	59 4f 04 10 	st.w [%a4]68,%d15
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
8000586e:	7b 00 00 f8 	movh %d15,32768
80005872:	1b af 05 f5 	addi %d15,%d15,20570
80005876:	59 4f 08 10 	st.w [%a4]72,%d15
    stdif->txDisabled     = FALSE;
8000587a:	82 0f       	mov %d15,0
{
    /* Ensure the stdif is reset to zeros */
    memset(stdif, 0, sizeof(IfxStdIf_DPipe));

    /* Set the API link */
    stdif->driver         = asclin;
8000587c:	f4 45       	st.a [%a4],%a5
    stdif->onTransmit     = (IfxStdIf_DPipe_OnTransmit) & IfxAsclin_Asc_isrTransmit;
    stdif->onError        = (IfxStdIf_DPipe_OnError) & IfxAsclin_Asc_isrError;
    stdif->getSendCount   = (IfxStdIf_DPipe_GetSendCount) & IfxAsclin_Asc_getSendCount;
    stdif->getTxTimeStamp = (IfxStdIf_DPipe_GetTxTimeStamp) & IfxAsclin_Asc_getTxTimeStamp;
    stdif->resetSendCount = (IfxStdIf_DPipe_ResetSendCount) & IfxAsclin_Asc_resetSendCount;
    stdif->txDisabled     = FALSE;
8000587e:	2c 44       	st.b [%a4]4,%d15
    return TRUE;
}
80005880:	82 12       	mov %d2,1
80005882:	00 90       	ret 

80005884 <IfxPort_getAddress>:
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
80005884:	91 00 00 28 	movh.a %a2,32768
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
80005888:	82 05       	mov %d5,0
}


Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
8000588a:	82 02       	mov %d2,0
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
    {
        if (IfxPort_cfg_indexMap[i].index == port)
8000588c:	d9 22 9c 70 	lea %a2,[%a2]2524 <800009dc <IfxPort_cfg_indexMap>>
Ifx_P *IfxPort_getAddress(IfxPort_Index port)
{
    Ifx_P *module = NULL_PTR;
    uint8  i      = 0;

    while ((i < IFXPORT_NUM_MODULES) && (module == NULL_PTR))
80005890:	8f f5 0f f1 	and %d15,%d5,255
80005894:	8b 02 00 32 	eq %d3,%d2,0
80005898:	8b 0f 61 34 	and.lt.u %d3,%d15,16
8000589c:	76 3a       	jz %d3,800058b0 <IfxPort_getAddress+0x2c>
8000589e:	02 5f       	mov %d15,%d5
800058a0:	16 ff       	and %d15,255
    {
        if (IfxPort_cfg_indexMap[i].index == port)
800058a2:	d0 2f       	addsc.a %a15,%a2,%d15,3
800058a4:	82 02       	mov %d2,0
800058a6:	4c f1       	ld.w %d15,[%a15]4
800058a8:	7e 42       	jne %d15,%d4,800058ac <IfxPort_getAddress+0x28>
        {
            module = IfxPort_cfg_indexMap[i].module;
800058aa:	48 02       	ld.w %d2,[%a15]0
800058ac:	c2 15       	add %d5,1
800058ae:	3c f1       	j 80005890 <IfxPort_getAddress+0xc>

        i++;
    }

    return module;
}
800058b0:	60 22       	mov.a %a2,%d2
800058b2:	00 90       	ret 

800058b4 <IfxPort_getIndex>:

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
    {
        if (IfxPort_cfg_indexMap[index].module == port)
800058b4:	91 00 00 38 	movh.a %a3,32768
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
800058b8:	82 0f       	mov %d15,0
    {
        if (IfxPort_cfg_indexMap[index].module == port)
800058ba:	d9 33 9c 70 	lea %a3,[%a3]2524 <800009dc <IfxPort_cfg_indexMap>>
800058be:	a0 ff       	mov.a %a15,15
800058c0:	d0 32       	addsc.a %a2,%a3,%d15,3
800058c2:	d4 25       	ld.a %a5,[%a2]
800058c4:	7d 45 05 80 	jne.a %a5,%a4,800058ce <IfxPort_getIndex+0x1a>
        {
            result = (IfxPort_Index)IfxPort_cfg_indexMap[index].index;
800058c8:	79 22 04 00 	ld.b %d2,[%a2]4
            break;
800058cc:	00 90       	ret 
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;

    for (index = 0; index < IFXPORT_NUM_MODULES; index++)
800058ce:	c2 1f       	add %d15,1
800058d0:	fc f8       	loop %a15,800058c0 <IfxPort_getIndex+0xc>
IfxPort_Index IfxPort_getIndex(Ifx_P *port)
{
    uint32        index;
    IfxPort_Index result;

    result = IfxPort_Index_none;
800058d2:	82 f2       	mov %d2,-1
            break;
        }
    }

    return result;
}
800058d4:	00 90       	ret 

800058d6 <IfxPort_resetESR>:


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
800058d6:	40 4f       	mov.aa %a15,%a4
800058d8:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800058da:	6d 00 ac 0c 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
800058de:	02 24       	mov %d4,%d2
}


void IfxPort_resetESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800058e0:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
800058e2:	6d 00 a8 0b 	call 80007032 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 0);
800058e6:	82 12       	mov %d2,1
800058e8:	d9 f4 10 10 	lea %a4,[%a15]80
800058ec:	0f 82 00 20 	sh %d2,%d2,%d8

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
800058f0:	d2 06       	mov %e6,0
800058f2:	02 27       	mov %d7,%d2
800058f4:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
800058f8:	02 f4       	mov %d4,%d15
800058fa:	1d 00 d1 0c 	j 8000729c <IfxScuWdt_setCpuEndinit>

800058fe <IfxPort_disableEmergencyStop>:
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
800058fe:	91 00 00 38 	movh.a %a3,32768
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005902:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
80005904:	d9 33 9c 90 	lea %a3,[%a3]2652 <80000a5c <IfxPort_cfg_esrMasks>>
80005908:	a0 ff       	mov.a %a15,15
8000590a:	d0 32       	addsc.a %a2,%a3,%d15,3
8000590c:	d4 25       	ld.a %a5,[%a2]
8000590e:	7d 54 0c 80 	jne.a %a4,%a5,80005926 <IfxPort_disableEmergencyStop+0x28>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005912:	b9 2f 04 00 	ld.hu %d15,[%a2]4
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
80005916:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005918:	57 0f 61 f4 	extr.u %d15,%d15,%d4,1
8000591c:	6e 08       	jz %d15,8000592c <IfxPort_disableEmergencyStop+0x2e>
            {
                IfxPort_resetESR(port, pinIndex);
8000591e:	6d ff dc ff 	call 800058d6 <IfxPort_resetESR>
                result = TRUE;
80005922:	82 12       	mov %d2,1
80005924:	00 90       	ret 
boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005926:	c2 1f       	add %d15,1
80005928:	fc f1       	loop %a15,8000590a <IfxPort_disableEmergencyStop+0xc>
/******************************************************************************/

boolean IfxPort_disableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;
8000592a:	82 02       	mov %d2,0
            break;
        }
    }

    return result;
}
8000592c:	00 90       	ret 

8000592e <IfxPort_setESR>:
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
8000592e:	40 4f       	mov.aa %a15,%a4
80005930:	02 48       	mov %d8,%d4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005932:	6d 00 80 0c 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005936:	02 24       	mov %d4,%d2
}


void IfxPort_setESR(Ifx_P *port, uint8 pinIndex)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005938:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
8000593a:	6d 00 7c 0b 	call 80007032 <IfxScuWdt_clearCpuEndinit>
    __ldmst(&port->ESR.U, 1U << pinIndex, 1U << pinIndex);
8000593e:	82 12       	mov %d2,1
80005940:	0f 82 00 20 	sh %d2,%d2,%d8
80005944:	d9 f4 10 10 	lea %a4,[%a15]80
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005948:	53 12 40 60 	mul.u %e6,%d2,1

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
8000594c:	02 27       	mov %d7,%d2
8000594e:	49 46 40 08 	ldmst [%a4]0,%e6
    IfxScuWdt_setCpuEndinit(passwd);
80005952:	02 f4       	mov %d4,%d15
80005954:	1d 00 a4 0c 	j 8000729c <IfxScuWdt_setCpuEndinit>

80005958 <IfxPort_enableEmergencyStop>:
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
80005958:	82 19       	mov %d9,1
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
8000595a:	91 00 00 d8 	movh.a %a13,32768
    return result;
}


boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
8000595e:	40 4c       	mov.aa %a12,%a4
80005960:	02 48       	mov %d8,%d4
80005962:	0f 49 00 90 	sh %d9,%d9,%d4
    sint32  portIndex;
    boolean result = FALSE;
80005966:	82 02       	mov %d2,0

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005968:	82 0f       	mov %d15,0
    {
        if (port == IfxPort_cfg_esrMasks[portIndex].port)
8000596a:	d9 dd 9c 90 	lea %a13,[%a13]2652 <80000a5c <IfxPort_cfg_esrMasks>>
8000596e:	d0 df       	addsc.a %a15,%a13,%d15,3
80005970:	c8 02       	ld.a %a2,[%a15]0
80005972:	7d 2c 0b 80 	jne.a %a12,%a2,80005988 <IfxPort_enableEmergencyStop+0x30>
        {
            if ((1U << pinIndex) & IfxPort_cfg_esrMasks[portIndex].masks)
80005976:	b9 f3 04 00 	ld.hu %d3,[%a15]4
8000597a:	26 93       	and %d3,%d9
8000597c:	76 36       	jz %d3,80005988 <IfxPort_enableEmergencyStop+0x30>
            {
                IfxPort_setESR(port, pinIndex);
8000597e:	40 c4       	mov.aa %a4,%a12
80005980:	02 84       	mov %d4,%d8
80005982:	6d ff d6 ff 	call 8000592e <IfxPort_setESR>
                result = TRUE;
80005986:	82 12       	mov %d2,1
boolean IfxPort_enableEmergencyStop(Ifx_P *port, uint8 pinIndex)
{
    sint32  portIndex;
    boolean result = FALSE;

    for (portIndex = 0; portIndex < IFXPORT_NUM_MODULES; portIndex++)
80005988:	c2 1f       	add %d15,1
8000598a:	8b 0f 21 32 	ne %d3,%d15,16
8000598e:	df 03 f0 ff 	jne %d3,0,8000596e <IfxPort_enableEmergencyStop+0x16>
            }
        }
    }

    return result;
}
80005992:	00 90       	ret 

80005994 <IfxPort_setGroupModeInput>:
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005994:	82 0f       	mov %d15,0
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setGroupModeInput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_InputMode mode)
{
80005996:	20 20       	sub.a %sp,32
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005998:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
8000599a:	78 04       	st.w [%sp]16,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
8000599c:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
8000599e:	78 05       	st.w [%sp]20,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
800059a0:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
800059a2:	78 06       	st.w [%sp]24,%d15
    uint32 iocrMask[4];

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
800059a4:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
800059a6:	78 07       	st.w [%sp]28,%d15
800059a8:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
800059ac:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
800059b0:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
800059b4:	3b 80 0f 70 	mov %d7,248
800059b8:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
800059bc:	9f 0f 07 80 	jned %d15,0,800059ca <IfxPort_setGroupModeInput+0x36>
800059c0:	d9 44 10 00 	lea %a4,[%a4]16
800059c4:	82 0f       	mov %d15,0
800059c6:	a0 3f       	mov.a %a15,3
800059c8:	3c 1e       	j 80005a04 <IfxPort_setGroupModeInput+0x70>
    {
        if ((imask & (1U << i)) != 0)
800059ca:	57 05 61 24 	extr.u %d2,%d5,%d4,1
800059ce:	df 02 19 00 	jeq %d2,0,80005a00 <IfxPort_setGroupModeInput+0x6c>
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
800059d2:	8f 34 c0 31 	andn %d3,%d4,3
800059d6:	60 32       	mov.a %a2,%d3
800059d8:	d9 af 20 00 	lea %a15,[%sp]32
800059dc:	30 2f       	add.a %a15,%a2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
800059de:	8f 34 00 21 	and %d2,%d4,3
800059e2:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
800059e4:	19 f0 f0 ff 	ld.w %d0,[%a15]-16
800059e8:	0f 27 00 30 	sh %d3,%d7,%d2
800059ec:	a6 03       	or %d3,%d0
800059ee:	59 f3 f0 ff 	st.w [%a15]-16,%d3
            iocrVal[index]  |= (mode) << shift;
800059f2:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
800059f6:	0f 26 00 20 	sh %d2,%d6,%d2
800059fa:	a6 32       	or %d2,%d3
800059fc:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005a00:	c2 14       	add %d4,1
80005a02:	3c dd       	j 800059bc <IfxPort_setGroupModeInput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
80005a04:	d9 a3 20 00 	lea %a3,[%sp]32
80005a08:	90 32       	addsc.a %a2,%a3,%d15,2
80005a0a:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005a0e:	76 47       	jz %d4,80005a1c <IfxPort_setGroupModeInput+0x88>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005a10:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005a14:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005a16:	02 43       	mov %d3,%d4
80005a18:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
80005a1c:	c2 1f       	add %d15,1
80005a1e:	b0 44       	add.a %a4,4
80005a20:	fc f2       	loop %a15,80005a04 <IfxPort_setGroupModeInput+0x70>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
80005a22:	00 90       	ret 

80005a24 <IfxPort_setGroupModeOutput>:
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005a24:	82 0f       	mov %d15,0
    }
}


void IfxPort_setGroupModeOutput(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_OutputMode mode, IfxPort_OutputIdx index)
{
80005a26:	20 20       	sub.a %sp,32
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005a28:	78 00       	st.w [%sp]0,%d15
        iocrMask[i] = 0;
80005a2a:	78 04       	st.w [%sp]16,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005a2c:	78 01       	st.w [%sp]4,%d15
        iocrMask[i] = 0;
80005a2e:	78 05       	st.w [%sp]20,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005a30:	78 02       	st.w [%sp]8,%d15
        iocrMask[i] = 0;
80005a32:	78 06       	st.w [%sp]24,%d15
    IFX_UNUSED_PARAMETER(index == IfxPort_OutputIdx_general);

    /* initialise */
    for (i = 0; i < 4; i++)
    {
        iocrVal[i]  = 0;
80005a34:	78 03       	st.w [%sp]12,%d15
        iocrMask[i] = 0;
80005a36:	78 07       	st.w [%sp]28,%d15
80005a38:	8b 14 a1 22 	ge.u %d2,%d4,17
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005a3c:	8b 04 01 f1 	rsub %d15,%d4,16
        iocrVal[i]  = 0;
        iocrMask[i] = 0;
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;
80005a40:	0f 45 00 50 	sh %d5,%d5,%d4
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005a44:	3b 80 0f 00 	mov %d0,248
80005a48:	ab 0f a0 f2 	seln %d15,%d2,%d15,0
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005a4c:	9f 0f 07 80 	jned %d15,0,80005a5a <IfxPort_setGroupModeOutput+0x36>
80005a50:	d9 44 10 00 	lea %a4,[%a4]16
80005a54:	82 0f       	mov %d15,0
80005a56:	a0 3f       	mov.a %a15,3
80005a58:	3c 1f       	j 80005a96 <IfxPort_setGroupModeOutput+0x72>
    {
        if ((imask & (1U << i)) != 0)
80005a5a:	57 05 61 24 	extr.u %d2,%d5,%d4,1
80005a5e:	df 02 1a 00 	jeq %d2,0,80005a92 <IfxPort_setGroupModeOutput+0x6e>
        {
            uint32 index = i / 4;
80005a62:	8f e4 1f 30 	sh %d3,%d4,-2
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005a66:	d9 a2 20 00 	lea %a2,[%sp]32
80005a6a:	01 23 02 f6 	addsc.a %a15,%a2,%d3,2
    for (i = pinIndex; i < 16; i++)
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
80005a6e:	8f 34 00 21 	and %d2,%d4,3
80005a72:	06 32       	sh %d2,3
            iocrMask[index] |= (0x1FU << 3) << shift;
            iocrVal[index]  |= (mode | index) << shift;
80005a74:	a6 63       	or %d3,%d6
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005a76:	0f 20 00 70 	sh %d7,%d0,%d2
80005a7a:	19 f1 f0 ff 	ld.w %d1,[%a15]-16
            iocrVal[index]  |= (mode | index) << shift;
80005a7e:	0f 23 00 20 	sh %d2,%d3,%d2
80005a82:	19 f3 e0 ff 	ld.w %d3,[%a15]-32
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005a86:	a6 17       	or %d7,%d1
            iocrVal[index]  |= (mode | index) << shift;
80005a88:	a6 32       	or %d2,%d3
    {
        if ((imask & (1U << i)) != 0)
        {
            uint32 index = i / 4;
            uint32 shift = (i & 0x3U) * 8;
            iocrMask[index] |= (0x1FU << 3) << shift;
80005a8a:	59 f7 f0 ff 	st.w [%a15]-16,%d7
            iocrVal[index]  |= (mode | index) << shift;
80005a8e:	59 f2 e0 ff 	st.w [%a15]-32,%d2
    }

    /* calculate IOCRx values and masks */
    uint32 imask = (uint32)mask << pinIndex;

    for (i = pinIndex; i < 16; i++)
80005a92:	c2 14       	add %d4,1
80005a94:	3c dc       	j 80005a4c <IfxPort_setGroupModeOutput+0x28>
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
    {
        if (iocrMask[i] != 0)
80005a96:	d9 a3 20 00 	lea %a3,[%sp]32
80005a9a:	90 32       	addsc.a %a2,%a3,%d15,2
80005a9c:	19 24 f0 ff 	ld.w %d4,[%a2]-16
80005aa0:	76 47       	jz %d4,80005aae <IfxPort_setGroupModeOutput+0x8a>
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005aa2:	19 22 e0 ff 	ld.w %d2,[%a2]-32
80005aa6:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005aa8:	02 43       	mov %d3,%d4
80005aaa:	49 42 40 08 	ldmst [%a4]0,%e2
            iocrVal[index]  |= (mode | index) << shift;
        }
    }

    /* write IOCRx */
    for (i = 0; i < 4; i++)
80005aae:	c2 1f       	add %d15,1
80005ab0:	b0 44       	add.a %a4,4
80005ab2:	fc f2       	loop %a15,80005a96 <IfxPort_setGroupModeOutput+0x72>
        if (iocrMask[i] != 0)
        {
            __ldmst(&((&(port->IOCR0.U))[i]), iocrMask[i], iocrVal[i]);
        }
    }
}
80005ab4:	00 90       	ret 

80005ab6 <IfxPort_setGroupPadDriver>:


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
80005ab6:	20 10       	sub.a %sp,16
80005ab8:	02 4f       	mov %d15,%d4
80005aba:	02 5a       	mov %d10,%d5
80005abc:	40 4c       	mov.aa %a12,%a4
80005abe:	02 69       	mov %d9,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005ac0:	6d 00 b9 0b 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005ac4:	02 24       	mov %d4,%d2
}


void IfxPort_setGroupPadDriver(Ifx_P *port, uint8 pinIndex, uint16 mask, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005ac6:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005ac8:	6d 00 b5 0a 	call 80007032 <IfxScuWdt_clearCpuEndinit>
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
80005acc:	82 03       	mov %d3,0
80005ace:	74 a3       	st.w [%sp],%d3
            pdrMask[i] = 0;
80005ad0:	59 a3 08 00 	st.w [%sp]8,%d3
        uint32 pdrMask[2];

        /* initialise */
        for (i = 0; i < 2; i++)
        {
            pdrVal[i]  = 0;
80005ad4:	59 a3 04 00 	st.w [%sp]4,%d3
            pdrMask[i] = 0;
80005ad8:	59 a3 0c 00 	st.w [%sp]12,%d3
80005adc:	8b 1f a1 22 	ge.u %d2,%d15,17
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005ae0:	8b 0f 01 31 	rsub %d3,%d15,16
            pdrVal[i]  = 0;
            pdrMask[i] = 0;
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;
80005ae4:	0f fa 00 50 	sh %d5,%d10,%d15
80005ae8:	ab 03 a0 32 	seln %d3,%d2,%d3,0

        for (i = pinIndex; i < 16; i++)
80005aec:	9f 03 03 80 	jned %d3,0,80005af2 <IfxPort_setGroupPadDriver+0x3c>
80005af0:	3c 1d       	j 80005b2a <IfxPort_setGroupPadDriver+0x74>
        {
            if ((imask & (1U << i)) != 0)
80005af2:	57 05 61 2f 	extr.u %d2,%d5,%d15,1
80005af6:	df 02 18 00 	jeq %d2,0,80005b26 <IfxPort_setGroupPadDriver+0x70>
            {
                uint32 index = i / 8;
80005afa:	8f df 1f 40 	sh %d4,%d15,-3
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005afe:	d9 a2 10 00 	lea %a2,[%sp]16
80005b02:	01 24 02 f6 	addsc.a %a15,%a2,%d4,2
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005b06:	8f 7f 00 21 	and %d2,%d15,7
                pdrMask[index] |= (0xFUL << shift);
80005b0a:	19 f4 f8 ff 	ld.w %d4,[%a15]-8
        for (i = pinIndex; i < 16; i++)
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
80005b0e:	06 22       	sh %d2,2
                pdrMask[index] |= (0xFUL << shift);
80005b10:	d7 f4 04 42 	insert %d4,%d4,15,%d2,4
                pdrVal[index]  |= (padDriver << shift);
80005b14:	0f 29 00 20 	sh %d2,%d9,%d2
        {
            if ((imask & (1U << i)) != 0)
            {
                uint32 index = i / 8;
                uint32 shift = (i & 0x7U) * 4;
                pdrMask[index] |= (0xFUL << shift);
80005b18:	59 f4 f8 ff 	st.w [%a15]-8,%d4
                pdrVal[index]  |= (padDriver << shift);
80005b1c:	19 f4 f0 ff 	ld.w %d4,[%a15]-16
80005b20:	a6 42       	or %d2,%d4
80005b22:	59 f2 f0 ff 	st.w [%a15]-16,%d2
        }

        /* calculate PDRx values and masks */
        uint32 imask = (uint32)mask << pinIndex;

        for (i = pinIndex; i < 16; i++)
80005b26:	c2 1f       	add %d15,1
80005b28:	3c e2       	j 80005aec <IfxPort_setGroupPadDriver+0x36>
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005b2a:	58 02       	ld.w %d15,[%sp]8
80005b2c:	6e 08       	jz %d15,80005b3c <IfxPort_setGroupPadDriver+0x86>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005b2e:	d9 cf 00 10 	lea %a15,[%a12]64
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005b32:	54 a6       	ld.w %d6,[%sp]
80005b34:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005b36:	02 f7       	mov %d7,%d15
80005b38:	49 f6 40 08 	ldmst [%a15]0,%e6
        }

        /* write PDRx */
        for (i = 0; i < 2; i++)
        {
            if (pdrMask[i] != 0)
80005b3c:	58 03       	ld.w %d15,[%sp]12
80005b3e:	6e 09       	jz %d15,80005b50 <IfxPort_setGroupPadDriver+0x9a>
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
80005b40:	d9 cc 04 10 	lea %a12,[%a12]68
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005b44:	19 a6 04 00 	ld.w %d6,[%sp]4
80005b48:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005b4a:	02 f7       	mov %d7,%d15
80005b4c:	49 c6 40 08 	ldmst [%a12]0,%e6
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005b50:	02 84       	mov %d4,%d8
}
80005b52:	d9 aa 10 00 	lea %sp,[%sp]16
            {
                __ldmst(&((&(port->PDR0.U))[i]), pdrMask[i], pdrVal[i]);
            }
        }
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005b56:	1d 00 a3 0b 	j 8000729c <IfxScuWdt_setCpuEndinit>

80005b5a <IfxPort_setPinMode>:
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
80005b5a:	91 40 00 2f 	movh.a %a2,61444

void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005b5e:	8f 34 00 91 	and %d9,%d4,3

    if (port == &MODULE_P40)
80005b62:	d9 22 00 0e 	lea %a2,[%a2]-8192 <f003e000 <_SMALL_DATA4_+0x40036000>>
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinMode(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode)
{
80005b66:	40 4f       	mov.aa %a15,%a4
80005b68:	02 4f       	mov %d15,%d4
80005b6a:	02 5a       	mov %d10,%d5
    volatile Ifx_P_IOCR0 *iocr      = &(port->IOCR0);
80005b6c:	d9 4c 10 00 	lea %a12,[%a4]16
    uint8                 iocrIndex = (pinIndex / 4);
80005b70:	8f e4 1f b0 	sh %d11,%d4,-2
    uint8                 shift     = (pinIndex & 0x3U) * 8;
80005b74:	06 39       	sh %d9,3

    if (port == &MODULE_P40)
80005b76:	7d 24 11 80 	jne.a %a4,%a2,80005b98 <IfxPort_setPinMode+0x3e>
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005b7a:	6d 00 5c 0b 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>
        IfxScuWdt_clearCpuEndinit(passwd);
80005b7e:	02 24       	mov %d4,%d2
    uint8                 iocrIndex = (pinIndex / 4);
    uint8                 shift     = (pinIndex & 0x3U) * 8;

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005b80:	02 28       	mov %d8,%d2
        IfxScuWdt_clearCpuEndinit(passwd);
80005b82:	6d 00 58 0a 	call 80007032 <IfxScuWdt_clearCpuEndinit>
        port->PDISC.U &= ~(1 << pinIndex);
80005b86:	19 f2 20 10 	ld.w %d2,[%a15]96
        IfxScuWdt_setCpuEndinit(passwd);
80005b8a:	02 84       	mov %d4,%d8

    if (port == &MODULE_P40)
    {
        uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
        IfxScuWdt_clearCpuEndinit(passwd);
        port->PDISC.U &= ~(1 << pinIndex);
80005b8c:	d7 02 01 ff 	insert %d15,%d2,0,%d15,1
80005b90:	59 ff 20 10 	st.w [%a15]96,%d15
        IfxScuWdt_setCpuEndinit(passwd);
80005b94:	6d 00 84 0b 	call 8000729c <IfxScuWdt_setCpuEndinit>
    }

    __ldmst(&iocr[iocrIndex].U, (0xFFUL << shift), (mode << shift));
80005b98:	da ff       	mov %d15,255
80005b9a:	01 cb 02 f6 	addsc.a %a15,%a12,%d11,2
80005b9e:	0f 9f 00 f0 	sh %d15,%d15,%d9
80005ba2:	0f 9a 00 20 	sh %d2,%d10,%d9
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005ba6:	82 03       	mov %d3,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005ba8:	02 f3       	mov %d3,%d15
80005baa:	49 f2 40 08 	ldmst [%a15]0,%e2
80005bae:	00 90       	ret 

80005bb0 <IfxPort_setPinModeLvdsHigh>:
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
80005bb0:	02 5a       	mov %d10,%d5
80005bb2:	40 4f       	mov.aa %a15,%a4
80005bb4:	02 49       	mov %d9,%d4
80005bb6:	02 6f       	mov %d15,%d6
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005bb8:	6d 00 3d 0b 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005bbc:	02 24       	mov %d4,%d2
}


void IfxPort_setPinModeLvdsHigh(Ifx_P *port, uint8 pinIndex, IfxPort_Mode mode, IfxPort_ControlledBy enablePortControlled)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005bbe:	02 28       	mov %d8,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005bc0:	6d 00 39 0a 	call 80007032 <IfxScuWdt_clearCpuEndinit>

    if (mode < IfxPort_Mode_outputPushPullGeneral)
80005bc4:	37 0a 48 50 	extr %d5,%d10,0,8
80005bc8:	bf 05 11 00 	jlt %d5,0,80005bea <IfxPort_setPinModeLvdsHigh+0x3a>
    {
        if (pinIndex < 2)
80005bcc:	bf 29 21 80 	jlt.u %d9,2,80005c0e <IfxPort_setPinModeLvdsHigh+0x5e>
        {}
        else
        {
            port->LPCR1.B_P21.RDIS_CTRL = enablePortControlled;
80005bd0:	19 f2 24 20 	ld.w %d2,[%a15]164
80005bd4:	37 f2 01 f0 	insert %d15,%d2,%d15,0,1
80005bd8:	59 ff 24 20 	st.w [%a15]164,%d15
            port->LPCR1.B_P21.RX_DIS    = 0;
80005bdc:	19 ff 24 20 	ld.w %d15,[%a15]164
80005be0:	8f 2f c0 f1 	andn %d15,%d15,2
80005be4:	59 ff 24 20 	st.w [%a15]164,%d15
80005be8:	3c 13       	j 80005c0e <IfxPort_setPinModeLvdsHigh+0x5e>
        }
    }
    else
    {
        port->LPCR2.B.TDIS_CTRL = enablePortControlled;
80005bea:	19 f2 28 20 	ld.w %d2,[%a15]168
80005bee:	67 f2 0c f0 	ins.t %d15,%d2,12,%d15,0
80005bf2:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_DIS    = 0;
80005bf6:	19 ff 28 20 	ld.w %d15,[%a15]168
80005bfa:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80005bfe:	59 ff 28 20 	st.w [%a15]168,%d15
        port->LPCR2.B.TX_PD     = 0;
80005c02:	19 ff 28 20 	ld.w %d15,[%a15]168
80005c06:	b7 0f 01 f7 	insert %d15,%d15,0,14,1
80005c0a:	59 ff 28 20 	st.w [%a15]168,%d15
    }

    IfxScuWdt_setCpuEndinit(passwd);
80005c0e:	02 84       	mov %d4,%d8
80005c10:	1d 00 46 0b 	j 8000729c <IfxScuWdt_setCpuEndinit>

80005c14 <IfxPort_setPinModeLvdsMedium>:
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005c14:	0b 65 10 a8 	mov %e10,%d5,%d6
80005c18:	40 4f       	mov.aa %a15,%a4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005c1a:	8f f4 1f 90 	sh %d9,%d4,-1
    IfxScuWdt_setCpuEndinit(passwd);
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
80005c1e:	02 48       	mov %d8,%d4
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005c20:	6d 00 09 0b 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005c24:	02 24       	mov %d4,%d2
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();
80005c26:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005c28:	6d 00 05 0a 	call 80007032 <IfxScuWdt_clearCpuEndinit>
}


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
80005c2c:	06 d8       	sh %d8,-3
    uint32                shift      = ((pinIndex / 2) * 8);
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
80005c2e:	d9 f2 00 10 	lea %a2,[%a15]64
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005c32:	01 28 02 26 	addsc.a %a2,%a2,%d8,2


void IfxPort_setPinModeLvdsMedium(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver lvdsPadDriver, IfxPort_PadSupply padSupply)
{
    uint32                pdrOffset  = (pinIndex / 8);
    uint32                shift      = ((pinIndex / 2) * 8);
80005c36:	8f 39 00 20 	sh %d2,%d9,3
    uint32                lpcrOffset = (pinIndex / 2);
    volatile Ifx_P_PDR0  *pdr        = &(port->PDR0);
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
80005c3a:	d9 f4 20 20 	lea %a4,[%a15]160
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005c3e:	01 49 02 46 	addsc.a %a4,%a4,%d9,2
    volatile Ifx_P_LPCR0 *lpcr       = &(port->LPCR0);
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
80005c42:	0f 2b 00 50 	sh %d5,%d11,%d2
80005c46:	74 25       	st.w [%a2],%d5
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005c48:	54 46       	ld.w %d6,[%a4]
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005c4a:	02 f4       	mov %d4,%d15
    uint16                passwd     = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        pdr[pdrOffset].U       = (lvdsPadDriver << shift); /* configuring LVDS mode */
        lpcr[lpcrOffset].B.PS1 = padSupply;
80005c4c:	67 a6 01 60 	ins.t %d6,%d6,1,%d10,0
80005c50:	74 46       	st.w [%a4],%d6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005c52:	1d 00 25 0b 	j 8000729c <IfxScuWdt_setCpuEndinit>

80005c56 <IfxPort_setPinPadDriver>:
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
80005c56:	0b 45 10 88 	mov %e8,%d5,%d4
80005c5a:	40 4f       	mov.aa %a15,%a4
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005c5c:	6d 00 eb 0a 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80005c60:	02 24       	mov %d4,%d2
}


void IfxPort_setPinPadDriver(Ifx_P *port, uint8 pinIndex, IfxPort_PadDriver padDriver)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80005c62:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80005c64:	6d 00 e7 09 	call 80007032 <IfxScuWdt_clearCpuEndinit>
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
80005c68:	8f 78 00 21 	and %d2,%d8,7
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005c6c:	06 22       	sh %d2,2
80005c6e:	06 d8       	sh %d8,-3
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(passwd);
    {
        volatile uint32 *pdr      = (volatile uint32 *)&(port->PDR0.U);
80005c70:	d9 ff 00 10 	lea %a15,[%a15]64
        uint8            pdrIndex = (pinIndex / 8);
        uint8            shift    = (pinIndex & 0x7U) * 4;
        __ldmst(&(pdr[pdrIndex]), (0xFUL << shift), (padDriver << shift));
80005c74:	3b f0 00 30 	mov %d3,15
80005c78:	01 f8 02 f6 	addsc.a %a15,%a15,%d8,2
80005c7c:	0f 23 00 30 	sh %d3,%d3,%d2
80005c80:	0f 29 00 60 	sh %d6,%d9,%d2
                  ldmst [%0]0,%A2"
                     ::"a"(address), "d"(mask), "d"((long long)value));
80005c84:	82 07       	mov %d7,0

/** Insert LDMST instruction. Note that all operands must be word-aligned.
 */
IFX_INLINE void Ifx__ldmst(volatile void* address, uint32 mask, uint32 value)
{
    __asm__ volatile("mov %H2,%1 \n\
80005c86:	02 37       	mov %d7,%d3
80005c88:	49 f6 40 08 	ldmst [%a15]0,%e6
    }
    IfxScuWdt_setCpuEndinit(passwd);
80005c8c:	02 f4       	mov %d4,%d15
80005c8e:	1d 00 07 0b 	j 8000729c <IfxScuWdt_setCpuEndinit>
	...

80005c94 <IfxScuCcu_calculateSysPllDividers>:
        //' K2+1 div should be even for 50% duty cycle
        k2Steps = 2;

        if (fPll > 240000000)
        {
            k2Steps = 1;
80005c94:	7b e0 e4 30 	movh %d3,3662
80005c98:	1b 13 c0 31 	addi %d3,%d3,7169
80005c9c:	0b 34 30 c1 	lt.u %d12,%d4,%d3
80005ca0:	82 2f       	mov %d15,2
80005ca2:	ab 1f 80 cc 	sel %d12,%d12,%d15,1
80005ca6:	8f 4c 00 80 	sh %d8,%d12,4
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005caa:	7b c0 be 00 	movh %d0,3052

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005cae:	91 40 0f 50 	movh.a %a5,244
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005cb2:	7b 80 82 6e 	movh %d6,59432
80005cb6:	91 80 7d 61 	movh.a %a6,6104

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
    uint8   deviationAllowed = 2;
    uint32  fOsc             = cfg->xtalFrequency;
80005cba:	19 4e 10 10 	ld.w %d14,[%a4]80
80005cbe:	60 83       	mov.a %a3,%d8
        uint32       bestK2 = 0, bestN = 0, bestP = 0;

        uint64       fRef, fVco;
        uint64       fPllLeastError;

        fPllLeastError = fPllMax;
80005cc0:	1b 00 20 0c 	addi %d0,%d0,-15872

        uint32       p;
        uint32       n;
        uint32       k2;
        uint32       k2Steps;
        uint32       bestK2 = 0, bestN = 0, bestP = 0;
80005cc4:	d2 0a       	mov %e10,0
80005cc6:	82 09       	mov %d9,0
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005cc8:	3b 00 01 50 	mov %d5,16
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005ccc:	d9 55 41 02 	lea %a5,[%a5]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005cd0:	82 f7       	mov %d7,-1
80005cd2:	1b 06 c0 67 	addi %d6,%d6,31744
80005cd6:	d9 66 41 08 	lea %a6,[%a6]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
80005cda:	a0 ff       	mov.a %a15,15
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005cdc:	4b 5e 11 22 	div.u %e2,%d14,%d5

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005ce0:	7b 60 f8 1f 	movh %d1,65414
80005ce4:	1b 01 e0 1e 	addi %d1,%d1,-4608
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
        {
            fRef = (fOsc / p);
80005ce8:	82 03       	mov %d3,0

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
80005cea:	0b 12 40 10 	addx %d1,%d2,%d1
80005cee:	8b f3 bf 20 	addc %d2,%d3,-1
80005cf2:	80 53       	mov.d %d3,%a5
80005cf4:	ba 02       	eq %d15,%d2,0
80005cf6:	0b 31 50 f2 	and.ge.u %d15,%d1,%d3
80005cfa:	8b 02 00 f5 	or.ne %d15,%d2,0
80005cfe:	ee 24       	jnz %d15,80005d46 <IfxScuCcu_calculateSysPllDividers+0xb2>
80005d00:	02 5d       	mov %d13,%d5
80005d02:	82 11       	mov %d1,1
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
80005d04:	03 41 68 26 	madd.u %e2,%e6,%d1,%d4
80005d08:	80 68       	mov.d %d8,%a6
80005d0a:	ba 03       	eq %d15,%d3,0
80005d0c:	0b 82 50 f2 	and.ge.u %d15,%d2,%d8
80005d10:	8b 03 00 f5 	or.ne %d15,%d3,0
80005d14:	ee 13       	jnz %d15,80005d3a <IfxScuCcu_calculateSysPllDividers+0xa6>
80005d16:	82 18       	mov %d8,1
80005d18:	c5 02 3f 10 	lea %a2,7f <_.+0x7e>
                    {
                        for (n = nMin; n <= nMax; n++)
                        {
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);
80005d1c:	4b d8 11 22 	div.u %e2,%d8,%d13
80005d20:	e2 e2       	mul %d2,%d14
80005d22:	a2 42       	sub %d2,%d4

                            if (fPllError == 0)
80005d24:	df 02 18 00 	jeq %d2,0,80005d54 <IfxScuCcu_calculateSysPllDividers+0xc0>
                                bestP          = p;

                                goto EXITCALC_LOOP;
                            }

                            if (fPllLeastError > fPllError)
80005d28:	82 1f       	mov %d15,1
80005d2a:	0b 02 50 f2 	and.ge.u %d15,%d2,%d0
80005d2e:	6a 8b       	cmovn %d11,%d15,%d8
80005d30:	6a 20       	cmovn %d0,%d15,%d2
80005d32:	6a 5a       	cmovn %d10,%d15,%d5
80005d34:	6a 19       	cmovn %d9,%d15,%d1
                {
                    fVco = ((uint64)fPll) * k2;

                    if ((fVco >= fVcoMin) && (fVco <= fVcoMax))
                    {
                        for (n = nMin; n <= nMax; n++)
80005d36:	c2 18       	add %d8,1
80005d38:	fc 22       	loop %a2,80005d1c <IfxScuCcu_calculateSysPllDividers+0x88>
80005d3a:	80 3f       	mov.d %d15,%a3
        {
            fRef = (fOsc / p);

            if ((fRef >= fRefMin) && (fRef <= fRefMax))
            {
                for (k2 = k2Min; k2 <= k2Max; k2 += k2Steps)
80005d3c:	42 c1       	add %d1,%d12
80005d3e:	42 fd       	add %d13,%d15
80005d40:	8b 11 68 f2 	lt.u %d15,%d1,129
80005d44:	ee e0       	jnz %d15,80005d04 <IfxScuCcu_calculateSysPllDividers+0x70>
80005d46:	60 c2       	mov.a %a2,%d12
        if (fPll > 240000000)
        {
            k2Steps = 1;
        }

        for (p = pMax; p >= pMin; p--)
80005d48:	c2 f5       	add %d5,-1
80005d4a:	01 23 20 30 	sub.a %a3,%a3,%a2
80005d4e:	fd f0 c7 7f 	loop %a15,80005cdc <IfxScuCcu_calculateSysPllDividers+0x48>
80005d52:	3c 05       	j 80005d5c <IfxScuCcu_calculateSysPllDividers+0xc8>

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
                                bestN          = n;
80005d54:	0b 58 10 a8 	mov %e10,%d8,%d5
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
                                bestK2         = k2;
80005d58:	02 19       	mov %d9,%d1
                            uint64 fPllError;
                            fPllError = ((((n) / (p * k2)) * fOsc) - fPll);

                            if (fPllError == 0)
                            {
                                fPllLeastError = fPllError;
80005d5a:	82 00       	mov %d0,0
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005d5c:	da 64       	mov %d15,100
80005d5e:	06 14       	sh %d4,1
80005d60:	4b f4 11 42 	div.u %e4,%d4,%d15
80005d64:	82 1f       	mov %d15,1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
        }
        else
        {
            retVal = 1;
80005d66:	82 12       	mov %d2,1
            }
        }

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
80005d68:	0b 40 50 f2 	and.ge.u %d15,%d0,%d4
80005d6c:	ee 0f       	jnz %d15,80005d8a <IfxScuCcu_calculateSysPllDividers+0xf6>
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005d6e:	82 02       	mov %d2,0

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005d70:	c2 fb       	add %d11,-1
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005d72:	c2 fa       	add %d10,-1
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005d74:	c2 f9       	add %d9,-1
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
80005d76:	59 42 0c 00 	st.w [%a4]12,%d2

EXITCALC_LOOP:

        if ((fPllLeastError) < ((fPll * deviationAllowed) / 100)) // percent ALLOWED_DEVIATION error allowed
        {
            cfg->sysPll.pllInitialStep.nDivider  = (uint8)(bestN - 1);
80005d7a:	e9 4b 09 00 	st.b [%a4]9,%d11
            cfg->sysPll.pllInitialStep.pDivider  = (uint8)(bestP - 1);
80005d7e:	e9 4a 08 00 	st.b [%a4]8,%d10
            cfg->sysPll.pllInitialStep.k2Initial = (uint8)(bestK2 - 1);
80005d82:	e9 49 0a 00 	st.b [%a4]10,%d9
            cfg->sysPll.pllInitialStep.waitTime  = 0; // wait time = 0
            cfg->sysPll.numOfPllDividerSteps     = 0; // no step clock incr
80005d86:	2c 40       	st.b [%a4]0,%d15
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

boolean IfxScuCcu_calculateSysPllDividers(IfxScuCcu_Config *cfg, uint32 fPll)
{
    boolean retVal           = 0;
80005d88:	82 02       	mov %d2,0
        {
            retVal = 1;
        }
    }
    return retVal;
}
80005d8a:	00 90       	ret 

80005d8c <IfxScuCcu_getOsc0Frequency>:
}


float32 IfxScuCcu_getOsc0Frequency(void)
{
    return (float32)IfxScuCcu_xtalFrequency;
80005d8c:	91 00 00 f7 	movh.a %a15,28672
80005d90:	19 f2 28 30 	ld.w %d2,[%a15]232 <700000e8 <IfxScuCcu_xtalFrequency>>
}
80005d94:	4b 02 61 21 	utof %d2,%d2
80005d98:	00 90       	ret 

80005d9a <IfxScuCcu_getOscFrequency>:

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005d9a:	91 30 00 ff 	movh.a %a15,61443
80005d9e:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80005da2:	4c f0       	ld.w %d15,[%a15]0
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005da4:	7b f0 cb 24 	movh %d2,19647

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005da8:	37 0f 62 fe 	extr.u %d15,%d15,28,2
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
80005dac:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getOscFrequency(void)
{
    float32 freq;

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
80005db0:	6e 0c       	jz %d15,80005dc8 <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005db2:	4c f0       	ld.w %d15,[%a15]0
        freq = (float32)IfxScuCcu_xtalFrequency;
    }
    else
    {
        /* Reserved values, this */
        freq = 0.0;
80005db4:	82 02       	mov %d2,0

    if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc1)
    {
        freq = IFXSCU_EVR_OSC_FREQUENCY;
    }
    else if (SCU_CCUCON1.B.INSEL == IfxScu_CCUCON1_INSEL_fOsc0)
80005db6:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80005dba:	5e 17       	jne %d15,1,80005dc8 <IfxScuCcu_getOscFrequency+0x2e>
    {
        freq = (float32)IfxScuCcu_xtalFrequency;
80005dbc:	91 00 00 f7 	movh.a %a15,28672
80005dc0:	19 f2 28 30 	ld.w %d2,[%a15]232 <700000e8 <IfxScuCcu_xtalFrequency>>
80005dc4:	4b 02 61 21 	utof %d2,%d2
        /* Reserved values, this */
        freq = 0.0;
    }

    return freq;
}
80005dc8:	00 90       	ret 

80005dca <IfxScuCcu_getPllErayFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005dca:	91 30 00 ff 	movh.a %a15,61443
80005dce:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80005dd2:	6d ff e4 ff 	call 80005d9a <IfxScuCcu_getOscFrequency>

    if (scu->PLLERAYSTAT.B.VCOBYST == 1)
80005dd6:	4c f9       	ld.w %d15,[%a15]36
80005dd8:	2e 05       	jz.t %d15,0,80005de2 <IfxScuCcu_getPllErayFrequency+0x18>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLERAYCON1.B.K1DIV + 1);
80005dda:	4c fb       	ld.w %d15,[%a15]44
80005ddc:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005de0:	3c 21       	j 80005e22 <IfxScuCcu_getPllErayFrequency+0x58>
    }
    else if (scu->PLLERAYSTAT.B.FINDIS == 1)
80005de2:	4c f9       	ld.w %d15,[%a15]36
80005de4:	6f 3f 15 00 	jz.t %d15,3,80005e0e <IfxScuCcu_getPllErayFrequency+0x44>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLERAYCON1.B.K2DIV + 1);
80005de8:	48 b4       	ld.w %d4,[%a15]44
80005dea:	8f f4 07 41 	and %d4,%d4,127
80005dee:	c2 14       	add %d4,1
80005df0:	6d 00 6d 23 	call 8000a4ca <__floatsidf>
80005df4:	7b 80 19 54 	movh %d5,16792
80005df8:	0b 23 10 68 	mov %e6,%d3,%d2
80005dfc:	82 04       	mov %d4,0
80005dfe:	1b 45 78 5d 	addi %d5,%d5,-10364
80005e02:	6d 00 d8 22 	call 8000a3b2 <__divdf3>
80005e06:	0b 23 10 48 	mov %e4,%d3,%d2
80005e0a:	1d 00 93 23 	j 8000a530 <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLERAYCON0.B.NDIV + 1)) / (scu->PLLERAYCON1.B.K2DIV + 1);
80005e0e:	48 a3       	ld.w %d3,[%a15]40
80005e10:	4c fb       	ld.w %d15,[%a15]44
80005e12:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005e16:	16 7f       	and %d15,127
80005e18:	c2 13       	add %d3,1
80005e1a:	4b 03 41 31 	itof %d3,%d3
80005e1e:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005e22:	c2 1f       	add %d15,1
80005e24:	4b 0f 41 f1 	itof %d15,%d15
80005e28:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80005e2c:	00 90       	ret 

80005e2e <IfxScuCcu_getPllErayVcoFrequency>:

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005e2e:	91 30 00 ff 	movh.a %a15,61443
80005e32:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80005e36:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005e38:	7b f0 cb 24 	movh %d2,19647
80005e3c:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllErayVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLERAYSTAT.B.FINDIS == 1)
80005e40:	6f 3f 18 80 	jnz.t %d15,3,80005e70 <IfxScuCcu_getPllErayVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLERAYCON0.B.NDIV + 1)) / (SCU_PLLERAYCON0.B.PDIV + 1);
80005e44:	6d ff ab ff 	call 80005d9a <IfxScuCcu_getOscFrequency>
80005e48:	91 30 00 ff 	movh.a %a15,61443
80005e4c:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80005e50:	48 03       	ld.w %d3,[%a15]0
80005e52:	4c f0       	ld.w %d15,[%a15]0
80005e54:	37 03 e5 34 	extr.u %d3,%d3,9,5
80005e58:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005e5c:	c2 13       	add %d3,1
80005e5e:	4b 03 41 31 	itof %d3,%d3
80005e62:	c2 1f       	add %d15,1
80005e64:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005e68:	4b 0f 41 f1 	itof %d15,%d15
80005e6c:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
80005e70:	00 90       	ret 

80005e72 <IfxScuCcu_getPllFrequency>:
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();

    if (scu->PLLSTAT.B.VCOBYST == 1)
80005e72:	91 30 00 ff 	movh.a %a15,61443
80005e76:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
{
    Ifx_SCU *scu = &MODULE_SCU;
    float32  oscFreq;
    float32  freq;

    oscFreq = IfxScuCcu_getOscFrequency();
80005e7a:	6d ff 90 ff 	call 80005d9a <IfxScuCcu_getOscFrequency>

    if (scu->PLLSTAT.B.VCOBYST == 1)
80005e7e:	4c f5       	ld.w %d15,[%a15]20
80005e80:	2e 06       	jz.t %d15,0,80005e8c <IfxScuCcu_getPllFrequency+0x1a>
    {
        /* Prescaler mode */
        freq = oscFreq / (scu->PLLCON1.B.K1DIV + 1);
80005e82:	4c f7       	ld.w %d15,[%a15]28
80005e84:	37 0f 67 f8 	extr.u %d15,%d15,16,7
80005e88:	c2 1f       	add %d15,1
80005e8a:	3c 28       	j 80005eda <IfxScuCcu_getPllFrequency+0x68>
    }
    else if (scu->PLLSTAT.B.FINDIS == 1)
80005e8c:	4c f5       	ld.w %d15,[%a15]20
80005e8e:	6f 3f 15 00 	jz.t %d15,3,80005eb8 <IfxScuCcu_getPllFrequency+0x46>
    {
        /* Free running mode */
        freq = IFXSCU_VCO_BASE_FREQUENCY / (scu->PLLCON1.B.K2DIV + 1);
80005e92:	48 74       	ld.w %d4,[%a15]28
80005e94:	8f f4 07 41 	and %d4,%d4,127
80005e98:	c2 14       	add %d4,1
80005e9a:	6d 00 18 23 	call 8000a4ca <__floatsidf>
80005e9e:	7b 80 19 54 	movh %d5,16792
80005ea2:	0b 23 10 68 	mov %e6,%d3,%d2
80005ea6:	82 04       	mov %d4,0
80005ea8:	1b 45 78 5d 	addi %d5,%d5,-10364
80005eac:	6d 00 83 22 	call 8000a3b2 <__divdf3>
80005eb0:	0b 23 10 48 	mov %e4,%d3,%d2
80005eb4:	1d 00 3e 23 	j 8000a530 <__truncdfsf2>
    }
    else
    {
        /* Normal mode */
        freq = (oscFreq * (scu->PLLCON0.B.NDIV + 1)) / ((scu->PLLCON1.B.K2DIV + 1) * (scu->PLLCON0.B.PDIV + 1));
80005eb8:	48 64       	ld.w %d4,[%a15]24
80005eba:	4c f7       	ld.w %d15,[%a15]28
80005ebc:	37 04 e7 44 	extr.u %d4,%d4,9,7
80005ec0:	8f ff 07 31 	and %d3,%d15,127
80005ec4:	4c f6       	ld.w %d15,[%a15]24
80005ec6:	c2 14       	add %d4,1
80005ec8:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005ecc:	4b 04 41 41 	itof %d4,%d4
80005ed0:	c2 1f       	add %d15,1
80005ed2:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
80005ed6:	4b 42 41 20 	mul.f %d2,%d2,%d4
80005eda:	4b 0f 41 f1 	itof %d15,%d15
80005ede:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return freq;
}
80005ee2:	00 90       	ret 

80005ee4 <IfxScuCcu_getPllVcoFrequency>:

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
80005ee4:	91 30 00 ff 	movh.a %a15,61443
80005ee8:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80005eec:	4c f0       	ld.w %d15,[%a15]0
    {
        /* Free running mode */
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
80005eee:	7b f0 cb 24 	movh %d2,19647
80005ef2:	1b 02 c2 2b 	addi %d2,%d2,-17376

float32 IfxScuCcu_getPllVcoFrequency(void)
{
    float32 vcoFreq;

    if (SCU_PLLSTAT.B.FINDIS == 1)
80005ef6:	6f 3f 18 80 	jnz.t %d15,3,80005f26 <IfxScuCcu_getPllVcoFrequency+0x42>
        vcoFreq = IFXSCU_VCO_BASE_FREQUENCY;
    }
    else
    {
        /* Normal mode */
        vcoFreq = (IfxScuCcu_getOscFrequency() * (SCU_PLLCON0.B.NDIV + 1)) / (SCU_PLLCON0.B.PDIV + 1);
80005efa:	6d ff 50 ff 	call 80005d9a <IfxScuCcu_getOscFrequency>
80005efe:	91 30 00 ff 	movh.a %a15,61443
80005f02:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80005f06:	48 03       	ld.w %d3,[%a15]0
80005f08:	4c f0       	ld.w %d15,[%a15]0
80005f0a:	37 03 e7 34 	extr.u %d3,%d3,9,7
80005f0e:	37 0f 64 fc 	extr.u %d15,%d15,24,4
80005f12:	c2 13       	add %d3,1
80005f14:	4b 03 41 31 	itof %d3,%d3
80005f18:	c2 1f       	add %d15,1
80005f1a:	4b 32 41 20 	mul.f %d2,%d2,%d3
80005f1e:	4b 0f 41 f1 	itof %d15,%d15
80005f22:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return vcoFreq;
}
80005f26:	00 90       	ret 

80005f28 <IfxScuCcu_getSourceFrequency>:

float32 IfxScuCcu_getSourceFrequency(void)
{
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
80005f28:	91 30 00 ff 	movh.a %a15,61443
80005f2c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80005f30:	4c f0       	ld.w %d15,[%a15]0
80005f32:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80005f36:	6e 06       	jz %d15,80005f42 <IfxScuCcu_getSourceFrequency+0x1a>
80005f38:	1e 13       	jeq %d15,1,80005f3e <IfxScuCcu_getSourceFrequency+0x16>
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
        break;
    default:
        sourcefreq = 0;
80005f3a:	82 02       	mov %d2,0
80005f3c:	00 90       	ret 
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
        break;
    case IfxScu_CCUCON0_CLKSEL_fPll:
        sourcefreq = IfxScuCcu_getPllFrequency();
80005f3e:	1d ff 9a ff 	j 80005e72 <IfxScuCcu_getPllFrequency>
    float32 sourcefreq;

    switch (SCU_CCUCON0.B.CLKSEL)
    {
    case IfxScu_CCUCON0_CLKSEL_fBack:
        sourcefreq = IfxScuCcu_getEvrFrequency();
80005f42:	7b f0 cb 24 	movh %d2,19647
80005f46:	1b 02 c2 2b 	addi %d2,%d2,-17376
        sourcefreq = 0;
        break;
    }

    return sourcefreq;
}
80005f4a:	00 90       	ret 

80005f4c <IfxScuCcu_wait>:
    }
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
80005f4c:	02 4f       	mov %d15,%d4
80005f4e:	6d ff ed ff 	call 80005f28 <IfxScuCcu_getSourceFrequency>
80005f52:	91 30 00 ff 	movh.a %a15,61443
80005f56:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80005f5a:	48 03       	ld.w %d3,[%a15]0
80005f5c:	37 03 64 34 	extr.u %d3,%d3,8,4
80005f60:	4b 03 41 31 	itof %d3,%d3
80005f64:	4b 32 51 20 	div.f %d2,%d2,%d3
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
    uint32 stmCountBegin = STM0_TIM0.U;
80005f68:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
}


IFX_STATIC void IfxScuCcu_wait(float32 timeSec)
{
    uint32 stmCount      = (uint32)(IfxScuCcu_getStmFrequency() * timeSec);
80005f6c:	4b f2 41 20 	mul.f %d2,%d2,%d15
80005f70:	4b 02 71 21 	ftouz %d2,%d2
    uint32 stmCountBegin = STM0_TIM0.U;

    while ((uint32)(STM0_TIM0.U - stmCountBegin) < stmCount)
80005f74:	85 ff 10 00 	ld.w %d15,f0000010 <_SMALL_DATA4_+0x3fff8010>
80005f78:	a2 3f       	sub %d15,%d3
80005f7a:	3f 2f fd ff 	jlt.u %d15,%d2,80005f74 <IfxScuCcu_wait+0x28>
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
    }
}
80005f7e:	00 90       	ret 

80005f80 <IfxScuCcu_getBbbFrequency>:
float32 IfxScuCcu_getBbbFrequency(void)
{
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
80005f80:	6d ff d4 ff 	call 80005f28 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80005f84:	91 30 00 ff 	movh.a %a15,61443
80005f88:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80005f8c:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
        break;
    default:
        bbbFrequency = 0.0;
80005f8e:	82 0f       	mov %d15,0
    float32 bbbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80005f90:	37 03 64 36 	extr.u %d3,%d3,12,4
80005f94:	ff 53 30 80 	jge.u %d3,5,80005ff4 <IfxScuCcu_getBbbFrequency+0x74>
80005f98:	91 00 00 f8 	movh.a %a15,32768
80005f9c:	d9 ff e8 e5 	lea %a15,[%a15]24488 <80005fa8 <IfxScuCcu_getBbbFrequency+0x28>>
80005fa0:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80005fa4:	dc 0f       	ji %a15
80005fa6:	00 00       	nop 
80005fa8:	1d 00 0a 00 	j 80005fbc <IfxScuCcu_getBbbFrequency+0x3c>
80005fac:	1d 00 17 00 	j 80005fda <IfxScuCcu_getBbbFrequency+0x5a>
80005fb0:	1d 00 18 00 	j 80005fe0 <IfxScuCcu_getBbbFrequency+0x60>
80005fb4:	1d 00 19 00 	j 80005fe6 <IfxScuCcu_getBbbFrequency+0x66>
80005fb8:	1d 00 1a 00 	j 80005fec <IfxScuCcu_getBbbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
80005fbc:	91 30 00 ff 	movh.a %a15,61443
80005fc0:	d9 ff 00 16 	lea %a15,[%a15]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
80005fc4:	48 03       	ld.w %d3,[%a15]0
        {
            bbbFrequency = 0.0;
80005fc6:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON2.B.BBBDIV == 0)
80005fc8:	8f f3 00 31 	and %d3,%d3,15
80005fcc:	df 03 14 00 	jeq %d3,0,80005ff4 <IfxScuCcu_getBbbFrequency+0x74>
        {
            bbbFrequency = 0.0;
        }
        else
        {
            bbbFrequency = sourceFrequency / SCU_CCUCON2.B.BBBDIV;
80005fd0:	4c f0       	ld.w %d15,[%a15]0
80005fd2:	16 0f       	and %d15,15
80005fd4:	4b 0f 41 f1 	itof %d15,%d15
80005fd8:	3c 0c       	j 80005ff0 <IfxScuCcu_getBbbFrequency+0x70>
        }

        break;
    case 1:
        bbbFrequency = sourceFrequency / 30;
80005fda:	7b 00 1f f4 	movh %d15,16880
80005fde:	3c 09       	j 80005ff0 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 2:
        bbbFrequency = sourceFrequency / 60;
80005fe0:	7b 00 27 f4 	movh %d15,17008
80005fe4:	3c 06       	j 80005ff0 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 3:
        bbbFrequency = sourceFrequency / 120;
80005fe6:	7b 00 2f f4 	movh %d15,17136
80005fea:	3c 03       	j 80005ff0 <IfxScuCcu_getBbbFrequency+0x70>
        break;
    case 4:
        bbbFrequency = sourceFrequency / 240;
80005fec:	7b 00 37 f4 	movh %d15,17264
80005ff0:	4b f2 51 f0 	div.f %d15,%d2,%d15
        bbbFrequency = 0.0;
        break;
    }

    return bbbFrequency;
}
80005ff4:	02 f2       	mov %d2,%d15
80005ff6:	00 90       	ret 

80005ff8 <IfxScuCcu_getMaxFrequency>:
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
80005ff8:	91 30 00 ff 	movh.a %a15,61443
80005ffc:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>

float32 IfxScuCcu_getMaxFrequency(void)
{
    float32 maxFrequency;
    float32 sourceFrequency;
    sourceFrequency = IfxScuCcu_getSourceFrequency();
80006000:	6d ff 94 ff 	call 80005f28 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006004:	4c f0       	ld.w %d15,[%a15]0
80006006:	37 0f 64 f6 	extr.u %d15,%d15,12,4
8000600a:	ff 5f 2d 80 	jge.u %d15,5,80006064 <IfxScuCcu_getMaxFrequency+0x6c>
8000600e:	91 00 00 f8 	movh.a %a15,32768
80006012:	d9 ff 1c 06 	lea %a15,[%a15]24604 <8000601c <IfxScuCcu_getMaxFrequency+0x24>>
80006016:	90 ff       	addsc.a %a15,%a15,%d15,2
80006018:	dc 0f       	ji %a15
8000601a:	00 00       	nop 
8000601c:	1d 00 0a 00 	j 80006030 <IfxScuCcu_getMaxFrequency+0x38>
80006020:	1d 00 14 00 	j 80006048 <IfxScuCcu_getMaxFrequency+0x50>
80006024:	1d 00 15 00 	j 8000604e <IfxScuCcu_getMaxFrequency+0x56>
80006028:	1d 00 16 00 	j 80006054 <IfxScuCcu_getMaxFrequency+0x5c>
8000602c:	1d 00 17 00 	j 8000605a <IfxScuCcu_getMaxFrequency+0x62>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON5.B.MAXDIV == 0)
80006030:	91 30 00 ff 	movh.a %a15,61443
80006034:	d9 ff 0c 16 	lea %a15,[%a15]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
80006038:	4c f0       	ld.w %d15,[%a15]0
8000603a:	16 0f       	and %d15,15
8000603c:	6e 15       	jz %d15,80006066 <IfxScuCcu_getMaxFrequency+0x6e>
        {
            maxFrequency = sourceFrequency;
        }
        else
        {
            maxFrequency = sourceFrequency / SCU_CCUCON5.B.MAXDIV;
8000603e:	4c f0       	ld.w %d15,[%a15]0
80006040:	16 0f       	and %d15,15
80006042:	4b 0f 41 f1 	itof %d15,%d15
80006046:	3c 0c       	j 8000605e <IfxScuCcu_getMaxFrequency+0x66>
        }

        break;
    case 1:
        maxFrequency = sourceFrequency / 15;
80006048:	7b 00 17 f4 	movh %d15,16752
8000604c:	3c 09       	j 8000605e <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 2:
        maxFrequency = sourceFrequency / 30;
8000604e:	7b 00 1f f4 	movh %d15,16880
80006052:	3c 06       	j 8000605e <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 3:
        maxFrequency = sourceFrequency / 60;
80006054:	7b 00 27 f4 	movh %d15,17008
80006058:	3c 03       	j 8000605e <IfxScuCcu_getMaxFrequency+0x66>
        break;
    case 4:
        maxFrequency = sourceFrequency / 120;
8000605a:	7b 00 2f f4 	movh %d15,17136
8000605e:	4b f2 51 20 	div.f %d2,%d2,%d15
        break;
80006062:	00 90       	ret 
    default:
        maxFrequency = 0.0;
80006064:	82 02       	mov %d2,0
        break;
    }

    return maxFrequency;
}
80006066:	00 90       	ret 

80006068 <IfxScuCcu_getBaud1Frequency>:


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006068:	91 30 00 ff 	movh.a %a15,61443
8000606c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006070:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD1DIV == 0)
    {
        frequency = 0;
80006072:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud1Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006074:	8f ff 00 81 	and %d8,%d15,15

    if (ccucon0.B.BAUD1DIV == 0)
80006078:	76 87       	jz %d8,80006086 <IfxScuCcu_getBaud1Frequency+0x1e>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD1DIV;
8000607a:	6d ff bf ff 	call 80005ff8 <IfxScuCcu_getMaxFrequency>
8000607e:	4b 08 41 f1 	itof %d15,%d8
80006082:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
80006086:	00 90       	ret 

80006088 <IfxScuCcu_getBaud2Frequency>:


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006088:	91 30 00 ff 	movh.a %a15,61443
8000608c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006090:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.BAUD2DIV == 0)
    {
        frequency = 0;
80006092:	82 02       	mov %d2,0


float32 IfxScuCcu_getBaud2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006094:	37 0f 64 82 	extr.u %d8,%d15,4,4

    if (ccucon0.B.BAUD2DIV == 0)
80006098:	16 f0       	and %d15,240
8000609a:	6e 07       	jz %d15,800060a8 <IfxScuCcu_getBaud2Frequency+0x20>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getMaxFrequency() / ccucon0.B.BAUD2DIV;
8000609c:	6d ff ae ff 	call 80005ff8 <IfxScuCcu_getMaxFrequency>
800060a0:	4b 08 41 f1 	itof %d15,%d8
800060a4:	4b f2 51 20 	div.f %d2,%d2,%d15
    }

    return frequency;
}
800060a8:	00 90       	ret 

800060aa <IfxScuCcu_getSpbFrequency>:
float32 IfxScuCcu_getSpbFrequency(void)
{
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
800060aa:	6d ff 3f ff 	call 80005f28 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
800060ae:	91 30 00 ff 	movh.a %a15,61443
800060b2:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800060b6:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
        break;
    default:
        spbFrequency = 0.0;
800060b8:	82 0f       	mov %d15,0
    float32 spbFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
800060ba:	37 03 64 36 	extr.u %d3,%d3,12,4
800060be:	ff 53 30 80 	jge.u %d3,5,8000611e <IfxScuCcu_getSpbFrequency+0x74>
800060c2:	91 00 00 f8 	movh.a %a15,32768
800060c6:	d9 ff 10 36 	lea %a15,[%a15]24784 <800060d0 <IfxScuCcu_getSpbFrequency+0x26>>
800060ca:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
800060ce:	dc 0f       	ji %a15
800060d0:	1d 00 0a 00 	j 800060e4 <IfxScuCcu_getSpbFrequency+0x3a>
800060d4:	1d 00 18 00 	j 80006104 <IfxScuCcu_getSpbFrequency+0x5a>
800060d8:	1d 00 19 00 	j 8000610a <IfxScuCcu_getSpbFrequency+0x60>
800060dc:	1d 00 1a 00 	j 80006110 <IfxScuCcu_getSpbFrequency+0x66>
800060e0:	1d 00 1b 00 	j 80006116 <IfxScuCcu_getSpbFrequency+0x6c>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
800060e4:	91 30 00 ff 	movh.a %a15,61443
800060e8:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800060ec:	48 03       	ld.w %d3,[%a15]0
        {
            spbFrequency = 0.0;
800060ee:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SPBDIV == 0)
800060f0:	37 03 64 38 	extr.u %d3,%d3,16,4
800060f4:	df 03 15 00 	jeq %d3,0,8000611e <IfxScuCcu_getSpbFrequency+0x74>
        {
            spbFrequency = 0.0;
        }
        else
        {
            spbFrequency = sourceFrequency / SCU_CCUCON0.B.SPBDIV;
800060f8:	4c f0       	ld.w %d15,[%a15]0
800060fa:	37 0f 64 f8 	extr.u %d15,%d15,16,4
800060fe:	4b 0f 41 f1 	itof %d15,%d15
80006102:	3c 0c       	j 8000611a <IfxScuCcu_getSpbFrequency+0x70>
        }

        break;
    case 1:
        spbFrequency = sourceFrequency / 30;
80006104:	7b 00 1f f4 	movh %d15,16880
80006108:	3c 09       	j 8000611a <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 2:
        spbFrequency = sourceFrequency / 60;
8000610a:	7b 00 27 f4 	movh %d15,17008
8000610e:	3c 06       	j 8000611a <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 3:
        spbFrequency = sourceFrequency / 120;
80006110:	7b 00 2f f4 	movh %d15,17136
80006114:	3c 03       	j 8000611a <IfxScuCcu_getSpbFrequency+0x70>
        break;
    case 4:
        spbFrequency = sourceFrequency / 240;
80006116:	7b 00 37 f4 	movh %d15,17264
8000611a:	4b f2 51 f0 	div.f %d15,%d2,%d15
        spbFrequency = 0.0;
        break;
    }

    return spbFrequency;
}
8000611e:	02 f2       	mov %d2,%d15
80006120:	00 90       	ret 

80006122 <IfxScuCcu_getModuleFrequency>:
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
80006122:	91 30 00 ff 	movh.a %a15,61443
80006126:	d9 ff 38 06 	lea %a15,[%a15]24632 <f0036038 <_SMALL_DATA4_+0x4002e038>>
8000612a:	48 09       	ld.w %d9,[%a15]0
    spbFreq = IfxScuCcu_getSpbFrequency();
8000612c:	6d ff bf ff 	call 800060aa <IfxScuCcu_getSpbFrequency>

    if (scuFdr.B.DM == 1)
80006130:	bb 00 00 fc 	mov.u %d15,49152
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
    spbFreq = IfxScuCcu_getSpbFrequency();
80006134:	02 23       	mov %d3,%d2

    if (scuFdr.B.DM == 1)
80006136:	26 9f       	and %d15,%d9
80006138:	3b 00 00 24 	mov %d2,16384
float32 IfxScuCcu_getModuleFrequency(void)
{
    float32     spbFreq;
    float32     moduleFreq;
    Ifx_SCU_FDR scuFdr;
    scuFdr  = SCU_FDR;
8000613c:	b7 09 16 85 	insert %d8,%d9,0,10,22
    spbFreq = IfxScuCcu_getSpbFrequency();

    if (scuFdr.B.DM == 1)
80006140:	7e 29       	jne %d15,%d2,80006152 <IfxScuCcu_getModuleFrequency+0x30>
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
80006142:	3b 00 40 20 	mov %d2,1024
80006146:	a2 82       	sub %d2,%d8
80006148:	4b 02 41 21 	itof %d2,%d2
8000614c:	4b 23 51 20 	div.f %d2,%d3,%d2
80006150:	00 90       	ret 
    }
    else if (scuFdr.B.DM == 2)
80006152:	bb 00 00 48 	mov.u %d4,32768
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
    }
    else
    {
        moduleFreq = 0;
80006156:	82 02       	mov %d2,0

    if (scuFdr.B.DM == 1)
    {
        moduleFreq = spbFreq / (1024 - scuFdr.B.STEP);
    }
    else if (scuFdr.B.DM == 2)
80006158:	7e 49       	jne %d15,%d4,8000616a <IfxScuCcu_getModuleFrequency+0x48>
    {
        moduleFreq = (spbFreq * scuFdr.B.STEP) / 1024;
8000615a:	4b 08 41 21 	itof %d2,%d8
8000615e:	7b 00 a8 f3 	movh %d15,14976
80006162:	4b 23 41 20 	mul.f %d2,%d3,%d2
80006166:	4b f2 41 20 	mul.f %d2,%d2,%d15
    {
        moduleFreq = 0;
    }

    return moduleFreq;
}
8000616a:	00 90       	ret 

8000616c <IfxScuCcu_getSriFrequency>:
float32 IfxScuCcu_getSriFrequency(void)
{
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();
8000616c:	6d ff de fe 	call 80005f28 <IfxScuCcu_getSourceFrequency>

    switch (SCU_CCUCON0.B.LPDIV)
80006170:	91 30 00 ff 	movh.a %a15,61443
80006174:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006178:	48 03       	ld.w %d3,[%a15]0
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
        break;
    default:
        sriFrequency = 0.0;
8000617a:	82 0f       	mov %d15,0
    float32 sriFrequency;
    float32 sourceFrequency;

    sourceFrequency = IfxScuCcu_getSourceFrequency();

    switch (SCU_CCUCON0.B.LPDIV)
8000617c:	37 03 64 36 	extr.u %d3,%d3,12,4
80006180:	ff 53 31 80 	jge.u %d3,5,800061e2 <IfxScuCcu_getSriFrequency+0x76>
80006184:	91 00 00 f8 	movh.a %a15,32768
80006188:	d9 ff 14 66 	lea %a15,[%a15]24980 <80006194 <IfxScuCcu_getSriFrequency+0x28>>
8000618c:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
80006190:	dc 0f       	ji %a15
80006192:	00 00       	nop 
80006194:	1d 00 0a 00 	j 800061a8 <IfxScuCcu_getSriFrequency+0x3c>
80006198:	1d 00 18 00 	j 800061c8 <IfxScuCcu_getSriFrequency+0x5c>
8000619c:	1d 00 19 00 	j 800061ce <IfxScuCcu_getSriFrequency+0x62>
800061a0:	1d 00 1a 00 	j 800061d4 <IfxScuCcu_getSriFrequency+0x68>
800061a4:	1d 00 1b 00 	j 800061da <IfxScuCcu_getSriFrequency+0x6e>
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
800061a8:	91 30 00 ff 	movh.a %a15,61443
800061ac:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800061b0:	48 03       	ld.w %d3,[%a15]0
        {
            sriFrequency = 0.0;
800061b2:	82 0f       	mov %d15,0

    switch (SCU_CCUCON0.B.LPDIV)
    {
    case 0:                    /*Not in low power mode */

        if (SCU_CCUCON0.B.SRIDIV == 0)
800061b4:	37 03 64 34 	extr.u %d3,%d3,8,4
800061b8:	df 03 15 00 	jeq %d3,0,800061e2 <IfxScuCcu_getSriFrequency+0x76>
        {
            sriFrequency = 0.0;
        }
        else
        {
            sriFrequency = sourceFrequency / SCU_CCUCON0.B.SRIDIV;
800061bc:	4c f0       	ld.w %d15,[%a15]0
800061be:	37 0f 64 f4 	extr.u %d15,%d15,8,4
800061c2:	4b 0f 41 f1 	itof %d15,%d15
800061c6:	3c 0c       	j 800061de <IfxScuCcu_getSriFrequency+0x72>
        }

        break;
    case 1:
        sriFrequency = sourceFrequency / 30;
800061c8:	7b 00 1f f4 	movh %d15,16880
800061cc:	3c 09       	j 800061de <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 2:
        sriFrequency = sourceFrequency / 60;
800061ce:	7b 00 27 f4 	movh %d15,17008
800061d2:	3c 06       	j 800061de <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 3:
        sriFrequency = sourceFrequency / 120;
800061d4:	7b 00 2f f4 	movh %d15,17136
800061d8:	3c 03       	j 800061de <IfxScuCcu_getSriFrequency+0x72>
        break;
    case 4:
        sriFrequency = sourceFrequency / 240;
800061da:	7b 00 37 f4 	movh %d15,17264
800061de:	4b f2 51 f0 	div.f %d15,%d2,%d15
        sriFrequency = 0.0;
        break;
    }

    return sriFrequency;
}
800061e2:	02 f2       	mov %d2,%d15
800061e4:	00 90       	ret 

800061e6 <IfxScuCcu_getCpuFrequency>:
    return bbbFrequency;
}


float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu)
{
800061e6:	02 4f       	mov %d15,%d4
    float32 frequency = IfxScuCcu_getSriFrequency();
800061e8:	6d ff c2 ff 	call 8000616c <IfxScuCcu_getSriFrequency>
    uint32  cpuDiv    = 0;

    switch (cpu)
800061ec:	1e 1d       	jeq %d15,1,80006206 <IfxScuCcu_getCpuFrequency+0x20>
800061ee:	6e 07       	jz %d15,800061fc <IfxScuCcu_getCpuFrequency+0x16>
800061f0:	de 2a       	jne %d15,2,80006224 <IfxScuCcu_getCpuFrequency+0x3e>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
800061f2:	91 30 00 ff 	movh.a %a15,61443
800061f6:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
800061fa:	3c 0a       	j 8000620e <IfxScuCcu_getCpuFrequency+0x28>
    uint32  cpuDiv    = 0;

    switch (cpu)
    {
    case IfxCpu_ResourceCpu_0:
        cpuDiv = SCU_CCUCON6.U;
800061fc:	91 30 00 ff 	movh.a %a15,61443
80006200:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006204:	3c 05       	j 8000620e <IfxScuCcu_getCpuFrequency+0x28>
        break;
    case IfxCpu_ResourceCpu_1:
        cpuDiv = SCU_CCUCON7.U;
80006206:	91 30 00 ff 	movh.a %a15,61443
8000620a:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
8000620e:	4c f0       	ld.w %d15,[%a15]0
    default:
        frequency = 0.0;
        break;
    }

    if (cpuDiv != 0)
80006210:	6e 0b       	jz %d15,80006226 <IfxScuCcu_getCpuFrequency+0x40>
    {
        frequency = frequency * (cpuDiv / 64.0f);
80006212:	4b 0f 61 f1 	utof %d15,%d15
80006216:	7b 00 c8 33 	movh %d3,15488
8000621a:	4b 3f 41 f0 	mul.f %d15,%d15,%d3
8000621e:	4b f2 41 20 	mul.f %d2,%d2,%d15
80006222:	00 90       	ret 
        break;
    case IfxCpu_ResourceCpu_2:
        cpuDiv = SCU_CCUCON8.U;
        break;
    default:
        frequency = 0.0;
80006224:	82 02       	mov %d2,0
    {
        frequency = frequency * (cpuDiv / 64.0f);
    }

    return frequency;
}
80006226:	00 90       	ret 

80006228 <IfxScuCcu_getFsi2Frequency>:


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006228:	91 30 00 ff 	movh.a %a15,61443
8000622c:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006230:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSI2DIV == 0)
80006232:	7b 00 03 30 	movh %d3,48
80006236:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
80006238:	37 0f 62 8a 	extr.u %d8,%d15,20,2

    if (ccucon0.B.FSI2DIV == 0)
    {
        frequency = 0;
8000623c:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsi2Frequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSI2DIV == 0)
8000623e:	76 3f       	jz %d3,8000625c <IfxScuCcu_getFsi2Frequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
80006240:	6d ff 96 ff 	call 8000616c <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
80006244:	3b 00 f0 30 	mov %d3,3840
80006248:	26 3f       	and %d15,%d3
8000624a:	1b 0f f0 ff 	addi %d15,%d15,-256
8000624e:	8f 0f d0 f1 	andn %d15,%d15,256
80006252:	ee 05       	jnz %d15,8000625c <IfxScuCcu_getFsi2Frequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSI2DIV;
80006254:	4b 08 41 f1 	itof %d15,%d8
80006258:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
8000625c:	00 90       	ret 

8000625e <IfxScuCcu_getFsiFrequency>:


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000625e:	91 30 00 ff 	movh.a %a15,61443
80006262:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006266:	4c f0       	ld.w %d15,[%a15]0

    if (ccucon0.B.FSIDIV == 0)
80006268:	7b 00 30 30 	movh %d3,768
8000626c:	26 f3       	and %d3,%d15


float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;
8000626e:	37 0f 62 8c 	extr.u %d8,%d15,24,2

    if (ccucon0.B.FSIDIV == 0)
    {
        frequency = 0;
80006272:	82 02       	mov %d2,0
float32 IfxScuCcu_getFsiFrequency(void)
{
    float32         frequency;
    Ifx_SCU_CCUCON0 ccucon0 = SCU_CCUCON0;

    if (ccucon0.B.FSIDIV == 0)
80006274:	76 3f       	jz %d3,80006292 <IfxScuCcu_getFsiFrequency+0x34>
    {
        frequency = 0;
    }
    else
    {
        frequency = IfxScuCcu_getSriFrequency();
80006276:	6d ff 7b ff 	call 8000616c <IfxScuCcu_getSriFrequency>

        if ((ccucon0.B.SRIDIV == 1) || (ccucon0.B.SRIDIV == 2))
8000627a:	3b 00 f0 30 	mov %d3,3840
8000627e:	26 3f       	and %d15,%d3
80006280:	1b 0f f0 ff 	addi %d15,%d15,-256
80006284:	8f 0f d0 f1 	andn %d15,%d15,256
80006288:	ee 05       	jnz %d15,80006292 <IfxScuCcu_getFsiFrequency+0x34>
        {
            frequency = frequency / ccucon0.B.FSIDIV;
8000628a:	4b 08 41 f1 	itof %d15,%d8
8000628e:	4b f2 51 20 	div.f %d2,%d2,%d15
        }
    }

    return frequency;
}
80006292:	00 90       	ret 

80006294 <IfxScuCcu_init>:
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
80006294:	19 4f 10 10 	ld.w %d15,[%a4]80
80006298:	91 00 00 c7 	movh.a %a12,28672
    return sriFrequency;
}


boolean IfxScuCcu_init(const IfxScuCcu_Config *cfg)
{
8000629c:	40 4f       	mov.aa %a15,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;
8000629e:	59 cf 28 30 	st.w [%a12]232 <700000e8 <IfxScuCcu_xtalFrequency>>,%d15

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
800062a2:	6d 00 c8 07 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>
800062a6:	02 29       	mov %d9,%d2
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
800062a8:	6d 00 e3 07 	call 8000726e <IfxScuWdt_getSafetyWatchdogPassword>

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800062ac:	02 94       	mov %d4,%d9
    boolean status = 0;
    /* Store the crystal frequency */
    IfxScuCcu_xtalFrequency = cfg->xtalFrequency;

    endinit_pw              = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();
800062ae:	02 28       	mov %d8,%d2

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800062b0:	6d 00 c1 06 	call 80007032 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800062b4:	91 30 00 2f 	movh.a %a2,61443
800062b8:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800062bc:	54 2c       	ld.w %d12,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;
800062be:	4c 20       	ld.w %d15,[%a2]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
800062c0:	02 94       	mov %d4,%d9

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
800062c2:	96 08       	or %d15,8
800062c4:	6c 20       	st.w [%a2]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
800062c6:	6d 00 eb 07 	call 8000729c <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800062ca:	02 84       	mov %d4,%d8
800062cc:	6d 00 ce 06 	call 80007068 <IfxScuWdt_clearSafetyEndinit>
    endinitSfty_pw          = IfxScuWdt_getSafetyWatchdogPassword();

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
800062d0:	37 0c e1 c1 	extr.u %d12,%d12,3,1

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        while (SCU_CCUCON0.B.LCK != 0U)
800062d4:	91 30 00 3f 	movh.a %a3,61443
800062d8:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800062dc:	4c 30       	ld.w %d15,[%a3]0
800062de:	91 30 00 2f 	movh.a %a2,61443
800062e2:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
800062e6:	bf 0f fb 7f 	jlt %d15,0,800062dc <IfxScuCcu_init+0x48>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
800062ea:	4c 20       	ld.w %d15,[%a2]0
800062ec:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
800062f0:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
800062f2:	4c 20       	ld.w %d15,[%a2]0
800062f4:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
800062f8:	6c 20       	st.w [%a2]0,%d15

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
800062fa:	91 30 00 2f 	movh.a %a2,61443
800062fe:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006302:	4c 20       	ld.w %d15,[%a2]0
80006304:	96 10       	or %d15,16
80006306:	6c 20       	st.w [%a2]0,%d15
        /* Now PLL is in free running mode */

        /* Select Clock Source as PLL input clock */
        while (SCU_CCUCON0.B.LCK != 0U)
80006308:	91 30 00 2f 	movh.a %a2,61443
8000630c:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006310:	4c 20       	ld.w %d15,[%a2]0
80006312:	bf 0f ff 7f 	jlt %d15,0,80006310 <IfxScuCcu_init+0x7c>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
80006316:	91 30 00 2f 	movh.a %a2,61443
8000631a:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000631e:	4c 20       	ld.w %d15,[%a2]0
80006320:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
80006324:	6c 20       	st.w [%a2]0,%d15
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */
80006326:	4c 20       	ld.w %d15,[%a2]0
80006328:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000632c:	6c 20       	st.w [%a2]0,%d15
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
8000632e:	6d 00 82 07 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80006332:	91 30 00 2f 	movh.a %a2,61443
80006336:	d9 22 10 06 	lea %a2,[%a2]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;

    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();
8000633a:	02 2f       	mov %d15,%d2

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
8000633c:	54 22       	ld.w %d2,[%a2]

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
8000633e:	40 23       	mov.aa %a3,%a2
    uint16  endinitPw  = IfxScuWdt_getCpuWatchdogPassword();

    /* Mode External Crystal / Ceramic Resonator Mode and External Input Clock.
     * The oscillator Power-Saving Mode is not entered
     */
    SCU_OSCCON.B.MODE = 0U;
80006340:	8f 02 c6 21 	andn %d2,%d2,96
80006344:	74 22       	st.w [%a2],%d2

    /* OSCVAL  defines the divider value that generates  the reference clock
     *  that is supervised by the oscillator watchdog.
     *  fOSC / (OSCVAL + 1) ~ 2.5Mhz  => OSCVAL = (fOSC / 2.5Mhz) - 1 */

    SCU_OSCCON.B.OSCVAL = ((uint32)IfxScuCcu_xtalFrequency / 2500000) - 1;
80006346:	19 c6 28 30 	ld.w %d6,[%a12]232 <700000e8 <IfxScuCcu_xtalFrequency>>
8000634a:	7b 60 02 20 	movh %d2,38
8000634e:	1b 02 5a 22 	addi %d2,%d2,9632
80006352:	4b 26 11 62 	div.u %e6,%d6,%d2
80006356:	54 22       	ld.w %d2,[%a2]
80006358:	c2 f6       	add %d6,-1
8000635a:	37 62 05 68 	insert %d6,%d2,%d6,16,5
8000635e:	74 26       	st.w [%a2],%d6

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;
80006360:	54 22       	ld.w %d2,[%a2]
80006362:	8f 42 40 21 	or %d2,%d2,4
80006366:	74 22       	st.w [%a2],%d2

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
80006368:	c5 02 3f 90 	lea %a2,27f <_.+0x27e>
8000636c:	54 32       	ld.w %d2,[%a3]
8000636e:	6f 12 05 80 	jnz.t %d2,1,80006378 <IfxScuCcu_init+0xe4>
80006372:	fc 2d       	loop %a2,8000636c <IfxScuCcu_init+0xd8>
    {
        TimeoutCtr--;

        if (TimeoutCtr == 0)
        {
            status = 1;
80006374:	82 1b       	mov %d11,1
80006376:	3c 05       	j 80006380 <IfxScuCcu_init+0xec>

    /* The Oscillator Watchdog of the PLL is cleared and restarted */
    SCU_OSCCON.B.OSCRES = 1U;

    /* wait until PLLLV and PLLHV flags are set */
    while ((SCU_OSCCON.B.PLLLV == 0) || (SCU_OSCCON.B.PLLHV == 0))
80006378:	54 32       	ld.w %d2,[%a3]
8000637a:	6f 82 fc 7f 	jz.t %d2,8,80006372 <IfxScuCcu_init+0xde>


IFX_STATIC boolean IfxScuCcu_isOscillatorStable(void)
{
    sint32  TimeoutCtr = IFXSCUCCU_OSC_STABLECHK_TIME;
    boolean status     = 0;
8000637e:	82 0b       	mov %d11,0
        }
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
80006380:	02 f4       	mov %d4,%d15
80006382:	6d 00 58 06 	call 80007032 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
80006386:	91 30 00 2f 	movh.a %a2,61443
8000638a:	d9 22 2c 46 	lea %a2,[%a2]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
8000638e:	54 22       	ld.w %d2,[%a2]
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
        IfxScuWdt_setCpuEndinit(endinitPw);
80006390:	02 f4       	mov %d4,%d15
    }

    {
        /* clear and then set SMU trap (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinitPw);
        SCU_TRAPCLR.B.SMUT = 1U;    /* TODO Can this be removed? */
80006392:	8f 82 40 21 	or %d2,%d2,8
80006396:	74 22       	st.w [%a2],%d2
        SCU_TRAPDIS.B.SMUT = 1U;    /* TODO Can this be removed? */
80006398:	91 30 00 2f 	movh.a %a2,61443
8000639c:	d9 22 30 46 	lea %a2,[%a2]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800063a0:	54 22       	ld.w %d2,[%a2]
800063a2:	8f 82 40 21 	or %d2,%d2,8
800063a6:	74 22       	st.w [%a2],%d2
        IfxScuWdt_setCpuEndinit(endinitPw);
800063a8:	6d 00 7a 07 	call 8000729c <IfxScuWdt_setCpuEndinit>
        SCU_CCUCON1.B.INSEL = 1; /*Select oscillator OSC0 as clock to PLL */
        SCU_CCUCON1.B.UP    = 1; /*Update the ccucon0 register */

        status             |= IfxScuCcu_isOscillatorStable();

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800063ac:	02 84       	mov %d4,%d8
800063ae:	6d 00 e3 07 	call 80007374 <IfxScuWdt_setSafetyEndinit>
    }

    if (status == 0)
800063b2:	df 0b 29 81 	jne %d11,0,80006604 <IfxScuCcu_init+0x370>

        /*Setting up P N and K2 values equate pll to evr osc freq */
        {
            {
                /*Set the K2 divider value for the step corresponding to step count */
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800063b6:	02 84       	mov %d4,%d8
800063b8:	6d 00 58 06 	call 80007068 <IfxScuWdt_clearSafetyEndinit>

                while (SCU_PLLSTAT.B.K2RDY == 0U)
800063bc:	91 30 00 2f 	movh.a %a2,61443
800063c0:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
800063c4:	4c 20       	ld.w %d15,[%a2]0
800063c6:	6f 5f ff 7f 	jz.t %d15,5,800063c4 <IfxScuCcu_init+0x130>
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
800063ca:	91 30 00 2f 	movh.a %a2,61443
800063ce:	d9 22 1c 06 	lea %a2,[%a2]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
800063d2:	54 22       	ld.w %d2,[%a2]
800063d4:	0c fa       	ld.bu %d15,[%a15]10
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
800063d6:	7b 20 85 43 	movh %d4,14418
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
800063da:	37 f2 07 f0 	insert %d15,%d2,%d15,0,7
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
800063de:	1b 74 71 4b 	addi %d4,%d4,-18665
                {
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required because Safety Endinit will give a trap */
                }

                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllInitialStep.k2Initial;
800063e2:	6c 20       	st.w [%a2]0,%d15

                {
                    /*change P and N divider values */
                    SCU_PLLCON0.B.PDIV = cfg->sysPll.pllInitialStep.pDivider;
800063e4:	91 30 00 2f 	movh.a %a2,61443
800063e8:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
800063ec:	54 22       	ld.w %d2,[%a2]
800063ee:	0c f8       	ld.bu %d15,[%a15]8
800063f0:	37 f2 04 fc 	insert %d15,%d2,%d15,24,4
800063f4:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.NDIV = cfg->sysPll.pllInitialStep.nDivider;
800063f6:	54 22       	ld.w %d2,[%a2]
800063f8:	0c f9       	ld.bu %d15,[%a15]9
800063fa:	37 f2 87 f4 	insert %d15,%d2,%d15,9,7
800063fe:	6c 20       	st.w [%a2]0,%d15

                    /* Disable oscillator disconnect feature
                     * in case of PLL unlock, PLL stays connected to fref */
                    SCU_PLLCON0.B.OSCDISCDIS = 1;
80006400:	4c 20       	ld.w %d15,[%a2]0
80006402:	96 40       	or %d15,64
80006404:	6c 20       	st.w [%a2]0,%d15
                    //                    workaround for Errata: PLL TC 005
                    SCU_PLLCON0.B.PLLPWD     = 0; // set PLL to power down
80006406:	4c 20       	ld.w %d15,[%a2]0
80006408:	b7 0f 01 f8 	insert %d15,%d15,0,16,1
8000640c:	6c 20       	st.w [%a2]0,%d15
                    /* Connect PLL to fREF as oscillator clock is connected to PLL   */
                    SCU_PLLCON0.B.CLRFINDIS  = 1;
8000640e:	4c 20       	ld.w %d15,[%a2]0
80006410:	96 20       	or %d15,32
80006412:	6c 20       	st.w [%a2]0,%d15
                    SCU_PLLCON0.B.PLLPWD     = 1; // set PLL to normal
80006414:	4c 20       	ld.w %d15,[%a2]0
80006416:	b7 ff 01 f8 	insert %d15,%d15,15,16,1
8000641a:	6c 20       	st.w [%a2]0,%d15

                    /* Restart PLL lock detection (RESLD = 1) */
                    SCU_PLLCON0.B.RESLD = 1;
8000641c:	4c 20       	ld.w %d15,[%a2]0
8000641e:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80006422:	6c 20       	st.w [%a2]0,%d15

                    IfxScuCcu_wait(0.000050F);  /*Wait for 50us */
80006424:	6d ff 94 fd 	call 80005f4c <IfxScuCcu_wait>

                    while (SCU_PLLSTAT.B.VCOLOCK == 0U)
80006428:	91 30 00 2f 	movh.a %a2,61443
8000642c:	d9 22 14 06 	lea %a2,[%a2]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006430:	4c 20       	ld.w %d15,[%a2]0
80006432:	6f 2f ff 7f 	jz.t %d15,2,80006430 <IfxScuCcu_init+0x19c>
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
80006436:	91 30 00 2f 	movh.a %a2,61443
8000643a:	d9 22 18 06 	lea %a2,[%a2]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
8000643e:	4c 20       	ld.w %d15,[%a2]0

                    while (SCU_CCUCON0.B.LCK != 0U)
80006440:	91 30 00 3f 	movh.a %a3,61443
                    {
                        /* Wait for PLL lock */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_PLLCON0.B.VCOBYP = 0; /*VCO bypass disabled */
80006444:	8f 1f c0 f1 	andn %d15,%d15,1
80006448:	6c 20       	st.w [%a2]0,%d15

                    while (SCU_CCUCON0.B.LCK != 0U)
8000644a:	d9 33 30 06 	lea %a3,[%a3]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000644e:	4c 30       	ld.w %d15,[%a3]0
80006450:	91 30 00 2f 	movh.a %a2,61443
80006454:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006458:	bf 0f fb 7f 	jlt %d15,0,8000644e <IfxScuCcu_init+0x1ba>
                    {
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    SCU_CCUCON0.B.CLKSEL = 0x01;
8000645c:	4c 20       	ld.w %d15,[%a2]0
8000645e:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
80006462:	6c 20       	st.w [%a2]0,%d15

                    /*Configure the clock distribution */
                    while (SCU_CCUCON0.B.LCK != 0U)
80006464:	4c 20       	ld.w %d15,[%a2]0
80006466:	91 30 00 cf 	movh.a %a12,61443
8000646a:	d9 cc 30 06 	lea %a12,[%a12]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
8000646e:	bf 0f fb 7f 	jlt %d15,0,80006464 <IfxScuCcu_init+0x1d0>
                        /*Wait till ccucon registers can be written with new value */
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */
80006472:	48 34       	ld.w %d4,[%a15]12
80006474:	6d ff 6c fd 	call 80005f4c <IfxScuCcu_wait>

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
80006478:	4c f5       	ld.w %d15,[%a15]20
8000647a:	54 c3       	ld.w %d3,[%a12]
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
8000647c:	48 42       	ld.w %d2,[%a15]16
                    /*Wait until the initial clock configurations take in to effect for the PLL*/
                    IfxScuCcu_wait(cfg->sysPll.pllInitialStep.waitTime); /*Wait for configured initial time */

                    {                                                    /*Write CCUCON0 configuration */
                        Ifx_SCU_CCUCON0 ccucon0;
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
8000647e:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
80006482:	26 f2       	and %d2,%d15
80006484:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
80006488:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon0.B.UP     = 1;
8000648c:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
80006490:	91 30 00 3f 	movh.a %a3,61443
                        ccucon0.U        = SCU_CCUCON0.U & ~cfg->clockDistribution.ccucon0.mask;
                        /*update with configured value */
                        ccucon0.U       |= (cfg->clockDistribution.ccucon0.mask & cfg->clockDistribution.ccucon0.value);
                        ccucon0.B.CLKSEL = 0x01;    /*  Select fpll as CCU input clock, even if this was not selected by configuration */
                        ccucon0.B.UP     = 1;
                        SCU_CCUCON0      = ccucon0; /*Set update bit explicitly to make above configurations effective */
80006494:	6c c0       	st.w [%a12]0,%d15
                    }

                    while (SCU_CCUCON1.B.LCK != 0U)
80006496:	d9 33 34 06 	lea %a3,[%a3]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
8000649a:	4c 30       	ld.w %d15,[%a3]0
8000649c:	91 30 00 2f 	movh.a %a2,61443
800064a0:	d9 22 34 06 	lea %a2,[%a2]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800064a4:	bf 0f fb 7f 	jlt %d15,0,8000649a <IfxScuCcu_init+0x206>
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
800064a8:	4c f7       	ld.w %d15,[%a15]28
800064aa:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
800064ac:	48 62       	ld.w %d2,[%a15]24
                    }

                    {
                        /*Write CCUCON1 configuration */
                        Ifx_SCU_CCUCON1 ccucon1;
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
800064ae:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
800064b2:	26 f2       	and %d2,%d15
800064b4:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon1.B.INSEL = 1;
800064b8:	b7 1f 02 fe 	insert %d15,%d15,1,28,2
                        ccucon1.B.UP    = 1;
800064bc:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON1     = ccucon1;
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
800064c0:	91 30 00 3f 	movh.a %a3,61443
                        ccucon1.U       = SCU_CCUCON1.U & ~cfg->clockDistribution.ccucon1.mask;
                        /*update with configured value */
                        ccucon1.U      |= (cfg->clockDistribution.ccucon1.mask & cfg->clockDistribution.ccucon1.value);
                        ccucon1.B.INSEL = 1;
                        ccucon1.B.UP    = 1;
                        SCU_CCUCON1     = ccucon1;
800064c4:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON2.B.LCK != 0U)
800064c6:	d9 33 00 16 	lea %a3,[%a3]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
800064ca:	4c 30       	ld.w %d15,[%a3]0
800064cc:	91 30 00 2f 	movh.a %a2,61443
800064d0:	d9 22 00 16 	lea %a2,[%a2]24640 <f0036040 <_SMALL_DATA4_+0x4002e040>>
800064d4:	bf 0f fb 7f 	jlt %d15,0,800064ca <IfxScuCcu_init+0x236>
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
800064d8:	4c f9       	ld.w %d15,[%a15]36
800064da:	54 23       	ld.w %d3,[%a2]
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
800064dc:	48 82       	ld.w %d2,[%a15]32
                    }

                    {
                        /*Write CCUCON2 configuration */
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
800064de:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
800064e2:	26 f2       	and %d2,%d15
800064e4:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon2.B.UP = 1;
800064e8:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
                        SCU_CCUCON2  = ccucon2;
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
800064ec:	91 30 00 3f 	movh.a %a3,61443
                        Ifx_SCU_CCUCON2 ccucon2;
                        ccucon2.U    = SCU_CCUCON2.U & ~cfg->clockDistribution.ccucon2.mask;
                        /*update with configured value */
                        ccucon2.U   |= (cfg->clockDistribution.ccucon2.mask & cfg->clockDistribution.ccucon2.value);
                        ccucon2.B.UP = 1;
                        SCU_CCUCON2  = ccucon2;
800064f0:	6c 20       	st.w [%a2]0,%d15
                    }

                    while (SCU_CCUCON5.B.LCK != 0U)
800064f2:	d9 33 0c 16 	lea %a3,[%a3]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
800064f6:	4c 30       	ld.w %d15,[%a3]0
800064f8:	91 30 00 2f 	movh.a %a2,61443
800064fc:	d9 22 0c 16 	lea %a2,[%a2]24652 <f003604c <_SMALL_DATA4_+0x4002e04c>>
80006500:	bf 0f fb 7f 	jlt %d15,0,800064f6 <IfxScuCcu_init+0x262>
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
80006504:	54 23       	ld.w %d3,[%a2]
80006506:	4c fb       	ld.w %d15,[%a15]44
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
80006508:	48 a2       	ld.w %d2,[%a15]40
                        /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                    }

                    {           /*Write CCUCON5 configuration */
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
8000650a:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
8000650e:	26 f2       	and %d2,%d15
80006510:	0f 23 a0 f0 	or %d15,%d3,%d2
                        ccucon5.B.UP = 1;
80006514:	b7 1f 01 ff 	insert %d15,%d15,1,30,1

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
80006518:	48 c2       	ld.w %d2,[%a15]48
                        Ifx_SCU_CCUCON5 ccucon5;
                        ccucon5.U    = SCU_CCUCON5.U & ~cfg->clockDistribution.ccucon5.mask;
                        /*update with configured value */
                        ccucon5.U   |= (cfg->clockDistribution.ccucon5.mask & cfg->clockDistribution.ccucon5.value);
                        ccucon5.B.UP = 1;
                        SCU_CCUCON5  = ccucon5;
8000651a:	6c 20       	st.w [%a2]0,%d15
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
8000651c:	91 30 00 2f 	movh.a %a2,61443
80006520:	d9 22 00 26 	lea %a2,[%a2]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006524:	54 23       	ld.w %d3,[%a2]
80006526:	4c fd       	ld.w %d15,[%a15]52
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
                        SCU_CCUCON8 = ccucon8;
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006528:	02 84       	mov %d4,%d8
                        SCU_CCUCON5  = ccucon5;
                    }

                    {           /*Write CCUCON6 configuration */
                        Ifx_SCU_CCUCON6 ccucon6;
                        ccucon6.U   = SCU_CCUCON6.U & ~cfg->clockDistribution.ccucon6.mask;
8000652a:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon6.U  |= (cfg->clockDistribution.ccucon6.mask & cfg->clockDistribution.ccucon6.value);
8000652e:	26 f2       	and %d2,%d15
80006530:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON6 = ccucon6;
80006534:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80006536:	91 30 00 2f 	movh.a %a2,61443
8000653a:	d9 22 04 26 	lea %a2,[%a2]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
8000653e:	54 23       	ld.w %d3,[%a2]
80006540:	4c ff       	ld.w %d15,[%a15]60
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
80006542:	48 e2       	ld.w %d2,[%a15]56
                    }

                    {
                        /*Write CCUCON7 configuration */
                        Ifx_SCU_CCUCON7 ccucon7;
                        ccucon7.U   = SCU_CCUCON7.U & ~cfg->clockDistribution.ccucon7.mask;
80006544:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon7.U  |= (cfg->clockDistribution.ccucon7.mask & cfg->clockDistribution.ccucon7.value);
80006548:	26 f2       	and %d2,%d15
8000654a:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON7 = ccucon7;
8000654e:	6c 20       	st.w [%a2]0,%d15
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80006550:	91 30 00 2f 	movh.a %a2,61443
80006554:	d9 22 08 26 	lea %a2,[%a2]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
80006558:	54 23       	ld.w %d3,[%a2]
8000655a:	19 ff 04 10 	ld.w %d15,[%a15]68 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
8000655e:	19 f2 00 10 	ld.w %d2,[%a15]64 <f0036088 <_SMALL_DATA4_+0x4002e088>>
                    }

                    {
                        /*Write CCUCON8 configuration */
                        Ifx_SCU_CCUCON8 ccucon8;
                        ccucon8.U   = SCU_CCUCON8.U & ~cfg->clockDistribution.ccucon8.mask;
80006562:	0f f3 e0 30 	andn %d3,%d3,%d15
                        /*update with configured value */
                        ccucon8.U  |= (cfg->clockDistribution.ccucon8.mask & cfg->clockDistribution.ccucon8.value);
80006566:	26 f2       	and %d2,%d15
80006568:	0f 23 a0 f0 	or %d15,%d3,%d2
                        SCU_CCUCON8 = ccucon8;
8000656c:	6c 20       	st.w [%a2]0,%d15
                    }
                }

                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000656e:	6d 00 03 07 	call 80007374 <IfxScuWdt_setSafetyEndinit>
            }
        }

        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;
80006572:	91 00 80 cf 	movh.a %a12,63488
80006576:	d9 cc 14 02 	lea %a12,[%a12]8212 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
8000657a:	19 ff 0c 10 	ld.w %d15,[%a15]76 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
8000657e:	54 c3       	ld.w %d3,[%a12]

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
80006580:	19 f2 08 10 	ld.w %d2,[%a15]72 <f8002014 <_SMALL_DATA4_+0x47ffa014>>
        {           /*Write Flash waitstate configuration */
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
80006584:	0f f3 e0 30 	andn %d3,%d3,%d15
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
80006588:	26 f2       	and %d2,%d15
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
8000658a:	02 94       	mov %d4,%d9
            Ifx_FLASH_FCON fcon;
            fcon.U = FLASH0_FCON.U & ~cfg->flashFconWaitStateConfig.mask;

            /*update with configured value */
            fcon.U &= ~cfg->flashFconWaitStateConfig.mask;
            fcon.U |= (cfg->flashFconWaitStateConfig.mask & cfg->flashFconWaitStateConfig.value);
8000658c:	0f 23 a0 f0 	or %d15,%d3,%d2
            {
                IfxScuWdt_clearCpuEndinit(endinit_pw);
80006590:	6d 00 51 05 	call 80007032 <IfxScuWdt_clearCpuEndinit>
                FLASH0_FCON = fcon;
80006594:	6c c0       	st.w [%a12]0,%d15
                IfxScuWdt_setCpuEndinit(endinit_pw);
80006596:	02 94       	mov %d4,%d9
80006598:	6d 00 82 06 	call 8000729c <IfxScuWdt_setCpuEndinit>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
8000659c:	91 30 00 df 	movh.a %a13,61443
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800065a0:	91 30 00 cf 	movh.a %a12,61443
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
800065a4:	82 0d       	mov %d13,0
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
800065a6:	d9 dd 14 06 	lea %a13,[%a13]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800065aa:	d9 cc 1c 06 	lea %a12,[%a12]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
                IfxScuWdt_setCpuEndinit(endinit_pw);
            }
        }

        /*Start Pll ramp up sequence */
        for (pllStepsCount = 0; pllStepsCount < cfg->sysPll.numOfPllDividerSteps; pllStepsCount++)
800065ae:	0c f0       	ld.bu %d15,[%a15]0
800065b0:	8f fd 0f 21 	and %d2,%d13,255
800065b4:	7f f2 28 80 	jge.u %d2,%d15,80006604 <IfxScuCcu_init+0x370>
        {                       /*iterate through number of pll steps */
            {
                IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
800065b8:	02 84       	mov %d4,%d8
800065ba:	6d 00 57 05 	call 80007068 <IfxScuWdt_clearSafetyEndinit>

                /*Configure K2 divider */
                while (SCU_PLLSTAT.B.K2RDY == 0U)
800065be:	4c d0       	ld.w %d15,[%a13]0
800065c0:	6f 5f ff 7f 	jz.t %d15,5,800065be <IfxScuCcu_init+0x32a>
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800065c4:	02 df       	mov %d15,%d13
800065c6:	16 ff       	and %d15,255
800065c8:	53 cf 20 a0 	mul %d10,%d15,12
800065cc:	c8 12       	ld.a %a2,[%a15]4
800065ce:	4c c0       	ld.w %d15,[%a12]0
800065d0:	60 a3       	mov.a %a3,%d10
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800065d2:	02 84       	mov %d4,%d8
                    /*Wait until K2 divider is ready */
                    /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
                }

                /*Now set the K2 divider value for the step corresponding to step count */
                SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount].k2Step;
800065d4:	30 32       	add.a %a2,%a3
800065d6:	14 22       	ld.bu %d2,[%a2]
800065d8:	37 2f 07 20 	insert %d2,%d15,%d2,0,7
800065dc:	74 c2       	st.w [%a12],%d2
                IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800065de:	6d 00 cb 06 	call 80007374 <IfxScuWdt_setSafetyEndinit>
            }

            /*call the hook function if configured */
            if (cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction != (IfxScuCcu_PllStepsFunctionHook)0)
800065e2:	c8 12       	ld.a %a2,[%a15]4
800065e4:	60 a3       	mov.a %a3,%d10
800065e6:	30 32       	add.a %a2,%a3
800065e8:	99 22 08 00 	ld.a %a2,[%a2]8
800065ec:	bc 23       	jz.a %a2,800065f2 <IfxScuCcu_init+0x35e>
            {
                cfg->sysPll.pllDividerStep[pllStepsCount].hookFunction();
800065ee:	2d 02 00 00 	calli %a2
            }

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount].waitTime);
800065f2:	c8 12       	ld.a %a2,[%a15]4
800065f4:	60 a3       	mov.a %a3,%d10
800065f6:	c2 1d       	add %d13,1
800065f8:	30 32       	add.a %a2,%a3
800065fa:	19 24 04 00 	ld.w %d4,[%a2]4
800065fe:	6d ff a7 fc 	call 80005f4c <IfxScuCcu_wait>
80006602:	3c d6       	j 800065ae <IfxScuCcu_init+0x31a>
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006604:	02 84       	mov %d4,%d8
80006606:	6d 00 31 05 	call 80007068 <IfxScuWdt_clearSafetyEndinit>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
8000660a:	91 30 00 ff 	movh.a %a15,61443
8000660e:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006612:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006614:	02 84       	mov %d4,%d8
        }
    }

    {                           /* Enable oscillator disconnect feature */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80006616:	8f 0f c4 f1 	andn %d15,%d15,64
8000661a:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000661c:	6d 00 ac 06 	call 80007374 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006620:	91 30 00 ff 	movh.a %a15,61443
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006624:	02 94       	mov %d4,%d9
        SCU_TRAPCLR.B.SMUT = 1U;
80006626:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
8000662a:	6d 00 04 05 	call 80007032 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
8000662e:	4c f0       	ld.w %d15,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006630:	06 3c       	sh %d12,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006632:	96 08       	or %d15,8
80006634:	68 0f       	st.w [%a15]0,%d15
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006636:	91 30 00 ff 	movh.a %a15,61443
8000663a:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
8000663e:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006640:	02 94       	mov %d4,%d9
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006642:	8f 8f c0 f1 	andn %d15,%d15,8
80006646:	a6 fc       	or %d12,%d15
80006648:	68 0c       	st.w [%a15]0,%d12
        IfxScuWdt_setCpuEndinit(endinit_pw);
8000664a:	6d 00 29 06 	call 8000729c <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
8000664e:	02 b2       	mov %d2,%d11
80006650:	00 90       	ret 

80006652 <IfxScuCcu_initConfig>:


void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg)
{
    *cfg = IfxScuCcu_defaultClockConfig;
80006652:	91 00 00 f8 	movh.a %a15,32768
80006656:	d9 ff a4 b0 	lea %a15,[%a15]2788 <80000ae4 <IfxScuCcu_defaultClockConfig>>
8000665a:	c5 02 14 00 	lea %a2,14 <_.+0x13>
8000665e:	44 ff       	ld.w %d15,[%a15+]
80006660:	64 4f       	st.w [%a4+],%d15
80006662:	fc 2e       	loop %a2,8000665e <IfxScuCcu_initConfig+0xc>
80006664:	00 90       	ret 

80006666 <IfxScuCcu_initErayPll>:
}


boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
80006666:	40 4c       	mov.aa %a12,%a4
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006668:	6d 00 e5 05 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>
8000666c:	02 2f       	mov %d15,%d2
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
8000666e:	6d 00 00 06 	call 8000726e <IfxScuWdt_getSafetyWatchdogPassword>

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006672:	02 f4       	mov %d4,%d15
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;

    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006674:	02 28       	mov %d8,%d2

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006676:	6d 00 de 04 	call 80007032 <IfxScuWdt_clearCpuEndinit>
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
8000667a:	91 30 00 ff 	movh.a %a15,61443
8000667e:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006682:	48 03       	ld.w %d3,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006684:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006686:	02 f4       	mov %d4,%d15
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
80006688:	8f 82 40 21 	or %d2,%d2,8
8000668c:	68 02       	st.w [%a15]0,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();

    {                           /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
8000668e:	37 03 e1 a1 	extr.u %d10,%d3,3,1
        SCU_TRAPDIS.B.SMUT = 1U;
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006692:	6d 00 05 06 	call 8000729c <IfxScuWdt_setCpuEndinit>
    }
    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006696:	02 84       	mov %d4,%d8
80006698:	6d 00 e8 04 	call 80007068 <IfxScuWdt_clearSafetyEndinit>

    // ensure that PLL enabled
    if (!SCU_PLLERAYCON0.B.PLLPWD || SCU_PLLERAYCON0.B.VCOPWD || SCU_PLLERAYSTAT.B.PWDSTAT)
8000669c:	91 30 00 ff 	movh.a %a15,61443
800066a0:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800066a4:	48 02       	ld.w %d2,[%a15]0
800066a6:	ef 02 0c 00 	jz.t %d2,16,800066be <IfxScuCcu_initErayPll+0x58>
800066aa:	48 02       	ld.w %d2,[%a15]0
800066ac:	6f 12 09 80 	jnz.t %d2,1,800066be <IfxScuCcu_initErayPll+0x58>
800066b0:	91 30 00 ff 	movh.a %a15,61443
800066b4:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800066b8:	48 02       	ld.w %d2,[%a15]0
800066ba:	6f 12 19 00 	jz.t %d2,1,800066ec <IfxScuCcu_initErayPll+0x86>
    {   // PLLPWD=0 or VCOPWD=1 or PWDSTAT=1?
      // enable PLL and leave power saving mode
        SCU_PLLERAYCON0.B.PLLPWD = 1;
800066be:	91 30 00 ff 	movh.a %a15,61443
800066c2:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800066c6:	48 02       	ld.w %d2,[%a15]0
800066c8:	b7 f2 01 28 	insert %d2,%d2,15,16,1
800066cc:	68 02       	st.w [%a15]0,%d2
        SCU_PLLERAYCON0.B.VCOPWD = 0;
800066ce:	48 02       	ld.w %d2,[%a15]0
800066d0:	8f 22 c0 21 	andn %d2,%d2,2
800066d4:	68 02       	st.w [%a15]0,%d2

        while (SCU_PLLERAYSTAT.B.PWDSTAT)  // poll PWDSTAT
800066d6:	91 30 00 ff 	movh.a %a15,61443
800066da:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800066de:	48 02       	ld.w %d2,[%a15]0
800066e0:	6f 12 ff ff 	jnz.t %d2,1,800066de <IfxScuCcu_initErayPll+0x78>
        {}

        /*Wait for waitCounter corresponding to the pll step */
        IfxScuCcu_wait(cfg->pllInitialStep.waitTime);
800066e4:	19 c4 04 00 	ld.w %d4,[%a12]4
800066e8:	6d ff 32 fc 	call 80005f4c <IfxScuCcu_wait>
    }

    /* Enter Prescalar mode */
    /* Update K and N dividers */
    if (!SCU_PLLERAYSTAT.B.VCOBYST)      // checking PLLERAYBYPST flag
800066ec:	91 30 00 ff 	movh.a %a15,61443
800066f0:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800066f4:	48 02       	ld.w %d2,[%a15]0
800066f6:	6f 02 15 80 	jnz.t %d2,0,80006720 <IfxScuCcu_initErayPll+0xba>
    {                                    // select "secure" K1 value - please check @silicon if K1=4 is ok
        while (!SCU_PLLERAYSTAT.B.K1RDY) // poll K1RDY before changing K
800066fa:	48 02       	ld.w %d2,[%a15]0
800066fc:	6f 42 ff 7f 	jz.t %d2,4,800066fa <IfxScuCcu_initErayPll+0x94>
        {}

        SCU_PLLERAYCON1.B.K1DIV = 3;
80006700:	91 30 00 ff 	movh.a %a15,61443
80006704:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006708:	48 02       	ld.w %d2,[%a15]0
8000670a:	b7 32 07 28 	insert %d2,%d2,3,16,7
8000670e:	68 02       	st.w [%a15]0,%d2

        // activate VCO bypass (bit 0: VCOBYP=1)
        SCU_PLLERAYCON0.B.VCOBYP = 1;
80006710:	91 30 00 ff 	movh.a %a15,61443
80006714:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
80006718:	48 02       	ld.w %d2,[%a15]0
8000671a:	8f 12 40 21 	or %d2,%d2,1
8000671e:	68 02       	st.w [%a15]0,%d2
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
80006720:	91 30 00 ff 	movh.a %a15,61443
80006724:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006728:	48 02       	ld.w %d2,[%a15]0
8000672a:	6f 52 ff 7f 	jz.t %d2,5,80006728 <IfxScuCcu_initErayPll+0xc2>
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
8000672e:	91 30 00 ff 	movh.a %a15,61443
80006732:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
80006736:	48 03       	ld.w %d3,[%a15]0
80006738:	39 c2 02 00 	ld.bu %d2,[%a12]2 <f0030000 <_SMALL_DATA4_+0x40028000>>
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
8000673c:	02 84       	mov %d4,%d8
    }

    while (!SCU_PLLERAYSTAT.B.K2RDY)     // poll K1RDY before changing K
    {}

    SCU_PLLERAYCON1.B.K2DIV = cfg->pllInitialStep.k2Initial;
8000673e:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006742:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.PDIV  = cfg->pllInitialStep.pDivider;
80006744:	91 30 00 ff 	movh.a %a15,61443
80006748:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
8000674c:	48 03       	ld.w %d3,[%a15]0
8000674e:	14 c2       	ld.bu %d2,[%a12]
80006750:	37 23 04 2c 	insert %d2,%d3,%d2,24,4
80006754:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.NDIV  = cfg->pllInitialStep.nDivider;
80006756:	48 03       	ld.w %d3,[%a15]0
80006758:	39 c2 01 00 	ld.bu %d2,[%a12]1
8000675c:	37 23 85 24 	insert %d2,%d3,%d2,9,5
80006760:	68 02       	st.w [%a15]0,%d2
     *  CLRFINDIS = 1 ==> Connect OSC to PLL
     *  PLLPWD = 1    ==> PLL Power Saving Mode : Normal behaviour
     *  NDIV = NDIV
     */

    SCU_PLLERAYCON0.B.RESLD     = 1U;
80006762:	48 02       	ld.w %d2,[%a15]0
80006764:	b7 f2 01 29 	insert %d2,%d2,15,18,1
80006768:	68 02       	st.w [%a15]0,%d2
    SCU_PLLERAYCON0.B.CLRFINDIS = 1U;
8000676a:	48 02       	ld.w %d2,[%a15]0
8000676c:	8f 02 42 21 	or %d2,%d2,32
80006770:	68 02       	st.w [%a15]0,%d2

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006772:	6d 00 01 06 	call 80007374 <IfxScuWdt_setSafetyEndinit>

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
80006776:	91 10 00 f0 	movh.a %a15,1
8000677a:	91 30 00 2f 	movh.a %a2,61443
8000677e:	d9 22 24 06 	lea %a2,[%a2]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
80006782:	d9 ff 0f dc 	lea %a15,[%a15]-15537 <c34f <__TRICORE_DERIVATE_MEMORY_MAP__+0x9c4f>>
80006786:	fd f0 04 00 	loop %a15,8000678e <IfxScuCcu_initErayPll+0x128>
    {}

    // check for timeout, exit immediately (don't disable VCO bypass) of not locked
    if (!time_out_ctr)
    {
        status = TRUE;
8000678a:	82 19       	mov %d9,1
8000678c:	3c 05       	j 80006796 <IfxScuCcu_initErayPll+0x130>
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    // Wait until VCO LOCK bit is set
    uint32 time_out_ctr = 50000; // higher time out value as for clib_pll, since system is clocked much faster while polling the lock flag

    while (--time_out_ctr && !SCU_PLLERAYSTAT.B.VCOLOCK)
8000678e:	54 22       	ld.w %d2,[%a2]
80006790:	6f 22 fb 7f 	jz.t %d2,2,80006786 <IfxScuCcu_initErayPll+0x120>

boolean IfxScuCcu_initErayPll(const IfxScuCcu_ErayPllConfig *cfg)
{
    uint8   smuTrapEnable;
    uint16  endinit_pw, endinitSfty_pw;
    boolean status = 0;
80006794:	82 09       	mov %d9,0
    if (!time_out_ctr)
    {
        status = TRUE;
    }

    IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006796:	02 84       	mov %d4,%d8
80006798:	6d 00 68 04 	call 80007068 <IfxScuWdt_clearSafetyEndinit>
    /*Bypass VCO*/
    SCU_PLLERAYCON0.B.VCOBYP = 0U;
8000679c:	91 30 00 ff 	movh.a %a15,61443
800067a0:	d9 ff 28 06 	lea %a15,[%a15]24616 <f0036028 <_SMALL_DATA4_+0x4002e028>>
800067a4:	48 02       	ld.w %d2,[%a15]0
800067a6:	8f 12 c0 21 	andn %d2,%d2,1
800067aa:	68 02       	st.w [%a15]0,%d2

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
800067ac:	91 30 00 ff 	movh.a %a15,61443
800067b0:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800067b4:	48 02       	ld.w %d2,[%a15]0
800067b6:	6f 02 ff ff 	jnz.t %d2,0,800067b4 <IfxScuCcu_initErayPll+0x14e>
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
800067ba:	91 30 00 ff 	movh.a %a15,61443
800067be:	d9 ff 24 06 	lea %a15,[%a15]24612 <f0036024 <_SMALL_DATA4_+0x4002e024>>
800067c2:	48 02       	ld.w %d2,[%a15]0
    {
        status = TRUE;
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800067c4:	02 84       	mov %d4,%d8

    // wait until bypass has been deactivated
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
800067c6:	37 02 61 21 	extr.u %d2,%d2,2,1

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
800067ca:	91 30 00 ff 	movh.a %a15,61443
    while (SCU_PLLERAYSTAT.B.VCOBYST)         // poll VCOBYST
    {}

    if (!SCU_PLLERAYSTAT.B.VCOLOCK)
    {
        status = TRUE;
800067ce:	ab 19 80 92 	sel %d9,%d2,%d9,1
    }

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800067d2:	6d 00 d1 05 	call 80007374 <IfxScuWdt_setSafetyEndinit>

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
800067d6:	02 f4       	mov %d4,%d15
800067d8:	6d 00 2d 04 	call 80007032 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
800067dc:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
800067e0:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800067e2:	8f 3a 00 30 	sh %d3,%d10,3

    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
800067e6:	8f 82 40 21 	or %d2,%d2,8
800067ea:	68 02       	st.w [%a15]0,%d2
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800067ec:	91 30 00 ff 	movh.a %a15,61443
800067f0:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
800067f4:	48 02       	ld.w %d2,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
800067f6:	02 f4       	mov %d4,%d15
    IfxScuWdt_setSafetyEndinit(endinitSfty_pw);

    {                           /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
800067f8:	8f 82 c0 21 	andn %d2,%d2,8
800067fc:	a6 32       	or %d2,%d3
800067fe:	68 02       	st.w [%a15]0,%d2
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006800:	6d 00 4e 05 	call 8000729c <IfxScuWdt_setCpuEndinit>
    }
    return status;
}
80006804:	02 92       	mov %d2,%d9
80006806:	00 90       	ret 

80006808 <IfxScuCcu_initErayPllConfig>:


void IfxScuCcu_initErayPllConfig(IfxScuCcu_ErayPllConfig *cfg)
{
    *cfg = IfxScuCcu_defaultErayPllConfig;
80006808:	91 00 00 f8 	movh.a %a15,32768
8000680c:	d9 ff 9c b0 	lea %a15,[%a15]2780 <80000adc <IfxScuCcu_defaultErayPllConfig>>
80006810:	09 f2 40 09 	ld.d %e2,[%a15]
80006814:	89 42 40 09 	st.d [%a4],%e2
80006818:	00 90       	ret 

8000681a <IfxScuCcu_setCpuFrequency>:
    return status;
}


float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq)
{
8000681a:	02 5a       	mov %d10,%d5
8000681c:	02 49       	mov %d9,%d4
    uint16  endinitSfty_pw;
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();
8000681e:	6d ff a7 fc 	call 8000616c <IfxScuCcu_getSriFrequency>
80006822:	02 2f       	mov %d15,%d2

    if (cpuFreq >= sriFreq)
80006824:	4b 2a 01 20 	cmp.f %d2,%d10,%d2
80006828:	87 22 a2 20 	or.t %d2,%d2,2,%d2,1
    {
        cpuDiv = 0;
8000682c:	82 08       	mov %d8,0
    float32 sriFreq;
    uint32  cpuDiv;

    sriFreq = IfxScuCcu_getSriFrequency();

    if (cpuFreq >= sriFreq)
8000682e:	f6 29       	jnz %d2,80006840 <IfxScuCcu_setCpuFrequency+0x26>
    {
        cpuDiv = 0;
    }
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
80006830:	7b 00 28 84 	movh %d8,17024
80006834:	4b 8a 41 80 	mul.f %d8,%d10,%d8
80006838:	4b f8 51 80 	div.f %d8,%d8,%d15
8000683c:	4b 08 71 81 	ftouz %d8,%d8
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006840:	6d 00 17 05 	call 8000726e <IfxScuWdt_getSafetyWatchdogPassword>

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006844:	02 24       	mov %d4,%d2
    else
    {
        cpuDiv = (uint32)((cpuFreq * 64) / sriFreq);
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006846:	02 2a       	mov %d10,%d2

    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006848:	6d 00 10 04 	call 80007068 <IfxScuWdt_clearSafetyEndinit>

        switch (cpu)
8000684c:	df 19 0f 00 	jeq %d9,1,8000686a <IfxScuCcu_setCpuFrequency+0x50>
80006850:	76 98       	jz %d9,80006860 <IfxScuCcu_setCpuFrequency+0x46>
80006852:	df 29 11 80 	jne %d9,2,80006874 <IfxScuCcu_setCpuFrequency+0x5a>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
80006856:	91 30 00 ff 	movh.a %a15,61443
8000685a:	d9 ff 08 26 	lea %a15,[%a15]24712 <f0036088 <_SMALL_DATA4_+0x4002e088>>
8000685e:	3c 0a       	j 80006872 <IfxScuCcu_setCpuFrequency+0x58>
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

        switch (cpu)
        {
        case IfxCpu_ResourceCpu_0:
            SCU_CCUCON6.U = cpuDiv;
80006860:	91 30 00 ff 	movh.a %a15,61443
80006864:	d9 ff 00 26 	lea %a15,[%a15]24704 <f0036080 <_SMALL_DATA4_+0x4002e080>>
80006868:	3c 05       	j 80006872 <IfxScuCcu_setCpuFrequency+0x58>
            break;
        case IfxCpu_ResourceCpu_1:
            SCU_CCUCON7.U = cpuDiv;
8000686a:	91 30 00 ff 	movh.a %a15,61443
8000686e:	d9 ff 04 26 	lea %a15,[%a15]24708 <f0036084 <_SMALL_DATA4_+0x4002e084>>
            break;
        case IfxCpu_ResourceCpu_2:
            SCU_CCUCON8.U = cpuDiv;
80006872:	68 08       	st.w [%a15]0,%d8

        default:
            break;
        }

        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006874:	02 a4       	mov %d4,%d10
80006876:	6d 00 7f 05 	call 80007374 <IfxScuWdt_setSafetyEndinit>
    }

    if (cpuDiv != 0)
8000687a:	76 89       	jz %d8,8000688c <IfxScuCcu_setCpuFrequency+0x72>
    {
        sriFreq = sriFreq * (cpuDiv / 64.0f);
8000687c:	4b 08 61 81 	utof %d8,%d8
80006880:	7b 00 c8 23 	movh %d2,15488
80006884:	4b 28 41 80 	mul.f %d8,%d8,%d2
80006888:	4b 8f 41 f0 	mul.f %d15,%d15,%d8
    }

    return sriFreq;
}
8000688c:	02 f2       	mov %d2,%d15
8000688e:	00 90       	ret 

80006890 <IfxScuCcu_setGtmFrequency>:


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
80006890:	91 30 00 ff 	movh.a %a15,61443
80006894:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
    return sriFreq;
}


float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq)
{
80006898:	02 48       	mov %d8,%d4
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON1 ccucon1   = SCU_CCUCON1;
8000689a:	4c f0       	ld.w %d15,[%a15]0

    float32         inputFreq = IfxScuCcu_getSourceFrequency();
8000689c:	6d ff 46 fb 	call 80005f28 <IfxScuCcu_getSourceFrequency>
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
800068a0:	4b 82 51 20 	div.f %d2,%d2,%d8
800068a4:	4b 02 31 31 	ftoiz %d3,%d2
800068a8:	4b 03 41 41 	itof %d4,%d3
800068ac:	6b 04 31 22 	sub.f %d2,%d2,%d4
800068b0:	7b 00 f0 43 	movh %d4,16128
800068b4:	4b 42 01 20 	cmp.f %d2,%d2,%d4
800068b8:	37 02 61 21 	extr.u %d2,%d2,2,1
800068bc:	42 32       	add %d2,%d3
/** Return maximum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__maxu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("max.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
800068be:	82 13       	mov %d3,1
800068c0:	0b 32 b0 21 	max.u %d2,%d2,%d3
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
800068c4:	8b e2 00 52 	eq %d5,%d2,14
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          gtmDiv    = (uint32)__roundf(inputFreq / gtmFreq);
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
800068c8:	1b 92 ff 4f 	addi %d4,%d2,-7
        gtmDiv = gtmDiv - 1;
    }

    if (gtmDiv == 14)
    {
        gtmDiv = 12;
800068cc:	ab c2 a0 95 	seln %d9,%d5,%d2,12
    gtmDiv = __maxu(gtmDiv, 1);

    /*gtmDiv       = gtmDiv & 0x2U;*//* only even dividers */
    if ((gtmDiv >= 7) && (gtmDiv < 14) && ((gtmDiv & 1) == 1))
    {
        gtmDiv = gtmDiv - 1;
800068d0:	8f 12 c0 31 	andn %d3,%d2,1
800068d4:	02 92       	mov %d2,%d9
800068d6:	8b 74 a0 92 	ge.u %d9,%d4,7
800068da:	2b 32 40 99 	sel %d9,%d9,%d2,%d3
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
800068de:	6d 00 c8 04 	call 8000726e <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
800068e2:	02 24       	mov %d4,%d2
    if (gtmDiv == 14)
    {
        gtmDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
800068e4:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
800068e6:	6d 00 c1 03 	call 80007068 <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON1.B.LCK != 0U)
800068ea:	40 f2       	mov.aa %a2,%a15
800068ec:	54 22       	ld.w %d2,[%a2]
800068ee:	91 30 00 ff 	movh.a %a15,61443
800068f2:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
800068f6:	bf 02 fb 7f 	jlt %d2,0,800068ec <IfxScuCcu_setGtmFrequency+0x5c>
    {}

    ccucon1.B.GTMDIV = gtmDiv;
800068fa:	37 9f 04 f6 	insert %d15,%d15,%d9,12,4
    ccucon1.B.UP     = 1U;
800068fe:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON1.U    = ccucon1.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006902:	02 84       	mov %d4,%d8
    while (SCU_CCUCON1.B.LCK != 0U)
    {}

    ccucon1.B.GTMDIV = gtmDiv;
    ccucon1.B.UP     = 1U;
    SCU_CCUCON1.U    = ccucon1.U;
80006904:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006906:	6d 00 37 05 	call 80007374 <IfxScuWdt_setSafetyEndinit>
}


IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
{
    return IfxScuCcu_getSourceFrequency() / SCU_CCUCON1.B.GTMDIV;
8000690a:	6d ff 0f fb 	call 80005f28 <IfxScuCcu_getSourceFrequency>
8000690e:	4c f0       	ld.w %d15,[%a15]0
80006910:	37 0f 64 f6 	extr.u %d15,%d15,12,4
80006914:	4b 0f 41 f1 	itof %d15,%d15

    return IfxScuCcu_getGtmFrequency();
}
80006918:	4b f2 51 20 	div.f %d2,%d2,%d15
8000691c:	00 90       	ret 

8000691e <IfxScuCcu_setPll2ErayFrequency>:


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
8000691e:	02 48       	mov %d8,%d4
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
80006920:	6d 00 a7 04 	call 8000726e <IfxScuWdt_getSafetyWatchdogPassword>
80006924:	02 2f       	mov %d15,%d2
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006926:	6d ff 84 fa 	call 80005e2e <IfxScuCcu_getPllErayVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(password);
8000692a:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
8000692c:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(password);
8000692e:	6d 00 9d 03 	call 80007068 <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006932:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
80006936:	91 30 00 ff 	movh.a %a15,61443
8000693a:	d9 ff 2c 06 	lea %a15,[%a15]24620 <f003602c <_SMALL_DATA4_+0x4002e02c>>
8000693e:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006940:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(password);
80006944:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2ErayFrequency(float32 pll2ErayFreq)
{
    uint16 password = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div  = (uint32)((IfxScuCcu_getPllErayVcoFrequency() / pll2ErayFreq) - 1);
80006946:	6b 03 31 88 	sub.f %d8,%d8,%d3
8000694a:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(password);
        SCU_PLLERAYCON1.B.K3DIV = pll2Div;
8000694e:	37 82 04 84 	insert %d8,%d2,%d8,8,4
80006952:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(password);
80006954:	6d 00 10 05 	call 80007374 <IfxScuWdt_setSafetyEndinit>

IFX_INLINE float32 IfxScuCcu_getPll2ErayFrequency(void)
{
    float32 pll2ErayFrequency;

    pll2ErayFrequency = IfxScuCcu_getPllErayVcoFrequency() / (SCU_PLLERAYCON1.B.K3DIV + 1);
80006958:	6d ff 6b fa 	call 80005e2e <IfxScuCcu_getPllErayVcoFrequency>
8000695c:	4c f0       	ld.w %d15,[%a15]0
8000695e:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80006962:	c2 1f       	add %d15,1
80006964:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2ErayFrequency();
}
80006968:	4b f2 51 20 	div.f %d2,%d2,%d15
8000696c:	00 90       	ret 

8000696e <IfxScuCcu_setPll2Frequency>:


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
8000696e:	02 48       	mov %d8,%d4
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006970:	6d 00 7f 04 	call 8000726e <IfxScuWdt_getSafetyWatchdogPassword>
80006974:	02 2f       	mov %d15,%d2
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006976:	6d ff b7 fa 	call 80005ee4 <IfxScuCcu_getPllVcoFrequency>
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000697a:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
8000697c:	02 29       	mov %d9,%d2
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
8000697e:	6d 00 75 03 	call 80007068 <IfxScuWdt_clearSafetyEndinit>


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006982:	4b 89 51 80 	div.f %d8,%d9,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
80006986:	91 30 00 ff 	movh.a %a15,61443
8000698a:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
8000698e:	48 02       	ld.w %d2,[%a15]0


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006990:	7b 00 f8 33 	movh %d3,16256
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006994:	02 f4       	mov %d4,%d15


float32 IfxScuCcu_setPll2Frequency(float32 pll2Freq)
{
    uint16 endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    uint32 pll2Div        = (uint32)((IfxScuCcu_getPllVcoFrequency() / pll2Freq) - 1);
80006996:	6b 03 31 88 	sub.f %d8,%d8,%d3
8000699a:	4b 08 71 81 	ftouz %d8,%d8
    {
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
        SCU_PLLCON1.B.K3DIV = pll2Div;
8000699e:	37 82 07 84 	insert %d8,%d2,%d8,8,7
800069a2:	68 08       	st.w [%a15]0,%d8
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
800069a4:	6d 00 e8 04 	call 80007374 <IfxScuWdt_setSafetyEndinit>


IFX_INLINE float32 IfxScuCcu_getPll2Frequency(void)
{
    float32 pll2Frequency;
    pll2Frequency = IfxScuCcu_getPllVcoFrequency() / (SCU_PLLCON1.B.K3DIV + 1);
800069a8:	6d ff 9e fa 	call 80005ee4 <IfxScuCcu_getPllVcoFrequency>
800069ac:	4c f0       	ld.w %d15,[%a15]0
800069ae:	37 0f 67 f4 	extr.u %d15,%d15,8,7
800069b2:	c2 1f       	add %d15,1
800069b4:	4b 0f 41 f1 	itof %d15,%d15
    }
    return IfxScuCcu_getPll2Frequency();
}
800069b8:	4b f2 51 20 	div.f %d2,%d2,%d15
800069bc:	00 90       	ret 

800069be <IfxScuCcu_setSpbFrequency>:


float32 IfxScuCcu_setSpbFrequency(float32 spbFreq)
{
800069be:	02 4f       	mov %d15,%d4
    /* TODO: check whether it is necessary to disable trap and/or the safety */
    uint16          l_EndInitPW;
    uint16          l_SEndInitPW;
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
800069c0:	6d ff b4 fa 	call 80005f28 <IfxScuCcu_getSourceFrequency>
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
800069c4:	4b f2 51 20 	div.f %d2,%d2,%d15
800069c8:	82 24       	mov %d4,2
800069ca:	4b 02 71 21 	ftouz %d2,%d2
800069ce:	0b 42 b0 41 	max.u %d4,%d2,%d4
    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
    {
        spbDiv = spbDiv - 1;
    }

    if (spbDiv == 14)
800069d2:	8b e4 00 32 	eq %d3,%d4,14
    {
        spbDiv = 12;
800069d6:	ab c4 a0 a3 	seln %d10,%d3,%d4,12
    Ifx_SCU_CCUCON0 ccucon0;
    float32         inputFreq = IfxScuCcu_getSourceFrequency();
    uint32          spbDiv    = (uint32)(inputFreq / spbFreq);
    spbDiv = __maxu(spbDiv, 2);

    if ((spbDiv >= 7) && (spbDiv < 14) && ((spbDiv & 1) == 1))
800069da:	1b 94 ff 2f 	addi %d2,%d4,-7
    {
        spbDiv = spbDiv - 1;
800069de:	8f 14 c0 f1 	andn %d15,%d4,1
800069e2:	02 a4       	mov %d4,%d10
800069e4:	8b 72 a0 a2 	ge.u %d10,%d2,7
800069e8:	2b f4 40 aa 	sel %d10,%d10,%d4,%d15
    if (spbDiv == 14)
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
800069ec:	6d 00 23 04 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>
800069f0:	02 28       	mov %d8,%d2
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
800069f2:	6d 00 3e 04 	call 8000726e <IfxScuWdt_getSafetyWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
800069f6:	02 84       	mov %d4,%d8
    {
        spbDiv = 12;
    }

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
800069f8:	02 29       	mov %d9,%d2

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
800069fa:	6d 00 1c 03 	call 80007032 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
800069fe:	91 30 00 ff 	movh.a %a15,61443
80006a02:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006a06:	48 02       	ld.w %d2,[%a15]0
80006a08:	3b 00 3e f0 	mov %d15,992
80006a0c:	a6 2f       	or %d15,%d2
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006a0e:	02 84       	mov %d4,%d8

    l_EndInitPW  = IfxScuWdt_getCpuWatchdogPassword();
    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U | 0x3E0U;
80006a10:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006a12:	6d 00 45 04 	call 8000729c <IfxScuWdt_setCpuEndinit>

    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006a16:	02 94       	mov %d4,%d9
80006a18:	6d 00 28 03 	call 80007068 <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006a1c:	91 30 00 2f 	movh.a %a2,61443
80006a20:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006a24:	4c 20       	ld.w %d15,[%a2]0
80006a26:	91 30 00 ff 	movh.a %a15,61443
80006a2a:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006a2e:	bf 0f fb 7f 	jlt %d15,0,80006a24 <IfxScuCcu_setSpbFrequency+0x66>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006a32:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SPBDIV = spbDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006a34:	02 94       	mov %d4,%d9

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SPBDIV = spbDiv;
80006a36:	37 af 04 f8 	insert %d15,%d15,%d10,16,4
    ccucon0.B.UP     = 1;
80006a3a:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006a3e:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006a40:	6d 00 9a 04 	call 80007374 <IfxScuWdt_setSafetyEndinit>

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
80006a44:	02 84       	mov %d4,%d8
80006a46:	6d 00 f6 02 	call 80007032 <IfxScuWdt_clearCpuEndinit>
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006a4a:	91 30 00 ff 	movh.a %a15,61443
80006a4e:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006a52:	4c f0       	ld.w %d15,[%a15]0
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006a54:	02 84       	mov %d4,%d8
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;
    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);

    IfxScuWdt_clearCpuEndinit(l_EndInitPW);
    SCU_TRAPDIS.U = SCU_TRAPDIS.U & (uint32)~0x3E0UL;
80006a56:	b7 0f 85 f2 	insert %d15,%d15,0,5,5
80006a5a:	68 0f       	st.w [%a15]0,%d15
    IfxScuWdt_setCpuEndinit(l_EndInitPW);
80006a5c:	6d 00 20 04 	call 8000729c <IfxScuWdt_setCpuEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006a60:	91 30 00 ff 	movh.a %a15,61443
80006a64:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006a68:	4c f0       	ld.w %d15,[%a15]0
80006a6a:	bf 0f ff 7f 	jlt %d15,0,80006a68 <IfxScuCcu_setSpbFrequency+0xaa>
    {}

    return IfxScuCcu_getSpbFrequency();
80006a6e:	1d ff 1e fb 	j 800060aa <IfxScuCcu_getSpbFrequency>

80006a72 <IfxScuCcu_setSriFrequency>:
}


float32 IfxScuCcu_setSriFrequency(float32 sriFreq)
{
80006a72:	02 4f       	mov %d15,%d4
    float32         freq   = 0;
    float32         source = IfxScuCcu_getSourceFrequency();
80006a74:	6d ff 5a fa 	call 80005f28 <IfxScuCcu_getSourceFrequency>
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
80006a78:	4b f2 51 20 	div.f %d2,%d2,%d15
80006a7c:	4b 02 31 31 	ftoiz %d3,%d2
80006a80:	4b 03 41 f1 	itof %d15,%d3
80006a84:	6b 0f 31 22 	sub.f %d2,%d2,%d15
80006a88:	7b 00 f0 f3 	movh %d15,16128
80006a8c:	4b f2 01 f0 	cmp.f %d15,%d2,%d15
80006a90:	37 0f 61 f1 	extr.u %d15,%d15,2,1
80006a94:	82 12       	mov %d2,1
80006a96:	42 3f       	add %d15,%d3
80006a98:	0b 2f b0 f1 	max.u %d15,%d15,%d2
    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
80006a9c:	8b ef 00 42 	eq %d4,%d15,14
    Ifx_SCU_CCUCON0 ccucon0;
    uint16          l_SEndInitPW;
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
80006aa0:	92 93       	add %d3,%d15,-7
        sriDiv = sriDiv - 1;
    }

    if (sriDiv == 14)
    {
        sriDiv = 12;
80006aa2:	ab cf a0 94 	seln %d9,%d4,%d15,12
    uint32          sriDiv = (uint32)__roundf(source / sriFreq);
    sriDiv = __maxu(sriDiv, 1);

    if ((sriDiv >= 7) && (sriDiv < 14) && ((sriDiv & 1) == 1))
    {
        sriDiv = sriDiv - 1;
80006aa6:	8f 1f c0 21 	andn %d2,%d15,1
80006aaa:	02 9f       	mov %d15,%d9
80006aac:	8b 73 a0 92 	ge.u %d9,%d3,7
80006ab0:	2b 2f 40 99 	sel %d9,%d9,%d15,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006ab4:	6d 00 dd 03 	call 8000726e <IfxScuWdt_getSafetyWatchdogPassword>
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006ab8:	02 24       	mov %d4,%d2
    if (sriDiv == 14)
    {
        sriDiv = 12;
    }

    l_SEndInitPW = IfxScuWdt_getSafetyWatchdogPassword();
80006aba:	02 28       	mov %d8,%d2
    IfxScuWdt_clearSafetyEndinit(l_SEndInitPW);
80006abc:	6d 00 d6 02 	call 80007068 <IfxScuWdt_clearSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006ac0:	91 30 00 2f 	movh.a %a2,61443
80006ac4:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006ac8:	4c 20       	ld.w %d15,[%a2]0
80006aca:	91 30 00 ff 	movh.a %a15,61443
80006ace:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006ad2:	bf 0f fb 7f 	jlt %d15,0,80006ac8 <IfxScuCcu_setSriFrequency+0x56>
    {}

    ccucon0.U        = SCU_CCUCON0.U;
80006ad6:	4c f0       	ld.w %d15,[%a15]0
    ccucon0.B.SRIDIV = sriDiv;
    ccucon0.B.UP     = 1;
    SCU_CCUCON0.U    = ccucon0.U;

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006ad8:	02 84       	mov %d4,%d8

    while (SCU_CCUCON0.B.LCK != 0U)
    {}

    ccucon0.U        = SCU_CCUCON0.U;
    ccucon0.B.SRIDIV = sriDiv;
80006ada:	37 9f 04 f4 	insert %d15,%d15,%d9,8,4
    ccucon0.B.UP     = 1;
80006ade:	b7 1f 01 ff 	insert %d15,%d15,1,30,1
    SCU_CCUCON0.U    = ccucon0.U;
80006ae2:	68 0f       	st.w [%a15]0,%d15

    IfxScuWdt_setSafetyEndinit(l_SEndInitPW);
80006ae4:	6d 00 48 04 	call 80007374 <IfxScuWdt_setSafetyEndinit>

    while (SCU_CCUCON0.B.LCK != 0U)
80006ae8:	4c f0       	ld.w %d15,[%a15]0
80006aea:	bf 0f ff 7f 	jlt %d15,0,80006ae8 <IfxScuCcu_setSriFrequency+0x76>
    {}

    freq = IfxScuCcu_getSriFrequency();
80006aee:	1d ff 3f fb 	j 8000616c <IfxScuCcu_getSriFrequency>

80006af2 <IfxScuCcu_switchToBackupClock>:
{
    uint16 endinit_pw, endinitSfty_pw;
    int    pllStepsCount;
    uint8  smuTrapEnable;

    if (SCU_CCUCON0.B.CLKSEL == 0) /* Already source is backup clock */
80006af2:	91 30 00 ff 	movh.a %a15,61443
80006af6:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006afa:	4c f0       	ld.w %d15,[%a15]0
80006afc:	37 0f 62 fe 	extr.u %d15,%d15,28,2
80006b00:	df 0f 81 00 	jeq %d15,0,80006c02 <IfxScuCcu_switchToBackupClock+0x110>
80006b04:	40 4f       	mov.aa %a15,%a4
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
80006b06:	6d 00 b4 03 	call 8000726e <IfxScuWdt_getSafetyWatchdogPassword>
80006b0a:	02 29       	mov %d9,%d2
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006b0c:	6d 00 93 03 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006b10:	0c f0       	ld.bu %d15,[%a15]0
    {
        return;
    }

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();
80006b12:	02 28       	mov %d8,%d2
80006b14:	53 cf 20 20 	mul %d2,%d15,12
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006b18:	91 30 00 ef 	movh.a %a14,61443
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006b1c:	91 30 00 df 	movh.a %a13,61443
80006b20:	60 22       	mov.a %a2,%d2
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006b22:	d9 ee 14 06 	lea %a14,[%a14]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80006b26:	d9 2c f4 ff 	lea %a12,[%a2]-12 <f0036014 <_SMALL_DATA4_+0x4002e014>>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006b2a:	d9 dd 1c 06 	lea %a13,[%a13]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006b2e:	6e 1b       	jz %d15,80006b64 <IfxScuCcu_switchToBackupClock+0x72>
    {                       /*iterate through number of pll steps */
        {
            IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006b30:	02 94       	mov %d4,%d9
80006b32:	6d 00 9b 02 	call 80007068 <IfxScuWdt_clearSafetyEndinit>

            /*Configure K2 divider */
            while (SCU_PLLSTAT.B.K2RDY == 0U)
80006b36:	54 e2       	ld.w %d2,[%a14]
80006b38:	6f 52 ff 7f 	jz.t %d2,5,80006b36 <IfxScuCcu_switchToBackupClock+0x44>
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006b3c:	c8 12       	ld.a %a2,[%a15]4
80006b3e:	54 d3       	ld.w %d3,[%a13]

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006b40:	02 94       	mov %d4,%d9
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006b42:	30 c2       	add.a %a2,%a12
80006b44:	14 22       	ld.bu %d2,[%a2]

    endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPassword();
    endinit_pw     = IfxScuWdt_getCpuWatchdogPassword();

    /*Start Pll ramp down sequence */
    for (pllStepsCount = cfg->sysPll.numOfPllDividerSteps; pllStepsCount > 0; pllStepsCount--)
80006b46:	c2 ff       	add %d15,-1
                /*Wait until K2 divider is ready */
                /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
            }

            /*Now set the K2 divider value for the step corresponding to step count */
            SCU_PLLCON1.B.K2DIV = cfg->sysPll.pllDividerStep[pllStepsCount - 1].k2Step;
80006b48:	37 23 07 20 	insert %d2,%d3,%d2,0,7
80006b4c:	74 d2       	st.w [%a13],%d2

            IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006b4e:	6d 00 13 04 	call 80007374 <IfxScuWdt_setSafetyEndinit>

            /*Wait for waitCounter corresponding to the pll step */
            IfxScuCcu_wait(cfg->sysPll.pllDividerStep[pllStepsCount - 1].waitTime);
80006b52:	c8 12       	ld.a %a2,[%a15]4
80006b54:	30 c2       	add.a %a2,%a12
80006b56:	19 24 04 00 	ld.w %d4,[%a2]4
80006b5a:	6d ff f9 f9 	call 80005f4c <IfxScuCcu_wait>
80006b5e:	d9 cc f4 ff 	lea %a12,[%a12]-12
80006b62:	3c e6       	j 80006b2e <IfxScuCcu_switchToBackupClock+0x3c>
        }
    }

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006b64:	02 84       	mov %d4,%d8
80006b66:	6d 00 66 02 	call 80007032 <IfxScuWdt_clearCpuEndinit>

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006b6a:	91 30 00 ff 	movh.a %a15,61443
80006b6e:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006b72:	48 02       	ld.w %d2,[%a15]0
        SCU_TRAPDIS.B.SMUT = 1U;
80006b74:	4c f0       	ld.w %d15,[%a15]0

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006b76:	02 84       	mov %d4,%d8
    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
        SCU_TRAPDIS.B.SMUT = 1U;
80006b78:	96 08       	or %d15,8
80006b7a:	68 0f       	st.w [%a15]0,%d15

    {
        /* Disable TRAP for SMU (oscillator watchdog and unlock detection) */
        IfxScuWdt_clearCpuEndinit(endinit_pw);

        smuTrapEnable      = SCU_TRAPDIS.B.SMUT;
80006b7c:	37 02 e1 a1 	extr.u %d10,%d2,3,1
        SCU_TRAPDIS.B.SMUT = 1U;

        IfxScuWdt_setCpuEndinit(endinit_pw);
80006b80:	6d 00 8e 03 	call 8000729c <IfxScuWdt_setCpuEndinit>
    }

    {
        /* Select fback (fosc-evr) as CCU input clock */
        IfxScuWdt_clearSafetyEndinit(endinitSfty_pw);
80006b84:	02 94       	mov %d4,%d9
80006b86:	6d 00 71 02 	call 80007068 <IfxScuWdt_clearSafetyEndinit>

        while (SCU_CCUCON0.B.LCK != 0U)
80006b8a:	91 30 00 2f 	movh.a %a2,61443
80006b8e:	d9 22 30 06 	lea %a2,[%a2]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006b92:	4c 20       	ld.w %d15,[%a2]0
80006b94:	91 30 00 ff 	movh.a %a15,61443
80006b98:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80006b9c:	bf 0f fb 7f 	jlt %d15,0,80006b92 <IfxScuCcu_switchToBackupClock+0xa0>
        {
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        SCU_CCUCON0.B.CLKSEL = 0; /*Select the EVR as fOSC for the clock distribution */
80006ba0:	4c f0       	ld.w %d15,[%a15]0
80006ba2:	b7 0f 02 fe 	insert %d15,%d15,0,28,2
80006ba6:	68 0f       	st.w [%a15]0,%d15
        SCU_CCUCON0.B.UP     = 1; /*Update the ccucon0 register */
80006ba8:	4c f0       	ld.w %d15,[%a15]0
80006baa:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
80006bae:	68 0f       	st.w [%a15]0,%d15

        while (SCU_CCUCON0.B.LCK != 0U)
80006bb0:	4c f0       	ld.w %d15,[%a15]0
80006bb2:	bf 0f ff 7f 	jlt %d15,0,80006bb0 <IfxScuCcu_switchToBackupClock+0xbe>
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006bb6:	91 30 00 ff 	movh.a %a15,61443
80006bba:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80006bbe:	4c f0       	ld.w %d15,[%a15]0

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006bc0:	02 94       	mov %d4,%d9
            /*Wait till ccucon0 lock is set */
            /*No "timeout" required, because if it hangs, Safety Endinit will give a trap */
        }

        /* Disconnet PLL (SETFINDIS=1): oscillator clock is disconnected from PLL */
        SCU_PLLCON0.B.SETFINDIS = 1;
80006bc2:	96 10       	or %d15,16
80006bc4:	68 0f       	st.w [%a15]0,%d15

        /* Enable oscillator disconnect feature */
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
80006bc6:	4c f0       	ld.w %d15,[%a15]0
80006bc8:	8f 0f c4 f1 	andn %d15,%d15,64
80006bcc:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
80006bce:	6d 00 d3 03 	call 80007374 <IfxScuWdt_setSafetyEndinit>
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006bd2:	91 30 00 ff 	movh.a %a15,61443
80006bd6:	d9 ff 2c 46 	lea %a15,[%a15]24876 <f003612c <_SMALL_DATA4_+0x4002e12c>>
        SCU_PLLCON0.B.OSCDISCDIS = 0U;
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
80006bda:	02 84       	mov %d4,%d8
80006bdc:	6d 00 2b 02 	call 80007032 <IfxScuWdt_clearCpuEndinit>
        SCU_TRAPCLR.B.SMUT = 1U;
80006be0:	4c f0       	ld.w %d15,[%a15]0

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006be2:	8f 3a 00 20 	sh %d2,%d10,3
        IfxScuWdt_setSafetyEndinit(endinitSfty_pw);
    }
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;
80006be6:	96 08       	or %d15,8
80006be8:	68 0f       	st.w [%a15]0,%d15

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006bea:	91 30 00 ff 	movh.a %a15,61443
80006bee:	d9 ff 30 46 	lea %a15,[%a15]24880 <f0036130 <_SMALL_DATA4_+0x4002e130>>
80006bf2:	4c f0       	ld.w %d15,[%a15]0
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006bf4:	02 84       	mov %d4,%d8
    {
        /* Enable VCO unlock Trap if it was disabled before */
        IfxScuWdt_clearCpuEndinit(endinit_pw);
        SCU_TRAPCLR.B.SMUT = 1U;

        SCU_TRAPDIS.B.SMUT = smuTrapEnable;
80006bf6:	8f 8f c0 f1 	andn %d15,%d15,8
80006bfa:	a6 2f       	or %d15,%d2
80006bfc:	68 0f       	st.w [%a15]0,%d15
        IfxScuWdt_setCpuEndinit(endinit_pw);
80006bfe:	1d 00 4f 03 	j 8000729c <IfxScuWdt_setCpuEndinit>
80006c02:	00 90       	ret 

80006c04 <IfxScuEru_clearAllEventFlags>:
/******************************************************************************/

void IfxScuEru_clearAllEventFlags(void)
{
    uint32 mask = (0xFF << 16);
    MODULE_SCU.FMR.U = mask;
80006c04:	91 30 00 ff 	movh.a %a15,61443
80006c08:	7b f0 0f f0 	movh %d15,255
80006c0c:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006c10:	59 ff 24 80 	st.w [%a15]548 <f0030224 <_SMALL_DATA4_+0x40028224>>,%d15
80006c14:	00 90       	ret 

80006c16 <IfxScuEru_clearEventFlag>:
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006c16:	1b 04 01 40 	addi %d4,%d4,16
80006c1a:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80006c1c:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_clearEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << (inputChannel + 16);
80006c20:	0f 4f 00 f0 	sh %d15,%d15,%d4
    SCU_FMR.U = mask;
80006c24:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006c28:	68 0f       	st.w [%a15]0,%d15
80006c2a:	00 90       	ret 

80006c2c <IfxScuEru_clearInputChannelConfiguration>:


void IfxScuEru_clearInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006c2c:	8f f4 1f f0 	sh %d15,%d4,-1
80006c30:	06 2f       	sh %d15,2
80006c32:	60 ff       	mov.a %a15,%d15
80006c34:	d9 ff 00 06 	lea %a15,[%a15]24576
80006c38:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006c3c:	19 ff 10 80 	ld.w %d15,[%a15]528
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006c40:	6f 04 05 00 	jz.t %d4,0,80006c4a <IfxScuEru_clearInputChannelConfiguration+0x1e>
    {
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006c44:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006c48:	3c 03       	j 80006c4e <IfxScuEru_clearInputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.EICR[index].U = (MODULE_SCU.EICR[index].U & mask);
80006c4a:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006c4e:	59 ff 10 80 	st.w [%a15]528,%d15
80006c52:	00 90       	ret 

80006c54 <IfxScuEru_clearOutputChannelConfiguration>:


void IfxScuEru_clearOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006c54:	8f f4 1f f0 	sh %d15,%d4,-1
80006c58:	06 2f       	sh %d15,2
80006c5a:	60 ff       	mov.a %a15,%d15
80006c5c:	d9 ff 00 06 	lea %a15,[%a15]24576
80006c60:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006c64:	19 ff 2c 80 	ld.w %d15,[%a15]556
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 mask  = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006c68:	6f 04 05 00 	jz.t %d4,0,80006c72 <IfxScuEru_clearOutputChannelConfiguration+0x1e>
    {
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006c6c:	b7 0f 10 f8 	insert %d15,%d15,0,16,16
80006c70:	3c 03       	j 80006c76 <IfxScuEru_clearOutputChannelConfiguration+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        mask                     = (mask << 16);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & mask);
80006c72:	b7 0f 10 f0 	insert %d15,%d15,0,0,16
80006c76:	59 ff 2c 80 	st.w [%a15]556,%d15
80006c7a:	00 90       	ret 

80006c7c <IfxScuEru_connectTrigger>:


void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006c7c:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006c80:	91 30 00 ff 	movh.a %a15,61443
80006c84:	1b 4f 08 f0 	addi %d15,%d15,132
80006c88:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006c8c:	8f 75 00 51 	and %d5,%d5,7
80006c90:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_connectTrigger(IfxScuEru_InputChannel inputChannel, IfxScuEru_InputNodePointer triggerSelect)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006c92:	6f 04 08 00 	jz.t %d4,0,80006ca2 <IfxScuEru_connectTrigger+0x26>
    {
        MODULE_SCU.EICR[index].B.INP1 = triggerSelect;
80006c96:	4c f0       	ld.w %d15,[%a15]0
80006c98:	8f c5 01 50 	sh %d5,%d5,28
80006c9c:	b7 0f 03 fe 	insert %d15,%d15,0,28,3
80006ca0:	3c 06       	j 80006cac <IfxScuEru_connectTrigger+0x30>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.INP0 = triggerSelect;
80006ca2:	4c f0       	ld.w %d15,[%a15]0
80006ca4:	8f c5 00 50 	sh %d5,%d5,12
80006ca8:	b7 0f 03 f6 	insert %d15,%d15,0,12,3
80006cac:	a6 f5       	or %d5,%d15
80006cae:	68 05       	st.w [%a15]0,%d5
80006cb0:	00 90       	ret 

80006cb2 <IfxScuEru_disableAutoClear>:


void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006cb2:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006cb6:	91 30 00 ff 	movh.a %a15,61443
80006cba:	1b 4f 08 f0 	addi %d15,%d15,132
80006cbe:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006cc2:	90 ff       	addsc.a %a15,%a15,%d15,2
80006cc4:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006cc6:	6f 04 05 00 	jz.t %d4,0,80006cd0 <IfxScuEru_disableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = FALSE;
80006cca:	b7 0f 01 fd 	insert %d15,%d15,0,26,1
80006cce:	3c 03       	j 80006cd4 <IfxScuEru_disableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = FALSE;
80006cd0:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80006cd4:	68 0f       	st.w [%a15]0,%d15
80006cd6:	00 90       	ret 

80006cd8 <IfxScuEru_disableFallingEdgeDetection>:


void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006cd8:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006cdc:	91 30 00 ff 	movh.a %a15,61443
80006ce0:	1b 4f 08 f0 	addi %d15,%d15,132
80006ce4:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ce8:	90 ff       	addsc.a %a15,%a15,%d15,2
80006cea:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006cec:	6f 04 05 00 	jz.t %d4,0,80006cf6 <IfxScuEru_disableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = FALSE;
80006cf0:	b7 0f 01 fc 	insert %d15,%d15,0,24,1
80006cf4:	3c 03       	j 80006cfa <IfxScuEru_disableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = FALSE;
80006cf6:	8f 0f d0 f1 	andn %d15,%d15,256
80006cfa:	68 0f       	st.w [%a15]0,%d15
80006cfc:	00 90       	ret 

80006cfe <IfxScuEru_disablePatternDetectionTrigger>:


void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006cfe:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006d02:	91 30 00 ff 	movh.a %a15,61443
80006d06:	1b bf 08 f0 	addi %d15,%d15,139
80006d0a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d0e:	90 ff       	addsc.a %a15,%a15,%d15,2
80006d10:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006d12:	6f 04 05 00 	jz.t %d4,0,80006d1c <IfxScuEru_disablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = FALSE;
80006d16:	b7 0f 81 fe 	insert %d15,%d15,0,29,1
80006d1a:	3c 03       	j 80006d20 <IfxScuEru_disablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = FALSE;
80006d1c:	b7 0f 81 f6 	insert %d15,%d15,0,13,1
80006d20:	68 0f       	st.w [%a15]0,%d15
80006d22:	00 90       	ret 

80006d24 <IfxScuEru_disableRisingEdgeDetection>:


void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d24:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006d28:	91 30 00 ff 	movh.a %a15,61443
80006d2c:	1b 4f 08 f0 	addi %d15,%d15,132
80006d30:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d34:	90 ff       	addsc.a %a15,%a15,%d15,2
80006d36:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006d38:	6f 04 05 00 	jz.t %d4,0,80006d42 <IfxScuEru_disableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = FALSE;
80006d3c:	b7 0f 81 fc 	insert %d15,%d15,0,25,1
80006d40:	3c 03       	j 80006d46 <IfxScuEru_disableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = FALSE;
80006d42:	b7 0f 81 f4 	insert %d15,%d15,0,9,1
80006d46:	68 0f       	st.w [%a15]0,%d15
80006d48:	00 90       	ret 

80006d4a <IfxScuEru_disableTriggerPulse>:


void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d4a:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006d4e:	91 30 00 ff 	movh.a %a15,61443
80006d52:	1b 4f 08 f0 	addi %d15,%d15,132
80006d56:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d5a:	90 ff       	addsc.a %a15,%a15,%d15,2
80006d5c:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_disableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006d5e:	6f 04 05 00 	jz.t %d4,0,80006d68 <IfxScuEru_disableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = FALSE;
80006d62:	b7 0f 81 fd 	insert %d15,%d15,0,27,1
80006d66:	3c 03       	j 80006d6c <IfxScuEru_disableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = FALSE;
80006d68:	b7 0f 81 f5 	insert %d15,%d15,0,11,1
80006d6c:	68 0f       	st.w [%a15]0,%d15
80006d6e:	00 90       	ret 

80006d70 <IfxScuEru_enableAutoClear>:


void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d70:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006d74:	91 30 00 ff 	movh.a %a15,61443
80006d78:	1b 4f 08 f0 	addi %d15,%d15,132
80006d7c:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006d80:	90 ff       	addsc.a %a15,%a15,%d15,2
80006d82:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableAutoClear(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006d84:	6f 04 05 00 	jz.t %d4,0,80006d8e <IfxScuEru_enableAutoClear+0x1e>
    {
        MODULE_SCU.EICR[index].B.LDEN1 = TRUE;
80006d88:	b7 ff 01 fd 	insert %d15,%d15,15,26,1
80006d8c:	3c 03       	j 80006d92 <IfxScuEru_enableAutoClear+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.LDEN0 = TRUE;
80006d8e:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80006d92:	68 0f       	st.w [%a15]0,%d15
80006d94:	00 90       	ret 

80006d96 <IfxScuEru_enableFallingEdgeDetection>:


void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006d96:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006d9a:	91 30 00 ff 	movh.a %a15,61443
80006d9e:	1b 4f 08 f0 	addi %d15,%d15,132
80006da2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006da6:	90 ff       	addsc.a %a15,%a15,%d15,2
80006da8:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableFallingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006daa:	6f 04 05 00 	jz.t %d4,0,80006db4 <IfxScuEru_enableFallingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.FEN1 = TRUE;
80006dae:	b7 ff 01 fc 	insert %d15,%d15,15,24,1
80006db2:	3c 03       	j 80006db8 <IfxScuEru_enableFallingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.FEN0 = TRUE;
80006db4:	8f 0f 50 f1 	or %d15,%d15,256
80006db8:	68 0f       	st.w [%a15]0,%d15
80006dba:	00 90       	ret 

80006dbc <IfxScuEru_enablePatternDetectionTrigger>:


void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006dbc:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006dc0:	91 30 00 ff 	movh.a %a15,61443
80006dc4:	1b bf 08 f0 	addi %d15,%d15,139
80006dc8:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006dcc:	90 ff       	addsc.a %a15,%a15,%d15,2
80006dce:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enablePatternDetectionTrigger(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006dd0:	6f 04 05 00 	jz.t %d4,0,80006dda <IfxScuEru_enablePatternDetectionTrigger+0x1e>
    {
        MODULE_SCU.IGCR[index].B.GEEN1 = TRUE;
80006dd4:	b7 ff 81 fe 	insert %d15,%d15,15,29,1
80006dd8:	3c 03       	j 80006dde <IfxScuEru_enablePatternDetectionTrigger+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.GEEN0 = TRUE;
80006dda:	b7 ff 81 f6 	insert %d15,%d15,15,13,1
80006dde:	68 0f       	st.w [%a15]0,%d15
80006de0:	00 90       	ret 

80006de2 <IfxScuEru_enableRisingEdgeDetection>:


void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006de2:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006de6:	91 30 00 ff 	movh.a %a15,61443
80006dea:	1b 4f 08 f0 	addi %d15,%d15,132
80006dee:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006df2:	90 ff       	addsc.a %a15,%a15,%d15,2
80006df4:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableRisingEdgeDetection(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006df6:	6f 04 05 00 	jz.t %d4,0,80006e00 <IfxScuEru_enableRisingEdgeDetection+0x1e>
    {
        MODULE_SCU.EICR[index].B.REN1 = TRUE;
80006dfa:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80006dfe:	3c 03       	j 80006e04 <IfxScuEru_enableRisingEdgeDetection+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.REN0 = TRUE;
80006e00:	b7 ff 81 f4 	insert %d15,%d15,15,9,1
80006e04:	68 0f       	st.w [%a15]0,%d15
80006e06:	00 90       	ret 

80006e08 <IfxScuEru_enableTriggerPulse>:


void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e08:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006e0c:	91 30 00 ff 	movh.a %a15,61443
80006e10:	1b 4f 08 f0 	addi %d15,%d15,132
80006e14:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e18:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e1a:	4c f0       	ld.w %d15,[%a15]0
void IfxScuEru_enableTriggerPulse(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)     // for channels 1, 3 ,5 and 7
80006e1c:	6f 04 05 00 	jz.t %d4,0,80006e26 <IfxScuEru_enableTriggerPulse+0x1e>
    {
        MODULE_SCU.EICR[index].B.EIEN1 = TRUE;
80006e20:	b7 ff 81 fd 	insert %d15,%d15,15,27,1
80006e24:	3c 03       	j 80006e2a <IfxScuEru_enableTriggerPulse+0x22>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EIEN0 = TRUE;
80006e26:	b7 ff 81 f5 	insert %d15,%d15,15,11,1
80006e2a:	68 0f       	st.w [%a15]0,%d15
80006e2c:	00 90       	ret 

80006e2e <IfxScuEru_getAllEventFlagsStatus>:
}


uint32 IfxScuEru_getAllEventFlagsStatus(void)
{
    return MODULE_SCU.EIFR.U;
80006e2e:	91 30 00 ff 	movh.a %a15,61443
80006e32:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e36:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006e3a:	00 90       	ret 

80006e3c <IfxScuEru_getEventFlagStatus>:


boolean IfxScuEru_getEventFlagStatus(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = (1U << inputChannel);
    return (MODULE_SCU.EIFR.U & mask) ? TRUE : FALSE;
80006e3c:	91 30 00 ff 	movh.a %a15,61443
80006e40:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e44:	19 f2 20 80 	ld.w %d2,[%a15]544 <f0030220 <_SMALL_DATA4_+0x40028220>>
}
80006e48:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006e4c:	00 90       	ret 

80006e4e <IfxScuEru_getInputChannelConfiguration>:


uint32 IfxScuEru_getInputChannelConfiguration(IfxScuEru_InputChannel inputChannel)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e4e:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006e52:	91 30 00 ff 	movh.a %a15,61443
80006e56:	1b 4f 08 f0 	addi %d15,%d15,132
80006e5a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e5e:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e60:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006e62:	6f 04 05 00 	jz.t %d4,0,80006e6c <IfxScuEru_getInputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.EICR[index].U & mask);
80006e66:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006e6a:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.EICR[index].U & mask);
80006e6c:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80006e70:	00 90       	ret 

80006e72 <IfxScuEru_getOutputChannelConfiguration>:


uint32 IfxScuEru_getOutputChannelConfiguration(IfxScuEru_OutputChannel outputChannel)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006e72:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
80006e76:	91 30 00 ff 	movh.a %a15,61443
80006e7a:	1b bf 08 f0 	addi %d15,%d15,139
80006e7e:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e82:	90 ff       	addsc.a %a15,%a15,%d15,2
80006e84:	48 02       	ld.w %d2,[%a15]0
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
    uint32 status, mask = 0xFFFF;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006e86:	6f 04 05 00 	jz.t %d4,0,80006e90 <IfxScuEru_getOutputChannelConfiguration+0x1e>
    {
        mask   = (mask << 16);
        status = (MODULE_SCU.IGCR[index].U & mask);
80006e8a:	b7 02 10 20 	insert %d2,%d2,0,0,16
80006e8e:	00 90       	ret 
    }
    else    // for channels 0, 2, 4 and 6
    {
        status = (MODULE_SCU.IGCR[index].U & mask);
80006e90:	b7 02 10 28 	insert %d2,%d2,0,16,16
    }

    return status;
}
80006e94:	00 90       	ret 

80006e96 <IfxScuEru_getPatternDetectionResult>:


boolean IfxScuEru_getPatternDetectionResult(IfxScuEru_OutputChannel outputChannel)
{
    uint32 mask = (1U << outputChannel);
    return (MODULE_SCU.PDRR.U & mask) ? TRUE : FALSE;
80006e96:	91 30 00 ff 	movh.a %a15,61443
80006e9a:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006e9e:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80006ea2:	57 02 61 24 	extr.u %d2,%d2,%d4,1
80006ea6:	00 90       	ret 

80006ea8 <IfxScuEru_getWholePatternDetectionResult>:


uint32 IfxScuEru_getWholePatternDetectionResult(void)
{
    return MODULE_SCU.PDRR.U;
80006ea8:	91 30 00 ff 	movh.a %a15,61443
80006eac:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006eb0:	19 f2 28 80 	ld.w %d2,[%a15]552 <f0030228 <_SMALL_DATA4_+0x40028228>>
}
80006eb4:	00 90       	ret 

80006eb6 <IfxScuEru_selectExternalInput>:


void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006eb6:	8f f4 1f f0 	sh %d15,%d4,-1

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80006eba:	91 30 00 ff 	movh.a %a15,61443
80006ebe:	1b 4f 08 f0 	addi %d15,%d15,132
80006ec2:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006ec6:	8f 75 00 51 	and %d5,%d5,7
80006eca:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_selectExternalInput(IfxScuEru_InputChannel inputChannel, IfxScuEru_ExternalInputSelection inputSignal)
{
    // select appropriate EICRi register for the given input channel X ( i = 0,1,2,3 and X = 0 to 7 )
    uint32 index = (inputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (inputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006ecc:	6f 04 08 00 	jz.t %d4,0,80006edc <IfxScuEru_selectExternalInput+0x26>
    {
        MODULE_SCU.EICR[index].B.EXIS1 = inputSignal;
80006ed0:	4c f0       	ld.w %d15,[%a15]0
80006ed2:	8f 45 01 50 	sh %d5,%d5,20
80006ed6:	b7 0f 03 fa 	insert %d15,%d15,0,20,3
80006eda:	3c 05       	j 80006ee4 <IfxScuEru_selectExternalInput+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.EICR[index].B.EXIS0 = inputSignal;
80006edc:	4c f0       	ld.w %d15,[%a15]0
80006ede:	06 45       	sh %d5,4
80006ee0:	8f 0f c7 f1 	andn %d15,%d15,112
80006ee4:	a6 f5       	or %d5,%d15
80006ee6:	68 05       	st.w [%a15]0,%d5
80006ee8:	00 90       	ret 

80006eea <IfxScuEru_setEventFlag>:
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
80006eea:	82 1f       	mov %d15,1
    SCU_FMR.U = mask;
80006eec:	91 30 00 ff 	movh.a %a15,61443
}


void IfxScuEru_setEventFlag(IfxScuEru_InputChannel inputChannel)
{
    uint32 mask = 1 << inputChannel;
80006ef0:	0f 4f 00 40 	sh %d4,%d15,%d4
    SCU_FMR.U = mask;
80006ef4:	d9 ff 24 86 	lea %a15,[%a15]25124 <f0036224 <_SMALL_DATA4_+0x4002e224>>
80006ef8:	68 04       	st.w [%a15]0,%d4
80006efa:	00 90       	ret 

80006efc <IfxScuEru_setFlagPatternDetection>:
}


void IfxScuEru_setFlagPatternDetection(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InputChannel inputChannel, boolean state)
{
80006efc:	8f f4 1f f0 	sh %d15,%d4,-1
    uint32 shift, mask;

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD) // for channels 1, 3 ,5 and 7
80006f00:	6f 04 04 00 	jz.t %d4,0,80006f08 <IfxScuEru_setFlagPatternDetection+0xc>
    {
        shift = (inputChannel + 16);                  // offset at location IPEN10
80006f04:	1b 05 01 50 	addi %d5,%d5,16
80006f08:	06 2f       	sh %d15,2
80006f0a:	60 f2       	mov.a %a2,%d15
80006f0c:	d9 2f 00 06 	lea %a15,[%a2]24576
80006f10:	11 3f 00 ff 	addih.a %a15,%a15,61443
    {
        shift = inputChannel;
        mask  = (1 << shift);
        // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
        uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
        MODULE_SCU.IGCR[index].U = (MODULE_SCU.IGCR[index].U & ~mask) | ((uint32)state << shift);
80006f14:	19 ff 2c 80 	ld.w %d15,[%a15]556
80006f18:	d7 0f 01 f5 	insert %d15,%d15,0,%d5,1
80006f1c:	0f 56 00 50 	sh %d5,%d6,%d5
80006f20:	a6 f5       	or %d5,%d15
80006f22:	59 f5 2c 80 	st.w [%a15]556,%d5
80006f26:	00 90       	ret 

80006f28 <IfxScuEru_setInterruptGatingPattern>:


void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);
80006f28:	8f f4 1f f0 	sh %d15,%d4,-1

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
80006f2c:	91 30 00 ff 	movh.a %a15,61443
80006f30:	1b bf 08 f0 	addi %d15,%d15,139
80006f34:	d9 ff 00 06 	lea %a15,[%a15]24576 <f0036000 <_SMALL_DATA4_+0x4002e000>>
80006f38:	8f 35 00 51 	and %d5,%d5,3
80006f3c:	90 ff       	addsc.a %a15,%a15,%d15,2
void IfxScuEru_setInterruptGatingPattern(IfxScuEru_OutputChannel outputChannel, IfxScuEru_InterruptGatingPattern gatingPattern)
{
    // select appropriate IGCRj register for the given output channel Y ( j = 0,1,2,3 and Y = 0 to 7 )
    uint32 index = (outputChannel >> IFXSCUERU_TO_REGISTER_BASE);

    if (outputChannel & IFXSCUERU_CHANNEL_NUMBER_ODD)    // for channels 1, 3 ,5 and 7
80006f3e:	6f 04 06 00 	jz.t %d4,0,80006f4a <IfxScuEru_setInterruptGatingPattern+0x22>
    {
        MODULE_SCU.IGCR[index].B.IGP1 = gatingPattern;
80006f42:	4c f0       	ld.w %d15,[%a15]0
80006f44:	37 5f 02 5f 	insert %d5,%d15,%d5,30,2
80006f48:	3c 07       	j 80006f56 <IfxScuEru_setInterruptGatingPattern+0x2e>
    }
    else    // for channels 0, 2, 4 and 6
    {
        MODULE_SCU.IGCR[index].B.IGP0 = gatingPattern;
80006f4a:	4c f0       	ld.w %d15,[%a15]0
80006f4c:	8f e5 00 50 	sh %d5,%d5,14
80006f50:	b7 0f 02 f7 	insert %d15,%d15,0,14,2
80006f54:	a6 f5       	or %d5,%d15
80006f56:	68 05       	st.w [%a15]0,%d5
80006f58:	00 90       	ret 

80006f5a <IfxScuWdt_changeCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80006f5a:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80006f5e:	16 07       	and %d15,7
/*-------------------------Function Implementations---------------------------*/
/******************************************************************************/

void IfxScuWdt_changeCpuWatchdogPassword(uint16 password, uint16 newPassword)
{
    Ifx_SCU_WDTCPU     *watchdog = &MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()];
80006f60:	53 cf 20 f0 	mul %d15,%d15,12
80006f64:	60 f2       	mov.a %a2,%d15
80006f66:	d9 2f 00 46 	lea %a15,[%a2]24832
80006f6a:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
80006f6e:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80006f70:	2e 16       	jz.t %d15,1,80006f7c <IfxScuWdt_changeCpuWatchdogPassword+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80006f72:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80006f76:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
80006f7a:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80006f7c:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80006f80:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
80006f84:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
80006f88:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80006f8a:	4c f0       	ld.w %d15,[%a15]0
80006f8c:	6f 0f ff 7f 	jz.t %d15,0,80006f8a <IfxScuWdt_changeCpuWatchdogPassword+0x30>
    {}
}
80006f90:	00 90       	ret 

80006f92 <IfxScuWdt_changeCpuWatchdogReload>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80006f92:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80006f96:	16 07       	and %d15,7

void IfxScuWdt_changeCpuWatchdogReload(uint16 password, uint16 reload)
{
    /* Select CPU Watchdog based on Core Id */
    uint32              coreId = IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU     *wdt    = &MODULE_SCU.WDTCPU[coreId];
80006f98:	53 cf 20 f0 	mul %d15,%d15,12
80006f9c:	60 f2       	mov.a %a2,%d15
80006f9e:	d9 2f 00 46 	lea %a15,[%a2]24832
80006fa2:	11 3f 00 ff 	addih.a %a15,%a15,61443

    /* Read Config_0 register */
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
80006fa6:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80006fa8:	2e 16       	jz.t %d15,1,80006fb4 <IfxScuWdt_changeCpuWatchdogReload+0x22>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80006faa:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80006fae:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80006fb2:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80006fb4:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80006fb8:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
80006fbc:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
80006fc0:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
80006fc2:	4c f0       	ld.w %d15,[%a15]0
80006fc4:	6f 0f ff 7f 	jz.t %d15,0,80006fc2 <IfxScuWdt_changeCpuWatchdogReload+0x30>
    {}
}
80006fc8:	00 90       	ret 

80006fca <IfxScuWdt_changeSafetyWatchdogPassword>:
{
    Ifx_SCU_WDTS     *watchdog = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = watchdog->CON0.U;
80006fca:	91 30 00 ff 	movh.a %a15,61443
80006fce:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80006fd2:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80006fd4:	2e 16       	jz.t %d15,1,80006fe0 <IfxScuWdt_changeSafetyWatchdogPassword+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
80006fd6:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
80006fda:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        watchdog->CON0.U = wdt_con0.U;
80006fde:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Password, ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80006fe0:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80006fe4:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.PW      = newPassword;
80006fe8:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14
    watchdog->CON0.U   = wdt_con0.U;
80006fec:	91 30 00 ff 	movh.a %a15,61443
80006ff0:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80006ff4:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
80006ff6:	4c f0       	ld.w %d15,[%a15]0
80006ff8:	6f 0f ff 7f 	jz.t %d15,0,80006ff6 <IfxScuWdt_changeSafetyWatchdogPassword+0x2c>
    {}
}
80006ffc:	00 90       	ret 

80006ffe <IfxScuWdt_changeSafetyWatchdogReload>:
    /* Initialize pointer to Safety Watchdog */
    Ifx_SCU_WDTS     *wdt = &MODULE_SCU.WDTS;

    /* Read Config_0 register */
    Ifx_SCU_WDTS_CON0 wdt_con0;
    wdt_con0.U = wdt->CON0.U;
80006ffe:	91 30 00 ff 	movh.a %a15,61443
80007002:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007006:	4c f0       	ld.w %d15,[%a15]0

    if (wdt_con0.B.LCK)
80007008:	2e 16       	jz.t %d15,1,80007014 <IfxScuWdt_changeSafetyWatchdogReload+0x16>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
8000700a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
        wdt_con0.B.PW      = password;
8000700e:	37 4f 0e f1 	insert %d15,%d15,%d4,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
80007012:	68 0f       	st.w [%a15]0,%d15
    }

    /* Set new Reload value, set ENDINT and LCK bit in Config_0 register */
    wdt_con0.B.ENDINIT = 1;
80007014:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
    wdt_con0.B.LCK     = 1;
80007018:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
    wdt_con0.B.REL     = reload;
8000701c:	37 5f 10 f8 	insert %d15,%d15,%d5,16,16
    wdt->CON0.U        = wdt_con0.U;
80007020:	91 30 00 ff 	movh.a %a15,61443
80007024:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007028:	68 0f       	st.w [%a15]0,%d15

    /* read back ENDINIT and wait until it has been set */
    while (wdt->CON0.B.ENDINIT == 0)
8000702a:	4c f0       	ld.w %d15,[%a15]0
8000702c:	6f 0f ff 7f 	jz.t %d15,0,8000702a <IfxScuWdt_changeSafetyWatchdogReload+0x2c>
    {}
}
80007030:	00 90       	ret 

80007032 <IfxScuWdt_clearCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007032:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007036:	16 07       	and %d15,7


void IfxScuWdt_clearCpuEndinit(uint16 password)
{
    IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
80007038:	53 cf 20 f0 	mul %d15,%d15,12
8000703c:	06 24       	sh %d4,2
8000703e:	60 f2       	mov.a %a2,%d15
80007040:	d9 2f 00 46 	lea %a15,[%a2]24832
80007044:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
80007048:	4c f0       	ld.w %d15,[%a15]0
8000704a:	2e 16       	jz.t %d15,1,80007056 <IfxScuWdt_clearCpuEndinit+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000704c:	4c f0       	ld.w %d15,[%a15]0
8000704e:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007052:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007054:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007056:	4c f0       	ld.w %d15,[%a15]0
80007058:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000705c:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
8000705e:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80007060:	4c f0       	ld.w %d15,[%a15]0
80007062:	6f 0f ff ff 	jnz.t %d15,0,80007060 <IfxScuWdt_clearCpuEndinit+0x2e>
}
80007066:	00 90       	ret 

80007068 <IfxScuWdt_clearSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007068:	91 30 00 ff 	movh.a %a15,61443
8000706c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007070:	4c f0       	ld.w %d15,[%a15]0
80007072:	06 24       	sh %d4,2
80007074:	2e 16       	jz.t %d15,1,80007080 <IfxScuWdt_clearSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007076:	4c f0       	ld.w %d15,[%a15]0
80007078:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000707c:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000707e:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007080:	91 30 00 ff 	movh.a %a15,61443
80007084:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007088:	4c f0       	ld.w %d15,[%a15]0
8000708a:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000708e:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007090:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007092:	4c f0       	ld.w %d15,[%a15]0
80007094:	6f 0f ff ff 	jnz.t %d15,0,80007092 <IfxScuWdt_clearSafetyEndinit+0x2a>


void IfxScuWdt_clearSafetyEndinit(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
}
80007098:	00 90       	ret 

8000709a <IfxScuWdt_disableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000709a:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
8000709e:	16 07       	and %d15,7

void IfxScuWdt_disableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
800070a0:	53 cf 20 f0 	mul %d15,%d15,12
800070a4:	06 24       	sh %d4,2
800070a6:	60 f2       	mov.a %a2,%d15
800070a8:	d9 2f 00 46 	lea %a15,[%a2]24832
800070ac:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800070b0:	4c f0       	ld.w %d15,[%a15]0
800070b2:	2e 16       	jz.t %d15,1,800070be <IfxScuWdt_disableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800070b4:	4c f0       	ld.w %d15,[%a15]0
800070b6:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800070ba:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800070bc:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800070be:	4c f0       	ld.w %d15,[%a15]0
800070c0:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800070c4:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800070c6:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
800070c8:	4c f0       	ld.w %d15,[%a15]0
800070ca:	6f 0f ff ff 	jnz.t %d15,0,800070c8 <IfxScuWdt_disableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 1;         //Set DR bit in Config_1 register
800070ce:	4c f1       	ld.w %d15,[%a15]4
800070d0:	96 08       	or %d15,8
800070d2:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800070d4:	4c f0       	ld.w %d15,[%a15]0
800070d6:	2e 16       	jz.t %d15,1,800070e2 <IfxScuWdt_disableCpuWatchdog+0x48>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800070d8:	4c f0       	ld.w %d15,[%a15]0
800070da:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800070de:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800070e0:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800070e2:	4c f0       	ld.w %d15,[%a15]0
800070e4:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800070e8:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800070ea:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800070ec:	4c f0       	ld.w %d15,[%a15]0
800070ee:	6f 0f ff 7f 	jz.t %d15,0,800070ec <IfxScuWdt_disableCpuWatchdog+0x52>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
800070f2:	00 90       	ret 

800070f4 <IfxScuWdt_disableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800070f4:	91 30 00 ff 	movh.a %a15,61443
800070f8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800070fc:	4c f0       	ld.w %d15,[%a15]0
800070fe:	06 24       	sh %d4,2
80007100:	2e 16       	jz.t %d15,1,8000710c <IfxScuWdt_disableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007102:	4c f0       	ld.w %d15,[%a15]0
80007104:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007108:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000710a:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000710c:	91 30 00 ff 	movh.a %a15,61443
80007110:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007114:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007116:	40 f2       	mov.aa %a2,%a15
80007118:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000711c:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000711e:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
80007120:	4c 20       	ld.w %d15,[%a2]0
80007122:	91 30 00 ff 	movh.a %a15,61443
80007126:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000712a:	6f 0f fb ff 	jnz.t %d15,0,80007120 <IfxScuWdt_disableSafetyWatchdog+0x2c>


void IfxScuWdt_disableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 1;     //Set DR bit in Config_1 register
8000712e:	91 30 00 2f 	movh.a %a2,61443
80007132:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
80007136:	4c 20       	ld.w %d15,[%a2]0
80007138:	96 08       	or %d15,8
8000713a:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
8000713c:	4c f0       	ld.w %d15,[%a15]0
8000713e:	2e 16       	jz.t %d15,1,8000714a <IfxScuWdt_disableSafetyWatchdog+0x56>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007140:	4c f0       	ld.w %d15,[%a15]0
80007142:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007146:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007148:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000714a:	91 30 00 ff 	movh.a %a15,61443
8000714e:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007152:	4c f0       	ld.w %d15,[%a15]0
80007154:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007158:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000715a:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
8000715c:	4c f0       	ld.w %d15,[%a15]0
8000715e:	6f 0f ff 7f 	jz.t %d15,0,8000715c <IfxScuWdt_disableSafetyWatchdog+0x68>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007162:	00 90       	ret 

80007164 <IfxScuWdt_enableCpuWatchdog>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007164:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007168:	16 07       	and %d15,7

void IfxScuWdt_enableCpuWatchdog(uint16 password)
{
    /* Select CPU Watchdog based on Core Id */
    uint32          coreId = (uint32)IfxCpu_getCoreIndex();
    Ifx_SCU_WDTCPU *wdt    = &MODULE_SCU.WDTCPU[coreId];
8000716a:	53 cf 20 f0 	mul %d15,%d15,12
8000716e:	06 24       	sh %d4,2
80007170:	60 f2       	mov.a %a2,%d15
80007172:	d9 2f 00 46 	lea %a15,[%a2]24832
80007176:	11 3f 00 ff 	addih.a %a15,%a15,61443
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
8000717a:	4c f0       	ld.w %d15,[%a15]0
8000717c:	2e 16       	jz.t %d15,1,80007188 <IfxScuWdt_enableCpuWatchdog+0x24>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
8000717e:	4c f0       	ld.w %d15,[%a15]0
80007180:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
80007184:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007186:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
80007188:	4c f0       	ld.w %d15,[%a15]0
8000718a:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
8000718e:	a6 4f       	or %d15,%d4
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (0 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
80007190:	68 0f       	st.w [%a15]0,%d15
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (watchdog->CON0.B.ENDINIT == 1)
80007192:	4c f0       	ld.w %d15,[%a15]0
80007194:	6f 0f ff ff 	jnz.t %d15,0,80007192 <IfxScuWdt_enableCpuWatchdog+0x2e>

    IfxScuWdt_clearCpuEndinitInline(wdt, password);
    wdt->CON1.B.DR = 0;         //Clear DR bit in Config_1 register
80007198:	4c f1       	ld.w %d15,[%a15]4
8000719a:	8f 8f c0 f1 	andn %d15,%d15,8
8000719e:	68 1f       	st.w [%a15]4,%d15
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800071a0:	4c f0       	ld.w %d15,[%a15]0
800071a2:	2e 16       	jz.t %d15,1,800071ae <IfxScuWdt_enableCpuWatchdog+0x4a>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071a4:	4c f0       	ld.w %d15,[%a15]0
800071a6:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071aa:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071ac:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800071ae:	4c f0       	ld.w %d15,[%a15]0
800071b0:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800071b4:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800071b6:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800071b8:	4c f0       	ld.w %d15,[%a15]0
800071ba:	6f 0f ff 7f 	jz.t %d15,0,800071b8 <IfxScuWdt_enableCpuWatchdog+0x54>
    IfxScuWdt_setCpuEndinitInline(wdt, password);
}
800071be:	00 90       	ret 

800071c0 <IfxScuWdt_enableSafetyWatchdog>:
}


IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
800071c0:	91 30 00 ff 	movh.a %a15,61443
800071c4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800071c8:	4c f0       	ld.w %d15,[%a15]0
800071ca:	06 24       	sh %d4,2
800071cc:	2e 16       	jz.t %d15,1,800071d8 <IfxScuWdt_enableSafetyWatchdog+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800071ce:	4c f0       	ld.w %d15,[%a15]0
800071d0:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800071d4:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_clearSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800071d6:	68 0f       	st.w [%a15]0,%d15

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
800071d8:	91 30 00 ff 	movh.a %a15,61443
800071dc:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800071e0:	4c f0       	ld.w %d15,[%a15]0

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800071e2:	40 f2       	mov.aa %a2,%a15
800071e4:	b7 2f 10 f0 	insert %d15,%d15,2,0,16
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
800071e8:	a6 4f       	or %d15,%d4
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Clear ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (0 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
800071ea:	68 0f       	st.w [%a15]0,%d15
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 1)
800071ec:	4c 20       	ld.w %d15,[%a2]0
800071ee:	91 30 00 ff 	movh.a %a15,61443
800071f2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800071f6:	6f 0f fb ff 	jnz.t %d15,0,800071ec <IfxScuWdt_enableSafetyWatchdog+0x2c>


void IfxScuWdt_enableSafetyWatchdog(uint16 password)
{
    IfxScuWdt_clearSafetyEndinitInline(password);
    SCU_WDTS_CON1.B.DR = 0;     //Clear DR bit in Config_1 register
800071fa:	91 30 00 2f 	movh.a %a2,61443
800071fe:	d9 22 34 36 	lea %a2,[%a2]24820 <f00360f4 <_SMALL_DATA4_+0x4002e0f4>>
80007202:	4c 20       	ld.w %d15,[%a2]0
80007204:	8f 8f c0 f1 	andn %d15,%d15,8
80007208:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
8000720a:	4c f0       	ld.w %d15,[%a15]0
8000720c:	2e 16       	jz.t %d15,1,80007218 <IfxScuWdt_enableSafetyWatchdog+0x58>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000720e:	4c f0       	ld.w %d15,[%a15]0
80007210:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007214:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007216:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007218:	91 30 00 ff 	movh.a %a15,61443
8000721c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007220:	4c f0       	ld.w %d15,[%a15]0
80007222:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007226:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
80007228:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
8000722a:	4c f0       	ld.w %d15,[%a15]0
8000722c:	6f 0f ff 7f 	jz.t %d15,0,8000722a <IfxScuWdt_enableSafetyWatchdog+0x6a>
    IfxScuWdt_setSafetyEndinitInline(password);
}
80007230:	00 90       	ret 

80007232 <IfxScuWdt_getCpuWatchdogPassword>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007232:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007236:	16 07       	and %d15,7


uint16 IfxScuWdt_getCpuWatchdogPassword(void)
{
    return IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
80007238:	53 cf 20 f0 	mul %d15,%d15,12
8000723c:	60 f2       	mov.a %a2,%d15
8000723e:	d9 2f 00 46 	lea %a15,[%a2]24832
80007242:	11 3f 00 ff 	addih.a %a15,%a15,61443
    uint16 password;

    /* Read Password from CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
80007246:	48 02       	ld.w %d2,[%a15]0
80007248:	37 02 6e 21 	extr.u %d2,%d2,2,14
}
8000724c:	8f f2 83 21 	xor %d2,%d2,63
80007250:	00 90       	ret 

80007252 <IfxScuWdt_getCpuWatchdogEndInit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
80007252:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
80007256:	16 07       	and %d15,7


boolean IfxScuWdt_getCpuWatchdogEndInit(void)
{
    return (boolean)IfxScuWdt_getCpuWatchdogEndInitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()]);
80007258:	53 cf 20 f0 	mul %d15,%d15,12
8000725c:	60 f2       	mov.a %a2,%d15
8000725e:	d9 2f 00 46 	lea %a15,[%a2]24832
80007262:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE boolean IfxScuWdt_getCpuWatchdogEndInitInline(Ifx_SCU_WDTCPU *watchdog)
{
    return (boolean)watchdog->CON0.B.ENDINIT;
80007266:	48 02       	ld.w %d2,[%a15]0
}
80007268:	8f 12 00 21 	and %d2,%d2,1
8000726c:	00 90       	ret 

8000726e <IfxScuWdt_getSafetyWatchdogPassword>:
    Ifx_SCU_WDTS *watchdog = &MODULE_SCU.WDTS;

    /* Read Password from Safety WDT CON0 register
     * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
     * to toggle them before returning password */
    password  = watchdog->CON0.B.PW;
8000726e:	91 30 00 ff 	movh.a %a15,61443
80007272:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007276:	48 02       	ld.w %d2,[%a15]0
80007278:	37 02 6e 21 	extr.u %d2,%d2,2,14


uint16 IfxScuWdt_getSafetyWatchdogPassword(void)
{
    return IfxScuWdt_getSafetyWatchdogPasswordInline();
}
8000727c:	8f f2 83 21 	xor %d2,%d2,63
80007280:	00 90       	ret 

80007282 <IfxScuWdt_initConfig>:


void IfxScuWdt_initConfig(IfxScuWdt_Config *config)
{
    config->password                      = IFXSCUWDT_RESET_PASSWORD;
80007282:	da 3c       	mov %d15,60
80007284:	ac 40       	st.h [%a4]0,%d15
    config->reload                        = 0xFFFC;
80007286:	82 cf       	mov %d15,-4
80007288:	ac 41       	st.h [%a4]2,%d15
    config->inputFrequency                = IfxScu_WDTCON1_IR_divBy16384;
8000728a:	82 0f       	mov %d15,0
8000728c:	2c 44       	st.b [%a4]4,%d15
    config->disableWatchdog               = FALSE;
8000728e:	2c 45       	st.b [%a4]5,%d15
    config->enableSmuRestriction          = FALSE;
80007290:	2c 46       	st.b [%a4]6,%d15
    config->enableAutomaticPasswordChange = FALSE;
80007292:	2c 47       	st.b [%a4]7,%d15
    config->enableTimerCheck              = FALSE;
80007294:	2c 48       	st.b [%a4]8,%d15
    config->enableTimerCheckTolerance     = FALSE;
80007296:	2c 49       	st.b [%a4]9,%d15
    config->clrInternalResetFlag          = FALSE;
80007298:	2c 4a       	st.b [%a4]10,%d15
8000729a:	00 90       	ret 

8000729c <IfxScuWdt_setCpuEndinit>:


IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
{
    Ifx_CPU_CORE_ID reg;
    reg.U = __mfcr(CPU_CORE_ID);
8000729c:	4d c0 e1 ff 	mfcr %d15,$core_id
    return (IfxCpu_ResourceCpu)reg.B.CORE_ID;
800072a0:	16 07       	and %d15,7
}


void IfxScuWdt_setCpuEndinit(uint16 password)
{
    IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[IfxCpu_getCoreIndex()], password);
800072a2:	53 cf 20 f0 	mul %d15,%d15,12
800072a6:	06 24       	sh %d4,2
800072a8:	60 f2       	mov.a %a2,%d15
800072aa:	d9 2f 00 46 	lea %a15,[%a2]24832
800072ae:	11 3f 00 ff 	addih.a %a15,%a15,61443
}


IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
800072b2:	4c f0       	ld.w %d15,[%a15]0
800072b4:	2e 16       	jz.t %d15,1,800072c0 <IfxScuWdt_setCpuEndinit+0x24>
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800072b6:	4c f0       	ld.w %d15,[%a15]0
800072b8:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                           (0 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800072bc:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setCpuEndinitInline(Ifx_SCU_WDTCPU *watchdog, uint16 password)
{
    if (watchdog->CON0.B.LCK)
    {
        /* see Table 1 (Pass.word Access Bit Pattern Requirements) */
        watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800072be:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
800072c0:	4c f0       	ld.w %d15,[%a15]0
800072c2:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
800072c6:	a6 f4       	or %d4,%d15
                           (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                           (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    watchdog->CON0.U = (1 << IFX_SCU_WDTCPU_CON0_ENDINIT_OFF) |
800072c8:	68 04       	st.w [%a15]0,%d4
                       (1 << IFX_SCU_WDTCPU_CON0_LCK_OFF) |
                       (password << IFX_SCU_WDTCPU_CON0_PW_OFF) |
                       (watchdog->CON0.B.REL << IFX_SCU_WDTCPU_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been set */
    while (watchdog->CON0.B.ENDINIT == 0)
800072ca:	4c f0       	ld.w %d15,[%a15]0
800072cc:	6f 0f ff 7f 	jz.t %d15,0,800072ca <IfxScuWdt_setCpuEndinit+0x2e>
}
800072d0:	00 90       	ret 

800072d2 <IfxScuWdt_initCpuWatchdog>:
{
    Ifx_SCU_WDTCPU_CON0 wdt_con0;
    Ifx_SCU_WDTCPU_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
800072d2:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
800072d4:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
800072d6:	6f 12 0b 00 	jz.t %d2,1,800072ec <IfxScuWdt_initCpuWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800072da:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
800072de:	37 02 6e 31 	extr.u %d3,%d2,2,14
800072e2:	8f f3 83 31 	xor %d3,%d3,63
800072e6:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
800072ea:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
800072ec:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
800072ee:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
800072f2:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
800072f6:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
800072fa:	b9 53 02 00 	ld.hu %d3,[%a5]2
800072fe:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
80007302:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
80007304:	54 42       	ld.w %d2,[%a4]
80007306:	6f 02 ff ff 	jnz.t %d2,0,80007304 <IfxScuWdt_initCpuWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
8000730a:	39 52 04 00 	ld.bu %d2,[%a5]4
8000730e:	df 12 0a 00 	jeq %d2,1,80007322 <IfxScuWdt_initCpuWatchdog+0x50>
80007312:	76 26       	jz %d2,8000731e <IfxScuWdt_initCpuWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
80007314:	8b 22 20 22 	ne %d2,%d2,2
80007318:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
8000731c:	3c 07       	j 8000732a <IfxScuWdt_initCpuWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
8000731e:	82 0f       	mov %d15,0
        break;
80007320:	3c 05       	j 8000732a <IfxScuWdt_initCpuWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
80007322:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
80007326:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR   = config->disableWatchdog ? 1 : 0;
8000732a:	39 52 05 00 	ld.bu %d2,[%a5]5
8000732e:	8b 02 20 22 	ne %d2,%d2,0
80007332:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR   = config->enableSmuRestriction ? 1 : 0;
80007336:	39 52 06 00 	ld.bu %d2,[%a5]6
8000733a:	8b 02 20 22 	ne %d2,%d2,0
8000733e:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR  = config->enableAutomaticPasswordChange ? 1 : 0;
80007342:	39 52 07 00 	ld.bu %d2,[%a5]7
80007346:	8b 02 20 22 	ne %d2,%d2,0
8000734a:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR  = config->enableTimerCheck ? 1 : 0;
8000734e:	39 52 08 00 	ld.bu %d2,[%a5]8
80007352:	8b 02 20 22 	ne %d2,%d2,0
80007356:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR = config->enableTimerCheckTolerance ? 1 : 0;
8000735a:	39 52 09 00 	ld.bu %d2,[%a5]9
8000735e:	8b 02 20 22 	ne %d2,%d2,0
80007362:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
80007366:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set CPU ENDINIT protection */
    IfxScuWdt_setCpuEndinit(config->password);
80007368:	b9 54 00 00 	ld.hu %d4,[%a5]0
8000736c:	1d ff 98 ff 	j 8000729c <IfxScuWdt_setCpuEndinit>

80007370 <IfxScuWdt_serviceCpuWatchdog>:
}


void IfxScuWdt_serviceCpuWatchdog(uint16 password)
{
    IfxScuWdt_setCpuEndinit(password);
80007370:	1d ff 96 ff 	j 8000729c <IfxScuWdt_setCpuEndinit>

80007374 <IfxScuWdt_setSafetyEndinit>:
}


IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
80007374:	91 30 00 ff 	movh.a %a15,61443
80007378:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
8000737c:	4c f0       	ld.w %d15,[%a15]0
8000737e:	06 24       	sh %d4,2
80007380:	2e 16       	jz.t %d15,1,8000738c <IfxScuWdt_setSafetyEndinit+0x18>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
80007382:	4c f0       	ld.w %d15,[%a15]0
80007384:	b7 1f 10 f0 	insert %d15,%d15,1,0,16
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                          (0 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
80007388:	a6 4f       	or %d15,%d4
IFX_INLINE void IfxScuWdt_setSafetyEndinitInline(uint16 password)
{
    if (SCU_WDTS_CON0.B.LCK)
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000738a:	68 0f       	st.w [%a15]0,%d15

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
8000738c:	91 30 00 ff 	movh.a %a15,61443
80007390:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80007394:	4c f0       	ld.w %d15,[%a15]0
80007396:	b7 3f 10 f0 	insert %d15,%d15,3,0,16
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
8000739a:	a6 f4       	or %d4,%d15
                          (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                          (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);
    }

    /* Set ENDINT and set LCK bit in Config_0 register */
    SCU_WDTS_CON0.U = (1 << IFX_SCU_WDTS_CON0_ENDINIT_OFF) |
8000739c:	68 04       	st.w [%a15]0,%d4
                      (1 << IFX_SCU_WDTS_CON0_LCK_OFF) |
                      (password << IFX_SCU_WDTS_CON0_PW_OFF) |
                      (SCU_WDTS_CON0.B.REL << IFX_SCU_WDTS_CON0_REL_OFF);

    /* read back ENDINIT and wait until it has been cleared */
    while (SCU_WDTS_CON0.B.ENDINIT == 0)
8000739e:	4c f0       	ld.w %d15,[%a15]0
800073a0:	6f 0f ff 7f 	jz.t %d15,0,8000739e <IfxScuWdt_setSafetyEndinit+0x2a>


void IfxScuWdt_setSafetyEndinit(uint16 password)
{
    IfxScuWdt_setSafetyEndinitInline(password);
}
800073a4:	00 90       	ret 

800073a6 <IfxScuWdt_initSafetyWatchdog>:
{
    Ifx_SCU_WDTS_CON0 wdt_con0;
    Ifx_SCU_WDTS_CON1 wdt_con1;

    /* Read Config_0 register and clear wdt_con1 variable */
    wdt_con0.U = wdt->CON0.U;
800073a6:	54 42       	ld.w %d2,[%a4]
    wdt_con1.U = 0;
800073a8:	82 0f       	mov %d15,0

    if (wdt_con0.B.LCK)
800073aa:	6f 12 0b 00 	jz.t %d2,1,800073c0 <IfxScuWdt_initSafetyWatchdog+0x1a>
    {
        /* see Table 1 (Password Access Bit Pattern Requirements) */
        wdt_con0.B.ENDINIT = 1;
        wdt_con0.B.LCK     = 0;
800073ae:	b7 12 02 20 	insert %d2,%d2,1,0,2
        wdt_con0.B.PW     ^= 0x003F;
800073b2:	37 02 6e 31 	extr.u %d3,%d2,2,14
800073b6:	8f f3 83 31 	xor %d3,%d3,63
800073ba:	37 32 0e 21 	insert %d2,%d2,%d3,2,14

        /* Password ready. Store it to WDT_CON0 to unprotect the register */
        wdt->CON0.U = wdt_con0.U;
800073be:	74 42       	st.w [%a4],%d2
    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
    wdt_con0.B.LCK     = 1;
    wdt_con0.B.PW      = config->password; //user defined password
800073c0:	94 53       	ld.h %d3,[%a5]
    }

    /* Initialize CON0 register, with modify access, with user defined parameters
     * Clear ENDINT bit to unprotect CON1 register for initialization
     * see Table 3 (Modify Access Bit Pattern Requirements) */
    wdt_con0.B.ENDINIT = 0;
800073c2:	8f 12 c0 21 	andn %d2,%d2,1
    wdt_con0.B.LCK     = 1;
800073c6:	b7 12 81 20 	insert %d2,%d2,1,1,1
    wdt_con0.B.PW      = config->password; //user defined password
800073ca:	37 32 0e 21 	insert %d2,%d2,%d3,2,14
    wdt_con0.B.REL     = config->reload;   //user defined reload value
800073ce:	b9 53 02 00 	ld.hu %d3,[%a5]2
800073d2:	37 32 10 28 	insert %d2,%d2,%d3,16,16

    /* Modify access ready - write WDT_CON0 register */
    wdt->CON0.U = wdt_con0.U;
800073d6:	74 42       	st.w [%a4],%d2

    /* read back ENDINIT and wait until it has been cleared */
    while (wdt->CON0.B.ENDINIT == 1)
800073d8:	54 42       	ld.w %d2,[%a4]
800073da:	6f 02 ff ff 	jnz.t %d2,0,800073d8 <IfxScuWdt_initSafetyWatchdog+0x32>
    {}

    /* Initialize CON1 register */
    switch (config->inputFrequency)
800073de:	39 52 04 00 	ld.bu %d2,[%a5]4
800073e2:	df 12 0a 00 	jeq %d2,1,800073f6 <IfxScuWdt_initSafetyWatchdog+0x50>
800073e6:	76 26       	jz %d2,800073f2 <IfxScuWdt_initSafetyWatchdog+0x4c>
        wdt_con1.B.IR0 = 1;
        wdt_con1.B.IR1 = 0;
        break;
    case IfxScu_WDTCON1_IR_divBy64:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
800073e8:	8b 22 20 22 	ne %d2,%d2,2
800073ec:	ab 0f 82 f2 	sel %d15,%d2,%d15,32
800073f0:	3c 07       	j 800073fe <IfxScuWdt_initSafetyWatchdog+0x58>
    /* Initialize CON1 register */
    switch (config->inputFrequency)
    {
    case IfxScu_WDTCON1_IR_divBy16384:
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 0;
800073f2:	82 0f       	mov %d15,0
        break;
800073f4:	3c 05       	j 800073fe <IfxScuWdt_initSafetyWatchdog+0x58>
    case IfxScu_WDTCON1_IR_divBy256:
        wdt_con1.B.IR0 = 1;
800073f6:	b7 1f 01 f1 	insert %d15,%d15,1,2,1
        wdt_con1.B.IR1 = 0;
800073fa:	8f 0f c2 f1 	andn %d15,%d15,32
        wdt_con1.B.IR0 = 0;
        wdt_con1.B.IR1 = 1;
        break;
    }

    wdt_con1.B.DR     = config->disableWatchdog ? 1 : 0;
800073fe:	39 52 05 00 	ld.bu %d2,[%a5]5
80007402:	8b 02 20 22 	ne %d2,%d2,0
80007406:	67 2f 03 f0 	ins.t %d15,%d15,3,%d2,0
    wdt_con1.B.UR     = config->enableSmuRestriction ? 1 : 0;
8000740a:	39 52 06 00 	ld.bu %d2,[%a5]6
8000740e:	8b 02 20 22 	ne %d2,%d2,0
80007412:	67 2f 06 f0 	ins.t %d15,%d15,6,%d2,0
    wdt_con1.B.PAR    = config->enableAutomaticPasswordChange ? 1 : 0;
80007416:	39 52 07 00 	ld.bu %d2,[%a5]7
8000741a:	8b 02 20 22 	ne %d2,%d2,0
8000741e:	67 2f 07 f0 	ins.t %d15,%d15,7,%d2,0
    wdt_con1.B.TCR    = config->enableTimerCheck ? 1 : 0;
80007422:	39 52 08 00 	ld.bu %d2,[%a5]8
80007426:	8b 02 20 22 	ne %d2,%d2,0
8000742a:	67 2f 08 f0 	ins.t %d15,%d15,8,%d2,0
    wdt_con1.B.TCTR   = config->enableTimerCheckTolerance ? 1 : 0;
8000742e:	39 52 09 00 	ld.bu %d2,[%a5]9
80007432:	8b 02 20 22 	ne %d2,%d2,0
80007436:	37 2f 87 f4 	insert %d15,%d15,%d2,9,7
    wdt_con1.B.CLRIRF = config->clrInternalResetFlag ? 0 : 1;
8000743a:	39 52 0a 00 	ld.bu %d2,[%a5]10
8000743e:	8b 02 00 22 	eq %d2,%d2,0
80007442:	67 2f 00 f0 	ins.t %d15,%d15,0,%d2,0

    /* Finally write CON1 with user defined configuration */
    wdt->CON1.U = wdt_con1.U;
80007446:	6c 41       	st.w [%a4]4,%d15

    /* Initialization finished - set Safety ENDINIT protection */
    IfxScuWdt_setSafetyEndinit(config->password);
80007448:	b9 54 00 00 	ld.hu %d4,[%a5]0
8000744c:	1d ff 94 ff 	j 80007374 <IfxScuWdt_setSafetyEndinit>

80007450 <IfxScuWdt_serviceSafetyWatchdog>:
}


void IfxScuWdt_serviceSafetyWatchdog(uint16 password)
{
    IfxScuWdt_setSafetyEndinit(password);
80007450:	1d ff 92 ff 	j 80007374 <IfxScuWdt_setSafetyEndinit>

80007454 <IfxScuWdt_enableWatchdogWithDebugger>:
    volatile uint32 *oecPtr    = (volatile uint32 *)0xF0000478;
    volatile uint32 *ostatePtr = (volatile uint32 *)0xF0000480;
    volatile uint32 *ocntrlPtr = (volatile uint32 *)0xF000047C;

    /* read OSTATE.OEN */
    ostateValue = *ostatePtr;
80007454:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
    oenEnabled  = (ostateValue & 0x00000001);

    if (!oenEnabled)
80007458:	2e 07       	jz.t %d15,0,80007466 <IfxScuWdt_enableWatchdogWithDebugger+0x12>
    }

    if (oenEnabled)
    {
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
8000745a:	3b 00 00 f3 	mov %d15,12288
8000745e:	a5 ff 7c 10 	st.w f000047c <_SMALL_DATA4_+0x3fff847c>,%d15
}


boolean IfxScuWdt_enableWatchdogWithDebugger(void)
{
    boolean          status = 0, oenEnabled = 0, watchdogEnabled = 0;
80007462:	82 0f       	mov %d15,0
80007464:	3c 11       	j 80007486 <IfxScuWdt_enableWatchdogWithDebugger+0x32>

    if (!oenEnabled)
    {
        /* enable the debug interface (OSTATE.OEN )if it is not already enabled */
        /* pattern for enabling OSTATE.OEN */
        *oecPtr = 0xA1;
80007466:	3b 10 0a 20 	mov %d2,161
8000746a:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
8000746e:	da 5e       	mov %d15,94
80007470:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15
        *oecPtr = 0xA1;
80007474:	a5 f2 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d2
        *oecPtr = 0x5E;
80007478:	a5 ff 78 10 	st.w f0000478 <_SMALL_DATA4_+0x3fff8478>,%d15

        /* read OSTATE.OEN again*/
        ostateValue = *ostatePtr;
8000747c:	85 ff 40 20 	ld.w %d15,f0000480 <_SMALL_DATA4_+0x3fff8480>
        oenEnabled  = (ostateValue & 0x00000001);
    }

    if (oenEnabled)
80007480:	6f 0f ed ff 	jnz.t %d15,0,8000745a <IfxScuWdt_enableWatchdogWithDebugger+0x6>
        /* set watchdog suspend bit in OSTATE reg, by writing OCNTRL.WDTSUS and OCNTRL.WDTSUS_P together */
        *ocntrlPtr = 0x00003000;
    }
    else
    {
        status = 1;
80007484:	82 1f       	mov %d15,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, oenEnabled == 1);

    /* read OSTATE.WDTSUS */
    ostateValue     = *ostatePtr;
80007486:	85 f2 40 20 	ld.w %d2,f0000480 <_SMALL_DATA4_+0x3fff8480>
    watchdogEnabled = (ostateValue & 0x00000080);

    if (!watchdogEnabled)
8000748a:	37 02 e1 23 	extr.u %d2,%d2,7,1
    }

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, watchdogEnabled == 1);

    return status;
}
8000748e:	ab 1f 80 22 	sel %d2,%d2,%d15,1
80007492:	00 90       	ret 

80007494 <IfxVadc_Adc_deInitGroup>:
    Ifx_VADC_G     *vadcG      = IfxVadc_Adc_getGroupRegsFromGroup(group);
    /* Get group index */
    IfxVadc_GroupId groupIndex = group->groupId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007494:	0c 48       	ld.bu %d15,[%a4]8
80007496:	d4 4c       	ld.a %a12,[%a4]
80007498:	1b 0f 01 f0 	addi %d15,%d15,16
8000749c:	16 ff       	and %d15,255
8000749e:	99 4d 04 00 	ld.a %a13,[%a4]4
800074a2:	02 f4       	mov %d4,%d15
800074a4:	40 c4       	mov.aa %a4,%a12
800074a6:	6d ff 91 e8 	call 800045c8 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_resetGroup(Ifx_VADC_G *vadcG)
{
    vadcG->ARBCFG.B.ANONC = IfxVadc_AnalogConverterMode_off;   /* turn off group */
800074aa:	54 d2       	ld.w %d2,[%a13]
    IfxVadc_resetGroup(vadcG);
    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
800074ac:	40 c4       	mov.aa %a4,%a12
800074ae:	8f 32 c0 21 	andn %d2,%d2,3
800074b2:	74 d2       	st.w [%a13],%d2
800074b4:	02 f4       	mov %d4,%d15
800074b6:	1d ff 6d e8 	j 80004590 <IfxVadc_disableAccess>

800074ba <IfxVadc_Adc_disableModule>:
}


void IfxVadc_Adc_disableModule(Ifx_VADC *vadc)
{
800074ba:	40 4f       	mov.aa %a15,%a4
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800074bc:	6d ff bb fe 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>
    IfxScuWdt_clearCpuEndinit(passwd);
800074c0:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
800074c2:	02 2f       	mov %d15,%d2
    IfxScuWdt_clearCpuEndinit(passwd);
800074c4:	6d ff b7 fd 	call 80007032 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.B.DISR = 1;
800074c8:	48 02       	ld.w %d2,[%a15]0
    IfxScuWdt_setCpuEndinit(passwd);
800074ca:	02 f4       	mov %d4,%d15

IFX_INLINE void IfxVadc_disableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
    IfxScuWdt_clearCpuEndinit(passwd);
    vadc->CLC.B.DISR = 1;
800074cc:	8f 12 40 21 	or %d2,%d2,1
800074d0:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
800074d2:	1d ff e5 fe 	j 8000729c <IfxScuWdt_setCpuEndinit>

800074d6 <IfxVadc_Adc_getChannelConfig>:
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
800074d6:	99 42 04 00 	ld.a %a2,[%a4]4
800074da:	99 2d 04 00 	ld.a %a13,[%a2]4
    IfxVadc_ChannelId channelIndex = channel->channel;
800074de:	79 42 00 00 	ld.b %d2,[%a4]0

    config->channelId = channel->channel;
    config->group     = channel->group;
800074e2:	b5 52 14 00 	st.a [%a5]20,%a2


IFX_INLINE Ifx_VADC_CHCTR IfxVadc_getChannelControlConfig(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U = vadcG->CHCTR[channelIndex].U;
800074e6:	1b 02 06 f0 	addi %d15,%d2,96
800074ea:	90 d2       	addsc.a %a2,%a13,%d15,2
void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
    Ifx_VADC_G       *vadcG        = IfxVadc_Adc_getGroupRegsFromGroup(channel->group);
    IfxVadc_ChannelId channelIndex = channel->channel;

    config->channelId = channel->channel;
800074ec:	e9 52 0c 00 	st.b [%a5]12,%d2
800074f0:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
800074f2:	40 4c       	mov.aa %a12,%a4

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
800074f4:	37 0f 62 30 	extr.u %d3,%d15,0,2
    IfxVadc_disableModule(vadc);
}


void IfxVadc_Adc_getChannelConfig(IfxVadc_Adc_Channel *channel, IfxVadc_Adc_ChannelConfig *config)
{
800074f8:	40 5f       	mov.aa %a15,%a5

    Ifx_VADC_CHCTR tempChctr;
    tempChctr.U                 = 0;
    tempChctr                   = IfxVadc_getChannelControlConfig(vadcG, channelIndex);

    config->inputClass          = (IfxVadc_InputClasses)tempChctr.B.ICLSEL;
800074fa:	e9 53 0d 00 	st.b [%a5]13,%d3
    config->reference           = (IfxVadc_ChannelReference)tempChctr.B.REFSEL;
800074fe:	37 0f e1 35 	extr.u %d3,%d15,11,1
80007502:	e9 53 0e 00 	st.b [%a5]14,%d3
    config->resultRegister      = (IfxVadc_ChannelResult)tempChctr.B.RESREG;
80007506:	37 0f 64 38 	extr.u %d3,%d15,16,4
8000750a:	e9 53 0f 00 	st.b [%a5]15,%d3
    config->globalResultUsage   = tempChctr.B.RESTBS;
8000750e:	37 0f 61 3a 	extr.u %d3,%d15,20,1
80007512:	34 53       	st.b [%a5],%d3
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
80007514:	37 0f 62 32 	extr.u %d3,%d15,4,2
80007518:	e9 53 10 00 	st.b [%a5]16,%d3
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
8000751c:	37 0f 62 33 	extr.u %d3,%d15,6,2
80007520:	e9 53 11 00 	st.b [%a5]17,%d3
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
80007524:	37 0f 64 36 	extr.u %d3,%d15,12,4
80007528:	e9 53 12 00 	st.b [%a5]18,%d3
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
8000752c:	37 0f 62 34 	extr.u %d3,%d15,8,2
80007530:	e9 53 13 00 	st.b [%a5]19,%d3
    config->synchonize          = tempChctr.B.SYNC;
80007534:	37 0f 61 35 	extr.u %d3,%d15,10,1
    config->rightAlignedStorage = tempChctr.B.RESPOS;
80007538:	37 0f e1 fa 	extr.u %d15,%d15,21,1
    config->globalResultUsage   = tempChctr.B.RESTBS;
    config->lowerBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELL;
    config->upperBoundary       = (IfxVadc_BoundarySelection)tempChctr.B.BNDSELU;
    config->boundaryMode        = (IfxVadc_BoundaryExtension)tempChctr.B.BNDSELX;
    config->limitCheck          = (IfxVadc_LimitCheck)tempChctr.B.CHEVMODE;
    config->synchonize          = tempChctr.B.SYNC;
8000753c:	e9 53 01 00 	st.b [%a5]1,%d3
    config->rightAlignedStorage = tempChctr.B.RESPOS;
80007540:	2c 53       	st.b [%a5]3,%d15


IFX_INLINE Ifx_VADC_G_CHASS IfxVadc_getAssignedChannels(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CHASS assignChannels;
    assignChannels.U = vadcG->CHASS.U;
80007542:	4c d2       	ld.w %d15,[%a13]8

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
80007544:	57 0f 61 22 	extr.u %d2,%d15,%d2,1
80007548:	8f 12 80 21 	xor %d2,%d2,1
8000754c:	e9 52 02 00 	st.b [%a5]2,%d2
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
80007550:	99 42 04 00 	ld.a %a2,[%a4]4
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
80007554:	79 4f 00 00 	ld.b %d15,[%a4]0


IFX_INLINE Ifx_VADC_G_CEVNP0 IfxVadc_getChannelServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_CEVNP0 serviceRequestNodePtr;
    serviceRequestNodePtr.U = vadcG->CEVNP0.U;
80007558:	19 d2 20 40 	ld.w %d2,[%a13]288
8000755c:	06 2f       	sh %d15,2
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
8000755e:	57 02 64 ff 	extr.u %d15,%d2,%d15,4
    config->rightAlignedStorage = tempChctr.B.RESPOS;

    config->backgroundChannel   = ((IfxVadc_getAssignedChannels(vadcG)).U & (1 << channelIndex)) ? FALSE : TRUE;
    uint32                 channelServiceRequestNodePtr;
    /* Get Channel index */
    IfxVadc_GroupId        groupIndex = channel->group->groupId;
80007562:	39 28 08 00 	ld.bu %d8,[%a2]8
    channelServiceRequestNodePtr = ((IfxVadc_getChannelServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
    volatile Ifx_SRC_SRCR *src        = IfxVadc_getSrcAddress(groupIndex, (IfxVadc_SrcNr)channelServiceRequestNodePtr);
80007566:	0b 8f 10 48 	mov %e4,%d15,%d8
8000756a:	6d ff 60 e9 	call 8000482a <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
8000756e:	54 22       	ld.w %d2,[%a2]
80007570:	6f a2 0a 00 	jz.t %d2,10,80007584 <IfxVadc_Adc_getChannelConfig+0xae>
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)channelServiceRequestNodePtr;
80007574:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)src->B.SRPN;
80007576:	4c 20       	ld.w %d15,[%a2]0
80007578:	16 ff       	and %d15,255
8000757a:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)src->B.TOS;
8000757c:	4c 20       	ld.w %d15,[%a2]0
8000757e:	37 0f e2 f5 	extr.u %d15,%d15,11,2
80007582:	3c 05       	j 8000758c <IfxVadc_Adc_getChannelConfig+0xb6>
    }
    else
    {
        config->channelSrcNr        = (IfxVadc_SrcNr)0;
80007584:	82 0f       	mov %d15,0
80007586:	28 bf       	st.b [%a15]11,%d15
        config->channelPriority     = (Ifx_Priority)0;
80007588:	82 0f       	mov %d15,0
8000758a:	a8 3f       	st.h [%a15]6,%d15
        config->channelServProvider = (IfxSrc_Tos)0;
8000758c:	28 9f       	st.b [%a15]9,%d15
    }

    uint32 resultServiceRequestNodePtr;

    if (config->resultRegister < IfxVadc_ChannelResult_8)
8000758e:	0c ff       	ld.bu %d15,[%a15]15
80007590:	79 c2 00 00 	ld.b %d2,[%a12]0
80007594:	ff 8f 08 80 	jge.u %d15,8,800075a4 <IfxVadc_Adc_getChannelConfig+0xce>


IFX_INLINE Ifx_VADC_G_REVNP0 IfxVadc_getChannelResultServiceRequestNodePointer0(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP0 resultServiceRequestNodePtr0;
    resultServiceRequestNodePtr0.U = vadcG->REVNP0.U;
80007598:	19 df 30 40 	ld.w %d15,[%a13]304
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer0(vadcG)).U >> (channel->channel * 4)) & 0xF;
8000759c:	06 22       	sh %d2,2
8000759e:	57 0f 64 f2 	extr.u %d15,%d15,%d2,4
800075a2:	3c 08       	j 800075b2 <IfxVadc_Adc_getChannelConfig+0xdc>
    }
    else
    {
        resultServiceRequestNodePtr = ((IfxVadc_getChannelResultServiceRequestNodePointer1(vadcG)).U >> ((channel->channel - IfxVadc_ChannelResult_8) * 4)) & 0xF;
800075a4:	9a 82       	add %d15,%d2,-8


IFX_INLINE Ifx_VADC_G_REVNP1 IfxVadc_getChannelResultServiceRequestNodePointer1(Ifx_VADC_G *vadcG)
{
    Ifx_VADC_G_REVNP1 resultServiceRequestNodePtr1;
    resultServiceRequestNodePtr1.U = vadcG->REVNP1.U;
800075a6:	19 d3 34 40 	ld.w %d3,[%a13]308
800075aa:	8f 2f 00 20 	sh %d2,%d15,2
800075ae:	57 03 64 f2 	extr.u %d15,%d3,%d2,4
    }

    src = IfxVadc_getSrcAddress(groupIndex, resultServiceRequestNodePtr);
800075b2:	16 ff       	and %d15,255
800075b4:	0b 8f 10 48 	mov %e4,%d15,%d8
800075b8:	6d ff 39 e9 	call 8000482a <IfxVadc_getSrcAddress>

    if (src->B.SRE == 1)
800075bc:	54 22       	ld.w %d2,[%a2]
800075be:	6f a2 0a 00 	jz.t %d2,10,800075d2 <IfxVadc_Adc_getChannelConfig+0xfc>
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)resultServiceRequestNodePtr;
800075c2:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)src->B.SRPN;
800075c4:	4c 20       	ld.w %d15,[%a2]0
800075c6:	16 ff       	and %d15,255
800075c8:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)src->B.TOS;
800075ca:	4c 20       	ld.w %d15,[%a2]0
800075cc:	37 0f e2 f5 	extr.u %d15,%d15,11,2
800075d0:	3c 05       	j 800075da <IfxVadc_Adc_getChannelConfig+0x104>
    }
    else
    {
        config->resultSrcNr        = (IfxVadc_SrcNr)0;
800075d2:	82 0f       	mov %d15,0
800075d4:	28 af       	st.b [%a15]10,%d15
        config->resultPriority     = (Ifx_Priority)0;
800075d6:	82 0f       	mov %d15,0
800075d8:	a8 2f       	st.h [%a15]4,%d15
        config->resultServProvider = (IfxSrc_Tos)0;
800075da:	28 8f       	st.b [%a15]8,%d15
800075dc:	00 90       	ret 

800075de <IfxVadc_Adc_getChannelConversionTime>:
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
800075de:	cc 41       	ld.a %a15,[%a4]4
800075e0:	c8 12       	ld.a %a2,[%a15]4
}


IFX_INLINE IfxVadc_InputClasses IfxVadc_getChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    return (IfxVadc_InputClasses)vadcG->CHCTR[channelIndex].B.ICLSEL;
800075e2:	79 4f 00 00 	ld.b %d15,[%a4]0
800075e6:	08 8a       	ld.bu %d10,[%a15]8
800075e8:	c8 0f       	ld.a %a15,[%a15]0
800075ea:	1b 0f 06 f0 	addi %d15,%d15,96
800075ee:	90 22       	addsc.a %a2,%a2,%d15,2
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
800075f0:	20 08       	sub.a %sp,8
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
800075f2:	40 f4       	mov.aa %a4,%a15
    }
}


float32 IfxVadc_Adc_getChannelConversionTime(IfxVadc_Adc_Channel *channel, IfxVadc_ConversionType conversionMode)
{
800075f4:	02 49       	mov %d9,%d4
800075f6:	54 28       	ld.w %d8,[%a2]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
800075f8:	6d ff 9a e8 	call 8000472c <IfxVadc_getAdcAnalogFrequency>
800075fc:	02 2f       	mov %d15,%d2
800075fe:	6d ff b0 e8 	call 8000475e <IfxVadc_getAdcModuleFrequency>
80007602:	8f 38 00 81 	and %d8,%d8,3
80007606:	74 a9       	st.w [%sp],%d9
80007608:	40 f4       	mov.aa %a4,%a15
8000760a:	0b a8 10 48 	mov %e4,%d8,%d10
8000760e:	0b f2 10 68 	mov %e6,%d2,%d15
}
80007612:	1d ff c1 e9 	j 80004994 <IfxVadc_getChannelConversionTime>

80007616 <IfxVadc_Adc_getGroupConfig>:

void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
80007616:	d4 4d       	ld.a %a13,[%a4]
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
80007618:	40 4e       	mov.aa %a14,%a4
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
8000761a:	99 4c 04 00 	ld.a %a12,[%a4]4
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
8000761e:	40 d4       	mov.aa %a4,%a13
    return IfxVadc_getChannelConversionTime(channel->group->module.vadc, channel->group->groupId, IfxVadc_getChannelInputClass(channel->group->group, channel->channel), IfxVadc_getAdcAnalogFrequency(channel->group->module.vadc), IfxVadc_getAdcModuleFrequency(), conversionMode);
}


void IfxVadc_Adc_getGroupConfig(IfxVadc_Adc_Group *group, IfxVadc_Adc_GroupConfig *config)
{
80007620:	40 5f       	mov.aa %a15,%a5
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007622:	6d ff 85 e8 	call 8000472c <IfxVadc_getAdcAnalogFrequency>

    config->groupId                    = group->groupId;
80007626:	0c e8       	ld.bu %d15,[%a14]8
    config->module                     = &group->module;
80007628:	e8 0e       	st.a [%a15]0,%a14
    uint8       inputClassNum;
    Ifx_VADC_G *vadcG           = group->group;
    Ifx_VADC   *vadc            = group->module.vadc;
    float32     analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);

    config->groupId                    = group->groupId;
8000762a:	28 4f       	st.b [%a15]4,%d15
}


IFX_INLINE IfxVadc_ArbitrationRounds IfxVadc_getArbiterRoundLength(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_ArbitrationRounds)vadcG->ARBCFG.B.ARBRND;
8000762c:	4c c0       	ld.w %d15,[%a12]0
8000762e:	37 0f 62 f2 	extr.u %d15,%d15,4,2
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);
80007632:	e9 ff 32 00 	st.b [%a15]50,%d15
80007636:	82 0f       	mov %d15,0
}


IFX_INLINE IfxVadc_ChannelResolution IfxVadc_getGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum)
{
    return (IfxVadc_ChannelResolution)vadcG->ICLASS[inputClassNum].B.CMS;
80007638:	1b 8f 00 30 	addi %d3,%d15,8
8000763c:	01 c3 02 26 	addsc.a %a2,%a12,%d3,2

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
80007640:	d0 f3       	addsc.a %a3,%a15,%d15,3
80007642:	54 23       	ld.w %d3,[%a2]
80007644:	37 03 63 34 	extr.u %d3,%d3,8,3
80007648:	e9 33 0c 00 	st.b [%a3]12,%d3
}


IFX_INLINE float32 IfxVadc_getGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency)
{
    uint32 sampleTime = vadcG->ICLASS[inputClassNum].B.STCS;
8000764c:	54 23       	ld.w %d3,[%a2]
8000764e:	8f f3 01 31 	and %d3,%d3,31

    if (sampleTime > 16)
80007652:	8b 13 61 42 	lt.u %d4,%d3,17
80007656:	f6 44       	jnz %d4,8000765e <IfxVadc_Adc_getGroupConfig+0x48>
    {
        sampleTime = (sampleTime - 15) * 16;
80007658:	1b 13 ff 3f 	addi %d3,%d3,-15
8000765c:	06 43       	sh %d3,4
    }

    return (float32)(IFXVADC_SAMPLETIME_MIN + sampleTime) / analogFrequency;
8000765e:	c2 23       	add %d3,2
80007660:	4b 03 41 31 	itof %d3,%d3
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
80007664:	92 14       	add %d4,%d15,1
80007666:	4b 23 51 30 	div.f %d3,%d3,%d2
8000766a:	01 f4 03 26 	addsc.a %a2,%a15,%d4,3
8000766e:	74 23       	st.w [%a2],%d3
    config->groupId                    = group->groupId;
    config->module                     = &group->module;

    config->arbiter.arbiterRoundLength = IfxVadc_getArbiterRoundLength(vadcG);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80007670:	1e 13       	jeq %d15,1,80007676 <IfxVadc_Adc_getGroupConfig+0x60>
80007672:	82 1f       	mov %d15,1
80007674:	3c e2       	j 80007638 <IfxVadc_Adc_getGroupConfig+0x22>
}


IFX_INLINE boolean IfxVadc_isRequestScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN1;
80007676:	19 c2 04 00 	ld.w %d2,[%a12]4
    {
        config->inputClass[inputClassNum].resolution = IfxVadc_getGroupResolution(vadcG, inputClassNum);
        config->inputClass[inputClassNum].sampleTime = IfxVadc_getGroupSampleTime(vadcG, inputClassNum, analogFrequency);
    }

    if (IfxVadc_isRequestScanSlotEnabled(vadcG) == TRUE)
8000767a:	ef 92 33 00 	jz.t %d2,25,800076e0 <IfxVadc_Adc_getGroupConfig+0xca>
    {
        config->arbiter.requestSlotScanEnabled          = TRUE;
8000767e:	e9 ff 34 00 	st.b [%a15]52,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO1;
80007682:	19 c2 04 00 	ld.w %d2,[%a12]4
80007686:	37 02 62 22 	extr.u %d2,%d2,4,2
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
8000768a:	e9 f2 1e 00 	st.b [%a15]30,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM1;
8000768e:	19 c2 04 00 	ld.w %d2,[%a12]4
80007692:	37 02 e1 23 	extr.u %d2,%d2,7,1
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);
80007696:	e9 f2 1f 00 	st.b [%a15]31,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getScanSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->ASCTRL.B.XTSEL;
8000769a:	19 c3 20 20 	ld.w %d3,[%a12]160
8000769e:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
800076a2:	e9 f3 1b 00 	st.b [%a15]27,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getScanSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->ASCTRL.B.XTMODE;
800076a6:	19 c2 20 20 	ld.w %d2,[%a12]160
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800076aa:	8b f3 00 32 	eq %d3,%d3,15
800076ae:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotScanEnabled          = TRUE;
        config->scanRequest.requestSlotPrio             = IfxVadc_getScanSlotPriority(vadcG);
        config->scanRequest.requestSlotStartMode        = IfxVadc_getScanSlotStartMode(vadcG);

        config->scanRequest.triggerConfig.triggerSource = IfxVadc_getScanSlotTriggerInput(vadcG);
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_getScanSlotTriggerMode(vadcG);
800076b2:	e9 f2 1d 00 	st.b [%a15]29,%d2

        if (config->scanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800076b6:	f6 35       	jnz %d3,800076c0 <IfxVadc_Adc_getGroupConfig+0xaa>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getScanSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->ASMR.B.ENGT;
800076b8:	19 cf 24 20 	ld.w %d15,[%a12]164
800076bc:	16 03       	and %d15,3
800076be:	3c 02       	j 800076c2 <IfxVadc_Adc_getGroupConfig+0xac>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_getScanSlotGatingMode(vadcG);
        }
        else if (config->scanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
800076c0:	76 23       	jz %d2,800076c6 <IfxVadc_Adc_getGroupConfig+0xb0>
        {
            config->scanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800076c2:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getScanSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->ASCTRL.B.GTSEL;
800076c6:	19 cf 20 20 	ld.w %d15,[%a12]160
800076ca:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->scanRequest.triggerConfig.gatingSource = IfxVadc_getScanSlotGatingSource(vadcG);
800076ce:	e9 ff 1a 00 	st.b [%a15]26,%d15
}


IFX_INLINE boolean IfxVadc_isAutoScanEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ASMR.B.SCAN;
800076d2:	19 cf 24 20 	ld.w %d15,[%a12]164
800076d6:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->scanRequest.autoscanEnabled            = IfxVadc_isAutoScanEnabled(vadcG);
800076da:	e9 ff 18 00 	st.b [%a15]24,%d15
800076de:	3c 0c       	j 800076f6 <IfxVadc_Adc_getGroupConfig+0xe0>
    }
    else
    {
        config->scanRequest.autoscanEnabled             = FALSE;
800076e0:	82 0f       	mov %d15,0
800076e2:	e9 ff 18 00 	st.b [%a15]24,%d15
        config->scanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
800076e6:	e9 ff 1c 00 	st.b [%a15]28,%d15
        config->scanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;    /* Use CCU6061 TRIG0 */
800076ea:	e9 ff 1a 00 	st.b [%a15]26,%d15
        config->scanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
800076ee:	e9 ff 1d 00 	st.b [%a15]29,%d15
        config->scanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;   /* Trigger source taken from Gating Input */
800076f2:	e9 ff 1b 00 	st.b [%a15]27,%d15
}


IFX_INLINE boolean IfxVadc_isRequestQueueSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN0;
800076f6:	4c c1       	ld.w %d15,[%a12]4
800076f8:	37 0f 61 fc 	extr.u %d15,%d15,24,1
    }

    if (IfxVadc_isRequestQueueSlotEnabled(vadcG) == TRUE)
800076fc:	df 1f 30 80 	jne %d15,1,8000775c <IfxVadc_Adc_getGroupConfig+0x146>
    {
        config->arbiter.requestSlotQueueEnabled          = TRUE;
80007700:	e9 ff 33 00 	st.b [%a15]51,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getQueueSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO0;
80007704:	19 c2 04 00 	ld.w %d2,[%a12]4
80007708:	8f 32 00 21 	and %d2,%d2,3
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
8000770c:	e9 f2 26 00 	st.b [%a15]38,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getQueueSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM0;
80007710:	19 c2 04 00 	ld.w %d2,[%a12]4
80007714:	37 02 e1 21 	extr.u %d2,%d2,3,1
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);
80007718:	e9 f2 27 00 	st.b [%a15]39,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getQueueSlotTriggerInput(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerSource)vadcG->QCTRL0.B.XTSEL;
8000771c:	19 c3 00 20 	ld.w %d3,[%a12]128
80007720:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
80007724:	e9 f3 23 00 	st.b [%a15]35,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getQueueSlotTriggerMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_TriggerMode)vadcG->QCTRL0.B.XTMODE;
80007728:	19 c2 00 20 	ld.w %d2,[%a12]128
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
8000772c:	8b f3 00 32 	eq %d3,%d3,15
80007730:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotQueueEnabled          = TRUE;
        config->queueRequest.requestSlotPrio             = IfxVadc_getQueueSlotPriority(vadcG);
        config->queueRequest.requestSlotStartMode        = IfxVadc_getQueueSlotStartMode(vadcG);

        config->queueRequest.triggerConfig.triggerSource = IfxVadc_getQueueSlotTriggerInput(vadcG);
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_getQueueSlotTriggerMode(vadcG);
80007734:	e9 f2 25 00 	st.b [%a15]37,%d2

        if (config->queueRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
80007738:	f6 35       	jnz %d3,80007742 <IfxVadc_Adc_getGroupConfig+0x12c>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getQueueSlotGatingMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingMode)vadcG->QMR0.B.ENGT;
8000773a:	19 cf 04 20 	ld.w %d15,[%a12]132
8000773e:	16 03       	and %d15,3
80007740:	3c 02       	j 80007744 <IfxVadc_Adc_getGroupConfig+0x12e>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_getQueueSlotGatingMode(vadcG);
        }
        else if (config->queueRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007742:	76 23       	jz %d2,80007748 <IfxVadc_Adc_getGroupConfig+0x132>
        {
            config->queueRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
80007744:	e9 ff 24 00 	st.b [%a15]36,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getQueueSlotGatingSource(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_GatingSource)vadcG->QCTRL0.B.GTSEL;
80007748:	19 cf 00 20 	ld.w %d15,[%a12]128
8000774c:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->queueRequest.triggerConfig.gatingSource = IfxVadc_getQueueSlotGatingSource(vadcG);
80007750:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.flushQueueAfterInit        = FALSE;
80007754:	82 0f       	mov %d15,0
80007756:	e9 ff 20 00 	st.b [%a15]32,%d15
8000775a:	3c 0c       	j 80007772 <IfxVadc_Adc_getGroupConfig+0x15c>
    }
    else
    {
        config->queueRequest.flushQueueAfterInit         = FALSE;
8000775c:	82 0f       	mov %d15,0
8000775e:	e9 ff 20 00 	st.b [%a15]32,%d15
        config->queueRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
80007762:	e9 ff 24 00 	st.b [%a15]36,%d15
        config->queueRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;        /* Use CCU6061 TRIG0 */
80007766:	e9 ff 22 00 	st.b [%a15]34,%d15
        config->queueRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
8000776a:	e9 ff 25 00 	st.b [%a15]37,%d15
        config->queueRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0;       /* Trigger source taken from Gating Input */
8000776e:	e9 ff 23 00 	st.b [%a15]35,%d15
}


IFX_INLINE boolean IfxVadc_isRequestBackgroundScanSlotEnabled(Ifx_VADC_G *vadcG)
{
    return (boolean)vadcG->ARBPR.B.ASEN2;
80007772:	4c c1       	ld.w %d15,[%a12]4
80007774:	37 0f 61 fd 	extr.u %d15,%d15,26,1
    }

    if (IfxVadc_isRequestBackgroundScanSlotEnabled(vadcG) == TRUE)
80007778:	df 1f 33 80 	jne %d15,1,800077de <IfxVadc_Adc_getGroupConfig+0x1c8>
    {
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
8000777c:	e9 ff 35 00 	st.b [%a15]53,%d15
}


IFX_INLINE IfxVadc_RequestSlotPriority IfxVadc_getBackgroundScanSlotPriority(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotPriority)vadcG->ARBPR.B.PRIO2;
80007780:	19 c2 04 00 	ld.w %d2,[%a12]4
80007784:	37 02 62 24 	extr.u %d2,%d2,8,2
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
80007788:	e9 f2 2e 00 	st.b [%a15]46,%d2
}


IFX_INLINE IfxVadc_RequestSlotStartMode IfxVadc_getBackgroundScanSlotStartMode(Ifx_VADC_G *vadcG)
{
    return (IfxVadc_RequestSlotStartMode)vadcG->ARBPR.B.CSM2;
8000778c:	19 c2 04 00 	ld.w %d2,[%a12]4
80007790:	37 02 e1 25 	extr.u %d2,%d2,11,1
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);
80007794:	e9 f2 2f 00 	st.b [%a15]47,%d2
}


IFX_INLINE IfxVadc_TriggerSource IfxVadc_getBackgroundScanTriggerInput(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerSource)vadc->BRSCTRL.B.XTSEL;
80007798:	19 d3 00 80 	ld.w %d3,[%a13]512
8000779c:	37 03 64 34 	extr.u %d3,%d3,8,4

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
800077a0:	e9 f3 2b 00 	st.b [%a15]43,%d3
}


IFX_INLINE IfxVadc_TriggerMode IfxVadc_getBackgroundScanTriggerMode(Ifx_VADC *vadc)
{
    return (IfxVadc_TriggerMode)vadc->BRSCTRL.B.XTMODE;
800077a4:	19 d2 00 80 	ld.w %d2,[%a13]512
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800077a8:	8b f3 00 32 	eq %d3,%d3,15
800077ac:	37 02 e2 26 	extr.u %d2,%d2,13,2
        config->arbiter.requestSlotBackgroundScanEnabled          = TRUE;
        config->backgroundScanRequest.requestSlotPrio             = IfxVadc_getBackgroundScanSlotPriority(vadcG);
        config->backgroundScanRequest.requestSlotStartMode        = IfxVadc_getBackgroundScanSlotStartMode(vadcG);

        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_getBackgroundScanTriggerInput(vadc);
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_getBackgroundScanTriggerMode(vadc);
800077b0:	e9 f2 2d 00 	st.b [%a15]45,%d2

        if (config->backgroundScanRequest.triggerConfig.triggerSource != IfxVadc_TriggerSource_15)
800077b4:	f6 35       	jnz %d3,800077be <IfxVadc_Adc_getGroupConfig+0x1a8>
}


IFX_INLINE IfxVadc_GatingMode IfxVadc_getBackgroundScanGatingMode(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingMode)vadc->BRSMR.B.ENGT;
800077b6:	19 df 04 80 	ld.w %d15,[%a13]516
800077ba:	16 03       	and %d15,3
800077bc:	3c 02       	j 800077c0 <IfxVadc_Adc_getGroupConfig+0x1aa>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_getBackgroundScanGatingMode(vadc);
        }
        else if (config->backgroundScanRequest.triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
800077be:	76 23       	jz %d2,800077c4 <IfxVadc_Adc_getGroupConfig+0x1ae>
        {
            config->backgroundScanRequest.triggerConfig.gatingMode = IfxVadc_GatingMode_always;
800077c0:	e9 ff 2c 00 	st.b [%a15]44,%d15
}


IFX_INLINE IfxVadc_GatingSource IfxVadc_getBackgroundScanGatingSource(Ifx_VADC *vadc)
{
    return (IfxVadc_GatingSource)vadc->BRSCTRL.B.GTSEL;
800077c4:	19 df 00 80 	ld.w %d15,[%a13]512
800077c8:	37 0f 64 f8 	extr.u %d15,%d15,16,4
        }

        config->backgroundScanRequest.triggerConfig.gatingSource = IfxVadc_getBackgroundScanGatingSource(vadc);
800077cc:	e9 ff 2a 00 	st.b [%a15]42,%d15
}


IFX_INLINE boolean IfxVadc_isAutoBackgroundScanEnabled(Ifx_VADC *vadc)
{
    return (boolean)vadc->BRSMR.B.SCAN;
800077d0:	19 df 04 80 	ld.w %d15,[%a13]516
800077d4:	37 0f 61 f2 	extr.u %d15,%d15,4,1
        config->backgroundScanRequest.autoBackgroundScanEnabled  = IfxVadc_isAutoBackgroundScanEnabled(vadc);
800077d8:	e9 ff 28 00 	st.b [%a15]40,%d15
800077dc:	3c 0c       	j 800077f4 <IfxVadc_Adc_getGroupConfig+0x1de>
    }
    else
    {
        config->backgroundScanRequest.autoBackgroundScanEnabled   = FALSE;
800077de:	82 0f       	mov %d15,0
800077e0:	e9 ff 28 00 	st.b [%a15]40,%d15
        config->backgroundScanRequest.triggerConfig.gatingMode    = IfxVadc_GatingMode_disabled;
800077e4:	e9 ff 2c 00 	st.b [%a15]44,%d15
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
800077e8:	e9 ff 2a 00 	st.b [%a15]42,%d15
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
800077ec:	e9 ff 2d 00 	st.b [%a15]45,%d15
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
800077f0:	e9 ff 2b 00 	st.b [%a15]43,%d15


IFX_INLINE uint8 IfxVadc_getMasterIndex(Ifx_VADC_G *vadcG)
{
    uint8 masterIndex = 0;
    masterIndex = vadcG->SYNCTR.B.STSEL;
800077f4:	19 c3 00 10 	ld.w %d3,[%a12]64
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
800077f8:	39 e7 08 00 	ld.bu %d7,[%a14]8
800077fc:	8f 33 00 31 	and %d3,%d3,3
80007800:	02 72       	mov %d2,%d7
IFX_INLINE IfxVadc_GroupId IfxVadc_Adc_getMasterId(IfxVadc_GroupId slave, IfxVadc_Adc_SYNCTR_STSEL masterIndex)
{
    uint8           i, idxOffset;
    IfxVadc_GroupId masterId = slave;

    if (masterIndex == 0)
80007802:	df 03 1f 00 	jeq %d3,0,80007840 <IfxVadc_Adc_getGroupConfig+0x22a>
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
80007806:	7b 00 00 58 	movh %d5,32768
8000780a:	1b 45 dd 50 	addi %d5,%d5,3540
8000780e:	13 87 20 55 	madd %d5,%d5,%d7,8
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
80007812:	8b 47 60 42 	lt.u %d4,%d7,4
80007816:	82 02       	mov %d2,0
80007818:	ab 42 80 24 	sel %d2,%d4,%d2,4

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
8000781c:	1a 25       	add %d15,%d5,%d2
8000781e:	60 f4       	mov.a %a4,%d15
    {
        masterId = slave;
    }
    else
    {
        idxOffset = (slave < 4) ? 0 : 4;    /* 4 is the index in the above IfxVadc_Adc_masterIndex about which symmetry is observed */
80007820:	82 04       	mov %d4,0

        for (i = 0; i < 4; i++)
        {
            if (IfxVadc_Adc_masterIndex[slave][i + idxOffset] == masterIndex)
80007822:	a0 32       	mov.a %a2,3
80007824:	01 44 00 36 	addsc.a %a3,%a4,%d4,0
80007828:	8f f4 0f 61 	and %d6,%d4,255
8000782c:	14 35       	ld.bu %d5,[%a3]
8000782e:	5f 35 06 80 	jne %d5,%d3,8000783a <IfxVadc_Adc_getGroupConfig+0x224>
            {
                return (IfxVadc_GroupId)(i + idxOffset);
80007832:	42 62       	add %d2,%d6
80007834:	8f f2 0f 21 	and %d2,%d2,255
80007838:	3c 04       	j 80007840 <IfxVadc_Adc_getGroupConfig+0x22a>
8000783a:	c2 14       	add %d4,1
8000783c:	fc 24       	loop %a2,80007824 <IfxVadc_Adc_getGroupConfig+0x20e>
        config->backgroundScanRequest.triggerConfig.gatingSource  = IfxVadc_GatingSource_0;  /* Use CCU6061 TRIG0 */
        config->backgroundScanRequest.triggerConfig.triggerMode   = IfxVadc_TriggerMode_noExternalTrigger;
        config->backgroundScanRequest.triggerConfig.triggerSource = IfxVadc_TriggerSource_0; /* Trigger source taken from Gating Input */
    }

    config->master                 = IfxVadc_Adc_getMasterId(group->groupId, IfxVadc_getMasterIndex(vadcG));
8000783e:	02 72       	mov %d2,%d7
80007840:	28 52       	st.b [%a15]5,%d2


IFX_INLINE Ifx_VADC_GLOBCFG IfxVadc_getGlobalConfigValue(Ifx_VADC *vadc)
{
    Ifx_VADC_GLOBCFG globCfg;
    globCfg.U = vadc->GLOBCFG.U;
80007842:	19 d2 00 20 	ld.w %d2,[%a13]128

    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
80007846:	1b 07 01 f0 	addi %d15,%d7,16
8000784a:	57 02 61 ff 	extr.u %d15,%d2,%d15,1
8000784e:	e9 ff 30 00 	st.b [%a15]48,%d15
80007852:	00 90       	ret 

80007854 <IfxVadc_Adc_initChannel>:


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
80007854:	99 52 14 00 	ld.a %a2,[%a5]20
80007858:	d4 2e       	ld.a %a14,[%a2]
8000785a:	99 2c 04 00 	ld.a %a12,[%a2]4
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
8000785e:	39 28 08 00 	ld.bu %d8,[%a2]8
{
    IfxVadc_Status    Status = IfxVadc_Status_noError;
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
80007862:	b5 42 04 00 	st.a [%a4]4,%a2
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007866:	02 84       	mov %d4,%d8
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
80007868:	40 4d       	mov.aa %a13,%a4
    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
8000786a:	40 e4       	mov.aa %a4,%a14
    config->disablePostCalibration = ((IfxVadc_getGlobalConfigValue(vadc)).U >> (IFX_VADC_GLOBCFG_DPCAL0_OFF + group->groupId)) & 0x1;
}


IfxVadc_Status IfxVadc_Adc_initChannel(IfxVadc_Adc_Channel *channel, const IfxVadc_Adc_ChannelConfig *config)
{
8000786c:	40 5f       	mov.aa %a15,%a5
    Ifx_VADC         *vadc   = IfxVadc_Adc_getVadcFromGroup(config->group);
    Ifx_VADC_G       *vadcG  = IfxVadc_Adc_getGroupRegsFromGroup(config->group);

    channel->group = config->group;
    IfxVadc_GroupId   groupIndex   = channel->group->groupId;
    IfxVadc_ChannelId channelIndex = config->channelId;
8000786e:	79 59 0c 00 	ld.b %d9,[%a5]12

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007872:	6d ff ab e6 	call 800045c8 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setReferenceInput(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelReference reference)
{
    vadcG->CHCTR[channelIndex].B.REFSEL = reference;
80007876:	1b 09 06 20 	addi %d2,%d9,96
8000787a:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
8000787e:	0c fe       	ld.bu %d15,[%a15]14
80007880:	54 22       	ld.w %d2,[%a2]
        IfxVadc_setResultPosition(vadcG, channelIndex, config->rightAlignedStorage);
        IfxVadc_setBackgroundResultTarget(vadcG, channelIndex, config->globalResultUsage);
        IfxVadc_setBoundaryMode(vadcG, channelIndex, config->boundaryMode);
    }

    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007882:	40 e4       	mov.aa %a4,%a14
80007884:	67 f2 0b f0 	ins.t %d15,%d2,11,%d15,0
80007888:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_storeGroupResult(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_ChannelResult resultRegister)
{
    vadcG->CHCTR[channelIndex].B.RESREG = resultRegister;
8000788a:	54 22       	ld.w %d2,[%a2]
8000788c:	0c ff       	ld.bu %d15,[%a15]15
8000788e:	37 f2 04 f8 	insert %d15,%d2,%d15,16,4
80007892:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setLowerBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection lowerBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELL = lowerBoundary;
80007894:	54 22       	ld.w %d2,[%a2]
80007896:	39 ff 10 00 	ld.bu %d15,[%a15]16
8000789a:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
8000789e:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setUpperBoundary(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundarySelection upperBoundary)
{
    vadcG->CHCTR[channelIndex].B.BNDSELU = upperBoundary;
800078a0:	54 22       	ld.w %d2,[%a2]
800078a2:	39 ff 11 00 	ld.bu %d15,[%a15]17
800078a6:	37 f2 02 f3 	insert %d15,%d2,%d15,6,2
800078aa:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setSyncRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean synchonize)
{
    vadcG->CHCTR[channelIndex].B.SYNC = synchonize;
800078ac:	54 22       	ld.w %d2,[%a2]
800078ae:	0c f1       	ld.bu %d15,[%a15]1
800078b0:	67 f2 0a f0 	ins.t %d15,%d2,10,%d15,0
800078b4:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelInputClass(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_InputClasses inputClass)
{
    vadcG->CHCTR[channelIndex].B.ICLSEL = inputClass;
800078b6:	54 22       	ld.w %d2,[%a2]
800078b8:	0c fd       	ld.bu %d15,[%a15]13
800078ba:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
800078be:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setChannelLimitCheckMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_LimitCheck limitCheck)
{
    vadcG->CHCTR[channelIndex].B.CHEVMODE = limitCheck;
800078c0:	54 22       	ld.w %d2,[%a2]
800078c2:	39 ff 13 00 	ld.bu %d15,[%a15]19
800078c6:	37 f2 02 f4 	insert %d15,%d2,%d15,8,2
800078ca:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setResultPosition(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean rightAlignedStorage)
{
    vadcG->CHCTR[channelIndex].B.RESPOS = rightAlignedStorage;
800078cc:	54 22       	ld.w %d2,[%a2]
800078ce:	0c f3       	ld.bu %d15,[%a15]3
800078d0:	67 f2 15 f0 	ins.t %d15,%d2,21,%d15,0
800078d4:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBackgroundResultTarget(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, boolean globalResultUsage)
{
    vadcG->CHCTR[channelIndex].B.RESTBS = globalResultUsage;
800078d6:	54 22       	ld.w %d2,[%a2]
800078d8:	0c f0       	ld.bu %d15,[%a15]0
800078da:	67 f2 14 f0 	ins.t %d15,%d2,20,%d15,0
800078de:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxVadc_setBoundaryMode(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex, IfxVadc_BoundaryExtension boundaryMode)
{
    vadcG->CHCTR[channelIndex].B.BNDSELX = boundaryMode;
800078e0:	54 22       	ld.w %d2,[%a2]
800078e2:	39 ff 12 00 	ld.bu %d15,[%a15]18
800078e6:	37 f2 04 f6 	insert %d15,%d2,%d15,12,4
800078ea:	6c 20       	st.w [%a2]0,%d15
800078ec:	1b 08 01 f0 	addi %d15,%d8,16
800078f0:	16 ff       	and %d15,255
800078f2:	02 f4       	mov %d4,%d15
800078f4:	6d ff 6a e6 	call 800045c8 <IfxVadc_enableAccess>

    if (config->backgroundChannel == FALSE)
800078f8:	08 23       	ld.bu %d3,[%a15]2
800078fa:	82 12       	mov %d2,1
800078fc:	0f 92 00 20 	sh %d2,%d2,%d9
80007900:	f6 35       	jnz %d3,8000790a <IfxVadc_Adc_initChannel+0xb6>
}


IFX_INLINE void IfxVadc_setGroupPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U |= (1 << channelIndex);
80007902:	19 c3 08 00 	ld.w %d3,[%a12]8
80007906:	a6 32       	or %d2,%d3
80007908:	3c 05       	j 80007912 <IfxVadc_Adc_initChannel+0xbe>
}


IFX_INLINE void IfxVadc_setBackgroundPriorityChannel(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelIndex)
{
    vadcG->CHASS.U &= ~(1 << channelIndex);
8000790a:	19 c3 08 00 	ld.w %d3,[%a12]8
8000790e:	0f 23 e0 20 	andn %d2,%d3,%d2
    else
    {
        IfxVadc_setBackgroundPriorityChannel(vadcG, channelIndex);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007912:	02 f4       	mov %d4,%d15
80007914:	59 c2 08 00 	st.w [%a12]8,%d2
80007918:	40 e4       	mov.aa %a4,%a14
8000791a:	6d ff 3b e6 	call 80004590 <IfxVadc_disableAccess>
}


IFX_INLINE void IfxVadc_setChannelEventNodePointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr channelSrcNr, IfxVadc_ChannelId channel)
{
    vadcG->CEVNP0.U &= ~(IFX_VADC_G_CEVNP0_CEV0NP_MSK << (channel * 4));
8000791e:	79 d3 00 00 	ld.b %d3,[%a13]0
80007922:	19 c5 20 40 	ld.w %d5,[%a12]288
80007926:	8f 23 00 f0 	sh %d15,%d3,2
8000792a:	3b f0 00 20 	mov %d2,15
8000792e:	0f f2 00 20 	sh %d2,%d2,%d15
80007932:	0f 25 e0 20 	andn %d2,%d5,%d2

    IfxVadc_setChannelEventNodePointer0(vadcG, config->channelSrcNr, channel->channel);
80007936:	08 b4       	ld.bu %d4,[%a15]11
80007938:	59 c2 20 40 	st.w [%a12]288,%d2
    vadcG->CEVNP0.U |= (channelSrcNr << (channel * 4));
8000793c:	19 c2 20 40 	ld.w %d2,[%a12]288
80007940:	0f f4 00 f0 	sh %d15,%d4,%d15
80007944:	a6 2f       	or %d15,%d2
80007946:	59 cf 20 40 	st.w [%a12]288,%d15

    if (config->channelPriority > 0)
8000794a:	b9 ff 06 00 	ld.hu %d15,[%a15]6
8000794e:	6e 1f       	jz %d15,8000798c <IfxVadc_Adc_initChannel+0x138>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->channelSrcNr);
80007950:	02 84       	mov %d4,%d8
80007952:	08 b5       	ld.bu %d5,[%a15]11
80007954:	6d ff 6b e7 	call 8000482a <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_clearChannelRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelId channelId)
{
    vadcG->CEFCLR.U = 1 << channelId;
80007958:	79 f2 0c 00 	ld.b %d2,[%a15]12
8000795c:	82 1f       	mov %d15,1
8000795e:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007962:	59 cf 10 40 	st.w [%a12]272,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80007966:	54 22       	ld.w %d2,[%a2]
80007968:	08 63       	ld.bu %d3,[%a15]6
8000796a:	8f f2 cf 21 	andn %d2,%d2,255
8000796e:	a6 32       	or %d2,%d3

        IfxVadc_clearChannelRequest(vadcG, config->channelId);
        IfxSrc_init(src, config->channelServProvider, config->channelPriority);
80007970:	0c f9       	ld.bu %d15,[%a15]9
80007972:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007974:	54 22       	ld.w %d2,[%a2]
80007976:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
8000797a:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
8000797c:	4c 20       	ld.w %d15,[%a2]0
8000797e:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007982:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80007984:	4c 20       	ld.w %d15,[%a2]0
80007986:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
8000798a:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    if (config->resultRegister < IfxVadc_ChannelResult_8)
8000798c:	0c ff       	ld.bu %d15,[%a15]15
8000798e:	08 a2       	ld.bu %d2,[%a15]10
80007990:	ff 8f 15 80 	jge.u %d15,8,800079ba <IfxVadc_Adc_initChannel+0x166>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer0(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP0.U &= ~(IFX_VADC_G_REVNP0_REV0NP_MSK << (resultRegister * 4));
80007994:	19 c4 30 40 	ld.w %d4,[%a12]304
80007998:	06 2f       	sh %d15,2
8000799a:	3b f0 00 30 	mov %d3,15
8000799e:	0f f3 00 30 	sh %d3,%d3,%d15
800079a2:	0f 34 e0 30 	andn %d3,%d4,%d3
800079a6:	59 c3 30 40 	st.w [%a12]304,%d3
    vadcG->REVNP0.U |= (resultSrcNr << (resultRegister * 4));
800079aa:	19 c3 30 40 	ld.w %d3,[%a12]304
800079ae:	0f f2 00 f0 	sh %d15,%d2,%d15
800079b2:	a6 3f       	or %d15,%d3
800079b4:	59 cf 30 40 	st.w [%a12]304,%d15
800079b8:	3c 14       	j 800079e0 <IfxVadc_Adc_initChannel+0x18c>
}


IFX_INLINE void IfxVadc_setResultNodeEventPointer1(Ifx_VADC_G *vadcG, IfxVadc_SrcNr resultSrcNr, IfxVadc_ChannelResult resultRegister)
{
    vadcG->REVNP1.U &= ~(IFX_VADC_G_REVNP1_REV8NP_MSK << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
800079ba:	c2 8f       	add %d15,-8
800079bc:	19 c4 34 40 	ld.w %d4,[%a12]308
800079c0:	06 2f       	sh %d15,2
800079c2:	3b f0 00 30 	mov %d3,15
800079c6:	0f f3 00 30 	sh %d3,%d3,%d15
800079ca:	0f 34 e0 30 	andn %d3,%d4,%d3
800079ce:	59 c3 34 40 	st.w [%a12]308,%d3
    vadcG->REVNP1.U |= (resultSrcNr << ((resultRegister - IfxVadc_ChannelResult_8) * 4));
800079d2:	19 c3 34 40 	ld.w %d3,[%a12]308
800079d6:	0f f2 00 f0 	sh %d15,%d2,%d15
800079da:	a6 3f       	or %d15,%d3
800079dc:	59 cf 34 40 	st.w [%a12]308,%d15
    else
    {
        IfxVadc_setResultNodeEventPointer1(vadcG, config->resultSrcNr, config->resultRegister);
    }

    if (config->resultPriority > 0)
800079e0:	b9 ff 04 00 	ld.hu %d15,[%a15]4
800079e4:	6e 24       	jz %d15,80007a2c <IfxVadc_Adc_initChannel+0x1d8>
    {
        volatile Ifx_SRC_SRCR *src = IfxVadc_getSrcAddress(groupIndex, config->resultSrcNr);
800079e6:	02 84       	mov %d4,%d8
800079e8:	08 a5       	ld.bu %d5,[%a15]10
800079ea:	6d ff 20 e7 	call 8000482a <IfxVadc_getSrcAddress>
}


IFX_INLINE void IfxVadc_enableServiceRequest(Ifx_VADC_G *vadcG, IfxVadc_ChannelResult resultRegister)
{
    vadcG->RCR[resultRegister].B.SRGEN = 1;
800079ee:	0c ff       	ld.bu %d15,[%a15]15
800079f0:	1b 0f 08 f0 	addi %d15,%d15,128
800079f4:	90 c3       	addsc.a %a3,%a12,%d15,2
800079f6:	4c 30       	ld.w %d15,[%a3]0
800079f8:	b7 ff 81 ff 	insert %d15,%d15,15,31,1
800079fc:	6c 30       	st.w [%a3]0,%d15
}


IFX_INLINE void IfxVadc_clearAllResultRequests(Ifx_VADC_G *vadcG)
{
    vadcG->REFCLR.U = 0x0000FFFFu;
800079fe:	bb f0 ff ff 	mov.u %d15,65535
80007a02:	59 cf 14 40 	st.w [%a12]276,%d15
}


IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
{
    src->B.SRPN = priority;
80007a06:	54 22       	ld.w %d2,[%a2]
80007a08:	08 43       	ld.bu %d3,[%a15]4
80007a0a:	8f f2 cf 21 	andn %d2,%d2,255
80007a0e:	a6 32       	or %d2,%d3

        IfxVadc_enableServiceRequest(vadcG, config->resultRegister);
        IfxVadc_clearAllResultRequests(vadcG);
        IfxSrc_init(src, config->resultServProvider, config->resultPriority);
80007a10:	0c f8       	ld.bu %d15,[%a15]8
80007a12:	74 22       	st.w [%a2],%d2
    src->B.TOS  = typOfService;
80007a14:	54 22       	ld.w %d2,[%a2]
80007a16:	37 f2 82 f5 	insert %d15,%d2,%d15,11,2
80007a1a:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
{
    src->B.CLRR = 1;
80007a1c:	4c 20       	ld.w %d15,[%a2]0
80007a1e:	b7 ff 81 fc 	insert %d15,%d15,15,25,1
80007a22:	6c 20       	st.w [%a2]0,%d15
}


IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
{
    src->B.SRE = 1;
80007a24:	4c 20       	ld.w %d15,[%a2]0
80007a26:	b7 ff 01 f5 	insert %d15,%d15,15,10,1
80007a2a:	6c 20       	st.w [%a2]0,%d15
    else
    {
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
80007a2c:	40 e4       	mov.aa %a4,%a14
80007a2e:	02 84       	mov %d4,%d8
80007a30:	6d ff b0 e5 	call 80004590 <IfxVadc_disableAccess>
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007a34:	0c ff       	ld.bu %d15,[%a15]15
    channel->channel   = config->channelId;

    return Status;
}
80007a36:	82 02       	mov %d2,0
        /* do nothing */
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_channelControl0 + groupIndex));
    /* Software initialization */
    channel->resultreg = config->resultRegister;
80007a38:	2c d1       	st.b [%a13]1,%d15
    channel->channel   = config->channelId;
80007a3a:	0c fc       	ld.bu %d15,[%a15]12
80007a3c:	2c d0       	st.b [%a13]0,%d15

    return Status;
}
80007a3e:	00 90       	ret 

80007a40 <IfxVadc_Adc_initChannelConfig>:
        .resultServProvider  = IfxSrc_Tos_cpu0,
        .channelPriority     = 0,
        .channelSrcNr        = IfxVadc_SrcNr_group0,
        .channelServProvider = IfxSrc_Tos_cpu0
    };
    *config       = IfxVadc_Adc_defaultChannelConfig;
80007a40:	40 42       	mov.aa %a2,%a4
80007a42:	d2 02       	mov %e2,0
80007a44:	89 22 48 01 	st.d [%a2+]8,%e2
80007a48:	89 22 48 01 	st.d [%a2+]8,%e2
80007a4c:	89 22 48 01 	st.d [%a2+]8,%e2
    config->group = group;
80007a50:	b5 45 14 00 	st.a [%a4]20,%a5
80007a54:	00 90       	ret 

80007a56 <IfxVadc_Adc_initGroup>:


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80007a56:	d4 52       	ld.a %a2,[%a5]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007a58:	39 58 04 00 	ld.bu %d8,[%a5]4


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
80007a5c:	d4 2c       	ld.a %a12,[%a2]
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];
80007a5e:	8f a8 00 90 	sh %d9,%d8,10
80007a62:	1b 09 48 f0 	addi %d15,%d9,1152
80007a66:	10 cd       	addsc.a %a13,%a12,%d15,0

    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
80007a68:	4c 20       	ld.w %d15,[%a2]0
    IfxVadc_Status status = IfxVadc_Status_noError;
    Ifx_VADC      *vadc   = config->module->vadc;
    Ifx_VADC_G    *vadcG  = &vadc->G[config->groupId];

    /* check for write access */
    group->group   = vadcG;
80007a6a:	b5 4d 04 00 	st.a [%a4]4,%a13
    group->module  = *config->module;
80007a6e:	6c 40       	st.w [%a4]0,%d15
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
80007a70:	e9 48 08 00 	st.b [%a4]8,%d8
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007a74:	40 c4       	mov.aa %a4,%a12
    config->group = group;
}


IfxVadc_Status IfxVadc_Adc_initGroup(IfxVadc_Adc_Group *group, const IfxVadc_Adc_GroupConfig *config)
{
80007a76:	40 5f       	mov.aa %a15,%a5
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007a78:	6d ff 5a e6 	call 8000472c <IfxVadc_getAdcAnalogFrequency>

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007a7c:	1b 08 01 f0 	addi %d15,%d8,16
80007a80:	8f ff 0f a1 	and %d10,%d15,255
80007a84:	40 c4       	mov.aa %a4,%a12
80007a86:	02 a4       	mov %d4,%d10
    /* check for write access */
    group->group   = vadcG;
    group->module  = *config->module;
    IfxVadc_GroupId groupIndex      = config->groupId;
    group->groupId = groupIndex;
    float32         analogFrequency = IfxVadc_getAdcAnalogFrequency(vadc);
80007a88:	02 2b       	mov %d11,%d2

    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007a8a:	6d ff 9f e5 	call 800045c8 <IfxVadc_enableAccess>

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007a8e:	39 ff 33 00 	ld.bu %d15,[%a15]51
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007a92:	40 d4       	mov.aa %a4,%a13
    uint8           inputClassNum;

    /* Request Access to configuration registers */
    IfxVadc_enableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));

    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007a94:	5e 17       	jne %d15,1,80007aa2 <IfxVadc_Adc_initGroup+0x4c>
    {
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotQueueEnabled, config->queueRequest.requestSlotPrio, config->queueRequest.requestSlotStartMode, IfxVadc_RequestSource_queue);
80007a96:	82 14       	mov %d4,1
80007a98:	39 f5 26 00 	ld.bu %d5,[%a15]38
80007a9c:	39 f6 27 00 	ld.bu %d6,[%a15]39
80007aa0:	3c 03       	j 80007aa6 <IfxVadc_Adc_initGroup+0x50>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
80007aa2:	d2 04       	mov %e4,0
80007aa4:	82 06       	mov %d6,0
80007aa6:	82 07       	mov %d7,0
80007aa8:	6d ff 06 e8 	call 80004ab4 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007aac:	39 ff 34 00 	ld.bu %d15,[%a15]52
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
80007ab0:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_queue);
    }

    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007ab2:	5e 17       	jne %d15,1,80007ac0 <IfxVadc_Adc_initGroup+0x6a>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotScanEnabled, config->scanRequest.requestSlotPrio, config->scanRequest.requestSlotStartMode, IfxVadc_RequestSource_scan);
80007ab4:	82 14       	mov %d4,1
80007ab6:	39 f5 1e 00 	ld.bu %d5,[%a15]30
80007aba:	39 f6 1f 00 	ld.bu %d6,[%a15]31
80007abe:	3c 03       	j 80007ac4 <IfxVadc_Adc_initGroup+0x6e>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
80007ac0:	d2 04       	mov %e4,0
80007ac2:	82 06       	mov %d6,0
80007ac4:	82 17       	mov %d7,1
80007ac6:	6d ff f7 e7 	call 80004ab4 <IfxVadc_setArbiterPriority>
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007aca:	39 ff 35 00 	ld.bu %d15,[%a15]53
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80007ace:	40 d4       	mov.aa %a4,%a13
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_scan);
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007ad0:	5e 17       	jne %d15,1,80007ade <IfxVadc_Adc_initGroup+0x88>
    {
        /* Setup Arbitration priority and turn on enabled slot */
        /* Enable Arbiter slot, set Priority and start mode */
        IfxVadc_setArbiterPriority(vadcG, config->arbiter.requestSlotBackgroundScanEnabled, config->backgroundScanRequest.requestSlotPrio, config->backgroundScanRequest.requestSlotStartMode, IfxVadc_RequestSource_background);
80007ad2:	82 14       	mov %d4,1
80007ad4:	39 f5 2e 00 	ld.bu %d5,[%a15]46
80007ad8:	39 f6 2f 00 	ld.bu %d6,[%a15]47
80007adc:	3c 03       	j 80007ae2 <IfxVadc_Adc_initGroup+0x8c>
    }
    else
    {
        /* Disable the slot */
        IfxVadc_setArbiterPriority(vadcG, FALSE, IfxVadc_RequestSlotPriority_lowest, IfxVadc_RequestSlotStartMode_waitForStart, IfxVadc_RequestSource_background);
80007ade:	d2 04       	mov %e4,0
80007ae0:	82 06       	mov %d6,0
80007ae2:	82 27       	mov %d7,2
80007ae4:	6d ff e8 e7 	call 80004ab4 <IfxVadc_setArbiterPriority>
    }

    /* master slave configuration */
    if (config->master != groupIndex)
80007ae8:	0c f5       	ld.bu %d15,[%a15]5
80007aea:	be 8b       	jeq %d15,%d8,80007b20 <IfxVadc_Adc_initGroup+0xca>
}


IFX_INLINE IfxVadc_Adc_SYNCTR_STSEL IfxVadc_Adc_getMasterKernelIndex(IfxVadc_GroupId slave, IfxVadc_GroupId master)
{
    return IfxVadc_Adc_masterIndex[slave][master];
80007aec:	13 88 20 ff 	madd %d15,%d15,%d8,8
80007af0:	91 00 00 28 	movh.a %a2,32768
80007af4:	d9 22 d4 70 	lea %a2,[%a2]3540 <80000dd4 <IfxVadc_Adc_masterIndex>>
80007af8:	10 22       	addsc.a %a2,%a2,%d15,0
80007afa:	0c 20       	ld.bu %d15,[%a2]0
}


IFX_INLINE void IfxVadc_setMasterIndex(Ifx_VADC_G *vadcG, uint8 masterIndex)
{
    vadcG->SYNCTR.B.STSEL = (masterIndex % 4);
80007afc:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007b00:	8f 3f 00 21 	and %d2,%d15,3
80007b04:	19 23 40 30 	ld.w %d3,[%a2]1216
80007b08:	37 f3 02 f0 	insert %d15,%d3,%d15,0,2
80007b0c:	59 2f 40 30 	st.w [%a2]1216,%d15
    vadcG->SYNCTR.U      |= (0x00000008U << (masterIndex % 4));
80007b10:	19 23 40 30 	ld.w %d3,[%a2]1216
80007b14:	da 08       	mov %d15,8
80007b16:	0f 2f 00 f0 	sh %d15,%d15,%d2
80007b1a:	a6 3f       	or %d15,%d3
80007b1c:	59 2f 40 30 	st.w [%a2]1216,%d15
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007b20:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007b24:	19 2f 40 20 	ld.w %d15,[%a2]1152
80007b28:	8f 3f c0 f1 	andn %d15,%d15,3
80007b2c:	59 2f 40 20 	st.w [%a2]1152,%d15
}


IFX_INLINE void IfxVadc_setArbitrationRoundLength(Ifx_VADC_G *vadcG, IfxVadc_ArbitrationRounds arbiterRoundLength)
{
    vadcG->ARBCFG.B.ARBRND = arbiterRoundLength;
80007b30:	39 ff 32 00 	ld.bu %d15,[%a15]50
80007b34:	19 22 40 20 	ld.w %d2,[%a2]1152
80007b38:	37 f2 02 f2 	insert %d15,%d2,%d15,4,2
80007b3c:	59 2f 40 20 	st.w [%a2]1152,%d15
    IfxVadc_setAnalogConvertControl(vadcG, IfxVadc_AnalogConverterMode_off);

    IfxVadc_setArbitrationRoundLength(vadcG, config->arbiter.arbiterRoundLength);

    /* Setup queue request if enabled */
    if (config->arbiter.requestSlotQueueEnabled == TRUE)
80007b40:	39 ff 33 00 	ld.bu %d15,[%a15]51
80007b44:	df 1f 5a 80 	jne %d15,1,80007bf8 <IfxVadc_Adc_initGroup+0x1a2>
    {
        const IfxVadc_Adc_QueueConfig *queueSlot = &config->queueRequest;

        /* configure external Trigger if enabled */
        if (queueSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007b48:	39 ff 25 00 	ld.bu %d15,[%a15]37
80007b4c:	6e 28       	jz %d15,80007b9c <IfxVadc_Adc_initGroup+0x146>
}


IFX_INLINE void IfxVadc_enableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 1;     /* enable external trigger */
80007b4e:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007b52:	96 04       	or %d15,4
80007b54:	59 2f 44 40 	st.w [%a2]1284,%d15


IFX_INLINE void IfxVadc_setQueueSlotTriggerOperatingConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U        = vadcG->QCTRL0.U;
80007b58:	19 23 40 40 	ld.w %d3,[%a2]1280
        {
            /* enable external trigger */
            IfxVadc_enableQueueSlotExternalTrigger(vadcG);
            IfxVadc_setQueueSlotTriggerOperatingConfig(vadcG, queueSlot->triggerConfig.triggerMode, queueSlot->triggerConfig.triggerSource);
80007b5c:	39 f2 25 00 	ld.bu %d2,[%a15]37
80007b60:	39 ff 23 00 	ld.bu %d15,[%a15]35
    qctrl0.B.XTWC   = 1;
80007b64:	b7 13 81 37 	insert %d3,%d3,1,15,1
    qctrl0.B.XTMODE = triggerMode;
80007b68:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    qctrl0.B.XTSEL  = triggerSource;
80007b6c:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->QCTRL0.U = qctrl0.U;
80007b70:	59 23 40 40 	st.w [%a2]1280,%d3

            /* if last input is used the trigger input selection is extend by Gating inputs */
            if (queueSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)
80007b74:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007b78:	8b ff 20 f2 	ne %d15,%d15,15
80007b7c:	ee 16       	jnz %d15,80007ba8 <IfxVadc_Adc_initGroup+0x152>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007b7e:	19 23 40 40 	ld.w %d3,[%a2]1280
            {
                IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007b82:	39 ff 22 00 	ld.bu %d15,[%a15]34
    qctrl0.B.GTWC      = 1;
80007b86:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007b8a:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007b8e:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007b92:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007b96:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007b9a:	3c 05       	j 80007ba4 <IfxVadc_Adc_initGroup+0x14e>
}


IFX_INLINE void IfxVadc_disableQueueSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->QMR0.B.ENTR = 0; /* disable external trigger */
80007b9c:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007ba0:	8f 4f c0 f1 	andn %d15,%d15,4
80007ba4:	59 2f 44 40 	st.w [%a2]1284,%d15
            /* disable external trigger */
            IfxVadc_disableQueueSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((queueSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007ba8:	39 ff 23 00 	ld.bu %d15,[%a15]35
80007bac:	8b ff 00 f2 	eq %d15,%d15,15
80007bb0:	ee 15       	jnz %d15,80007bda <IfxVadc_Adc_initGroup+0x184>


IFX_INLINE void IfxVadc_setQueueSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_QCTRL0 qctrl0;
    qctrl0.U           = vadcG->QCTRL0.U;
80007bb2:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setQueueSlotGatingConfig(vadcG, queueSlot->triggerConfig.gatingSource, queueSlot->triggerConfig.gatingMode);
80007bb6:	39 f2 22 00 	ld.bu %d2,[%a15]34
80007bba:	19 23 40 40 	ld.w %d3,[%a2]1280
80007bbe:	39 ff 24 00 	ld.bu %d15,[%a15]36
    qctrl0.B.GTWC      = 1;
80007bc2:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    qctrl0.B.GTSEL     = gatingSource;
80007bc6:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->QCTRL0.U    = qctrl0.U;
80007bca:	59 23 40 40 	st.w [%a2]1280,%d3
    vadcG->QMR0.B.ENGT = gatingMode;
80007bce:	19 22 44 40 	ld.w %d2,[%a2]1284
80007bd2:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007bd6:	59 2f 44 40 	st.w [%a2]1284,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_clearQueue(vadcG, (queueSlot->flushQueueAfterInit) ? 1 : 0);
80007bda:	39 f2 20 00 	ld.bu %d2,[%a15]32
}


IFX_INLINE void IfxVadc_clearQueue(Ifx_VADC_G *vadcG, boolean flushQueue)
{
    vadcG->QMR0.B.FLUSH = flushQueue;
80007bde:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007be2:	3b 00 40 f0 	mov %d15,1024
80007be6:	ab 0f 80 22 	sel %d2,%d2,%d15,0
80007bea:	19 2f 44 40 	ld.w %d15,[%a2]1284
80007bee:	b7 0f 01 f5 	insert %d15,%d15,0,10,1
80007bf2:	a6 2f       	or %d15,%d2
80007bf4:	59 2f 44 40 	st.w [%a2]1284,%d15
    {
        /* do nothing */
    }

    /* Setup scan request if enabled */
    if (config->arbiter.requestSlotScanEnabled == TRUE)
80007bf8:	39 ff 34 00 	ld.bu %d15,[%a15]52
80007bfc:	df 1f 5a 80 	jne %d15,1,80007cb0 <IfxVadc_Adc_initGroup+0x25a>
    {
        const IfxVadc_Adc_ScanConfig *scanSlot = &config->scanRequest;

        /* configure external Trigger if enabled */
        if (scanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007c00:	39 ff 1d 00 	ld.bu %d15,[%a15]29
}


IFX_INLINE void IfxVadc_enableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 1; /* enable external trigger */
80007c04:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007c08:	6e 28       	jz %d15,80007c58 <IfxVadc_Adc_initGroup+0x202>
80007c0a:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007c0e:	96 04       	or %d15,4
80007c10:	59 2f 64 40 	st.w [%a2]1316,%d15


IFX_INLINE void IfxVadc_setScanSlotTriggerConfig(Ifx_VADC_G *vadcG, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U        = vadcG->ASCTRL.U;
80007c14:	19 23 60 40 	ld.w %d3,[%a2]1312
        {
            /* enable external trigger */
            IfxVadc_enableScanSlotExternalTrigger(vadcG);

            IfxVadc_setScanSlotTriggerConfig(vadcG, scanSlot->triggerConfig.triggerMode, scanSlot->triggerConfig.triggerSource);
80007c18:	39 f2 1d 00 	ld.bu %d2,[%a15]29
80007c1c:	39 ff 1b 00 	ld.bu %d15,[%a15]27
    asctrl.B.XTWC   = 1;
80007c20:	b7 13 81 37 	insert %d3,%d3,1,15,1
    asctrl.B.XTMODE = triggerMode;
80007c24:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    asctrl.B.XTSEL  = triggerSource;
80007c28:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadcG->ASCTRL.U = asctrl.U;
80007c2c:	59 23 60 40 	st.w [%a2]1312,%d3

            if (scanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007c30:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007c34:	8b ff 20 f2 	ne %d15,%d15,15
80007c38:	ee 16       	jnz %d15,80007c64 <IfxVadc_Adc_initGroup+0x20e>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007c3a:	19 23 60 40 	ld.w %d3,[%a2]1312
            {
                IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007c3e:	39 ff 1a 00 	ld.bu %d15,[%a15]26
    asctrl.B.GTWC      = 1;
80007c42:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007c46:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007c4a:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007c4e:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007c52:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007c56:	3c 05       	j 80007c60 <IfxVadc_Adc_initGroup+0x20a>
}


IFX_INLINE void IfxVadc_disableScanSlotExternalTrigger(Ifx_VADC_G *vadcG)
{
    vadcG->ASMR.B.ENTR = 0; /* disable external trigger */
80007c58:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007c5c:	8f 4f c0 f1 	andn %d15,%d15,4
80007c60:	59 2f 64 40 	st.w [%a2]1316,%d15
        {
            IfxVadc_disableScanSlotExternalTrigger(vadcG);
        }

        /* configure Gating if enabled */
        if ((scanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007c64:	39 ff 1b 00 	ld.bu %d15,[%a15]27
80007c68:	8b ff 00 f2 	eq %d15,%d15,15
80007c6c:	ee 15       	jnz %d15,80007c96 <IfxVadc_Adc_initGroup+0x240>


IFX_INLINE void IfxVadc_setScanSlotGatingConfig(Ifx_VADC_G *vadcG, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_G_ASCTRL asctrl;
    asctrl.U           = vadcG->ASCTRL.U;
80007c6e:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
        {
            IfxVadc_setScanSlotGatingConfig(vadcG, scanSlot->triggerConfig.gatingSource, scanSlot->triggerConfig.gatingMode);
80007c72:	39 f2 1a 00 	ld.bu %d2,[%a15]26
80007c76:	19 23 60 40 	ld.w %d3,[%a2]1312
80007c7a:	39 ff 1c 00 	ld.bu %d15,[%a15]28
    asctrl.B.GTWC      = 1;
80007c7e:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    asctrl.B.GTSEL     = gatingSource;
80007c82:	37 23 04 38 	insert %d3,%d3,%d2,16,4
    vadcG->ASCTRL.U    = asctrl.U;
80007c86:	59 23 60 40 	st.w [%a2]1312,%d3
    vadcG->ASMR.B.ENGT = gatingMode;
80007c8a:	19 22 64 40 	ld.w %d2,[%a2]1316
80007c8e:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007c92:	59 2f 64 40 	st.w [%a2]1316,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoScan(vadcG, scanSlot->autoscanEnabled ? 1 : 0);
80007c96:	39 ff 18 00 	ld.bu %d15,[%a15]24
}


IFX_INLINE void IfxVadc_setAutoScan(Ifx_VADC_G *vadcG, boolean autoscanEnable)
{
    vadcG->ASMR.B.SCAN = autoscanEnable;
80007c9a:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007c9e:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007ca2:	19 2f 64 40 	ld.w %d15,[%a2]1316
80007ca6:	8f 0f c1 f1 	andn %d15,%d15,16
80007caa:	a6 2f       	or %d15,%d2
80007cac:	59 2f 64 40 	st.w [%a2]1316,%d15
    else
    {
        /* do nothing */
    }

    if (config->arbiter.requestSlotBackgroundScanEnabled == TRUE)
80007cb0:	39 ff 35 00 	ld.bu %d15,[%a15]53
80007cb4:	df 1f 4f 80 	jne %d15,1,80007d52 <IfxVadc_Adc_initGroup+0x2fc>
    {
        const IfxVadc_Adc_BackgroundScanConfig *backgroundScanSlot = &config->backgroundScanRequest;

        /* configure external Trigger if enabled */
        if (backgroundScanSlot->triggerConfig.triggerMode != IfxVadc_TriggerMode_noExternalTrigger)
80007cb8:	39 ff 2d 00 	ld.bu %d15,[%a15]45
80007cbc:	6e 29       	jz %d15,80007d0e <IfxVadc_Adc_initGroup+0x2b8>
}


IFX_INLINE void IfxVadc_enableBackgroundScanSlotExternalTrigger(Ifx_VADC *vadc)
{
    vadc->BRSMR.B.ENTR = 1; /* enable external trigger */
80007cbe:	19 cf 04 80 	ld.w %d15,[%a12]516
80007cc2:	96 04       	or %d15,4
80007cc4:	59 cf 04 80 	st.w [%a12]516,%d15


IFX_INLINE void IfxVadc_setBackgroundScanSlotTriggerConfig(Ifx_VADC *vadc, IfxVadc_TriggerMode triggerMode, IfxVadc_TriggerSource triggerSource)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U        = vadc->BRSCTRL.U;
80007cc8:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_enableBackgroundScanSlotExternalTrigger(vadc);

            IfxVadc_setBackgroundScanSlotTriggerConfig(vadc, backgroundScanSlot->triggerConfig.triggerMode, backgroundScanSlot->triggerConfig.triggerSource);
80007ccc:	39 f2 2d 00 	ld.bu %d2,[%a15]45
80007cd0:	39 ff 2b 00 	ld.bu %d15,[%a15]43
    brsctrl.B.XTWC   = 1;
80007cd4:	b7 13 81 37 	insert %d3,%d3,1,15,1
    brsctrl.B.XTMODE = triggerMode;
80007cd8:	37 23 82 36 	insert %d3,%d3,%d2,13,2
    brsctrl.B.XTSEL  = triggerSource;
80007cdc:	37 f3 04 34 	insert %d3,%d3,%d15,8,4
    vadc->BRSCTRL.U  = brsctrl.U;
80007ce0:	59 c3 00 80 	st.w [%a12]512,%d3

            if (backgroundScanSlot->triggerConfig.triggerSource == IfxVadc_TriggerSource_15)    /* if last input is used the trigger input selection is extend by Gating inputs */
80007ce4:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007ce8:	8b ff 20 f2 	ne %d15,%d15,15
80007cec:	ee 11       	jnz %d15,80007d0e <IfxVadc_Adc_initGroup+0x2b8>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007cee:	19 c3 00 80 	ld.w %d3,[%a12]512
            {
                IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, IfxVadc_GatingMode_always);
80007cf2:	39 ff 2a 00 	ld.bu %d15,[%a15]42
    brsctrl.B.GTWC     = 1;
80007cf6:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007cfa:	37 f3 04 38 	insert %d3,%d3,%d15,16,4
    vadc->BRSCTRL.U    = brsctrl.U;
80007cfe:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007d02:	19 cf 04 80 	ld.w %d15,[%a12]516
80007d06:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
80007d0a:	59 cf 04 80 	st.w [%a12]516,%d15
        {
            /* do nothing */
        }

        /* configure Gating if enabled */
        if ((backgroundScanSlot->triggerConfig.triggerSource != IfxVadc_TriggerSource_15))
80007d0e:	39 ff 2b 00 	ld.bu %d15,[%a15]43
80007d12:	8b ff 00 f2 	eq %d15,%d15,15
80007d16:	ee 13       	jnz %d15,80007d3c <IfxVadc_Adc_initGroup+0x2e6>


IFX_INLINE void IfxVadc_setBackgroundScanSlotGatingConfig(Ifx_VADC *vadc, IfxVadc_GatingSource gatingSource, IfxVadc_GatingMode gatingMode)
{
    Ifx_VADC_BRSCTRL brsctrl;
    brsctrl.U          = vadc->BRSCTRL.U;
80007d18:	19 c3 00 80 	ld.w %d3,[%a12]512
        {
            IfxVadc_setBackgroundScanSlotGatingConfig(vadc, backgroundScanSlot->triggerConfig.gatingSource, backgroundScanSlot->triggerConfig.gatingMode);
80007d1c:	39 f2 2a 00 	ld.bu %d2,[%a15]42
    brsctrl.B.GTWC     = 1;
80007d20:	b7 13 81 3b 	insert %d3,%d3,1,23,1
    brsctrl.B.GTSEL    = gatingSource;
80007d24:	37 23 04 38 	insert %d3,%d3,%d2,16,4
80007d28:	39 ff 2c 00 	ld.bu %d15,[%a15]44
    vadc->BRSCTRL.U    = brsctrl.U;
80007d2c:	59 c3 00 80 	st.w [%a12]512,%d3
    vadc->BRSMR.B.ENGT = gatingMode;
80007d30:	19 c2 04 80 	ld.w %d2,[%a12]516
80007d34:	37 f2 02 f0 	insert %d15,%d2,%d15,0,2
80007d38:	59 cf 04 80 	st.w [%a12]516,%d15
        else
        {
            /* do nothing, handled by trigger settings */
        }

        IfxVadc_setAutoBackgroundScan(vadc, backgroundScanSlot->autoBackgroundScanEnabled ? 1 : 0);
80007d3c:	39 ff 28 00 	ld.bu %d15,[%a15]40
}


IFX_INLINE void IfxVadc_setAutoBackgroundScan(Ifx_VADC *vadc, boolean autoBackgroundScanEnable)
{
    vadc->BRSMR.B.SCAN = autoBackgroundScanEnable;
80007d40:	ab 0f a1 2f 	seln %d2,%d15,%d15,16
80007d44:	19 cf 04 80 	ld.w %d15,[%a12]516
80007d48:	8f 0f c1 f1 	andn %d15,%d15,16
80007d4c:	a6 2f       	or %d15,%d2
80007d4e:	59 cf 04 80 	st.w [%a12]516,%d15
    {
        /* do nothing */
    }

    /* turn on group after initialisation, only in master mode */
    IfxVadc_AnalogConverterMode convertMode = (config->master == groupIndex) ? IfxVadc_AnalogConverterMode_normalOperation : IfxVadc_AnalogConverterMode_off;
80007d52:	0c f5       	ld.bu %d15,[%a15]5
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007d54:	01 c9 00 26 	addsc.a %a2,%a12,%d9,0
80007d58:	3a 8f       	eq %d15,%d15,%d8
80007d5a:	ab 3f a0 2f 	seln %d2,%d15,%d15,3
80007d5e:	19 2f 40 20 	ld.w %d15,[%a2]1152
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);
80007d62:	02 84       	mov %d4,%d8
80007d64:	8f 3f c0 f1 	andn %d15,%d15,3
80007d68:	a6 2f       	or %d15,%d2
80007d6a:	59 2f 40 20 	st.w [%a2]1152,%d15
80007d6e:	39 f5 30 00 	ld.bu %d5,[%a15]48
80007d72:	40 c4       	mov.aa %a4,%a12
80007d74:	6d ff 69 e4 	call 80004646 <IfxVadc_disablePostCalibration>
}


IFX_INLINE void IfxVadc_setGroupResolution(Ifx_VADC_G *vadcG, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadcG->ICLASS[inputClassNum].B.CMS = resolution;
80007d78:	8f 88 00 80 	sh %d8,%d8,8
80007d7c:	82 05       	mov %d5,0
/** Return minimum of two unsigned integers
 */
IFX_INLINE uint32 Ifx__minu(uint32 a, uint32 b)
{
    uint32 res;
    __asm__ volatile ("min.u %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80007d7e:	3b f0 0f 40 	mov %d4,255

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
    {
        /* configure Group input class registers */
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
80007d82:	01 f5 03 26 	addsc.a %a2,%a15,%d5,3
80007d86:	0b 58 00 20 	add %d2,%d8,%d5
80007d8a:	1b 82 12 20 	addi %d2,%d2,296
80007d8e:	0c 2c       	ld.bu %d15,[%a2]12
80007d90:	01 c2 02 26 	addsc.a %a2,%a12,%d2,2
80007d94:	54 22       	ld.w %d2,[%a2]
80007d96:	37 f2 03 f4 	insert %d15,%d2,%d15,8,3
80007d9a:	6c 20       	st.w [%a2]0,%d15
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
80007d9c:	9a 15       	add %d15,%d5,1
80007d9e:	d0 f2       	addsc.a %a2,%a15,%d15,3

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80007da0:	54 23       	ld.w %d3,[%a2]
80007da2:	4b 3b 41 30 	mul.f %d3,%d11,%d3
80007da6:	4b 03 71 31 	ftouz %d3,%d3
80007daa:	c2 e3       	add %d3,-2

    if (ticks > 31)
80007dac:	8b 03 62 f2 	lt.u %d15,%d3,32
80007db0:	ee 04       	jnz %d15,80007db8 <IfxVadc_Adc_initGroup+0x362>
    {
        ticks = (ticks / 16) + 15;
80007db2:	06 c3       	sh %d3,-4
80007db4:	1b f3 00 30 	addi %d3,%d3,15
80007db8:	0b 43 90 31 	min.u %d3,%d3,%d4
}


IFX_INLINE void IfxVadc_setGroupSampleTime(Ifx_VADC_G *vadcG, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadcG->ICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80007dbc:	1a 58       	add %d15,%d8,%d5
80007dbe:	1b 8f 12 f0 	addi %d15,%d15,296
80007dc2:	90 c2       	addsc.a %a2,%a12,%d15,2
80007dc4:	4c 20       	ld.w %d15,[%a2]0
80007dc6:	37 3f 05 30 	insert %d3,%d15,%d3,0,5
80007dca:	74 23       	st.w [%a2],%d3
    IfxVadc_setAnalogConvertControl(vadcG, convertMode);

    /*  Post Calibration */
    IfxVadc_disablePostCalibration(vadc, groupIndex, config->disablePostCalibration);

    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_INPUTCLASSES; inputClassNum++)
80007dcc:	df 15 04 00 	jeq %d5,1,80007dd4 <IfxVadc_Adc_initGroup+0x37e>
80007dd0:	82 15       	mov %d5,1
80007dd2:	3c d8       	j 80007d82 <IfxVadc_Adc_initGroup+0x32c>
        IfxVadc_setGroupResolution(vadcG, inputClassNum, config->inputClass[inputClassNum].resolution);
        /* Calculate Sample time ticks */
        IfxVadc_setGroupSampleTime(vadcG, inputClassNum, analogFrequency, config->inputClass[inputClassNum].sampleTime);
    }

    IfxVadc_disableAccess(vadc, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupIndex));
80007dd4:	40 c4       	mov.aa %a4,%a12
80007dd6:	02 a4       	mov %d4,%d10
80007dd8:	6d ff dc e3 	call 80004590 <IfxVadc_disableAccess>

    return status;
}
80007ddc:	82 02       	mov %d2,0
80007dde:	00 90       	ret 

80007de0 <IfxVadc_Adc_initGroupConfig>:
        .inputClass[0].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
        .inputClass[1].resolution = IfxVadc_ChannelResolution_12bit,
        .inputClass[1].sampleTime = 1.0e-6,                           /* Set sample time to 1us */
    };

    *config                        = IfxVadc_Adc_defaultGroupConfig;
80007de0:	40 42       	mov.aa %a2,%a4
80007de2:	7b 60 58 f3 	movh %d15,13702
80007de6:	d2 02       	mov %e2,0
80007de8:	a0 6f       	mov.a %a15,6
80007dea:	89 22 48 01 	st.d [%a2+]8,%e2
80007dee:	fc fe       	loop %a15,80007dea <IfxVadc_Adc_initGroupConfig+0xa>
80007df0:	1b df 7b f3 	addi %d15,%d15,14269
80007df4:	6c 42       	st.w [%a4]8,%d15
80007df6:	6c 44       	st.w [%a4]16,%d15
80007df8:	82 1f       	mov %d15,1
80007dfa:	e9 4f 1e 00 	st.b [%a4]30,%d15
80007dfe:	e9 4f 20 00 	st.b [%a4]32,%d15
80007e02:	e9 4f 26 00 	st.b [%a4]38,%d15
80007e06:	e9 4f 2e 00 	st.b [%a4]46,%d15
    config->groupId                = IfxVadc_GroupId_0;
    config->module                 = vadc;
80007e0a:	f4 45       	st.a [%a4],%a5
80007e0c:	00 90       	ret 

80007e0e <IfxVadc_Adc_initModule>:


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
80007e0e:	cc 50       	ld.a %a15,[%a5]0
    config->disablePostCalibration = FALSE;
}


IfxVadc_Status IfxVadc_Adc_initModule(IfxVadc_Adc *vadc, const IfxVadc_Adc_Config *config)
{
80007e10:	40 5c       	mov.aa %a12,%a5
    IfxVadc_Status status  = IfxVadc_Status_noError;
    Ifx_VADC      *vadcSFR = config->vadc;
    vadc->vadc = vadcSFR;
80007e12:	ec 40       	st.a [%a4]0,%a15
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007e14:	6d ff 0f fa 	call 80007232 <IfxScuWdt_getCpuWatchdogPassword>

    IfxScuWdt_clearCpuEndinit(passwd);
80007e18:	02 24       	mov %d4,%d2
}


IFX_INLINE void IfxVadc_enableModule(Ifx_VADC *vadc)
{
    uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
80007e1a:	02 2f       	mov %d15,%d2

    IfxScuWdt_clearCpuEndinit(passwd);
80007e1c:	6d ff 0b f9 	call 80007032 <IfxScuWdt_clearCpuEndinit>
    vadc->CLC.U = 0x00000000;
80007e20:	82 02       	mov %d2,0
80007e22:	68 02       	st.w [%a15]0,%d2
    IfxScuWdt_setCpuEndinit(passwd);
80007e24:	02 f4       	mov %d4,%d15
80007e26:	6d ff 3b fa 	call 8000729c <IfxScuWdt_setCpuEndinit>
    float32        analogFrequency;
    uint8          inputClassNum, groupNum;

    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);
80007e2a:	40 f4       	mov.aa %a4,%a15
80007e2c:	39 c4 21 00 	ld.bu %d4,[%a12]33
80007e30:	6d ff 30 e6 	call 80004a90 <IfxVadc_selectPowerSupplyVoltage>

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007e34:	19 c4 18 00 	ld.w %d4,[%a12]24
80007e38:	40 f4       	mov.aa %a4,%a15
80007e3a:	4b 04 71 41 	ftouz %d4,%d4
    {
        return IfxVadc_Status_notInitialised;
80007e3e:	82 1f       	mov %d15,1
    /* Enable VADC kernel clock */
    IfxVadc_enableModule(vadcSFR);
    IfxVadc_selectPowerSupplyVoltage(vadcSFR, config->supplyVoltage);

    /* Set Analog Frequency */
    if (IfxVadc_initializeFAdcI(vadcSFR, config->analogFrequency) == 0)
80007e40:	6d ff 42 e5 	call 800048c4 <IfxVadc_initializeFAdcI>
80007e44:	df 02 57 00 	jeq %d2,0,80007ef2 <IfxVadc_Adc_initModule+0xe4>
    {
        /* do nothing */
    }

    /* Set digital Frequency */
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);
80007e48:	19 c4 14 00 	ld.w %d4,[%a12]20
80007e4c:	40 f4       	mov.aa %a4,%a15
80007e4e:	4b 04 71 41 	ftouz %d4,%d4
80007e52:	6d ff 24 e5 	call 8000489a <IfxVadc_initializeFAdcD>

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);
80007e56:	40 f4       	mov.aa %a4,%a15
80007e58:	6d ff 6a e4 	call 8000472c <IfxVadc_getAdcAnalogFrequency>
80007e5c:	82 03       	mov %d3,0
80007e5e:	3b f0 0f 60 	mov %d6,255

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
    {
        /* configure ADC channel resolution ( conversion mode ) */
        IfxVadc_setGlobalResolution(vadcSFR, inputClassNum, config->globalInputClass[inputClassNum].resolution);
80007e62:	9a 13       	add %d15,%d3,1
}


IFX_INLINE void IfxVadc_setGlobalResolution(Ifx_VADC *vadc, uint8 inputClassNum, IfxVadc_ChannelResolution resolution)
{
    vadc->GLOBICLASS[inputClassNum].B.CMS = resolution;
80007e64:	1b 83 02 40 	addi %d4,%d3,40
80007e68:	d0 c2       	addsc.a %a2,%a12,%d15,3
80007e6a:	01 f4 02 36 	addsc.a %a3,%a15,%d4,2
80007e6e:	0c 20       	ld.bu %d15,[%a2]0
80007e70:	54 35       	ld.w %d5,[%a3]
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
80007e72:	01 c3 03 26 	addsc.a %a2,%a12,%d3,3
80007e76:	37 f5 03 f4 	insert %d15,%d5,%d15,8,3
80007e7a:	6c 30       	st.w [%a3]0,%d15

IFX_INLINE uint32 IfxVadc_calculateSampleTime(float32 analogFrequency, float32 sampleTime)
{
    uint32 ticks;

    ticks = (uint32)(sampleTime * analogFrequency) - 2;
80007e7c:	4c 21       	ld.w %d15,[%a2]4
80007e7e:	4b f2 41 f0 	mul.f %d15,%d2,%d15
80007e82:	4b 0f 71 f1 	ftouz %d15,%d15
80007e86:	c2 ef       	add %d15,-2

    if (ticks > 31)
80007e88:	8b 0f 62 52 	lt.u %d5,%d15,32
80007e8c:	f6 54       	jnz %d5,80007e94 <IfxVadc_Adc_initModule+0x86>
    {
        ticks = (ticks / 16) + 15;
80007e8e:	06 cf       	sh %d15,-4
80007e90:	1b ff 00 f0 	addi %d15,%d15,15
80007e94:	0b 6f 90 f1 	min.u %d15,%d15,%d6
}


IFX_INLINE void IfxVadc_setGlobalSampleTime(Ifx_VADC *vadc, uint8 inputClassNum, float32 analogFrequency, float32 sampleTime)
{
    vadc->GLOBICLASS[inputClassNum].B.STCS = IfxVadc_calculateSampleTime(analogFrequency, sampleTime);
80007e98:	01 f4 02 26 	addsc.a %a2,%a15,%d4,2
80007e9c:	54 24       	ld.w %d4,[%a2]
80007e9e:	37 f4 05 f0 	insert %d15,%d4,%d15,0,5
80007ea2:	6c 20       	st.w [%a2]0,%d15
    IfxVadc_initializeFAdcD(vadcSFR, config->digitalFrequency);

    analogFrequency = IfxVadc_getAdcAnalogFrequency(vadcSFR);

    /* configure Global input class registers */
    for (inputClassNum = 0; inputClassNum < IFXVADC_NUM_GLOBAL_INPUTCLASSES; inputClassNum++)
80007ea4:	df 13 04 00 	jeq %d3,1,80007eac <IfxVadc_Adc_initModule+0x9e>
80007ea8:	82 13       	mov %d3,1
80007eaa:	3c dc       	j 80007e62 <IfxVadc_Adc_initModule+0x54>
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80007eac:	39 c2 20 00 	ld.bu %d2,[%a12]32

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
    }

    return status;
80007eb0:	82 0f       	mov %d15,0
        /* configure Sample time ticks */
        IfxVadc_setGlobalSampleTime(vadcSFR, inputClassNum, analogFrequency, config->globalInputClass[inputClassNum].sampleTime);
    }

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
80007eb2:	df 12 20 80 	jne %d2,1,80007ef2 <IfxVadc_Adc_initModule+0xe4>
80007eb6:	82 08       	mov %d8,0
80007eb8:	1b 08 01 f0 	addi %d15,%d8,16
80007ebc:	16 ff       	and %d15,255
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007ebe:	02 f4       	mov %d4,%d15
80007ec0:	40 f4       	mov.aa %a4,%a15
80007ec2:	6d ff 83 e3 	call 800045c8 <IfxVadc_enableAccess>
}


IFX_INLINE void IfxVadc_setAnalogConvertControl(Ifx_VADC_G *vadcG, IfxVadc_AnalogConverterMode analogConverterMode)
{
    vadcG->ARBCFG.B.ANONC = analogConverterMode;
80007ec6:	8f a8 00 20 	sh %d2,%d8,10
80007eca:	01 f2 00 26 	addsc.a %a2,%a15,%d2,0
80007ece:	c2 18       	add %d8,1
80007ed0:	19 22 40 20 	ld.w %d2,[%a2]1152
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007ed4:	02 f4       	mov %d4,%d15
80007ed6:	8f 32 40 21 	or %d2,%d2,3
80007eda:	59 22 40 20 	st.w [%a2]1152,%d2
80007ede:	40 f4       	mov.aa %a4,%a15

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80007ee0:	8b 88 20 f2 	ne %d15,%d8,8
        {
            IfxVadc_enableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
80007ee4:	6d ff 56 e3 	call 80004590 <IfxVadc_disableAccess>

    /* Start up calibration is requested */
    if (config->startupCalibration == TRUE)
    {
        /* Ensure that all groups are enabled */
        for (groupNum = 0; groupNum < IFXVADC_NUM_ADC_GROUPS; groupNum++)
80007ee8:	ee e8       	jnz %d15,80007eb8 <IfxVadc_Adc_initModule+0xaa>
            IfxVadc_setAnalogConvertControl(&vadcSFR->G[groupNum], IfxVadc_AnalogConverterMode_normalOperation);
            IfxVadc_disableAccess(vadcSFR, (IfxVadc_Protection)(IfxVadc_Protection_initGroup0 + groupNum));
        }

        // execute calibration
        IfxVadc_startupCalibration(vadcSFR);
80007eea:	40 f4       	mov.aa %a4,%a15
80007eec:	6d ff 19 e6 	call 80004b1e <IfxVadc_startupCalibration>
    }

    return status;
80007ef0:	82 0f       	mov %d15,0
}
80007ef2:	02 f2       	mov %d2,%d15
80007ef4:	00 90       	ret 

80007ef6 <IfxVadc_Adc_initModuleConfig>:


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007ef6:	7b 90 b9 f4 	movh %d15,19353
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
80007efa:	40 4f       	mov.aa %a15,%a4
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007efc:	1b 0f 68 f9 	addi %d15,%d15,-27008
    return status;
}


void IfxVadc_Adc_initModuleConfig(IfxVadc_Adc_Config *config, Ifx_VADC *vadc)
{
80007f00:	40 54       	mov.aa %a4,%a5
    config->vadc                           = vadc;
80007f02:	e8 05       	st.a [%a15]0,%a5
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;
80007f04:	68 6f       	st.w [%a15]24,%d15

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
80007f06:	6d ff 1f e4 	call 80004744 <IfxVadc_getAdcDigitalFrequency>
80007f0a:	68 52       	st.w [%a15]20,%d2
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
80007f0c:	6d ff cf f0 	call 800060aa <IfxScuCcu_getSpbFrequency>
80007f10:	68 72       	st.w [%a15]28,%d2
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
    config->globalInputClass[0].sampleTime = 1.0e-6;
80007f12:	7b 60 58 23 	movh %d2,13702
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
80007f16:	82 0f       	mov %d15,0
    config->globalInputClass[0].sampleTime = 1.0e-6;
80007f18:	1b d2 7b 23 	addi %d2,%d2,14269
    config->vadc                           = vadc;
    config->analogFrequency                = IFXVADC_DEFAULT_ANALOG_FREQ;

    config->digitalFrequency               = IfxVadc_getAdcDigitalFrequency(vadc);
    config->moduleFrequency                = IfxScuCcu_getSpbFrequency();
    config->globalInputClass[0].resolution = IfxVadc_ChannelResolution_12bit;
80007f1c:	28 8f       	st.b [%a15]8,%d15
    config->globalInputClass[0].sampleTime = 1.0e-6;
80007f1e:	68 12       	st.w [%a15]4,%d2
    config->globalInputClass[1].resolution = IfxVadc_ChannelResolution_12bit;
80007f20:	e9 ff 10 00 	st.b [%a15]16,%d15
    config->globalInputClass[1].sampleTime = 1.0e-6;
80007f24:	68 32       	st.w [%a15]12,%d2
    config->startupCalibration             = FALSE;
80007f26:	e9 ff 20 00 	st.b [%a15]32,%d15
    config->supplyVoltage                  = IfxVadc_LowSupplyVoltageSelect_5V;
80007f2a:	e9 ff 21 00 	st.b [%a15]33,%d15
80007f2e:	00 90       	ret 

80007f30 <IfxVadc_Adc_initExternalMultiplexerModeConfig>:
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
80007f30:	20 10       	sub.a %sp,16
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
80007f32:	82 0f       	mov %d15,0
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
80007f34:	40 a2       	mov.aa %a2,%sp


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
    emuxConfig->channels              = 0;
80007f36:	2c 49       	st.b [%a4]9,%d15
    emuxConfig->groupId               = IfxVadc_GroupId_0;
80007f38:	2c 48       	st.b [%a4]8,%d15
    emuxConfig->emuxInterface         = IfxVadc_EmuxInterface_0;
80007f3a:	2c 4a       	st.b [%a4]10,%d15
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
80007f3c:	2c 45       	st.b [%a4]5,%d15
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
80007f3e:	2c 46       	st.b [%a4]6,%d15
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
80007f40:	2c 47       	st.b [%a4]7,%d15
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
80007f42:	2c 44       	st.b [%a4]4,%d15
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
80007f44:	e9 4f 1c 00 	st.b [%a4]28,%d15
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
80007f48:	d2 02       	mov %e2,0
80007f4a:	89 22 48 01 	st.d [%a2+]8,%e2
80007f4e:	89 22 48 01 	st.d [%a2+]8,%e2
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
80007f52:	3b 00 f8 ff 	mov %d15,-128
}


void IfxVadc_Adc_initExternalMultiplexerModeConfig(IfxVadc_Adc_EmuxControl *emuxConfig, Ifx_VADC *vadc)
{
    emuxConfig->vadc                  = vadc;
80007f56:	f4 45       	st.a [%a4],%a5
    emuxConfig->startChannel          = IfxVadc_EmuxSelectValue_0;
    emuxConfig->code                  = IfxVadc_EmuxCodingScheme_binary;
    emuxConfig->sampleTimeControl     = IfxVadc_EmuxSampleTimeControl_settingChanges;
    emuxConfig->mode                  = IfxVadc_ExternalMultiplexerMode_softwareControl;
    emuxConfig->channelSelectionStyle = IfxVadc_ChannelSelectionStyle_channelNumber;
    IfxVadc_Adc_EmuxPinConfig defaultConfig = {
80007f58:	40 af       	mov.aa %a15,%sp
        .pins       = {NULL_PTR},
        .outputMode = IfxPort_OutputMode_pushPull,
        .padDriver  = IfxPort_PadDriver_cmosAutomotiveSpeed1,
    };

    emuxConfig->emuxOutPinConfig = defaultConfig;
80007f5a:	2c ac       	st.b [%sp]12,%d15
80007f5c:	d9 44 0c 00 	lea %a4,[%a4]12
80007f60:	09 f2 48 01 	ld.d %e2,[%a15+]8
80007f64:	89 42 48 01 	st.d [%a4+]8,%e2
80007f68:	09 f2 48 01 	ld.d %e2,[%a15+]8
80007f6c:	89 42 48 01 	st.d [%a4+]8,%e2
80007f70:	00 90       	ret 

80007f72 <IfxVadc_Adc_initExternalMultiplexerMode>:


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
80007f72:	0c 58       	ld.bu %d15,[%a5]8
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
80007f74:	20 08       	sub.a %sp,8
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
80007f76:	8f af 00 20 	sh %d2,%d15,10
80007f7a:	1b 02 48 20 	addi %d2,%d2,1152
80007f7e:	01 42 00 e6 	addsc.a %a14,%a4,%d2,0
}


IFX_INLINE void IfxVadc_setEmuxInterfaceForGroup(Ifx_VADC *vadc, IfxVadc_EmuxInterface emuxInterface, IfxVadc_GroupId group)
{
    if (emuxInterface == IfxVadc_EmuxInterface_0)
80007f82:	39 52 0a 00 	ld.bu %d2,[%a5]10
    emuxConfig->emuxOutPinConfig = defaultConfig;
}


void IfxVadc_Adc_initExternalMultiplexerMode(Ifx_VADC *vadc, const IfxVadc_Adc_EmuxControl *emuxControl)
{
80007f86:	40 4c       	mov.aa %a12,%a4
80007f88:	40 5f       	mov.aa %a15,%a5
80007f8a:	16 0f       	and %d15,15
80007f8c:	f6 2a       	jnz %d2,80007fa0 <IfxVadc_Adc_initExternalMultiplexerMode+0x2e>
    {
        vadc->EMUXSEL.B.EMUXGRP0 = group;
80007f8e:	19 42 30 f0 	ld.w %d2,[%a4]1008
80007f92:	8f f2 c0 21 	andn %d2,%d2,15
80007f96:	a6 2f       	or %d15,%d2
80007f98:	59 cf 30 f0 	st.w [%a12]1008,%d15
80007f9c:	82 0f       	mov %d15,0
80007f9e:	3c 07       	j 80007fac <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
    }
    else
    {
        vadc->EMUXSEL.B.EMUXGRP1 = group;
80007fa0:	19 42 30 f0 	ld.w %d2,[%a4]1008
80007fa4:	06 4f       	sh %d15,4
80007fa6:	8f 02 cf 21 	andn %d2,%d2,240
80007faa:	3c f6       	j 80007f96 <IfxVadc_Adc_initExternalMultiplexerMode+0x24>
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
    {
        if (emuxControl->emuxOutPinConfig.pins[count] != NULL_PTR)
80007fac:	90 f2       	addsc.a %a2,%a15,%d15,2
80007fae:	99 2d 0c 00 	ld.a %a13,[%a2]12
80007fb2:	bd 0d 19 00 	jz.a %a13,80007fe4 <IfxVadc_Adc_initExternalMultiplexerMode+0x72>
80007fb6:	39 d3 0c 00 	ld.bu %d3,[%a13]12
80007fba:	39 f2 18 00 	ld.bu %d2,[%a15]24
80007fbe:	99 d4 04 00 	ld.a %a4,[%a13]4
80007fc2:	0f 23 a0 50 	or %d5,%d3,%d2
80007fc6:	39 d4 08 00 	ld.bu %d4,[%a13]8
80007fca:	8f f5 0f 51 	and %d5,%d5,255
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
80007fce:	39 f8 19 00 	ld.bu %d8,[%a15]25
80007fd2:	6d ff c4 ed 	call 80005b5a <IfxPort_setPinMode>


IFX_INLINE void IfxVadc_initEmuxPin(const IfxVadc_Emux_Out *emux, IfxPort_OutputMode outputMode, IfxPort_PadDriver padDriver)
{
    IfxPort_setPinModeOutput(emux->pin.port, emux->pin.pinIndex, outputMode, emux->select);
    IfxPort_setPinPadDriver(emux->pin.port, emux->pin.pinIndex, padDriver);
80007fd6:	99 d4 04 00 	ld.a %a4,[%a13]4
80007fda:	39 d4 08 00 	ld.bu %d4,[%a13]8
80007fde:	02 85       	mov %d5,%d8
80007fe0:	6d ff 3b ee 	call 80005c56 <IfxPort_setPinPadDriver>
80007fe4:	c2 1f       	add %d15,1
{
    uint8       count = 0;
    Ifx_VADC_G *vadcG = &vadc->G[emuxControl->groupId];
    IfxVadc_setEmuxInterfaceForGroup(vadc, emuxControl->emuxInterface, emuxControl->groupId);

    for (count = 0; count < 3; count++)
80007fe6:	df 3f e3 ff 	jne %d15,3,80007fac <IfxVadc_Adc_initExternalMultiplexerMode+0x3a>
        {
            IfxVadc_initEmuxPin(emuxControl->emuxOutPinConfig.pins[count], emuxControl->emuxOutPinConfig.outputMode, emuxControl->emuxOutPinConfig.padDriver);
        }
    }

    IfxVadc_configExternalMultiplexerMode(vadc, vadcG, emuxControl->mode, emuxControl->channels, emuxControl->startChannel, emuxControl->code, emuxControl->sampleTimeControl, emuxControl->channelSelectionStyle);
80007fea:	0c f7       	ld.bu %d15,[%a15]7
80007fec:	08 44       	ld.bu %d4,[%a15]4
80007fee:	78 00       	st.w [%sp]0,%d15
80007ff0:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80007ff4:	08 95       	ld.bu %d5,[%a15]9
80007ff6:	08 56       	ld.bu %d6,[%a15]5
80007ff8:	08 67       	ld.bu %d7,[%a15]6
80007ffa:	78 01       	st.w [%sp]4,%d15
80007ffc:	40 c4       	mov.aa %a4,%a12
80007ffe:	40 e5       	mov.aa %a5,%a14
80008000:	1d ff 00 e3 	j 80004600 <IfxVadc_configExternalMultiplexerMode>

80008004 <Ifx_CircularBuffer_get32>:

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
80008004:	cc 40       	ld.a %a15,[%a4]0
80008006:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 4;

    if (buffer->index >= buffer->length)
8000800a:	b9 43 06 00 	ld.hu %d3,[%a4]6

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
8000800e:	90 ff       	addsc.a %a15,%a15,%d15,2

    buffer->index += 4;
80008010:	c2 4f       	add %d15,4
80008012:	37 0f 70 f0 	extr.u %d15,%d15,0,16

#if (IFX_CFG_CIRCULARBUFFER_C)

uint32 Ifx_CircularBuffer_get32(Ifx_CircularBuffer *buffer)
{
    uint32 data = ((uint32 *)buffer->base)[buffer->index];
80008016:	48 02       	ld.w %d2,[%a15]0

    buffer->index += 4;
80008018:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
8000801a:	3f 3f 04 80 	jlt.u %d15,%d3,80008022 <Ifx_CircularBuffer_get32+0x1e>
    {
        buffer->index = 0;
8000801e:	82 0f       	mov %d15,0
80008020:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
80008022:	00 90       	ret 

80008024 <Ifx_CircularBuffer_get16>:


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
80008024:	cc 40       	ld.a %a15,[%a4]0
80008026:	b9 4f 04 00 	ld.hu %d15,[%a4]4

    buffer->index += 2;

    if (buffer->index >= buffer->length)
8000802a:	b9 43 06 00 	ld.hu %d3,[%a4]6
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
8000802e:	50 ff       	addsc.a %a15,%a15,%d15,1

    buffer->index += 2;
80008030:	c2 2f       	add %d15,2
80008032:	37 0f 70 f0 	extr.u %d15,%d15,0,16
}


uint16 Ifx_CircularBuffer_get16(Ifx_CircularBuffer *buffer)
{
    uint16 data = ((uint16 *)buffer->base)[buffer->index];
80008036:	b9 f2 00 00 	ld.hu %d2,[%a15]0

    buffer->index += 2;
8000803a:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
8000803c:	3f 3f 04 80 	jlt.u %d15,%d3,80008044 <Ifx_CircularBuffer_get16+0x20>
    {
        buffer->index = 0;
80008040:	82 0f       	mov %d15,0
80008042:	ac 42       	st.h [%a4]4,%d15
    }

    return data;
}
80008044:	00 90       	ret 

80008046 <Ifx_CircularBuffer_addDataIncr>:
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
80008046:	cc 40       	ld.a %a15,[%a4]0
80008048:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    buffer->index                          += 4;

    if (buffer->index >= buffer->length)
8000804c:	b9 42 06 00 	ld.hu %d2,[%a4]6
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
80008050:	90 ff       	addsc.a %a15,%a15,%d15,2
    buffer->index                          += 4;
80008052:	c2 4f       	add %d15,4
80008054:	37 0f 70 f0 	extr.u %d15,%d15,0,16
 *
 * \return None.
 */
void Ifx_CircularBuffer_addDataIncr(Ifx_CircularBuffer *buffer, uint32 data)
{
    ((uint32 *)buffer->base)[buffer->index] = data;
80008058:	68 04       	st.w [%a15]0,%d4
    buffer->index                          += 4;
8000805a:	ac 42       	st.h [%a4]4,%d15

    if (buffer->index >= buffer->length)
8000805c:	3f 2f 04 80 	jlt.u %d15,%d2,80008064 <Ifx_CircularBuffer_addDataIncr+0x1e>
    {
        buffer->index = 0;
80008060:	82 0f       	mov %d15,0
80008062:	ac 42       	st.h [%a4]4,%d15
80008064:	00 90       	ret 

80008066 <Ifx_CircularBuffer_read8>:
    }
}


void *Ifx_CircularBuffer_read8(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
80008066:	80 52       	mov.d %d2,%a5
80008068:	37 04 70 40 	extr.u %d4,%d4,0,16
8000806c:	8f 02 60 31 	nor %d3,%d2,0
80008070:	1a 42       	add %d15,%d2,%d4
80008072:	42 3f       	add %d15,%d3
80008074:	42 23       	add %d3,%d2
80008076:	42 43       	add %d3,%d4
    uint8 *Dest = (uint8 *)data;
80008078:	40 5f       	mov.aa %a15,%a5
        Dest  = &Dest[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
8000807a:	82 06       	mov %d6,0
8000807c:	37 0f 70 f0 	extr.u %d15,%d15,0,16
80008080:	6f f3 03 00 	jz.t %d3,15,80008086 <Ifx_CircularBuffer_read8+0x20>
80008084:	82 0f       	mov %d15,0
    uint8 *Dest = (uint8 *)data;

    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
80008086:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000808a:	d4 42       	ld.a %a2,[%a4]
8000808c:	60 33       	mov.a %a3,%d3
8000808e:	30 32       	add.a %a2,%a3
80008090:	14 23       	ld.bu %d3,[%a2]
80008092:	24 f3       	st.b [%a15+],%d3
        Dest  = &Dest[1];
        buffer->index++;
80008094:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
80008098:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        *Dest = ((uint8 *)buffer->base)[buffer->index];
        Dest  = &Dest[1];
        buffer->index++;
8000809c:	c2 13       	add %d3,1
8000809e:	37 03 70 30 	extr.u %d3,%d3,0,16
800080a2:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
800080a6:	3f 53 04 80 	jlt.u %d3,%d5,800080ae <Ifx_CircularBuffer_read8+0x48>
        {
            buffer->index = 0;
800080aa:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
800080ae:	9f 0f ec ff 	jned %d15,0,80008086 <Ifx_CircularBuffer_read8+0x20>
800080b2:	c2 f4       	add %d4,-1
800080b4:	37 04 50 40 	extr %d4,%d4,0,16
800080b8:	8b 04 40 43 	max %d4,%d4,0
800080bc:	c2 14       	add %d4,1

    return Dest;
}
800080be:	1a 42       	add %d15,%d2,%d4
800080c0:	60 f2       	mov.a %a2,%d15
800080c2:	00 90       	ret 

800080c4 <Ifx_CircularBuffer_read32>:


void *Ifx_CircularBuffer_read32(Ifx_CircularBuffer *buffer, void *data, Ifx_SizeT count)
{
800080c4:	37 04 70 40 	extr.u %d4,%d4,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;
800080c8:	d4 42       	ld.a %a2,[%a4]
800080ca:	1b f4 ff 5f 	addi %d5,%d4,-1
800080ce:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
800080d2:	b9 46 06 00 	ld.hu %d6,[%a4]6
800080d6:	82 03       	mov %d3,0
800080d8:	37 05 70 20 	extr.u %d2,%d5,0,16
800080dc:	6f f5 03 00 	jz.t %d5,15,800080e2 <Ifx_CircularBuffer_read32+0x1e>
800080e0:	82 02       	mov %d2,0
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
800080e2:	10 2f       	addsc.a %a15,%a2,%d15,0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
800080e4:	c2 4f       	add %d15,4
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
800080e6:	48 05       	ld.w %d5,[%a15]0
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;
800080e8:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    uint32 *Dest = (uint32 *)data;
    uint8  *base = buffer->base;

    do
    {
        *Dest         = *((uint32 *)(&base[buffer->index]));
800080ec:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
800080f0:	c2 13       	add %d3,1
800080f2:	68 05       	st.w [%a15]0,%d5
        Dest          = &Dest[1];
        buffer->index = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
800080f4:	0b 6f 30 51 	lt.u %d5,%d15,%d6
800080f8:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
800080fc:	9f 02 f3 ff 	jned %d2,0,800080e2 <Ifx_CircularBuffer_read32+0x1e>
80008100:	c2 f4       	add %d4,-1
80008102:	37 04 50 40 	extr %d4,%d4,0,16
80008106:	ac 42       	st.h [%a4]4,%d15
80008108:	8b 04 40 43 	max %d4,%d4,0
8000810c:	c2 14       	add %d4,1

    return Dest;
}
8000810e:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
80008112:	00 90       	ret 

80008114 <Ifx_CircularBuffer_write8>:


const void *Ifx_CircularBuffer_write8(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
80008114:	80 52       	mov.d %d2,%a5
80008116:	37 04 70 40 	extr.u %d4,%d4,0,16
8000811a:	8f 02 60 31 	nor %d3,%d2,0
8000811e:	1a 42       	add %d15,%d2,%d4
80008120:	42 3f       	add %d15,%d3
80008122:	42 23       	add %d3,%d2
80008124:	42 43       	add %d3,%d4
    const uint8 *source = (const uint8 *)data;
80008126:	40 5f       	mov.aa %a15,%a5
        source                                 = &source[1];
        buffer->index++;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
80008128:	82 06       	mov %d6,0
8000812a:	37 0f 70 f0 	extr.u %d15,%d15,0,16
8000812e:	6f f3 03 00 	jz.t %d3,15,80008134 <Ifx_CircularBuffer_write8+0x20>
80008132:	82 0f       	mov %d15,0
    const uint8 *source = (const uint8 *)data;

    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
80008134:	b9 43 04 00 	ld.hu %d3,[%a4]4
80008138:	d4 42       	ld.a %a2,[%a4]
8000813a:	60 33       	mov.a %a3,%d3
8000813c:	04 f5       	ld.bu %d5,[%a15+]
8000813e:	30 32       	add.a %a2,%a3
80008140:	34 25       	st.b [%a2],%d5
        source                                 = &source[1];
        buffer->index++;
80008142:	c9 43 04 00 	ld.h %d3,[%a4]4

        if (buffer->index >= buffer->length)
80008146:	b9 45 06 00 	ld.hu %d5,[%a4]6
    do
    {
        count--;
        ((uint8 *)buffer->base)[buffer->index] = *source;
        source                                 = &source[1];
        buffer->index++;
8000814a:	c2 13       	add %d3,1
8000814c:	37 03 70 30 	extr.u %d3,%d3,0,16
80008150:	f9 43 04 00 	st.h [%a4]4,%d3

        if (buffer->index >= buffer->length)
80008154:	3f 53 04 80 	jlt.u %d3,%d5,8000815c <Ifx_CircularBuffer_write8+0x48>
        {
            buffer->index = 0;
80008158:	f9 46 04 00 	st.h [%a4]4,%d6
        }
    } while (count > 0);
8000815c:	9f 0f ec ff 	jned %d15,0,80008134 <Ifx_CircularBuffer_write8+0x20>
80008160:	c2 f4       	add %d4,-1
80008162:	37 04 50 40 	extr %d4,%d4,0,16
80008166:	8b 04 40 43 	max %d4,%d4,0
8000816a:	c2 14       	add %d4,1

    return source;
}
8000816c:	1a 42       	add %d15,%d2,%d4
8000816e:	60 f2       	mov.a %a2,%d15
80008170:	00 90       	ret 

80008172 <Ifx_CircularBuffer_write32>:


const void *Ifx_CircularBuffer_write32(Ifx_CircularBuffer *buffer, const void *data, Ifx_SizeT count)
{
80008172:	37 04 70 40 	extr.u %d4,%d4,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;
80008176:	d4 42       	ld.a %a2,[%a4]
80008178:	1b f4 ff 5f 	addi %d5,%d4,-1
8000817c:	b9 4f 04 00 	ld.hu %d15,[%a4]4
    {
        *((uint32 *)(&base[buffer->index])) = *source;
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
80008180:	b9 46 06 00 	ld.hu %d6,[%a4]6
80008184:	82 03       	mov %d3,0
80008186:	37 05 70 20 	extr.u %d2,%d5,0,16
8000818a:	6f f5 03 00 	jz.t %d5,15,80008190 <Ifx_CircularBuffer_write32+0x1e>
8000818e:	82 02       	mov %d2,0
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
80008190:	01 53 02 f6 	addsc.a %a15,%a5,%d3,2
80008194:	c2 13       	add %d3,1
80008196:	48 05       	ld.w %d5,[%a15]0
80008198:	10 2f       	addsc.a %a15,%a2,%d15,0
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;
8000819a:	c2 4f       	add %d15,4
8000819c:	37 0f 70 f0 	extr.u %d15,%d15,0,16
    const uint32 *source = (const uint32 *)data;
    uint8        *base   = buffer->base;

    do
    {
        *((uint32 *)(&base[buffer->index])) = *source;
800081a0:	68 05       	st.w [%a15]0,%d5
        source                              = &source[1];
        buffer->index                       = buffer->index + 4;

        if (buffer->index >= buffer->length)
        {
            buffer->index = 0;
800081a2:	0b 6f 30 51 	lt.u %d5,%d15,%d6
800081a6:	ab 0f 80 f5 	sel %d15,%d5,%d15,0
        }

        count--;
    } while (count > 0);
800081aa:	9f 02 f3 ff 	jned %d2,0,80008190 <Ifx_CircularBuffer_write32+0x1e>
800081ae:	c2 f4       	add %d4,-1
800081b0:	37 04 50 40 	extr %d4,%d4,0,16
800081b4:	ac 42       	st.h [%a4]4,%d15
800081b6:	8b 04 40 43 	max %d4,%d4,0
800081ba:	c2 14       	add %d4,1

    return source;
}
800081bc:	01 54 02 26 	addsc.a %a2,%a5,%d4,2
800081c0:	00 90       	ret 

800081c2 <Ifx_Fifo_destroy>:
}


void Ifx_Fifo_destroy(Ifx_Fifo *fifo)
{
    free(fifo);
800081c2:	1d 00 8b 13 	j 8000a8d8 <free>

800081c6 <Ifx_Fifo_init>:
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
800081c6:	82 0f       	mov %d15,0
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
800081c8:	80 42       	mov.d %d2,%a4
    /* Check size over maximum FIFO size */
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, (size <= IFX_SIZET_MAX)); 

    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
800081ca:	e9 4f 1c 00 	st.b [%a4]28,%d15
        fifo->eventWriter        = TRUE;
800081ce:	82 1f       	mov %d15,1
800081d0:	e9 4f 1d 00 	st.b [%a4]29,%d15
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
800081d4:	1b 72 02 f0 	addi %d15,%d2,39
800081d8:	8f 7f c0 f1 	andn %d15,%d15,7
800081dc:	6c 40       	st.w [%a4]0,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
800081de:	c2 34       	add %d4,3
    {
        fifo                     = (Ifx_Fifo *)buffer;
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
800081e0:	82 0f       	mov %d15,0
800081e2:	ac 42       	st.h [%a4]4,%d15
        fifo->shared.maxcount    = 0;
800081e4:	ac 48       	st.h [%a4]16,%d15

Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);     /* data transfer is optimised for 32 bit access */
800081e6:	8f 34 c0 41 	andn %d4,%d4,3
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
800081ea:	82 0f       	mov %d15,0
    free(fifo);
}


Ifx_Fifo *Ifx_Fifo_init(void *buffer, Ifx_SizeT size, Ifx_SizeT elementSize)
{
800081ec:	40 42       	mov.aa %a2,%a4
        fifo->eventReader        = FALSE;
        fifo->eventWriter        = TRUE;
        fifo->buffer             = (uint8 *)Ifx_AlignOn64(((uint32)fifo) + sizeof(Ifx_Fifo));
        fifo->shared.count       = 0;
        fifo->shared.maxcount    = 0;
        fifo->shared.readerWaitx = fifo->shared.writerWaitx = 0;
800081ee:	6c 43       	st.w [%a4]12,%d15
800081f0:	6c 42       	st.w [%a4]8,%d15
        fifo->startIndex         = fifo->endIndex = 0;
800081f2:	ac 4b       	st.h [%a4]22,%d15
800081f4:	ac 4a       	st.h [%a4]20,%d15
        fifo->size               = size;
800081f6:	f9 44 18 00 	st.h [%a4]24,%d4
        fifo->elementSize        = elementSize;
800081fa:	f9 45 1a 00 	st.h [%a4]26,%d5
    }

    return fifo;
}
800081fe:	00 90       	ret 

80008200 <Ifx_Fifo_create>:
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
80008200:	c2 34       	add %d4,3
80008202:	37 04 50 f0 	extr %d15,%d4,0,16
 * This is valid is an OS is used.
 *
 */
//------------------------------------------------------------------------------
Ifx_Fifo *Ifx_Fifo_create(Ifx_SizeT size, Ifx_SizeT elementSize)
{
80008206:	02 58       	mov %d8,%d5
    Ifx_Fifo *fifo = NULL_PTR;

    size = Ifx_AlignOn32(size);                 /* data transfer is optimised for 32 bit access */
80008208:	8f 3f c0 f1 	andn %d15,%d15,3

    fifo = malloc(size + sizeof(Ifx_Fifo) + 8); /* +8 because of padding in case the pointer is not aligned on 64 */
8000820c:	1b 8f 02 40 	addi %d4,%d15,40
80008210:	6d 00 5e 13 	call 8000a8cc <malloc>
80008214:	40 24       	mov.aa %a4,%a2

    if (IFX_VALIDATE(IFX_VERBOSE_LEVEL_ERROR, (fifo != NULL_PTR)))
80008216:	bc 25       	jz.a %a2,80008220 <Ifx_Fifo_create+0x20>
    {
        fifo = Ifx_Fifo_init(fifo, size, elementSize);
80008218:	0b f8 10 48 	mov %e4,%d8,%d15
8000821c:	1d ff d5 ff 	j 800081c6 <Ifx_Fifo_init>
    }

    return fifo;
}
80008220:	00 90       	ret 

80008222 <Ifx_Fifo_canReadCount>:
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
80008222:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be read from the buffer */
        result = FALSE;
80008224:	82 02       	mov %d2,0
{
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);

    if ((count < fifo->elementSize) || (count > fifo->size))
80008226:	3f f4 6a 00 	jlt %d4,%d15,800082fa <Ifx_Fifo_canReadCount+0xd8>
8000822a:	8c 4c       	ld.h %d15,[%a4]24
8000822c:	3f 4f 67 00 	jlt %d15,%d4,800082fa <Ifx_Fifo_canReadCount+0xd8>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008230:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
80008234:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008238:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
8000823c:	00 00       	nop 
    else
    {
        boolean interruptState;
        sint32  waitCount;
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);
8000823e:	8c 42       	ld.h %d15,[%a4]4
80008240:	a2 f4       	sub %d4,%d15

        if (waitCount <= 0)
80008242:	4e 4c       	jgtz %d4,8000825a <Ifx_Fifo_canReadCount+0x38>
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE;
80008244:	82 1f       	mov %d15,1
        interruptState = IfxCpu_disableInterrupts();
        waitCount      = count - Ifx_Fifo_readCount(fifo);

        if (waitCount <= 0)
        {
            fifo->shared.readerWaitx = 0;
80008246:	59 42 08 00 	st.w [%a4]8,%d2
            fifo->eventReader        = TRUE;
8000824a:	e9 4f 1c 00 	st.b [%a4]28,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
8000824e:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008250:	df 00 55 00 	jeq %d0,0,800082fa <Ifx_Fifo_canReadCount+0xd8>
    {
        __enable();
80008254:	0d 00 00 03 	enable 
80008258:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
8000825a:	82 f2       	mov %d2,-1
8000825c:	06 f2       	sh %d2,-1
8000825e:	ba f6       	eq %d15,%d6,-1
80008260:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
80008264:	82 f5       	mov %d5,-1
80008266:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008268:	ee 16       	jnz %d15,80008294 <Ifx_Fifo_canReadCount+0x72>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000826a:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000826e:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008272:	0d 00 40 03 	disable 
80008276:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008278:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000827c:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008280:	02 15       	mov %d5,%d1
80008282:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008286:	76 23       	jz %d2,8000828c <Ifx_Fifo_canReadCount+0x6a>
    {
        __enable();
80008288:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
8000828c:	0b 65 40 50 	addx %d5,%d5,%d6
80008290:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
80008294:	82 0f       	mov %d15,0
80008296:	e9 4f 1c 00 	st.b [%a4]28,%d15
            fifo->shared.readerWaitx = waitCount;
8000829a:	59 44 08 00 	st.w [%a4]8,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000829e:	76 03       	jz %d0,800082a4 <Ifx_Fifo_canReadCount+0x82>
    {
        __enable();
800082a0:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800082a4:	82 f6       	mov %d6,-1
800082a6:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800082a8:	39 4f 1c 00 	ld.bu %d15,[%a4]28
800082ac:	6e 08       	jz %d15,800082bc <Ifx_Fifo_canReadCount+0x9a>
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
            result = fifo->eventReader == TRUE;
800082ae:	39 42 1c 00 	ld.bu %d2,[%a4]28
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the reader is not waiting for any data */
            fifo->shared.readerWaitx = 0;
800082b2:	82 0f       	mov %d15,0
800082b4:	6c 42       	st.w [%a4]8,%d15
            result = fifo->eventReader == TRUE;
800082b6:	8b 12 00 22 	eq %d2,%d2,1
800082ba:	00 90       	ret 
800082bc:	ba f5       	eq %d15,%d5,-1
800082be:	0b 36 00 f2 	and.eq %d15,%d6,%d3
800082c2:	ee f3       	jnz %d15,800082a8 <Ifx_Fifo_canReadCount+0x86>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800082c4:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800082c8:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800082cc:	0d 00 40 03 	disable 
800082d0:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800082d2:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800082d6:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800082da:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800082de:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800082e2:	76 23       	jz %d2,800082e8 <Ifx_Fifo_canReadCount+0xc6>
    {
        __enable();
800082e4:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventReader        = FALSE;
            fifo->shared.readerWaitx = waitCount;
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800082e8:	0b 3f 00 21 	eq %d2,%d15,%d3
800082ec:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
800082f0:	0b 3f 90 22 	or.lt %d2,%d15,%d3
800082f4:	df 02 da ff 	jne %d2,0,800082a8 <Ifx_Fifo_canReadCount+0x86>
800082f8:	3c db       	j 800082ae <Ifx_Fifo_canReadCount+0x8c>
            result = fifo->eventReader == TRUE;
        }
    }

    return result;
}
800082fa:	00 90       	ret 

800082fc <Ifx_Fifo_read>:
    return count - blockSize;
}

#include <stdio.h>
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
800082fc:	20 08       	sub.a %sp,8
800082fe:	40 4f       	mov.aa %a15,%a4
80008300:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
80008302:	df 04 b6 00 	jeq %d4,0,8000846e <Ifx_Fifo_read+0x172>
    {

        buffer.base   = fifo->buffer;
80008306:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008308:	82 f2       	mov %d2,-1
8000830a:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;         /* size always fit into 16 bit */
8000830c:	8c 4c       	ld.h %d15,[%a4]24
8000830e:	06 f2       	sh %d2,-1
80008310:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->startIndex;   /* startIndex always fit into size */
80008312:	8c 4a       	ld.h %d15,[%a4]20
    {
        deadLine = TIME_INFINITE;
80008314:	82 fa       	mov %d10,-1
80008316:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008318:	ba f6       	eq %d15,%d6,-1
8000831a:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
8000831e:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
80008320:	ee 16       	jnz %d15,8000834c <Ifx_Fifo_read+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008322:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008326:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000832a:	0d 00 40 03 	disable 
8000832e:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008330:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008334:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008338:	02 3a       	mov %d10,%d3
8000833a:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000833e:	76 23       	jz %d2,80008344 <Ifx_Fifo_read+0x48>
    {
        __enable();
80008340:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008344:	0b 6a 40 a0 	addx %d10,%d10,%d6
80008348:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
8000834c:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_read(Ifx_Fifo *fifo, void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
8000834e:	82 0d       	mov %d13,0
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventReader        = FALSE;
80008350:	82 0e       	mov %d14,0
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
80008352:	a0 0c       	mov.a %a12,0
80008354:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008356:	4d c0 e2 4f 	mfcr %d4,$icr
    return reg.B.IE != 0;
8000835a:	37 04 e1 47 	extr.u %d4,%d4,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000835e:	0d 00 40 03 	disable 
80008362:	00 00       	nop 
{
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
80008364:	88 2b       	ld.h %d11,[%a15]4
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80008366:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
8000836a:	8c fd       	ld.h %d15,[%a15]26
8000836c:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventReader        = FALSE;
80008370:	e9 fe 1c 00 	st.b [%a15]28,%d14
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
80008374:	4b f2 01 22 	div %e2,%d2,%d15
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
80008378:	88 c2       	ld.h %d2,[%a15]24
    boolean   interruptState;
    Ifx_SizeT blockSize;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
8000837a:	a2 3b       	sub %d11,%d3
8000837c:	37 0b 70 b0 	extr.u %d11,%d11,0,16
80008380:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventReader        = FALSE;
    fifo->shared.readerWaitx = __min(count - blockSize, fifo->size);
80008384:	0b f9 80 30 	sub %d3,%d9,%d15
80008388:	0b 23 80 21 	min %d2,%d3,%d2
8000838c:	68 22       	st.w [%a15]8,%d2
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000838e:	76 43       	jz %d4,80008394 <Ifx_Fifo_read+0x98>
    {
        __enable();
80008390:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginRead(fifo, count);

            if (blockSize != 0)
80008394:	6e 20       	jz %d15,800083d4 <Ifx_Fifo_read+0xd8>
            {
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
80008396:	40 a4       	mov.aa %a4,%sp
80008398:	02 f4       	mov %d4,%d15
8000839a:	6d ff 66 fe 	call 80008066 <Ifx_CircularBuffer_read8>
8000839e:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800083a0:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800083a4:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800083a8:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
800083ac:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState      = IfxCpu_disableInterrupts();

    fifo->shared.count -= blockSize;
800083ae:	88 23       	ld.h %d3,[%a15]4
800083b0:	a2 b3       	sub %d3,%d11
800083b2:	a8 23       	st.h [%a15]4,%d3

    if (fifo->shared.writerWaitx != 0)
800083b4:	48 33       	ld.w %d3,[%a15]12
800083b6:	76 39       	jz %d3,800083c8 <Ifx_Fifo_read+0xcc>
    {
        fifo->shared.writerWaitx -= blockSize;
800083b8:	5a f3       	sub %d15,%d3,%d15

        if (fifo->shared.writerWaitx <= 0)
800083ba:	8e f3       	jlez %d15,800083c0 <Ifx_Fifo_read+0xc4>

    fifo->shared.count -= blockSize;

    if (fifo->shared.writerWaitx != 0)
    {
        fifo->shared.writerWaitx -= blockSize;
800083bc:	68 3f       	st.w [%a15]12,%d15
800083be:	3c 05       	j 800083c8 <Ifx_Fifo_read+0xcc>

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE; /* Signal the writer */
800083c0:	82 1f       	mov %d15,1
    {
        fifo->shared.writerWaitx -= blockSize;

        if (fifo->shared.writerWaitx <= 0)
        {
            fifo->shared.writerWaitx = 0;
800083c2:	e8 3c       	st.a [%a15]12,%a12
            fifo->eventWriter        = TRUE; /* Signal the writer */
800083c4:	e9 ff 1d 00 	st.b [%a15]29,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800083c8:	76 23       	jz %d2,800083ce <Ifx_Fifo_read+0xd2>
    {
        __enable();
800083ca:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
800083ce:	a2 b9       	sub %d9,%d11
800083d0:	37 09 50 90 	extr %d9,%d9,0,16
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800083d4:	76 d4       	jz %d13,800083dc <Ifx_Fifo_read+0xe0>
            {
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
800083d6:	82 0f       	mov %d15,0
800083d8:	68 2f       	st.w [%a15]8,%d15
                break;
800083da:	3c 48       	j 8000846a <Ifx_Fifo_read+0x16e>
800083dc:	ba fa       	eq %d15,%d10,-1
800083de:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800083e2:	ee 1b       	jnz %d15,80008418 <Ifx_Fifo_read+0x11c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800083e4:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800083e8:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800083ec:	0d 00 40 03 	disable 
800083f0:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800083f2:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800083f6:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800083fa:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800083fe:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008402:	76 23       	jz %d2,80008408 <Ifx_Fifo_read+0x10c>
    {
        __enable();
80008404:	0d 00 00 03 	enable 
                /* read element from the buffer */
                data  = Ifx_CircularBuffer_read8(&buffer, data, blockSize);
                count = Ifx_Fifo_readEnd(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008408:	0b 8f 00 21 	eq %d2,%d15,%d8
8000840c:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
80008410:	0b f8 90 22 	or.lt %d2,%d8,%d15
80008414:	df 02 e1 ff 	jne %d2,0,800083d6 <Ifx_Fifo_read+0xda>
                /*When exiting, the reader is not waiting for any data */
                fifo->shared.readerWaitx = 0;
                break;
            }

            if (count != 0)
80008418:	df 09 29 00 	jeq %d9,0,8000846a <Ifx_Fifo_read+0x16e>
            {
                while ((fifo->eventReader == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
8000841c:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80008420:	ee 1f       	jnz %d15,8000845e <Ifx_Fifo_read+0x162>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008422:	ba fa       	eq %d15,%d10,-1
80008424:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
80008428:	ee fa       	jnz %d15,8000841c <Ifx_Fifo_read+0x120>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
8000842a:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
8000842e:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008432:	0d 00 40 03 	disable 
80008436:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008438:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
8000843c:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80008440:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
80008444:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008448:	76 23       	jz %d2,8000844e <Ifx_Fifo_read+0x152>
    {
        __enable();
8000844a:	0d 00 00 03 	enable 
8000844e:	0b 8f 00 21 	eq %d2,%d15,%d8
80008452:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
80008456:	0b 8f 90 22 	or.lt %d2,%d15,%d8
8000845a:	df 02 e1 ff 	jne %d2,0,8000841c <Ifx_Fifo_read+0x120>
                {}

                Stop = (fifo->eventReader == FALSE);    /* If the function timeout, the maximum number of characters are read before returning */
8000845e:	39 fd 1c 00 	ld.bu %d13,[%a15]28
80008462:	8b 0d 00 d2 	eq %d13,%d13,0
80008466:	1d ff 78 ff 	j 80008356 <Ifx_Fifo_read+0x5a>
            }
        } while (count != 0);

        fifo->startIndex = buffer.index;
8000846a:	8c a2       	ld.h %d15,[%sp]4
8000846c:	a8 af       	st.h [%a15]20,%d15
    }

    return count;
}
8000846e:	02 92       	mov %d2,%d9
80008470:	00 90       	ret 

80008472 <Ifx_Fifo_clear>:
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008472:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008476:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
8000847a:	0d 00 40 03 	disable 
8000847e:	00 00       	nop 
{
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();

    if (fifo->shared.writerWaitx != 0)
80008480:	4c 43       	ld.w %d15,[%a4]12
80008482:	6e 06       	jz %d15,8000848e <Ifx_Fifo_clear+0x1c>
    {
        fifo->shared.writerWaitx = 0;
80008484:	82 0f       	mov %d15,0
80008486:	6c 43       	st.w [%a4]12,%d15
        fifo->eventWriter        = TRUE; /* Signal the writer */
80008488:	82 1f       	mov %d15,1
8000848a:	e9 4f 1d 00 	st.b [%a4]29,%d15
    }

    fifo->eventReader        = FALSE;
8000848e:	82 0f       	mov %d15,0
80008490:	e9 4f 1c 00 	st.b [%a4]28,%d15
    fifo->shared.readerWaitx = 0;
80008494:	82 0f       	mov %d15,0
80008496:	6c 42       	st.w [%a4]8,%d15
    fifo->shared.count       = 0;
80008498:	ac 42       	st.h [%a4]4,%d15
    fifo->shared.maxcount    = 0;
8000849a:	ac 48       	st.h [%a4]16,%d15
    fifo->startIndex         = fifo->endIndex;
8000849c:	8c 4b       	ld.h %d15,[%a4]22
8000849e:	ac 4a       	st.h [%a4]20,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800084a0:	76 23       	jz %d2,800084a6 <Ifx_Fifo_clear+0x34>
    {
        __enable();
800084a2:	0d 00 00 03 	enable 
800084a6:	00 90       	ret 

800084a8 <Ifx_Fifo_canWriteCount>:
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
800084a8:	8c 4d       	ld.h %d15,[%a4]26
    {                           /* Only complete elements can be written to the buffer */
        result = FALSE;
800084aa:	82 02       	mov %d2,0
    boolean result;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);


    if ((count < fifo->elementSize) || (count > fifo->size))
800084ac:	3f f4 75 00 	jlt %d4,%d15,80008596 <Ifx_Fifo_canWriteCount+0xee>
800084b0:	8c 4c       	ld.h %d15,[%a4]24
800084b2:	3f 4f 72 00 	jlt %d15,%d4,80008596 <Ifx_Fifo_canWriteCount+0xee>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800084b6:	4d c0 e2 0f 	mfcr %d0,$icr
    return reg.B.IE != 0;
800084ba:	37 00 e1 07 	extr.u %d0,%d0,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800084be:	0d 00 40 03 	disable 
800084c2:	00 00       	nop 
    else
    {
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
800084c4:	c9 43 18 00 	ld.h %d3,[%a4]24
800084c8:	8c 42       	ld.h %d15,[%a4]4
800084ca:	5a f3       	sub %d15,%d3,%d15
800084cc:	3f 4f 0d 00 	jlt %d15,%d4,800084e6 <Ifx_Fifo_canWriteCount+0x3e>
        {
            fifo->shared.writerWaitx = 0;
            fifo->eventWriter        = TRUE;
800084d0:	82 1f       	mov %d15,1
        boolean interruptState;
        interruptState = IfxCpu_disableInterrupts();

        if ((fifo->size - Ifx_Fifo_readCount(fifo)) >= count)
        {
            fifo->shared.writerWaitx = 0;
800084d2:	59 42 0c 00 	st.w [%a4]12,%d2
            fifo->eventWriter        = TRUE;
800084d6:	e9 4f 1d 00 	st.b [%a4]29,%d15
            IfxCpu_restoreInterrupts(interruptState);
            result                   = TRUE;
800084da:	82 12       	mov %d2,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800084dc:	df 00 5d 00 	jeq %d0,0,80008596 <Ifx_Fifo_canWriteCount+0xee>
    {
        __enable();
800084e0:	0d 00 00 03 	enable 
800084e4:	00 90       	ret 

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800084e6:	82 f2       	mov %d2,-1
800084e8:	06 f2       	sh %d2,-1
800084ea:	ba f6       	eq %d15,%d6,-1
800084ec:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800084f0:	82 f5       	mov %d5,-1
800084f2:	02 23       	mov %d3,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800084f4:	ee 16       	jnz %d15,80008520 <Ifx_Fifo_canWriteCount+0x78>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800084f6:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800084fa:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800084fe:	0d 00 40 03 	disable 
80008502:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
80008504:	85 f1 10 00 	ld.w %d1,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008508:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000850c:	02 15       	mov %d5,%d1
8000850e:	b7 0f 81 3f 	insert %d3,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008512:	76 23       	jz %d2,80008518 <Ifx_Fifo_canWriteCount+0x70>
    {
        __enable();
80008514:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
80008518:	0b 65 40 50 	addx %d5,%d5,%d6
8000851c:	0b 73 50 30 	addc %d3,%d3,%d7
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
80008520:	82 0f       	mov %d15,0
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
80008522:	c9 42 04 00 	ld.h %d2,[%a4]4
            result                   = TRUE;
        }
        else
        {
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
80008526:	e9 4f 1d 00 	st.b [%a4]29,%d15
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
8000852a:	8c 4c       	ld.h %d15,[%a4]24
8000852c:	5a f2       	sub %d15,%d2,%d15
8000852e:	42 f4       	add %d4,%d15
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80008530:	82 02       	mov %d2,0
80008532:	0b 42 a0 41 	max %d4,%d2,%d4
80008536:	59 44 0c 00 	st.w [%a4]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000853a:	76 03       	jz %d0,80008540 <Ifx_Fifo_canWriteCount+0x98>
    {
        __enable();
8000853c:	0d 00 00 03 	enable 

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
80008540:	82 f6       	mov %d6,-1
80008542:	06 f6       	sh %d6,-1
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008544:	39 4f 1d 00 	ld.bu %d15,[%a4]29
80008548:	6e 08       	jz %d15,80008558 <Ifx_Fifo_canWriteCount+0xb0>
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
            result = fifo->eventWriter == TRUE;
8000854a:	39 42 1d 00 	ld.bu %d2,[%a4]29
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
            {}
            /* After the timeout, the writer is not waiting for any space */
            fifo->shared.writerWaitx = 0;
8000854e:	82 0f       	mov %d15,0
80008550:	6c 43       	st.w [%a4]12,%d15
            result = fifo->eventWriter == TRUE;
80008552:	8b 12 00 22 	eq %d2,%d2,1
80008556:	00 90       	ret 
80008558:	ba f5       	eq %d15,%d5,-1
8000855a:	0b 36 00 f2 	and.eq %d15,%d6,%d3
8000855e:	ee f3       	jnz %d15,80008544 <Ifx_Fifo_canWriteCount+0x9c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008560:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008564:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008568:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
8000856c:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000856e:	85 f4 10 00 	ld.w %d4,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
80008572:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
80008576:	8f 04 40 41 	or %d4,%d4,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
8000857a:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000857e:	76 23       	jz %d2,80008584 <Ifx_Fifo_canWriteCount+0xdc>
    {
        __enable();
80008580:	0d 00 00 03 	enable 
            Ifx_TickTime DeadLine = IfxStm_getDeadLine(timeout);
            fifo->eventWriter        = FALSE;
            fifo->shared.writerWaitx = __max(0, count - (fifo->size - Ifx_Fifo_readCount(fifo)));
            IfxCpu_restoreInterrupts(interruptState);

            while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
80008584:	0b 3f 00 21 	eq %d2,%d15,%d3
80008588:	0b 54 30 22 	and.lt.u %d2,%d4,%d5
8000858c:	0b 3f 90 22 	or.lt %d2,%d15,%d3
80008590:	df 02 da ff 	jne %d2,0,80008544 <Ifx_Fifo_canWriteCount+0x9c>
80008594:	3c db       	j 8000854a <Ifx_Fifo_canWriteCount+0xa2>
            result = fifo->eventWriter == TRUE;
        }
    }

    return result;
}
80008596:	00 90       	ret 

80008598 <Ifx_Fifo_write>:
}


#include <stdio.h>
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
80008598:	20 08       	sub.a %sp,8
8000859a:	40 4f       	mov.aa %a15,%a4
8000859c:	02 49       	mov %d9,%d4
    boolean            Stop = FALSE;

    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, fifo != NULL_PTR);
    IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, data != NULL_PTR);

    if (count != 0)
8000859e:	df 04 be 00 	jeq %d4,0,8000871a <Ifx_Fifo_write+0x182>
    {
        buffer.base   = fifo->buffer;
800085a2:	4c 40       	ld.w %d15,[%a4]0

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800085a4:	82 f2       	mov %d2,-1
800085a6:	78 00       	st.w [%sp]0,%d15
        buffer.length = (uint16)fifo->size;     /* size always fit into 16 bit */
800085a8:	8c 4c       	ld.h %d15,[%a4]24
800085aa:	06 f2       	sh %d2,-1
800085ac:	ac a3       	st.h [%sp]6,%d15
        buffer.index  = (uint16)fifo->endIndex; /* startIndex always fit into size */
800085ae:	8c 4b       	ld.h %d15,[%a4]22
    {
        deadLine = TIME_INFINITE;
800085b0:	82 fa       	mov %d10,-1
800085b2:	ac a2       	st.h [%sp]4,%d15

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800085b4:	ba f6       	eq %d15,%d6,-1
800085b6:	0b 72 00 f2 	and.eq %d15,%d2,%d7
    {
        deadLine = TIME_INFINITE;
800085ba:	02 28       	mov %d8,%d2

IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout)
{
    sint64 deadLine;

    if (timeout == TIME_INFINITE)
800085bc:	ee 16       	jnz %d15,800085e8 <Ifx_Fifo_write+0x50>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800085be:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800085c2:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800085c6:	0d 00 40 03 	disable 
800085ca:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800085cc:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800085d0:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800085d4:	02 3a       	mov %d10,%d3
800085d6:	b7 0f 81 8f 	insert %d8,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800085da:	76 23       	jz %d2,800085e0 <Ifx_Fifo_write+0x48>
    {
        __enable();
800085dc:	0d 00 00 03 	enable 
    {
        deadLine = TIME_INFINITE;
    }
    else
    {
        deadLine = IfxStm_now() + timeout;
800085e0:	0b 6a 40 a0 	addx %d10,%d10,%d6
800085e4:	0b 78 50 80 	addc %d8,%d8,%d7

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800085e8:	82 fc       	mov %d12,-1
Ifx_SizeT Ifx_Fifo_write(Ifx_Fifo *fifo, const void *data, Ifx_SizeT count, Ifx_TickTime timeout)
{
    Ifx_TickTime       DeadLine;
    Ifx_SizeT          blockSize;
    Ifx_CircularBuffer buffer;
    boolean            Stop = FALSE;
800085ea:	82 0d       	mov %d13,0
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
    fifo->eventWriter        = FALSE;
800085ec:	82 0e       	mov %d14,0
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
800085ee:	a0 0c       	mov.a %a12,0
800085f0:	06 fc       	sh %d12,-1
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800085f2:	4d c0 e2 5f 	mfcr %d5,$icr
    return reg.B.IE != 0;
800085f6:	37 05 e1 57 	extr.u %d5,%d5,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800085fa:	0d 00 40 03 	disable 
800085fe:	00 00       	nop 
{
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
80008600:	88 c4       	ld.h %d4,[%a15]24
80008602:	88 2b       	ld.h %d11,[%a15]4
80008604:	0b b4 80 b0 	sub %d11,%d4,%d11
/** Return minimum of two integers
 */
IFX_INLINE sint32 Ifx__min(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("min %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
80008608:	0b b9 80 b1 	min %d11,%d9,%d11
    blockSize               -= blockSize % fifo->elementSize;
8000860c:	8c fd       	ld.h %d15,[%a15]26
8000860e:	37 0b 50 20 	extr %d2,%d11,0,16
    fifo->eventWriter        = FALSE;
80008612:	e9 fe 1d 00 	st.b [%a15]29,%d14
    Ifx_SizeT blockSize;
    boolean   interruptState;

    interruptState           = IfxCpu_disableInterrupts();
    blockSize                = __min(count, fifo->size - Ifx_Fifo_readCount(fifo));
    blockSize               -= blockSize % fifo->elementSize;
80008616:	4b f2 01 22 	div %e2,%d2,%d15
8000861a:	a2 3b       	sub %d11,%d3
8000861c:	37 0b 70 b0 	extr.u %d11,%d11,0,16
80008620:	37 0b 50 f0 	extr %d15,%d11,0,16
    fifo->eventWriter        = FALSE;
    fifo->shared.writerWaitx = __min(count - blockSize, fifo->size);
80008624:	0b f9 80 20 	sub %d2,%d9,%d15
80008628:	0b 42 80 41 	min %d4,%d2,%d4
8000862c:	68 34       	st.w [%a15]12,%d4
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
8000862e:	76 53       	jz %d5,80008634 <Ifx_Fifo_write+0x9c>
    {
        __enable();
80008630:	0d 00 00 03 	enable 

        do
        {
            blockSize = Ifx_Fifo_beginWrite(fifo, count);

            if (blockSize != 0)
80008634:	6e 26       	jz %d15,80008680 <Ifx_Fifo_write+0xe8>
            {

                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
80008636:	40 a4       	mov.aa %a4,%sp
80008638:	02 f4       	mov %d4,%d15
8000863a:	6d ff 6d fd 	call 80008114 <Ifx_CircularBuffer_write8>
8000863e:	40 25       	mov.aa %a5,%a2
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008640:	4d c0 e2 3f 	mfcr %d3,$icr
    return reg.B.IE != 0;
80008644:	37 03 e1 37 	extr.u %d3,%d3,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008648:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
8000864c:	00 00       	nop 
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
8000864e:	88 22       	ld.h %d2,[%a15]4
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
80008650:	88 84       	ld.h %d4,[%a15]16
    boolean interruptState;

    /* Set the shared values */
    interruptState        = IfxCpu_disableInterrupts();

    fifo->shared.count   += blockSize;
80008652:	42 b2       	add %d2,%d11
80008654:	37 02 50 20 	extr %d2,%d2,0,16
80008658:	a8 22       	st.h [%a15]4,%d2
/** Return maximum of two integers
 */
IFX_INLINE sint32 Ifx__max(sint32 a, sint32 b)
{
    sint32 res;
    __asm__ volatile ("max %0, %1, %2": "=d" (res) : "d" (a), "d" (b));
8000865a:	0b 24 a0 21 	max %d2,%d4,%d2
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */
8000865e:	a8 82       	st.h [%a15]16,%d2

    if (fifo->shared.readerWaitx != 0)
80008660:	48 22       	ld.w %d2,[%a15]8
80008662:	76 29       	jz %d2,80008674 <Ifx_Fifo_write+0xdc>
    {
        fifo->shared.readerWaitx -= blockSize;
80008664:	5a f2       	sub %d15,%d2,%d15

        if (fifo->shared.readerWaitx <= 0)
80008666:	8e f3       	jlez %d15,8000866c <Ifx_Fifo_write+0xd4>
    fifo->shared.count   += blockSize;
    fifo->shared.maxcount = __max(fifo->shared.maxcount, fifo->shared.count);   /* Update maximum value */

    if (fifo->shared.readerWaitx != 0)
    {
        fifo->shared.readerWaitx -= blockSize;
80008668:	68 2f       	st.w [%a15]8,%d15
8000866a:	3c 05       	j 80008674 <Ifx_Fifo_write+0xdc>

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
8000866c:	82 1f       	mov %d15,1
    {
        fifo->shared.readerWaitx -= blockSize;

        if (fifo->shared.readerWaitx <= 0)
        {
            fifo->shared.readerWaitx = 0;
8000866e:	e8 2c       	st.a [%a15]8,%a12
            fifo->eventReader        = TRUE; /* Signal the reader - a re-scheduling may occur at this point! */
80008670:	e9 ff 1c 00 	st.b [%a15]28,%d15
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
80008674:	76 33       	jz %d3,8000867a <Ifx_Fifo_write+0xe2>
    {
        __enable();
80008676:	0d 00 00 03 	enable 
        }
    }

    IfxCpu_restoreInterrupts(interruptState);

    return count - blockSize;
8000867a:	a2 b9       	sub %d9,%d11
8000867c:	37 09 50 90 	extr %d9,%d9,0,16
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
80008680:	76 d4       	jz %d13,80008688 <Ifx_Fifo_write+0xf0>
            {
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
80008682:	82 0f       	mov %d15,0
80008684:	68 3f       	st.w [%a15]12,%d15
                break;
80008686:	3c 48       	j 80008716 <Ifx_Fifo_write+0x17e>
80008688:	ba fa       	eq %d15,%d10,-1
8000868a:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
8000868e:	ee 1b       	jnz %d15,800086c4 <Ifx_Fifo_write+0x12c>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
80008690:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
80008694:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
80008698:	0d 00 40 03 	disable 

/** Insert NOP instruction
 */
IFX_INLINE void Ifx__nop(void)
{
    __asm__ volatile ("nop" : : : "memory");
8000869c:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
8000869e:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800086a2:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800086a6:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800086aa:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800086ae:	76 23       	jz %d2,800086b4 <Ifx_Fifo_write+0x11c>
    {
        __enable();
800086b0:	0d 00 00 03 	enable 
                /* write element to the buffer */
                data  = Ifx_CircularBuffer_write8(&buffer, data, blockSize);
                count = Ifx_Fifo_endWrite(fifo, count, blockSize);
            }

            if ((Stop != FALSE) || (IfxStm_isDeadLine(DeadLine) != FALSE))
800086b4:	0b 8f 00 21 	eq %d2,%d15,%d8
800086b8:	0b a3 50 22 	and.ge.u %d2,%d3,%d10
800086bc:	0b f8 90 22 	or.lt %d2,%d8,%d15
800086c0:	df 02 e1 ff 	jne %d2,0,80008682 <Ifx_Fifo_write+0xea>
                /*When exiting, the writer is not waiting for any space */
                fifo->shared.writerWaitx = 0;
                break;
            }

            if (count != 0)
800086c4:	df 09 29 00 	jeq %d9,0,80008716 <Ifx_Fifo_write+0x17e>
            {
                while ((fifo->eventWriter == FALSE) && (IfxStm_isDeadLine(DeadLine) == FALSE))
800086c8:	39 ff 1d 00 	ld.bu %d15,[%a15]29
800086cc:	ee 1f       	jnz %d15,8000870a <Ifx_Fifo_write+0x172>

IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine)
{
    boolean result;

    if (deadLine == TIME_INFINITE)
800086ce:	ba fa       	eq %d15,%d10,-1
800086d0:	0b 8c 00 f2 	and.eq %d15,%d12,%d8
800086d4:	ee fa       	jnz %d15,800086c8 <Ifx_Fifo_write+0x130>
/******************************************************************************/

IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
{
    Ifx_CPU_ICR reg;
    reg.U = __mfcr(CPU_ICR);
800086d6:	4d c0 e2 2f 	mfcr %d2,$icr
    return reg.B.IE != 0;
800086da:	37 02 e1 27 	extr.u %d2,%d2,15,1

IFX_INLINE boolean IfxCpu_disableInterrupts(void)
{
    boolean enabled;
    enabled = IfxCpu_areInterruptsEnabled();
    __disable();
800086de:	0d 00 40 03 	disable 
800086e2:	00 00       	nop 

IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
{
    uint64 result;

    result  = stm->TIM0.U;
800086e4:	85 f3 10 00 	ld.w %d3,f0000010 <_SMALL_DATA4_+0x3fff8010>
    result |= ((uint64)stm->CAP.U) << 32;
800086e8:	85 ff 2c 00 	ld.w %d15,f000002c <_SMALL_DATA4_+0x3fff802c>
800086ec:	8f 03 40 31 	or %d3,%d3,0
{
    sint64  stmNow;
    boolean interruptState;

    interruptState = IfxCpu_disableInterrupts();
    stmNow         = (Ifx_TickTime)IfxStm_get(IFXSTM_DEFAULT_TIMER) & TIME_INFINITE;
800086f0:	b7 0f 81 ff 	insert %d15,%d15,0,31,1
}


IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
{
    if (enabled != FALSE)
800086f4:	76 23       	jz %d2,800086fa <Ifx_Fifo_write+0x162>
    {
        __enable();
800086f6:	0d 00 00 03 	enable 
800086fa:	0b 8f 00 21 	eq %d2,%d15,%d8
800086fe:	0b a3 30 22 	and.lt.u %d2,%d3,%d10
80008702:	0b 8f 90 22 	or.lt %d2,%d15,%d8
80008706:	df 02 e1 ff 	jne %d2,0,800086c8 <Ifx_Fifo_write+0x130>
                {}

                Stop = fifo->eventWriter == FALSE;  /* If the function timeout, the maximum number of characters are written before returning */
8000870a:	39 fd 1d 00 	ld.bu %d13,[%a15]29
8000870e:	8b 0d 00 d2 	eq %d13,%d13,0
80008712:	1d ff 70 ff 	j 800085f2 <Ifx_Fifo_write+0x5a>
            }
        } while (count != 0);

        fifo->endIndex = buffer.index;
80008716:	8c a2       	ld.h %d15,[%sp]4
80008718:	a8 bf       	st.h [%a15]22,%d15
    }

    return count;
}
8000871a:	02 92       	mov %d2,%d9
8000871c:	00 90       	ret 

8000871e <osEE_tc_core0_start>:
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
8000871e:	91 30 00 2f 	movh.a %a2,61443
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008722:	91 30 00 ff 	movh.a %a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008726:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
8000872a:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
8000872e:	54 25       	ld.w %d5,[%a2]
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008730:	48 08       	ld.w %d8,[%a15]0
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008732:	37 05 6e 51 	extr.u %d5,%d5,2,14
  osEE_tc_get_safety_wdt_pw(void)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
80008736:	37 08 6e 81 	extr.u %d8,%d8,2,14
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
8000873a:	91 20 00 f7 	movh.a %a15,28674
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
8000873e:	8f f5 83 51 	xor %d5,%d5,63
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTS.con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008742:	8f f8 83 81 	xor %d8,%d8,63
80008746:	d9 ff 40 89 	lea %a15,[%a15]-27136 <70019600 <__USTACK0>>
8000874a:	40 fa       	mov.aa %sp,%a15
  return sp;
}

/** The dsync assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_dsync(void) {
  __asm__ volatile ("dsync" : : : "memory");
8000874c:	0d 00 80 04 	dsync 
  osEE_tc_dsync();

/* Set the PSW to its reset value in case of a warm start, set PSW.IS.
   Global Stack is needed since ERIKA's use the stack to save context for the
   current TASK */
  osEE_tc_set_csfr(OSEE_CSFR_PSW, OSEE_TC_START_PSW);
80008750:	3b 00 b8 f0 	mov %d15,2944
80008754:	cd 4f e0 0f 	mtcr $psw,%d15
80008758:	0d 00 c0 04 	isync 

/* Set the PCXS and PCXO to its reset value in case of a warm start */
  pcxi  = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
8000875c:	4d 00 e0 ff 	mfcr %d15,$pcxi
  pcxi &= 0xFFF00000U;
80008760:	b7 0f 14 f0 	insert %d15,%d15,0,0,20
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, pcxi);
80008764:	cd 0f e0 0f 	mtcr $pcxi,%d15
80008768:	0d 00 c0 04 	isync 
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
8000876c:	4d c0 e1 ff 	mfcr %d15,$core_id
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008770:	82 12       	mov %d2,1
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
80008772:	37 0f 48 f0 	extr %d15,%d15,0,8
   PCBYP is the only not reserved bit in PCON0. */
  OsEE_reg const pcon0 = (enable)? 0x0U: 0x2U;
  if (enable) {
    /* Step 1: Initiate invalidation of current pcache contents if any.
       (i.e. PCON1[0:0](.PCINV) = 1 Program Cache Invalidate */
    osEE_tc_set_csfr(OSEE_CSFR_PCON1, 0x1U);
80008776:	cd 42 20 09 	mtcr $pcon1,%d2
8000877a:	0d 00 c0 04 	isync 
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
8000877e:	53 cf 20 f0 	mul %d15,%d15,12
80008782:	10 22       	addsc.a %a2,%a2,%d15,0
80008784:	54 22       	ld.w %d2,[%a2]
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
80008786:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008788:	37 02 6e 21 	extr.u %d2,%d2,2,14
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
8000878c:	d9 2f 00 46 	lea %a15,[%a2]24832
80008790:	11 3f 00 ff 	addih.a %a15,%a15,61443

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008794:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008796:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000879a:	2e 16       	jz.t %d15,1,800087a6 <osEE_tc_core0_start+0x88>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
8000879c:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800087a0:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
800087a4:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
800087a6:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
800087aa:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800087ae:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
800087b0:	4c f0       	ld.w %d15,[%a15]0
800087b2:	6f 0f ff ff 	jnz.t %d15,0,800087b0 <osEE_tc_core0_start+0x92>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* PCACHE enable steps */
/* Step 2: Set PCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_PCON0, pcon0);
800087b6:	82 0f       	mov %d15,0
800087b8:	cd cf 20 09 	mtcr $pcon0,%d15
800087bc:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
800087c0:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800087c2:	2e 16       	jz.t %d15,1,800087ce <osEE_tc_core0_start+0xb0>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800087c4:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800087c8:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
800087cc:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
800087ce:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
800087d2:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800087d6:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
800087d8:	4c f0       	ld.w %d15,[%a15]0
800087da:	6f 0f ff 7f 	jz.t %d15,0,800087d8 <osEE_tc_core0_start+0xba>
800087de:	4d c0 e1 ff 	mfcr %d15,$core_id
  OsEE_core_id  const core_id = osEE_get_curr_core_id();
#if (defined(OSEE_CORE_ID_VALID_MASK)) && (OSEE_CORE_ID_VALID_MASK & 0x40U)
  OsEE_reg      const core_index = (core_id != OS_CORE_ID_6)?
    (OsEE_reg)core_id: 5U;
#else
  OsEE_reg      const core_index = (OsEE_reg)core_id;
800087e2:	37 0f 48 f0 	extr %d15,%d15,0,8
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
800087e6:	91 30 00 ff 	movh.a %a15,61443
800087ea:	53 cf 20 f0 	mul %d15,%d15,12
800087ee:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800087f2:	10 ff       	addsc.a %a15,%a15,%d15,0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
800087f4:	60 f2       	mov.a %a2,%d15
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
800087f6:	48 02       	ld.w %d2,[%a15]0
 osEE_tc_clear_cpu_endinit(OsEE_reg core_index, uint16_t pw)
{
  OsEE_tc_SCU_WDTCPU_CON0 cpu_wdt_con0;
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];
800087f8:	d9 2f 00 46 	lea %a15,[%a2]24832
800087fc:	11 3f 00 ff 	addih.a %a15,%a15,61443
  osEE_tc_get_cpu_wdt_pw(OsEE_reg core_index)
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
80008800:	37 02 6e 21 	extr.u %d2,%d2,2,14
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008804:	4c f0       	ld.w %d15,[%a15]0
{
  /* Read Password from CON0 register
   * !!! NOTE: !!! when read bottom six bit of password are inverted so we have
   * to toggle them before returning password */
  uint16_t pw = OSEE_TC_SCU_WDTCPU[core_index].con0.bits.pw;
  uint16_t pw_toggled = pw ^ ((uint16_t)0x003FU);
80008806:	8f f2 83 21 	xor %d2,%d2,63

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000880a:	2e 16       	jz.t %d15,1,80008816 <osEE_tc_core0_start+0xf8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
8000880c:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008810:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008814:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008816:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
8000881a:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
8000881e:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008820:	4c f0       	ld.w %d15,[%a15]0
80008822:	6f 0f ff ff 	jnz.t %d15,0,80008820 <osEE_tc_core0_start+0x102>
  cpu_wdt_pw = osEE_tc_get_cpu_wdt_pw(core_index);

/* DCACHE enable steps */
/* Step 2: Set DCBYP to 0 if cache is enabled */
  osEE_tc_clear_cpu_endinit(core_index, cpu_wdt_pw);
  osEE_tc_set_csfr(OSEE_CSFR_DCON0, dcon0);
80008826:	82 0f       	mov %d15,0
80008828:	cd 0f 04 09 	mtcr $dcon0,%d15
8000882c:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
80008830:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008832:	2e 16       	jz.t %d15,1,8000883e <osEE_tc_core0_start+0x120>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008834:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008838:	37 2f 0e f1 	insert %d15,%d15,%d2,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
8000883c:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
8000883e:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
80008842:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
80008846:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
80008848:	4c f0       	ld.w %d15,[%a15]0
8000884a:	6f 0f ff 7f 	jz.t %d15,0,80008848 <osEE_tc_core0_start+0x12a>
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
8000884e:	91 30 00 ff 	movh.a %a15,61443
80008852:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008856:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008858:	2e 16       	jz.t %d15,1,80008864 <osEE_tc_core0_start+0x146>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
8000885a:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
8000885e:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008862:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008864:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008868:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
8000886c:	91 30 00 ff 	movh.a %a15,61443
80008870:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008874:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008876:	4c f0       	ld.w %d15,[%a15]0
80008878:	91 30 00 2f 	movh.a %a2,61443
8000887c:	d9 22 00 46 	lea %a2,[%a2]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008880:	6f 0f fb ff 	jnz.t %d15,0,80008876 <osEE_tc_core0_start+0x158>

/* Clear the ENDINIT bit in the WDT_CON0 register */
  osEE_tc_clear_cpu_endinit(0U, cpu_wdt_pw);

/* Load Base Address of Trap Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BTV, (OsEE_reg)__TRAPTAB0);
80008884:	7b 00 00 f8 	movh %d15,32768
80008888:	1b 0f 20 f1 	addi %d15,%d15,4608
8000888c:	cd 4f e2 0f 	mtcr $btv,%d15
80008890:	0d 00 c0 04 	isync 

/* Load Base Address of Interrupt Vector Table. */
  osEE_tc_set_csfr(OSEE_CSFR_BIV, (OsEE_reg)__INTTAB0);
80008894:	7b 00 00 f8 	movh %d15,32768
80008898:	1b 0f 00 f2 	addi %d15,%d15,8192
8000889c:	cd 0f e2 0f 	mtcr $biv,%d15
800088a0:	0d 00 c0 04 	isync 

/* Load Interrupt Stack Pointer. (Not Used) */
  osEE_tc_set_csfr(OSEE_CSFR_ISP, (OsEE_reg)__ISTACK0);
800088a4:	7b 20 00 f7 	movh %d15,28674
800088a8:	1b 0f b0 f9 	addi %d15,%d15,-25856
800088ac:	cd 8f e2 0f 	mtcr $isp,%d15
800088b0:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
800088b4:	4c 20       	ld.w %d15,[%a2]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
800088b6:	2e 16       	jz.t %d15,1,800088c2 <osEE_tc_core0_start+0x1a4>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
800088b8:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
800088bc:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
800088c0:	6c 20       	st.w [%a2]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
800088c2:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
800088c6:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800088ca:	91 30 00 ff 	movh.a %a15,61443
800088ce:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800088d2:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
800088d4:	4c f0       	ld.w %d15,[%a15]0
800088d6:	6f 0f ff 7f 	jz.t %d15,0,800088d4 <osEE_tc_core0_start+0x1b6>

/* Set the ENDINIT bit in the WDT_CON0 register back */
  osEE_tc_set_cpu_endinit(0U, cpu_wdt_pw);

/* Initialize SDA base pointers */
  osEE_tc_setareg(a0, _SMALL_DATA_);
800088da:	91 10 00 f7 	movh.a %a15,28673
800088de:	d9 ff 00 08 	lea %a15,[%a15]-32768 <70008000 <_SMALL_DATA_>>
800088e2:	40 f0       	mov.aa %a0,%a15
  osEE_tc_setareg(a1, _SMALL_DATA2_);
800088e4:	91 10 00 f8 	movh.a %a15,32769
800088e8:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
800088ec:	40 f1       	mov.aa %a1,%a15

/* Initialization of A8 and A9 */
  osEE_tc_setareg(a8, _SMALL_DATA3_);
800088ee:	91 10 00 f8 	movh.a %a15,32769
800088f2:	d9 ff 00 08 	lea %a15,[%a15]-32768 <80008000 <_SMALL_DATA2_>>
800088f6:	40 f8       	mov.aa %a8,%a15
#if (defined(OSEE_SINGLECORE)) || (defined(OSEE_TC_DISABLE_A9_OPTIMIZATION))
  osEE_tc_setareg(a9, _SMALL_DATA4_);
800088f8:	91 10 00 fb 	movh.a %a15,45057
800088fc:	d9 ff 00 08 	lea %a15,[%a15]-32768 <b0008000 <_SMALL_DATA4_>>
80008900:	40 f9       	mov.aa %a9,%a15
/* Nr of CSAs in area. Best solution, even though is a MISRA deviation, since
   pointers subtraction handles OsEE_csa size and p_csa_end/p_csa_begin
   are the extremes of an array constructed in linker script
   (condition under where C language specification allows pointer subtraction).
 */
  size_t const no_of_csas = (size_t)(p_csa_end - p_csa_begin);
80008902:	7b 20 00 f7 	movh %d15,28674
80008906:	7b 20 00 47 	movh %d4,28674
8000890a:	1b 0f c0 69 	addi %d6,%d15,-25600
8000890e:	1b 04 c0 4b 	addi %d4,%d4,-17408
80008912:	a2 64       	sub %d4,%d6
80008914:	86 a4       	sha %d4,-6

/* Previous Context Pointer (CSA Link Word) */
  OsEE_reg pcxi_val = 0U;
80008916:	82 02       	mov %d2,0
/*
  IMPORTANT:
  I initialize the Free Context List in reverse order.
  So I will end with a list that will grow toward bigger addresses.
 */
  for (i = no_of_csas; i > 0U; --i) {
80008918:	df 04 16 00 	jeq %d4,0,80008944 <osEE_tc_core0_start+0x226>
/* CSA PCXI segment */
    OsEE_reg   pcxi_s;
/* CSA PCXI offset */
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];
8000891c:	9a f4       	add %d15,%d4,-1
8000891e:	06 6f       	sh %d15,6
80008920:	12 63       	add %d3,%d15,%d6

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008922:	60 3f       	mov.a %a15,%d3
80008924:	82 00       	mov %d0,0
80008926:	68 00       	st.w [%a15]0,%d0
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008928:	60 4f       	mov.a %a15,%d4
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
8000892a:	8f 43 1e 20 	sh %d2,%d3,-28
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
8000892e:	37 03 70 73 	extr.u %d7,%d3,6,16
80008932:	1b 0f fc ff 	addi %d15,%d15,-64

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008936:	b0 ff       	add.a %a15,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008938:	37 27 10 28 	insert %d2,%d7,%d2,16,16
8000893c:	42 6f       	add %d15,%d6

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
8000893e:	82 53       	mov %d3,5
80008940:	fd f0 11 01 	loop %a15,80008b62 <osEE_tc_core0_start+0x444>
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
    }
  }
/* Initialize the HEAD of Free Context List */
  osEE_tc_set_csfr(OSEE_CSFR_FCX, pcxi_val);
80008944:	cd 82 e3 0f 	mtcr $fcx,%d2
80008948:	0d 00 c0 04 	isync 
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
8000894c:	91 30 00 ff 	movh.a %a15,61443
80008950:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008954:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
80008956:	2e 16       	jz.t %d15,1,80008962 <osEE_tc_core0_start+0x244>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
80008958:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
8000895c:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008960:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 0U;
80008962:	8f 1f c0 f1 	andn %d15,%d15,1
  cpu_wdt_con0.bits.lck     = 1U;
80008966:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
8000896a:	91 30 00 ff 	movh.a %a15,61443
8000896e:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008972:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (p_cpu_wdt->con0.bits.endinit == 1U) {
80008974:	40 f2       	mov.aa %a2,%a15
80008976:	4c 20       	ld.w %d15,[%a2]0
80008978:	91 30 00 ff 	movh.a %a15,61443
8000897c:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
80008980:	6f 0f fb ff 	jnz.t %d15,0,80008976 <osEE_tc_core0_start+0x258>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_cpu_wdt(OsEE_reg core_index, uint16_t pw)
{
  osEE_tc_clear_cpu_endinit(core_index, pw);
/* Set "Disable Request bit" on CPU_WDT[core_index].CON1 */
  OSEE_TC_SCU_WDTCPU[core_index].con1.bits.dr = 1U;
80008984:	4c f1       	ld.w %d15,[%a15]4
80008986:	96 08       	or %d15,8
80008988:	68 1f       	st.w [%a15]4,%d15
/* Prepare a "reference" to the CPU watchdog */
  OsEE_tc_SCU_WDTCPU volatile * const
    p_cpu_wdt = &OSEE_TC_SCU_WDTCPU[core_index];

/* Read Config_0 register */
  cpu_wdt_con0.reg = p_cpu_wdt->con0.reg;
8000898a:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (cpu_wdt_con0.bits.lck != 0U) {
8000898c:	2e 16       	jz.t %d15,1,80008998 <osEE_tc_core0_start+0x27a>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    cpu_wdt_con0.bits.endinit = 1U;
    cpu_wdt_con0.bits.lck     = 0U;
8000898e:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    cpu_wdt_con0.bits.pw      = pw;
80008992:	37 5f 0e f1 	insert %d15,%d15,%d5,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    p_cpu_wdt->con0.reg = cpu_wdt_con0.reg;
80008996:	68 0f       	st.w [%a15]0,%d15
  }

/* Set ENDINT and set LCK bit in Config_0 register */
  cpu_wdt_con0.bits.endinit = 1U;
80008998:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  cpu_wdt_con0.bits.lck     = 1U;
8000899c:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  p_cpu_wdt->con0.reg       = cpu_wdt_con0.reg;
800089a0:	91 30 00 ff 	movh.a %a15,61443
800089a4:	d9 ff 00 46 	lea %a15,[%a15]24832 <f0036100 <_SMALL_DATA4_+0x4002e100>>
800089a8:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been set */
  while (p_cpu_wdt->con0.bits.endinit == 0U) {
800089aa:	4c f0       	ld.w %d15,[%a15]0
800089ac:	6f 0f ff 7f 	jz.t %d15,0,800089aa <osEE_tc_core0_start+0x28c>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
800089b0:	91 30 00 ff 	movh.a %a15,61443
800089b4:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800089b8:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800089ba:	2e 16       	jz.t %d15,1,800089c6 <osEE_tc_core0_start+0x2a8>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800089bc:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800089c0:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800089c4:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
800089c6:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
800089ca:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
800089ce:	91 30 00 ff 	movh.a %a15,61443
800089d2:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800089d6:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
800089d8:	40 f2       	mov.aa %a2,%a15
800089da:	4c 20       	ld.w %d15,[%a2]0
800089dc:	91 30 00 ff 	movh.a %a15,61443
800089e0:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
800089e4:	6f 0f fb ff 	jnz.t %d15,0,800089da <osEE_tc_core0_start+0x2bc>
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_disable_safety_wdt(uint16_t pw)
{
  osEE_tc_clear_safety_endinit(pw);
/* Set "Disable Request bit" on CPU_WDTS.CON1 */
  OSEE_TC_SCU_WDTS.con1.bits.dr = 1U;
800089e8:	4c f1       	ld.w %d15,[%a15]4
800089ea:	96 08       	or %d15,8
800089ec:	68 1f       	st.w [%a15]4,%d15
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
800089ee:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
800089f0:	2e 16       	jz.t %d15,1,800089fc <osEE_tc_core0_start+0x2de>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
800089f2:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
800089f6:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
800089fa:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
800089fc:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
80008a00:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80008a04:	91 30 00 ff 	movh.a %a15,61443
80008a08:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008a0c:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
80008a0e:	4c f0       	ld.w %d15,[%a15]0
80008a10:	6f 0f ff 7f 	jz.t %d15,0,80008a0e <osEE_tc_core0_start+0x2f0>
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
80008a14:	91 00 00 48 	movh.a %a4,32768
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
        *block_to_clear.p_ull = 0ULL;
80008a18:	d2 02       	mov %e2,0
static void osEE_tc_apply_clear_table
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
80008a1a:	d9 44 fc f0 	lea %a4,[%a4]4092 <80000ffc <__clear_table>>
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
        *block_to_clear.p_ui = 0x0U;
80008a1e:	82 07       	mov %d7,0
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
        *block_to_clear.p_us = 0x0U;
80008a20:	82 06       	mov %d6,0
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
        *block_to_clear.p_uc = 0x0U;
80008a22:	82 05       	mov %d5,0

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
80008a24:	4c 41       	ld.w %d15,[%a4]4
  while (p_clear_table != NULL) {
    OsEE_tc_init_table_entry_ptr  block_to_clear;
    MemSize                       table_entry_length;

/* Get pointer to the block to be cleared */
    block_to_clear = p_clear_table->block_to_clear;
80008a26:	d4 43       	ld.a %a3,[%a4]

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_clear_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
80008a28:	9e f6       	jeq %d15,-1,80008a54 <osEE_tc_core0_start+0x336>
/* Prepare to clear as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
80008a2a:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80008a2e:	76 49       	jz %d4,80008a40 <osEE_tc_core0_start+0x322>
        *block_to_clear.p_ull = 0ULL;
80008a30:	60 4f       	mov.a %a15,%d4
80008a32:	40 32       	mov.aa %a2,%a3
80008a34:	b0 ff       	add.a %a15,-1
80008a36:	89 22 48 01 	st.d [%a2+]8,%e2
80008a3a:	fc fe       	loop %a15,80008a36 <osEE_tc_core0_start+0x318>
80008a3c:	01 34 03 36 	addsc.a %a3,%a3,%d4,3
        ++block_to_clear.p_ull;
        --ull_cnt;
      }

/*  Clear the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
80008a40:	2e 22       	jz.t %d15,2,80008a44 <osEE_tc_core0_start+0x326>
        *block_to_clear.p_ui = 0x0U;
80008a42:	64 37       	st.w [%a3+],%d7
        ++block_to_clear.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
80008a44:	2e 12       	jz.t %d15,1,80008a48 <osEE_tc_core0_start+0x32a>
        *block_to_clear.p_us = 0x0U;
80008a46:	a4 36       	st.h [%a3+],%d6
        ++block_to_clear.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
80008a48:	2e 02       	jz.t %d15,0,80008a4c <osEE_tc_core0_start+0x32e>
        *block_to_clear.p_uc = 0x0U;
80008a4a:	34 35       	st.b [%a3],%d5
      }

/* Prepare the table pointer for the next iteration */
      ++p_clear_table;
80008a4c:	d9 44 08 00 	lea %a4,[%a4]8 <80000008 <BootModeHeader0+0x8>>
(
    const OsEE_tc_clear_table * p_clear_table_param
)
{
  const OsEE_tc_clear_table * p_clear_table = p_clear_table_param;
  while (p_clear_table != NULL) {
80008a50:	bd 04 ea ff 	jnz.a %a4,80008a24 <osEE_tc_core0_start+0x306>
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);

      while (ull_cnt != 0U) {
80008a54:	91 00 00 68 	movh.a %a6,32768
80008a58:	d9 66 24 11 	lea %a6,[%a6]4196 <80001064 <__copy_table>>

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
80008a5c:	4c 62       	ld.w %d15,[%a6]8
    OsEE_tc_init_table_entry_ptr  block_src;
    OsEE_tc_init_table_entry_ptr  block_dest;
    MemSize                       table_entry_length;

/* Get pointer to the data source block */
    block_src = p_copy_table->block_src;
80008a5e:	d4 65       	ld.a %a5,[%a6]

/* Get pointer to the data destination block */
    block_dest = p_copy_table->block_dest;
80008a60:	99 64 04 00 	ld.a %a4,[%a6]4 <80000004 <BootModeHeader0+0x4>>

/* Get the lenght of the table entry (in bytes) */
    table_entry_length = p_copy_table->table_entry_length;
    
/* We have finished when length == -1 */
    if (table_entry_length != 0xFFFFFFFFU) {
80008a64:	df ff 21 00 	jeq %d15,-1,80008aa6 <osEE_tc_core0_start+0x388>
/* Prepare to copy as much unsigned long long as you can... */
      MemSize ull_cnt = table_entry_length / sizeof(uint64_t);
80008a68:	8f df 1f 40 	sh %d4,%d15,-3

      while (ull_cnt != 0U) {
80008a6c:	76 4f       	jz %d4,80008a8a <osEE_tc_core0_start+0x36c>
80008a6e:	60 4f       	mov.a %a15,%d4
80008a70:	40 43       	mov.aa %a3,%a4
80008a72:	40 52       	mov.aa %a2,%a5
80008a74:	b0 ff       	add.a %a15,-1
        *block_dest.p_ull = *block_src.p_ull;
80008a76:	09 22 48 01 	ld.d %e2,[%a2+]8
80008a7a:	89 32 48 01 	st.d [%a3+]8,%e2
80008a7e:	fc fc       	loop %a15,80008a76 <osEE_tc_core0_start+0x358>
80008a80:	06 34       	sh %d4,3
80008a82:	01 54 00 56 	addsc.a %a5,%a5,%d4,0
80008a86:	01 44 00 46 	addsc.a %a4,%a4,%d4,0
        ++block_dest.p_ull;
        --ull_cnt;
      }

/* Copy the remaning bytes */
      if (((table_entry_length) & 0x4U) != 0U) {
80008a8a:	2e 23       	jz.t %d15,2,80008a90 <osEE_tc_core0_start+0x372>
        *block_dest.p_ui = *block_src.p_ui;
80008a8c:	44 52       	ld.w %d2,[%a5+]
80008a8e:	64 42       	st.w [%a4+],%d2
        ++block_src.p_ui;
        ++block_dest.p_ui;
      }

      if (((table_entry_length) & 0x2U) != 0U) {
80008a90:	2e 14       	jz.t %d15,1,80008a98 <osEE_tc_core0_start+0x37a>
        *block_dest.p_us = *block_src.p_us;
80008a92:	09 52 c2 00 	ld.hu %d2,[%a5+]2
80008a96:	a4 42       	st.h [%a4+],%d2
        ++block_src.p_us;
        ++block_dest.p_us;
      }

      if (((table_entry_length) & 0x1U) != 0U) {
80008a98:	2e 03       	jz.t %d15,0,80008a9e <osEE_tc_core0_start+0x380>
        *block_dest.p_uc = *block_src.p_uc;
80008a9a:	0c 50       	ld.bu %d15,[%a5]0
80008a9c:	2c 40       	st.b [%a4]0,%d15
      }

/* Prepare the table pointer for the next iteration */
      ++p_copy_table;
80008a9e:	d9 66 0c 00 	lea %a6,[%a6]12 <8000000c <BootModeHeader0+0xc>>
(
  const OsEE_tc_copy_table * p_copy_table_param
)
{
  const OsEE_tc_copy_table * p_copy_table = p_copy_table_param;
  while (p_copy_table != NULL) {
80008aa2:	bd 06 dd ff 	jnz.a %a6,80008a5c <osEE_tc_core0_start+0x33e>
  osEE_tc_clear_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008aa6:	91 30 00 ff 	movh.a %a15,61443
80008aaa:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008aae:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008ab0:	2e 16       	jz.t %d15,1,80008abc <osEE_tc_core0_start+0x39e>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008ab2:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008ab6:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008aba:	68 0f       	st.w [%a15]0,%d15
  }

/* Clear ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 0U;
80008abc:	8f 1f c0 f1 	andn %d15,%d15,1
  safety_wdt_con0.bits.lck     = 1U;
80008ac0:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg    = safety_wdt_con0.reg;
80008ac4:	91 30 00 ff 	movh.a %a15,61443
80008ac8:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008acc:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 1U) {
80008ace:	4c f0       	ld.w %d15,[%a15]0
80008ad0:	6f 0f ff ff 	jnz.t %d15,0,80008ace <osEE_tc_core0_start+0x3b0>
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON8_OFF) = OSEE_TC_SCU_CCUCON8_INIT;
#endif /* OSEE_TC_SCU_CCUCON8_INIT */

/* BUS Divisors */
/* Configure CCUCON0 */
  OSEE_TC_SCU_CCUCON0.reg = OSEE_TC_SCU_CCUCON0_INIT;
80008ad4:	7b 20 22 f1 	movh %d15,4642
80008ad8:	91 30 00 ff 	movh.a %a15,61443
80008adc:	1b 1f 10 f0 	addi %d15,%d15,257
80008ae0:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80008ae4:	68 0f       	st.w [%a15]0,%d15
#if (defined(OSEE_TC_SCU_CCUCON5_INIT))
  OSEE_TC_SCU_REG(OSEE_TC_SCU_CCUCON5_OFF) = OSEE_TC_SCU_CCUCON5_INIT;
#endif /* OSEE_TC_SCU_CCUCON5_INIT */
/* Configure CCUCON1 and Update CCU 0, 1 & 5. Forced INSEL to 1 even for
   external configuration, otherwise PLL initialization won't work. */
  OSEE_TC_SCU_CCUCON1.reg = OSEE_TC_SCU_CCUCON1_INIT |
80008ae6:	7b 00 00 f5 	movh %d15,20480
80008aea:	91 30 00 ff 	movh.a %a15,61443
80008aee:	1b 0f 10 f1 	addi %d15,%d15,4352
80008af2:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80008af6:	68 0f       	st.w [%a15]0,%d15
{
  /*
   * Default System Oscillator Configuration
   * MODE:    0   -> External Crystal
   */
  OSEE_TC_SCU_OSCCON.reg = OSEE_TC_SCU_OSCCON_OSCRES |
80008af8:	7b 70 00 f0 	movh %d15,7
80008afc:	91 30 00 ff 	movh.a %a15,61443
80008b00:	1b cf 01 f0 	addi %d15,%d15,28
80008b04:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80008b08:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_OSCCON_GAINSEL | OSEE_TC_SCU_OSCCON_MODE(0U) |
    OSEE_TC_SCU_OSCCON_OSCVAL((OSEE_TC_BOARD_FOSC / 2500000U) - 1U);

  while (OSEE_TC_SCU_OSCCON.bits.plllv == 0U) {
80008b0a:	4c f0       	ld.w %d15,[%a15]0
80008b0c:	6f 1f ff 7f 	jz.t %d15,1,80008b0a <osEE_tc_core0_start+0x3ec>
    ; /* Oscillator not too low */
  }

  while (OSEE_TC_SCU_OSCCON.bits.pllhv == 0U) {
80008b10:	91 30 00 ff 	movh.a %a15,61443
80008b14:	d9 ff 10 06 	lea %a15,[%a15]24592 <f0036010 <_SMALL_DATA4_+0x4002e010>>
80008b18:	4c f0       	ld.w %d15,[%a15]0
80008b1a:	6f 8f ff 7f 	jz.t %d15,8,80008b18 <osEE_tc_core0_start+0x3fa>
/*===================== Configure CCU Clock Control =========================*/
  osEE_tc_conf_clock_ctrl();
/*===================== Configure Oscillator Control ========================*/
  osEE_tc_conf_osc_ctrl();
/*============================ Configure PLL ================================*/
  osEE_tc_set_pll_fsource(OSEE_CPU_CLOCK);
80008b1e:	7b c0 be 40 	movh %d4,3052
  osEE_tc_set_safety_endinit(uint16_t pw)
{
/* Read Config_0 register */
  OsEE_tc_SCU_WDTS_CON0 safety_wdt_con0;

  safety_wdt_con0.reg = OSEE_TC_SCU_WDTS.con0.reg;
80008b22:	91 30 00 ff 	movh.a %a15,61443
80008b26:	1b 04 20 4c 	addi %d4,%d4,-15872
80008b2a:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008b2e:	6d 00 58 00 	call 80008bde <osEE_tc_set_pll_fsource>
80008b32:	4c f0       	ld.w %d15,[%a15]0

/* If locked unlock it */
  if (safety_wdt_con0.bits.lck != 0U) {
80008b34:	2e 16       	jz.t %d15,1,80008b40 <osEE_tc_core0_start+0x422>
/* see Table 1 (Pass.word Access Bit Pattern Requirements) */
    safety_wdt_con0.bits.endinit = 1U;
    safety_wdt_con0.bits.lck     = 0U;
80008b36:	b7 1f 02 f0 	insert %d15,%d15,1,0,2
    safety_wdt_con0.bits.pw      = pw;
80008b3a:	37 8f 0e f1 	insert %d15,%d15,%d8,2,14

/* Password ready. Store it to WDT_CON0 to unprotect the register */
    OSEE_TC_SCU_WDTS.con0.reg = safety_wdt_con0.reg;
80008b3e:	68 0f       	st.w [%a15]0,%d15
  }


/* Set ENDINT and set LCK bit in Config_0 register */
  safety_wdt_con0.bits.endinit = 1U;
80008b40:	b7 1f 01 f0 	insert %d15,%d15,1,0,1
  safety_wdt_con0.bits.lck     = 1U;
80008b44:	b7 1f 81 f0 	insert %d15,%d15,1,1,1
  OSEE_TC_SCU_WDTS.con0.reg   = safety_wdt_con0.reg;
80008b48:	91 30 00 ff 	movh.a %a15,61443
80008b4c:	d9 ff 30 36 	lea %a15,[%a15]24816 <f00360f0 <_SMALL_DATA4_+0x4002e0f0>>
80008b50:	68 0f       	st.w [%a15]0,%d15

/* Read back ENDINIT and wait until it has been cleared */
  while (OSEE_TC_SCU_WDTS.con0.bits.endinit == 0U) {
80008b52:	4c f0       	ld.w %d15,[%a15]0
80008b54:	6f 0f ff 7f 	jz.t %d15,0,80008b52 <osEE_tc_core0_start+0x434>
  osEE_tc_set_safety_endinit(safety_wdt_pw);
#endif /* OSEE_CPU_CLOCK */
#endif /* !OSEE_BYPASS_CLOCK_CONFIGURATION */
#endif /* !OSEE_TRICORE_ILLD && !OSEE_TC_2G */

  OSEE_EXIT(main());
80008b58:	6d ff f5 dc 	call 80004542 <main>
80008b5c:	02 24       	mov %d4,%d2
80008b5e:	6d 00 3d 28 	call 8000dbd8 <_exit>
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008b62:	60 f2       	mov.a %a2,%d15
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
80008b64:	8f 4f 1e 40 	sh %d4,%d15,-28
    OsEE_reg   pcxi_o;
/* Get current CSA pointer */
    OsEE_csa * const p_csa = &p_csa_begin[(i - 1U)];

/* Store in current CSA previous pointer (null in last CSA. i.e. First time!) */
    p_csa->l_next.reg = pcxi_val;
80008b68:	74 22       	st.w [%a2],%d2
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
80008b6a:	c2 f3       	add %d3,-1
/* Current CSA segment */
    pcxi_s  = (((OsEE_reg)p_csa >> 28U) & 0xFU) << 16U;
/* Evaluate CSA Segment Offset */
    pcxi_o  = (((OsEE_reg)p_csa >> 6U) & 0xFFFFU);
/* Compose pcxi_s and pcxi_o in the pcxi_val to be stored in next CSA */
    pcxi_val = pcxi_s | pcxi_o;
80008b6c:	37 0f 70 23 	extr.u %d2,%d15,6,16
80008b70:	37 42 10 28 	insert %d2,%d2,%d4,16,16

/* Check if you have to populate LCX that point to the 'almost empty'
   position */
    --fcd_needed_csa;
    if (fcd_needed_csa == 0U) {
80008b74:	76 36       	jz %d3,80008b80 <osEE_tc_core0_start+0x462>
80008b76:	1b 0f fc ff 	addi %d15,%d15,-64
80008b7a:	fc f4       	loop %a15,80008b62 <osEE_tc_core0_start+0x444>
80008b7c:	1d ff e4 fe 	j 80008944 <osEE_tc_core0_start+0x226>
/* After having stored the LCX, I would have to have a 32 bit wrap around to
   override the previous value and in a 32-bit address space is not possible. */
      osEE_tc_set_csfr(OSEE_CSFR_LCX, pcxi_val);
80008b80:	cd c2 e3 0f 	mtcr $lcx,%d2
80008b84:	0d 00 c0 04 	isync 
80008b88:	3c f7       	j 80008b76 <osEE_tc_core0_start+0x458>

80008b8a <osEE_tc_stm_us_ticks>:
#if (defined(__TASKING__))
#define OS_STOP_SEC_GLOBAL_VAR_CLEARED
#include "Os_MemMap.h"
#endif /* __TASKING__ */

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
80008b8a:	40 ae       	mov.aa %a14,%sp
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
80008b8c:	91 00 00 f7 	movh.a %a15,28672
80008b90:	19 ff c0 00 	ld.w %d15,[%a15]3072 <70000c00 <osEE_tc_stm_freq_khz>>
80008b94:	3b 80 3e 20 	mov %d2,1000
80008b98:	3f 2f 0c 80 	jlt.u %d15,%d2,80008bb0 <osEE_tc_stm_us_ticks+0x26>
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
80008b9c:	7b 20 06 21 	movh %d2,4194
80008ba0:	1b 32 dd 24 	addi %d2,%d2,19923
80008ba4:	73 2f 68 20 	mul.u %e2,%d15,%d2
80008ba8:	8f a3 1f 20 	sh %d2,%d3,-6
80008bac:	e2 42       	mul %d2,%d4
80008bae:	00 90       	ret 
  } else if (usec >= OSEE_KILO) {
80008bb0:	02 25       	mov %d5,%d2
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
80008bb2:	73 f4 0a 20 	mul %d2,%d4,%d15
80008bb6:	7b 20 06 31 	movh %d3,4194
80008bba:	1b 33 dd 34 	addi %d3,%d3,19923
80008bbe:	73 32 68 20 	mul.u %e2,%d2,%d3
80008bc2:	8f a3 1f 20 	sh %d2,%d3,-6

static OsEE_reg osEE_tc_stm_us_ticks(OsEE_reg usec) {
  OsEE_reg ticks;
  if (osEE_tc_stm_freq_khz >= OSEE_KILO) {
    ticks = usec * (osEE_tc_stm_freq_khz / OSEE_KILO);
  } else if (usec >= OSEE_KILO) {
80008bc6:	3f 54 0b 80 	jlt.u %d4,%d5,80008bdc <osEE_tc_stm_us_ticks+0x52>
    ticks = (usec / OSEE_KILO) * osEE_tc_stm_freq_khz;
80008bca:	7b 20 06 21 	movh %d2,4194
80008bce:	1b 32 dd 24 	addi %d2,%d2,19923
80008bd2:	73 24 68 40 	mul.u %e4,%d4,%d2
80008bd6:	8f a5 1f 20 	sh %d2,%d5,-6
80008bda:	e2 f2       	mul %d2,%d15
  } else {
    ticks = (usec * osEE_tc_stm_freq_khz) / OSEE_KILO;
  }
  return ticks;
}
80008bdc:	00 90       	ret 

80008bde <osEE_tc_set_pll_fsource>:
#define OSEE_TC_K2_MIN      (1U)
#define OSEE_TC_N_MAX       (128U)  /* '7 bits */
#define OSEE_TC_N_MIN       (1U)
#define OSEE_TC_DEV_ALLOWED (2U)

void osEE_tc_set_pll_fsource(OsEE_reg fpll) {
80008bde:	40 ae       	mov.aa %a14,%sp
  fPllLeastError  = OSEE_TC_CLOCK_MAX;
  fPllError       = OSEE_TC_CLOCK_MAX;

  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
80008be0:	7b e0 e4 20 	movh %d2,3662
80008be4:	1b 12 c0 21 	addi %d2,%d2,7169
80008be8:	0b 24 30 f1 	lt.u %d15,%d4,%d2
80008bec:	82 22       	mov %d2,2
80008bee:	ab 12 80 ff 	sel %d15,%d15,%d2,1
80008bf2:	60 f4       	mov.a %a4,%d15
80008bf4:	53 ff 20 f0 	mul %d15,%d15,15
80008bf8:	60 f5       	mov.a %a5,%d15
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80008bfa:	3b 00 01 e0 	mov %d14,16
80008bfe:	82 03       	mov %d3,0
80008c00:	7b c0 be 20 	movh %d2,3052
80008c04:	1b 02 20 2c 	addi %d2,%d2,-15872
80008c08:	02 28       	mov %d8,%d2
80008c0a:	82 01       	mov %d1,0
80008c0c:	82 0b       	mov %d11,0
80008c0e:	82 0d       	mov %d13,0
80008c10:	82 0c       	mov %d12,0
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
80008c12:	7b 10 13 a0 	movh %d10,305
80008c16:	1b 0a d0 a2 	addi %d10,%d10,11520

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
80008c1a:	91 40 0f 60 	movh.a %a6,244
80008c1e:	d9 66 41 02 	lea %a6,[%a6]9217 <f42401 <__DSPR1_SIZE+0xf24401>>
    {
      for (
80008c22:	a0 1d       	mov.a %a13,1
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
80008c24:	53 14 40 60 	mul.u %e6,%d4,1
80008c28:	60 62       	mov.a %a2,%d6
80008c2a:	60 73       	mov.a %a3,%d7

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
80008c2c:	91 80 7d f1 	movh.a %a15,6104
80008c30:	d9 ff 41 08 	lea %a15,[%a15]-31743 <17d78401 <__DSPR1_SIZE+0x17d5a401>>
        {
          for (
80008c34:	a0 1c       	mov.a %a12,1
80008c36:	3c 5e       	j 80008cf2 <osEE_tc_set_pll_fsource+0x114>
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
  )
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);
80008c38:	4b ea 11 62 	div.u %e6,%d10,%d14
80008c3c:	82 07       	mov %d7,0

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
80008c3e:	7b 60 f8 ff 	movh %d15,65414
80008c42:	1b 0f e0 fe 	addi %d15,%d15,-4608
80008c46:	0b f6 40 60 	addx %d6,%d6,%d15
80008c4a:	8b f7 bf 50 	addc %d5,%d7,-1
80008c4e:	ba 05       	eq %d15,%d5,0
80008c50:	80 67       	mov.d %d7,%a6
80008c52:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
80008c56:	8b 05 00 f5 	or.ne %d15,%d5,0
80008c5a:	ee 4a       	jnz %d15,80008cee <osEE_tc_set_pll_fsource+0x110>
    {
      for (
80008c5c:	df 00 56 00 	jeq %d0,0,80008d08 <osEE_tc_set_pll_fsource+0x12a>
80008c60:	02 e9       	mov %d9,%d14
80008c62:	80 d0       	mov.d %d0,%a13
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
80008c64:	60 e7       	mov.a %a7,%d14
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
        )
      {
        fVco = ((uint64_t)fpll) * k2;
80008c66:	80 2f       	mov.d %d15,%a2
80008c68:	73 f0 68 60 	mul.u %e6,%d0,%d15
80008c6c:	80 3f       	mov.d %d15,%a3
80008c6e:	03 f0 0a 77 	madd %d7,%d7,%d0,%d15

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
80008c72:	7b 80 82 fe 	movh %d15,59432
80008c76:	1b 0f c0 f7 	addi %d15,%d15,31744
80008c7a:	0b f6 40 60 	addx %d6,%d6,%d15
80008c7e:	8b f7 bf 50 	addc %d5,%d7,-1
80008c82:	ba 05       	eq %d15,%d5,0
80008c84:	80 f7       	mov.d %d7,%a15
80008c86:	0b 76 50 f2 	and.ge.u %d15,%d6,%d7
80008c8a:	8b 05 00 f5 	or.ne %d15,%d5,0
80008c8e:	ee 25       	jnz %d15,80008cd8 <osEE_tc_set_pll_fsource+0xfa>
        {
          for (
80008c90:	0f 23 a0 f0 	or %d15,%d3,%d2
80008c94:	6e 2d       	jz %d15,80008cee <osEE_tc_set_pll_fsource+0x110>
80008c96:	80 c6       	mov.d %d6,%a12
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
80008c98:	4b 96 11 22 	div.u %e2,%d6,%d9
80008c9c:	02 2f       	mov %d15,%d2
80008c9e:	e2 af       	mul %d15,%d10
80008ca0:	a2 4f       	sub %d15,%d4
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
80008ca2:	53 1f 40 20 	mul.u %e2,%d15,1
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80008ca6:	df 0f ac 00 	jeq %d15,0,80008dfe <osEE_tc_set_pll_fsource+0x220>
              bestK2         = k2;
              bestN          = n;
              bestP          = p;
            }

            if (fPllLeastError > fPllError)
80008caa:	0b 13 00 51 	eq %d5,%d3,%d1
80008cae:	0b 8f 50 52 	and.ge.u %d5,%d15,%d8
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
            )
          {
            fPllError = (
80008cb2:	2b f8 40 85 	sel %d8,%d5,%d8,%d15
80008cb6:	ab 01 80 15 	sel %d1,%d5,%d1,0
80008cba:	2b eb 40 b5 	sel %d11,%d5,%d11,%d14
80008cbe:	2b 6d 40 d5 	sel %d13,%d5,%d13,%d6
80008cc2:	2b 0c 40 c5 	sel %d12,%d5,%d12,%d0
        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
              n = OSEE_TC_N_MIN;
              ((n <= OSEE_TC_N_MAX) && (fPllError != 0U));
              ++n
80008cc6:	c2 16       	add %d6,1
      {
        fVco = ((uint64_t)fpll) * k2;

        if ((fVco >= OSEE_TC_FVCO_MIN) && (fVco <= OSEE_TC_FVCO_MAX))
        {
          for (
80008cc8:	8b 16 68 52 	lt.u %d5,%d6,129
80008ccc:	8b 0f 20 54 	and.ne %d5,%d15,0
80008cd0:	df 05 e4 ff 	jne %d5,0,80008c98 <osEE_tc_set_pll_fsource+0xba>
80008cd4:	02 d6       	mov %d6,%d13
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80008cd6:	02 6d       	mov %d13,%d6
    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
          k2 += k2Steps
80008cd8:	80 4f       	mov.d %d15,%a4
80008cda:	42 f0       	add %d0,%d15
80008cdc:	80 56       	mov.d %d6,%a5
80008cde:	42 69       	add %d9,%d6

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
          k2 = OSEE_TC_K2_MIN;
          ((k2 <= OSEE_TC_K2_MAX) && (fPllError != 0U));
80008ce0:	0f 32 a0 50 	or %d5,%d2,%d3
  {
    fRef = ((uint64_t)OSEE_TC_BOARD_FOSC / p);

    if ((fRef >= OSEE_TC_FREF_MIN) && (fRef <= OSEE_TC_FREF_MAX))
    {
      for (
80008ce4:	8b d0 61 f2 	lt.u %d15,%d0,29
80008ce8:	8b 05 20 f4 	and.ne %d15,%d5,0
80008cec:	ee bd       	jnz %d15,80008c66 <osEE_tc_set_pll_fsource+0x88>
80008cee:	01 45 20 50 	sub.a %a5,%a5,%a4
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
80008cf2:	c2 fe       	add %d14,-1
    k2Steps = 1;
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
80008cf4:	0f 32 a0 f0 	or %d15,%d2,%d3
80008cf8:	8b 0f 20 02 	ne %d0,%d15,0
  if (fpll > OSEE_TC_FPLL_KSTEP)
  {
    k2Steps = 1;
  }

  for (
80008cfc:	8b 0e 20 52 	ne %d5,%d14,0
80008d00:	8b 0f 20 54 	and.ne %d5,%d15,0
80008d04:	df 05 9a ff 	jne %d5,0,80008c38 <osEE_tc_set_pll_fsource+0x5a>
      }
    }
  }

  /* Percent ALLOWED_DEVIATION error allowed */
  fpll_maxerrorallowed = (fpll * OSEE_TC_DEV_ALLOWED) / ((OsEE_reg)100U);
80008d08:	06 14       	sh %d4,1
80008d0a:	7b c0 1e f5 	movh %d15,20972
80008d0e:	1b ff 51 f8 	addi %d15,%d15,-31457
80008d12:	73 f4 68 40 	mul.u %e4,%d4,%d15
80008d16:	8f b5 1f 20 	sh %d2,%d5,-5
  if (fPllLeastError < (uint64_t)fpll_maxerrorallowed)
80008d1a:	ba 01       	eq %d15,%d1,0
80008d1c:	0b 28 50 f2 	and.ge.u %d15,%d8,%d2
80008d20:	8b 01 00 f5 	or.ne %d15,%d1,0
80008d24:	ee 73       	jnz %d15,80008e0a <osEE_tc_set_pll_fsource+0x22c>
  {
    /* Divide by K2DIV + 1 */
    OSEE_TC_SCU_PLLCON1.bits.k2div = (uint8_t)(bestK2 - 1U);
80008d26:	c2 fc       	add %d12,-1
80008d28:	91 30 00 ff 	movh.a %a15,61443
80008d2c:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80008d30:	4c f0       	ld.w %d15,[%a15]0
80008d32:	37 cf 07 c0 	insert %d12,%d15,%d12,0,7
80008d36:	68 0c       	st.w [%a15]0,%d12

    while (OSEE_TC_SCU_PLLSTAT.bits.k2rdy == 0U) {
80008d38:	91 30 00 ff 	movh.a %a15,61443
80008d3c:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80008d40:	4c f0       	ld.w %d15,[%a15]0
80008d42:	6f 5f ff 7f 	jz.t %d15,5,80008d40 <osEE_tc_set_pll_fsource+0x162>
    }

    /* K1 divider default value */

    /* Enabled the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 1U;
80008d46:	91 30 00 ff 	movh.a %a15,61443
80008d4a:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80008d4e:	4c f0       	ld.w %d15,[%a15]0
80008d50:	96 01       	or %d15,1
80008d52:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 0U) {
80008d54:	91 30 00 ff 	movh.a %a15,61443
80008d58:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80008d5c:	4c f0       	ld.w %d15,[%a15]0
80008d5e:	6f 0f ff 7f 	jz.t %d15,0,80008d5c <osEE_tc_set_pll_fsource+0x17e>
      ; /* Wait until prescaler mode is entered */
    }

    /* I will use n=80 and p=2. Because I can get al the
       needed values */
    OSEE_TC_SCU_PLLCON0.bits.pdiv = (uint8_t)(bestP - 1U);
80008d62:	9a fb       	add %d15,%d11,-1
80008d64:	91 30 00 ff 	movh.a %a15,61443
80008d68:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80008d6c:	16 0f       	and %d15,15
80008d6e:	8f 8f 01 f0 	sh %d15,%d15,24
80008d72:	48 02       	ld.w %d2,[%a15]0
80008d74:	b7 02 04 2c 	insert %d2,%d2,0,24,4
80008d78:	a6 2f       	or %d15,%d2
80008d7a:	68 0f       	st.w [%a15]0,%d15
    OSEE_TC_SCU_PLLCON0.bits.ndiv = (uint8_t)(bestN - 1U);
80008d7c:	9a fd       	add %d15,%d13,-1
80008d7e:	16 7f       	and %d15,127
80008d80:	8f 9f 00 f0 	sh %d15,%d15,9
80008d84:	48 02       	ld.w %d2,[%a15]0
80008d86:	b7 02 87 24 	insert %d2,%d2,0,9,7
80008d8a:	a6 2f       	or %d15,%d2
80008d8c:	68 0f       	st.w [%a15]0,%d15

    /* Power down VCO Normal Behavior */
    OSEE_TC_SCU_PLLCON0.bits.vcopwd = 0U;
80008d8e:	4c f0       	ld.w %d15,[%a15]0
80008d90:	8f 2f c0 f1 	andn %d15,%d15,2
80008d94:	68 0f       	st.w [%a15]0,%d15

    /***** Configure PLL normal mode. *****/

    /* Automatic oscillator disconnect disabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 1U;
80008d96:	4c f0       	ld.w %d15,[%a15]0
80008d98:	96 40       	or %d15,64
80008d9a:	68 0f       	st.w [%a15]0,%d15
    /* Connect VCO to the oscillator */
    OSEE_TC_SCU_PLLCON0.bits.clrfindis = 1U;
80008d9c:	4c f0       	ld.w %d15,[%a15]0
80008d9e:	96 20       	or %d15,32
80008da0:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.findis == 1U) {
80008da2:	91 30 00 ff 	movh.a %a15,61443
80008da6:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80008daa:	4c f0       	ld.w %d15,[%a15]0
80008dac:	6f 3f ff ff 	jnz.t %d15,3,80008daa <osEE_tc_set_pll_fsource+0x1cc>
      ; /* Wait until oscillator is connected to the VCO */
    }

    /* Restart VCO lock detection */
    OSEE_TC_SCU_PLLCON0.bits.resld = 1U;
80008db0:	91 30 00 ff 	movh.a %a15,61443
80008db4:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80008db8:	4c f0       	ld.w %d15,[%a15]0
80008dba:	b7 ff 01 f9 	insert %d15,%d15,15,18,1
80008dbe:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcolock == 0U) {
80008dc0:	91 30 00 ff 	movh.a %a15,61443
80008dc4:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80008dc8:	4c f0       	ld.w %d15,[%a15]0
80008dca:	6f 2f ff 7f 	jz.t %d15,2,80008dc8 <osEE_tc_set_pll_fsource+0x1ea>
      ; /* Wait until the VCO becomes locked */
    }

    /* Disable the VCO Bypass Mode */
    OSEE_TC_SCU_PLLCON0.bits.vcobyp = 0U;
80008dce:	91 30 00 ff 	movh.a %a15,61443
80008dd2:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80008dd6:	4c f0       	ld.w %d15,[%a15]0
80008dd8:	8f 1f c0 f1 	andn %d15,%d15,1
80008ddc:	68 0f       	st.w [%a15]0,%d15

    while (OSEE_TC_SCU_PLLSTAT.bits.vcobyst == 1U) {
80008dde:	91 30 00 ff 	movh.a %a15,61443
80008de2:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80008de6:	4c f0       	ld.w %d15,[%a15]0
80008de8:	6f 0f ff ff 	jnz.t %d15,0,80008de6 <osEE_tc_set_pll_fsource+0x208>
      ; /* Wait until normal mode is entered */
    }

    /* Automatic oscillator disconnect enabled */
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
80008dec:	91 30 00 ff 	movh.a %a15,61443
80008df0:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80008df4:	4c f0       	ld.w %d15,[%a15]0
80008df6:	8f 0f c4 f1 	andn %d15,%d15,64
80008dfa:	68 0f       	st.w [%a15]0,%d15
80008dfc:	00 90       	ret 
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
            {
              fPllLeastError = fPllError;
80008dfe:	02 28       	mov %d8,%d2
80008e00:	02 31       	mov %d1,%d3
  }

  for (
    p = OSEE_TC_P_MAX;
    ((p >= OSEE_TC_P_MIN ) && (fPllError != 0ULL));
    --p
80008e02:	80 7b       	mov.d %d11,%a7
          {
            fPllError = (
              (((n) / (p * k2)) * OSEE_TC_BOARD_FOSC) - fpll
            );

            if (fPllError == ((uint64_t)0U) )
80008e04:	02 0c       	mov %d12,%d0
80008e06:	1d ff 68 ff 	j 80008cd6 <osEE_tc_set_pll_fsource+0xf8>
80008e0a:	00 90       	ret 

80008e0c <osEE_tc_get_fsource>:
    OSEE_TC_SCU_PLLCON0.bits.oscdisdis = 0U;
  }

}

OsEE_reg osEE_tc_get_fsource(void) {
80008e0c:	40 ae       	mov.aa %a14,%sp
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
80008e0e:	91 30 00 ff 	movh.a %a15,61443
80008e12:	d9 ff 30 06 	lea %a15,[%a15]24624 <f0036030 <_SMALL_DATA4_+0x4002e030>>
80008e16:	4c f0       	ld.w %d15,[%a15]0
80008e18:	37 0f 62 fe 	extr.u %d15,%d15,28,2
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
      }
    }
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
80008e1c:	7b 60 5f 20 	movh %d2,1526
80008e20:	1b 02 10 2e 	addi %d2,%d2,-7936

OsEE_reg osEE_tc_get_fsource(void) {
  /*  fSOURCE Frequency */
  OsEE_reg fsource;

  if (OSEE_TC_SCU_CCUCON0.bits.clksel != 0U) {
80008e24:	6e 45       	jz %d15,80008eae <osEE_tc_get_fsource+0xa2>
    /* PLL */
    /* PLL dividers */
    OsEE_reg k1, k2, p, n;
    /* Prescaler mode */
    if (OSEE_TC_SCU_PLLSTAT.bits.vcobyst != 0U)
80008e26:	91 30 00 ff 	movh.a %a15,61443
80008e2a:	d9 ff 14 06 	lea %a15,[%a15]24596 <f0036014 <_SMALL_DATA4_+0x4002e014>>
80008e2e:	4c f0       	ld.w %d15,[%a15]0
80008e30:	6f 0f 11 00 	jz.t %d15,0,80008e52 <osEE_tc_get_fsource+0x46>
    {
      k1 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k1div + 1U;
80008e34:	91 30 00 ff 	movh.a %a15,61443
80008e38:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80008e3c:	48 02       	ld.w %d2,[%a15]0
80008e3e:	37 02 67 28 	extr.u %d2,%d2,16,7
80008e42:	c2 12       	add %d2,1
      fsource = OSEE_TC_BOARD_FOSC / k1;
80008e44:	7b 10 13 f0 	movh %d15,305
80008e48:	1b 0f d0 f2 	addi %d15,%d15,11520
80008e4c:	4b 2f 11 22 	div.u %e2,%d15,%d2
80008e50:	00 90       	ret 
    } else {
      /* Free running mode */
      if (OSEE_TC_SCU_PLLSTAT.bits.findis != 0U)
80008e52:	4c f0       	ld.w %d15,[%a15]0
80008e54:	6f 3f 11 00 	jz.t %d15,3,80008e76 <osEE_tc_get_fsource+0x6a>
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80008e58:	91 30 00 ff 	movh.a %a15,61443
80008e5c:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80008e60:	48 02       	ld.w %d2,[%a15]0
80008e62:	8f f2 07 21 	and %d2,%d2,127
80008e66:	9a 12       	add %d15,%d2,1
        fsource = OSEE_TC_BOARD_FOSC / k2;
80008e68:	7b 10 13 20 	movh %d2,305
80008e6c:	1b 02 d0 22 	addi %d2,%d2,11520
80008e70:	4b f2 11 22 	div.u %e2,%d2,%d15
80008e74:	00 90       	ret 
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80008e76:	91 30 00 ff 	movh.a %a15,61443
80008e7a:	d9 ff 1c 06 	lea %a15,[%a15]24604 <f003601c <_SMALL_DATA4_+0x4002e01c>>
80008e7e:	4c f0       	ld.w %d15,[%a15]0
80008e80:	8f ff 07 51 	and %d5,%d15,127
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
80008e84:	91 30 00 ff 	movh.a %a15,61443
80008e88:	d9 ff 18 06 	lea %a15,[%a15]24600 <f0036018 <_SMALL_DATA4_+0x4002e018>>
80008e8c:	4c f0       	ld.w %d15,[%a15]0
80008e8e:	37 0f 64 3c 	extr.u %d3,%d15,24,4
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;
80008e92:	48 02       	ld.w %d2,[%a15]0
80008e94:	37 02 e7 44 	extr.u %d4,%d2,9,7
      {
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
        fsource = OSEE_TC_BOARD_FOSC / k2;
      } else {
        /* PLL Normal mode */
        k2 = (OsEE_reg)OSEE_TC_SCU_PLLCON1.bits.k2div + 1U;
80008e98:	9a 15       	add %d15,%d5,1
        p = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.pdiv + 1U;
        n = (OsEE_reg)OSEE_TC_SCU_PLLCON0.bits.ndiv + 1U;

        /* cpu clock value fclk = (fosc * n)/(P * k2) */
        fsource = n * (OSEE_TC_BOARD_FOSC / (p * k2));
80008e9a:	03 f3 0a ff 	madd %d15,%d15,%d3,%d15
80008e9e:	7b 10 13 20 	movh %d2,305
80008ea2:	1b 02 d0 22 	addi %d2,%d2,11520
80008ea6:	4b f2 11 22 	div.u %e2,%d2,%d15
80008eaa:	03 24 0a 22 	madd %d2,%d2,%d4,%d2
  } else {
    /* Backup Oscillator (EVR) */
    fsource = OSEE_TC_EVR_OSC_FREQUENCY;
  }
  return fsource;
}
80008eae:	00 90       	ret 

80008eb0 <osEE_tc_stm_set_clockpersec>:
  return ticks;
}

/* Set inside std time reference  */
void osEE_tc_stm_set_clockpersec(void)
{
80008eb0:	40 ae       	mov.aa %a14,%sp
#if (defined(__TASKING__))
  /* I don't know where is declared */
  extern unsigned long long setfoschz ( unsigned long long );
#endif /* __TASKING__ */
  /* fSOURCE Frequency */
  OsEE_reg const fsource  = osEE_tc_get_fsource();
80008eb2:	6d ff ad ff 	call 80008e0c <osEE_tc_get_fsource>
  /* Standard Timer Module period rounded */
  OsEE_reg const fstm     = (fsource + 1U) / OSEE_SCU_HW_FSTM_DIV;
80008eb6:	91 30 00 ff 	movh.a %a15,61443
80008eba:	d9 ff 34 06 	lea %a15,[%a15]24628 <f0036034 <_SMALL_DATA4_+0x4002e034>>
80008ebe:	4c f0       	ld.w %d15,[%a15]0
80008ec0:	37 0f 64 f4 	extr.u %d15,%d15,8,4
80008ec4:	c2 12       	add %d2,1
80008ec6:	4b f2 11 22 	div.u %e2,%d2,%d15

  /* Set Global variable with freq in Khz value */
  osEE_tc_stm_freq_khz = fstm / OSEE_KILO;
80008eca:	7b 20 06 f1 	movh %d15,4194
80008ece:	1b 3f dd f4 	addi %d15,%d15,19923
80008ed2:	73 f2 68 20 	mul.u %e2,%d2,%d15
80008ed6:	8f a3 1f f0 	sh %d15,%d3,-6
80008eda:	91 00 00 f7 	movh.a %a15,28672
80008ede:	59 ff c0 00 	st.w [%a15]3072 <70000c00 <osEE_tc_stm_freq_khz>>,%d15
80008ee2:	00 90       	ret 

80008ee4 <osEE_tc_stm_set_sr0>:
    that qualifier on pointers.
 */

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0(OsEE_reg usec,
    OsEE_tc_isr_hw_prio intvec)
{
80008ee4:	40 ae       	mov.aa %a14,%sp
80008ee6:	02 59       	mov %d9,%d5
80008ee8:	4d c0 e1 8f 	mfcr %d8,$core_id
    5U;
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
80008eec:	6d ff 4f fe 	call 80008b8a <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
80008ef0:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
80008ef4:	8f 38 00 f1 	and %d15,%d8,3
80008ef8:	9b 0f 0f 40 	addih %d4,%d15,240
80008efc:	8f 84 00 40 	sh %d4,%d4,8
80008f00:	60 4f       	mov.a %a15,%d4
 *  \return The timer lower word value read.
 */
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_tc_stm_get_time_lower_word(OsEE_reg stm_id)
{
  return OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_TIM0_OFF);
80008f02:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
80008f04:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
80008f06:	68 c2       	st.w [%a15]48,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
80008f08:	df 09 23 00 	jeq %d9,0,80008f4e <osEE_tc_stm_set_sr0+0x6a>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
80008f0c:	48 e2       	ld.w %d2,[%a15]56
80008f0e:	b7 02 05 24 	insert %d2,%d2,0,8,5
80008f12:	68 e2       	st.w [%a15]56,%d2
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
80008f14:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart0  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize0   = size_of_compare;
80008f18:	48 e2       	ld.w %d2,[%a15]56
80008f1a:	37 32 05 30 	insert %d3,%d2,%d3,0,5
80008f1e:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 0 with Compare Register 0 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0os     = 0U;
80008f20:	48 f2       	ld.w %d2,[%a15]60
80008f22:	8f 42 c0 21 	andn %d2,%d2,4
80008f26:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en     = 1U;
80008f28:	48 f2       	ld.w %d2,[%a15]60
80008f2a:	8f 12 40 21 	or %d2,%d2,1
80008f2e:	68 f2       	st.w [%a15]60,%d2

/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 0U), intvec);
80008f30:	06 3f       	sh %d15,3
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
80008f32:	60 f2       	mov.a %a2,%d15
80008f34:	d9 2f 50 28 	lea %a15,[%a2]-31600
80008f38:	11 4f 00 ff 	addih.a %a15,%a15,61444
80008f3c:	b7 89 99 93 	insert %d9,%d9,8,7,25
80008f40:	8f 38 00 81 	and %d8,%d8,3
80008f44:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
80008f48:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
80008f4a:	68 09       	st.w [%a15]0,%d9
80008f4c:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp0en                 = 0U;
80008f4e:	48 f2       	ld.w %d2,[%a15]60
80008f50:	8f 12 c0 21 	andn %d2,%d2,1
80008f54:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 0U)) = 0U;
80008f56:	1b 2f 09 f7 	addi %d15,%d15,28818
80008f5a:	9b 0f e0 f1 	addih %d15,%d15,7680
80008f5e:	06 3f       	sh %d15,3
80008f60:	82 02       	mov %d2,0
80008f62:	60 ff       	mov.a %a15,%d15
80008f64:	68 02       	st.w [%a15]0,%d2
80008f66:	00 90       	ret 

80008f68 <osEE_tc_stm_set_sr0_next_match>:
  }
}

OSEE_TC_STM_SR0_STORAGE void osEE_tc_stm_set_sr0_next_match(OsEE_reg usec)
{
80008f68:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80008f6a:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP0IRR bit 0 => 0x1 | CMP0IRS bit 1 => 0x2 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x1U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP0_OFF) += osEE_tc_stm_us_ticks(usec);
80008f6e:	6d ff 0e fe 	call 80008b8a <osEE_tc_stm_us_ticks>
80008f72:	16 03       	and %d15,3
80008f74:	9b 0f 0f f0 	addih %d15,%d15,240
80008f78:	8f 8f 00 f0 	sh %d15,%d15,8
80008f7c:	60 ff       	mov.a %a15,%d15
80008f7e:	4c fc       	ld.w %d15,[%a15]48
80008f80:	42 f2       	add %d2,%d15
80008f82:	68 c2       	st.w [%a15]48,%d2
80008f84:	00 90       	ret 

80008f86 <osEE_tc_stm_set_sr1>:
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1(OsEE_reg usec,
  OsEE_tc_isr_hw_prio intvec)
{
80008f86:	40 ae       	mov.aa %a14,%sp
80008f88:	02 59       	mov %d9,%d5
80008f8a:	4d c0 e1 8f 	mfcr %d8,$core_id
#else
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
80008f8e:	6d ff fe fd 	call 80008b8a <osEE_tc_stm_us_ticks>
  __asm__ volatile ("mov.aa %0, %%" #areg : "=a"(ptr): : "memory", #areg)

#define osEE_tc_getareg(areg, ptr) osEE_tc_getareg2(areg, ptr)

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE osEE_tc_clz(OsEE_reg reg) {
  return (OsEE_reg)__builtin_clz(reg);
80008f92:	0f 02 b0 31 	clz %d3,%d2
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
80008f96:	8f 38 00 f1 	and %d15,%d8,3
80008f9a:	9b 0f 0f 40 	addih %d4,%d15,240
80008f9e:	8f 84 00 40 	sh %d4,%d4,8
80008fa2:	60 4f       	mov.a %a15,%d4
80008fa4:	48 44       	ld.w %d4,[%a15]16
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);
80008fa6:	42 42       	add %d2,%d4
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));

/*  Set Compare Value Register (actual value + increment,
    I don't need to handle wrap around) */
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
80008fa8:	68 d2       	st.w [%a15]52,%d2
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
80008faa:	df 09 28 00 	jeq %d9,0,80008ffa <osEE_tc_stm_set_sr1+0x74>
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
80008fae:	48 e2       	ld.w %d2,[%a15]56
80008fb0:	b7 02 05 2c 	insert %d2,%d2,0,24,5
80008fb4:	68 e2       	st.w [%a15]56,%d2
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */

/* Get Interrupt period in ticks */
  us_in_ticks = osEE_tc_stm_us_ticks(usec);
/* Adjust the size of the mask */
  size_of_compare = 31U - ((uint8_t)osEE_tc_clz(us_in_ticks));
80008fb6:	8b f3 01 31 	rsub %d3,%d3,31
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) =
    us_in_ticks + osEE_tc_stm_get_time_lower_word(stm_id);

  if (intvec != 0U) {
    OSEE_TC_STM_CMCON(stm_id).bits.mstart1  = 0U;
    OSEE_TC_STM_CMCON(stm_id).bits.msize1   = size_of_compare;
80008fba:	8f f3 01 31 	and %d3,%d3,31
80008fbe:	8f 03 01 30 	sh %d3,%d3,16
80008fc2:	48 e2       	ld.w %d2,[%a15]56
80008fc4:	b7 02 05 28 	insert %d2,%d2,0,16,5
80008fc8:	a6 23       	or %d3,%d2
80008fca:	68 e3       	st.w [%a15]56,%d3
/* Tie STM Service Request 1 with Compare Register 1 */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1os     = 1U;
80008fcc:	48 f2       	ld.w %d2,[%a15]60
80008fce:	8f 02 44 21 	or %d2,%d2,64
80008fd2:	68 f2       	st.w [%a15]60,%d2
/* Enable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en     = 1U;
80008fd4:	48 f2       	ld.w %d2,[%a15]60
80008fd6:	8f 02 41 21 	or %d2,%d2,16
80008fda:	68 f2       	st.w [%a15]60,%d2
/*
 *  STM service Request configuration
 */
    osEE_tc_conf_src(core_id, OSEE_TC_STM_SRC_OFFSET(stm_id, 1U), intvec);
80008fdc:	06 3f       	sh %d15,3
80008fde:	60 f2       	mov.a %a2,%d15
80008fe0:	d9 2f 54 28 	lea %a15,[%a2]-31596
80008fe4:	11 4f 00 ff 	addih.a %a15,%a15,61444
80008fe8:	b7 89 99 93 	insert %d9,%d9,8,7,25
80008fec:	8f 38 00 81 	and %d8,%d8,3
80008ff0:	8f b8 00 80 	sh %d8,%d8,11
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
80008ff4:	a6 89       	or %d9,%d8
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
80008ff6:	68 09       	st.w [%a15]0,%d9
80008ff8:	00 90       	ret 
  } else {
/* Disable STM Service Request Source */
    OSEE_TC_STM_ICR(stm_id).bits.cmp1en                 = 0U;
80008ffa:	48 f2       	ld.w %d2,[%a15]60
80008ffc:	8f 02 c1 21 	andn %d2,%d2,16
80009000:	68 f2       	st.w [%a15]60,%d2
    OSEE_TC_SRC_REG(OSEE_TC_STM_SRC_OFFSET(stm_id, 1U)) = 0U;
80009002:	06 3f       	sh %d15,3
80009004:	60 f2       	mov.a %a2,%d15
80009006:	d9 2f 54 28 	lea %a15,[%a2]-31596
8000900a:	11 4f 00 ff 	addih.a %a15,%a15,61444
8000900e:	82 0f       	mov %d15,0
80009010:	68 0f       	st.w [%a15]0,%d15
80009012:	00 90       	ret 

80009014 <osEE_tc_stm_set_sr1_next_match>:
  }
}

OSEE_TC_STM_SR1_STORAGE void osEE_tc_stm_set_sr1_next_match(OsEE_reg usec)
{
80009014:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80009016:	4d c0 e1 ff 	mfcr %d15,$core_id
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
/* CMP1IRR bit 2 => 0x4 | CMP1IRS bit 3 => 0x8 */
#if 0
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_ISCR_OFF) = 0x4U;
#endif
  OSEE_TC_STM_REG(stm_id, OSEE_TC_STM_CMP1_OFF) += osEE_tc_stm_us_ticks(usec);
8000901a:	6d ff b8 fd 	call 80008b8a <osEE_tc_stm_us_ticks>
8000901e:	16 03       	and %d15,3
80009020:	9b 0f 0f f0 	addih %d15,%d15,240
80009024:	8f 8f 00 f0 	sh %d15,%d15,8
80009028:	60 ff       	mov.a %a15,%d15
8000902a:	4c fd       	ld.w %d15,[%a15]52
8000902c:	42 f2       	add %d2,%d15
8000902e:	68 d2       	st.w [%a15]52,%d2
80009030:	00 90       	ret 

80009032 <osEE_tc_delay>:
}

void osEE_tc_delay(OsEE_reg usec)
{
80009032:	40 ae       	mov.aa %a14,%sp
80009034:	4d c0 e1 ff 	mfcr %d15,$core_id
80009038:	16 03       	and %d15,3
8000903a:	9b 0f 0f f0 	addih %d15,%d15,240
8000903e:	8f 8f 00 f0 	sh %d15,%d15,8
80009042:	60 f2       	mov.a %a2,%d15
80009044:	d9 2f 10 00 	lea %a15,[%a2]16
80009048:	19 28 10 00 	ld.w %d8,[%a2]16
  OsEE_reg   const  stm_id  = (OsEE_reg)core_id;
#endif /* OSEE_CORE_ID_VALID_MASK & 0x40U */
  /* Read Start Point */
  OsEE_reg    const start = osEE_tc_stm_get_time_lower_word(stm_id);
  /* Evaluate End Point */
  OsEE_reg    const ticks = osEE_tc_stm_us_ticks(usec);
8000904c:	6d ff 9f fd 	call 80008b8a <osEE_tc_stm_us_ticks>
80009050:	4c f0       	ld.w %d15,[%a15]0

  while (ticks > (osEE_tc_stm_get_time_lower_word(stm_id) - start)) {
80009052:	a2 8f       	sub %d15,%d8
80009054:	3f 2f fe ff 	jlt.u %d15,%d2,80009050 <osEE_tc_delay+0x1e>
    ; /* Wait */
  }
}
80009058:	00 90       	ret 

8000905a <osEE_tc_isr2_wrapper>:

#if (defined(__GNUC__))
#pragma section
#endif /* __GNUC__ */

static void OSEE_COMPILER_KEEP osEE_tc_isr2_wrapper(TaskType isr2_tid) {
8000905a:	40 ae       	mov.aa %a14,%sp
    }
    /* TODO: handle other internal priorities? System Timer? */
  } else
#endif /* !OSEE_SINGLECORE */
  {
    osEE_activate_isr2(isr2_tid);
8000905c:	6d 00 86 05 	call 80009b68 <osEE_activate_isr2>
  __asm__ volatile ("svlcx" : : : "memory");
}

/** The rslcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rslcx(void) {
  __asm__ volatile ("rslcx" : : : "memory");
80009060:	0d 00 40 02 	rslcx 
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
80009064:	00 80       	rfe 
80009066:	00 90       	ret 

80009068 <osEE_shutdown_os>:
  osEE_shutdown_os
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST) p_cdb,
  VAR(StatusType, AUTOMATIC)                Error
)
{
80009068:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
8000906a:	cc 40       	ld.a %a15,[%a4]0
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
8000906c:	39 ff 10 00 	ld.bu %d15,[%a15]16

  p_ccb->os_status = OSEE_KERNEL_SHUTDOWN;
80009070:	82 32       	mov %d2,3
80009072:	e9 f2 10 00 	st.b [%a15]16,%d2
  /* Used to propagate the error to the ShutdownHook */
  p_ccb->last_error = Error;
80009076:	e9 f4 12 00 	st.b [%a15]18,%d4

  if (os_status == OSEE_KERNEL_STARTED) {
8000907a:	5e 25       	jne %d15,2,80009084 <osEE_shutdown_os+0x1c>
    osEE_idle_task_terminate(p_cdb->p_idle_task);
8000907c:	99 44 04 00 	ld.a %a4,[%a4]4
80009080:	6d 00 89 06 	call 80009d92 <osEE_idle_task_terminate>
  } else {
    osEE_call_shutdown_hook(p_ccb, Error);
  }
  for (;;) {
    ; /* Endless Loop (entered only if Kernel Not Started) */
  }
80009084:	3c 00       	j 80009084 <osEE_shutdown_os+0x1c>

80009086 <DisableAllInterrupts>:
FUNC(void, OS_CODE)
  DisableAllInterrupts
(
  void
)
{
80009086:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009088:	91 00 00 f8 	movh.a %a15,32768
8000908c:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
80009090:	0d 00 40 03 	disable 
  osEE_hal_disableIRQ();

  osEE_stack_monitoring(p_cdb);

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_DisableAllInterrupts);
  p_ccb->d_isr_all_cnt = 1U;
80009094:	82 1f       	mov %d15,1
80009096:	e9 ff 1e 00 	st.b [%a15]30,%d15
8000909a:	00 90       	ret 

8000909c <EnableAllInterrupts>:
FUNC(void, OS_CODE)
  EnableAllInterrupts
(
  void
)
{
8000909c:	40 ae       	mov.aa %a14,%sp
   * ResumeOSInterrupts() are called and no corresponding DisableAllInterupts()
   * /SuspendAllInterrupts()/SuspendOSInterrupts() was done before, the
   * Operating System module shall not perform this Operating System service.
   * (SRS_Os_11009) */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000909e:	91 00 00 f8 	movh.a %a15,32768
800090a2:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_EnableAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->d_isr_all_cnt > 0U) {
800090a6:	39 ff 1e 00 	ld.bu %d15,[%a15]30 <8000014c <osEE_cdb_var>>
800090aa:	6e 06       	jz %d15,800090b6 <EnableAllInterrupts+0x1a>
    p_ccb->d_isr_all_cnt = 0U;
800090ac:	82 0f       	mov %d15,0
800090ae:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
800090b2:	0d 00 00 03 	enable 
800090b6:	00 90       	ret 

800090b8 <SuspendAllInterrupts>:
FUNC(void, OS_CODE)
  SuspendAllInterrupts
(
  void
)
{
800090b8:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800090ba:	91 00 00 f8 	movh.a %a15,32768
800090be:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>
(
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb,
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb
)
{
  if (p_ccb->s_isr_all_cnt == 0U) {
800090c2:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <8000014c <osEE_cdb_var>>
800090c6:	ee 0c       	jnz %d15,800090de <SuspendAllInterrupts+0x26>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800090c8:	4d c0 e2 ff 	mfcr %d15,$icr
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
800090cc:	0d 00 40 03 	disable 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_suspendIRQ();
    p_ccb->prev_s_isr_all_status = flags;
800090d0:	68 5f       	st.w [%a15]20,%d15
    ++p_ccb->s_isr_all_cnt;
800090d2:	39 ff 1c 00 	ld.bu %d15,[%a15]28
800090d6:	c2 1f       	add %d15,1
800090d8:	e9 ff 1c 00 	st.b [%a15]28,%d15
800090dc:	00 90       	ret 
  } else if (p_ccb->s_isr_all_cnt < OSEE_MAX_BYTE) {
800090de:	8b ff 0f 22 	eq %d2,%d15,255
800090e2:	f6 25       	jnz %d2,800090ec <SuspendAllInterrupts+0x34>
    ++p_ccb->s_isr_all_cnt;
800090e4:	c2 1f       	add %d15,1
800090e6:	e9 ff 1c 00 	st.b [%a15]28,%d15
800090ea:	00 90       	ret 
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
800090ec:	91 00 00 48 	movh.a %a4,32768
800090f0:	d9 44 0c 50 	lea %a4,[%a4]332 <8000014c <osEE_cdb_var>>
800090f4:	3b 90 01 40 	mov %d4,25
800090f8:	3c b8       	j 80009068 <osEE_shutdown_os>

800090fa <ResumeAllInterrupts>:
FUNC(void, OS_CODE)
  ResumeAllInterrupts
(
  void
)
{
800090fa:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800090fc:	91 00 00 f8 	movh.a %a15,32768
80009100:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeAllInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_all_cnt > 0U) {
80009104:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <8000014c <osEE_cdb_var>>
80009108:	6e 0b       	jz %d15,8000911e <ResumeAllInterrupts+0x24>
    --p_ccb->s_isr_all_cnt;
8000910a:	c2 ff       	add %d15,-1
8000910c:	16 ff       	and %d15,255
8000910e:	e9 ff 1c 00 	st.b [%a15]28,%d15

    if (p_ccb->s_isr_all_cnt == 0U) {
80009112:	ee 06       	jnz %d15,8000911e <ResumeAllInterrupts+0x24>
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009114:	4c f5       	ld.w %d15,[%a15]20
80009116:	cd cf e2 0f 	mtcr $icr,%d15
8000911a:	0d 00 c0 04 	isync 
8000911e:	00 90       	ret 

80009120 <SuspendOSInterrupts>:
FUNC(void, OS_CODE)
  SuspendOSInterrupts
(
  void
)
{
80009120:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
80009122:	91 00 00 f8 	movh.a %a15,32768
80009126:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_SuspendOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt == 0U) {
8000912a:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <8000014c <osEE_cdb_var>>
8000912e:	ee 18       	jnz %d15,8000915e <SuspendOSInterrupts+0x3e>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009130:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009134:	8f f2 0f f1 	and %d15,%d2,255
80009138:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000913c:	ee 0a       	jnz %d15,80009150 <SuspendOSInterrupts+0x30>
    OsEE_icr icr_temp = icr;
8000913e:	02 2f       	mov %d15,%d2
80009140:	3b 30 01 30 	mov %d3,19
80009144:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009148:	cd cf e2 0f 	mtcr $icr,%d15
8000914c:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_hal_begin_nested_primitive();
    p_ccb->prev_s_isr_os_status = flags;
80009150:	68 62       	st.w [%a15]24,%d2
    ++p_ccb->s_isr_os_cnt;
80009152:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80009156:	c2 1f       	add %d15,1
80009158:	e9 ff 1d 00 	st.b [%a15]29,%d15
8000915c:	00 90       	ret 
  } else if (p_ccb->s_isr_os_cnt < OSEE_MAX_BYTE) {
8000915e:	8b ff 0f 22 	eq %d2,%d15,255
80009162:	f6 25       	jnz %d2,8000916c <SuspendOSInterrupts+0x4c>
    ++p_ccb->s_isr_os_cnt;
80009164:	c2 1f       	add %d15,1
80009166:	e9 ff 1d 00 	st.b [%a15]29,%d15
8000916a:	00 90       	ret 
  } else {
#if (defined(OSEE_HAS_PROTECTIONHOOK))
#error Add ProtectionHook call here once it has been implemented
#else
    osEE_shutdown_os(p_cdb, E_OS_SYS_SUSPEND_NESTING_LIMIT);
8000916c:	91 00 00 48 	movh.a %a4,32768
80009170:	d9 44 0c 50 	lea %a4,[%a4]332 <8000014c <osEE_cdb_var>>
80009174:	3b 90 01 40 	mov %d4,25
80009178:	1d ff 78 ff 	j 80009068 <osEE_shutdown_os>

8000917c <ResumeOSInterrupts>:
FUNC(void, OS_CODE)
  ResumeOSInterrupts
(
  void
)
{
8000917c:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
8000917e:	91 00 00 f8 	movh.a %a15,32768
80009182:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_ResumeOSInterrupts);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->s_isr_os_cnt > 0U) {
80009186:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <8000014c <osEE_cdb_var>>
8000918a:	6e 16       	jz %d15,800091b6 <ResumeOSInterrupts+0x3a>
    --p_ccb->s_isr_os_cnt;
8000918c:	c2 ff       	add %d15,-1
8000918e:	16 ff       	and %d15,255
80009190:	e9 ff 1d 00 	st.b [%a15]29,%d15

    if (p_ccb->s_isr_os_cnt == 0U) {
80009194:	ee 11       	jnz %d15,800091b6 <ResumeOSInterrupts+0x3a>
      osEE_hal_end_nested_primitive(p_ccb->prev_s_isr_os_status);
80009196:	48 62       	ld.w %d2,[%a15]24
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009198:	4d c0 e2 3f 	mfcr %d3,$icr
8000919c:	02 3f       	mov %d15,%d3
8000919e:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
800091a2:	8f f2 0f 21 	and %d2,%d2,255
800091a6:	5f 23 08 00 	jeq %d3,%d2,800091b6 <ResumeOSInterrupts+0x3a>
800091aa:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800091ae:	cd cf e2 0f 	mtcr $icr,%d15
800091b2:	0d 00 c0 04 	isync 
800091b6:	00 90       	ret 

800091b8 <StartOS>:
FUNC(StatusType, OS_CODE)
  StartOS
(
  VAR(AppModeType, AUTOMATIC) Mode
)
{
800091b8:	40 ae       	mov.aa %a14,%sp
800091ba:	02 49       	mov %d9,%d4
  CONST(CoreIdType, AUTOMATIC)           curr_core_id = osEE_get_curr_core_id();
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)  p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)   p_kcb = p_kdb->p_kcb;
#endif /* !OSEE_SINGLECORE */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
800091bc:	91 00 00 f8 	movh.a %a15,32768
800091c0:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800091c4:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800091c8:	8f f8 0f f1 	and %d15,%d8,255
800091cc:	8b 3f a1 f2 	ge.u %d15,%d15,19
800091d0:	ee 0a       	jnz %d15,800091e4 <StartOS+0x2c>
    OsEE_icr icr_temp = icr;
800091d2:	02 8f       	mov %d15,%d8
800091d4:	3b 30 01 20 	mov %d2,19
800091d8:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800091dc:	cd cf e2 0f 	mtcr $icr,%d15
800091e0:	0d 00 c0 04 	isync 
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
800091e4:	39 ff 10 00 	ld.bu %d15,[%a15]16
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
    ev = E_OS_ACCESS;
800091e8:	82 15       	mov %d5,1
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
800091ea:	ee 21       	jnz %d15,8000922c <StartOS+0x74>
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
800091ec:	6d 00 e6 05 	call 80009db8 <osEE_cpu_startos>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
      osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
      ev = E_OS_SYS_INIT;
800091f0:	3b 80 01 50 	mov %d5,24
  } else
#if (!defined(OSEE_SINGLECORE))
  if (curr_core_id == OS_CORE_ID_MASTER) {
    /* I rely in C shortcut for boolean expression */
#endif /* !OSEE_SINGLECORE */
    if (osEE_cpu_startos() == OSEE_FALSE) {
800091f4:	df 02 1c 00 	jeq %d2,0,8000922c <StartOS+0x74>
800091f8:	3c 24       	j 80009240 <StartOS+0x88>
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
      p_ccb->os_status = OSEE_KERNEL_STARTED;
800091fa:	82 2f       	mov %d15,2
800091fc:	e9 ff 10 00 	st.b [%a15]16,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */

    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);

#if (!defined(OSEE_STARTOS_RETURN)) && (!defined(OSEE_API_DYNAMIC))
    if (p_ccb->os_status == OSEE_KERNEL_STARTED) {
80009200:	39 ff 10 00 	ld.bu %d15,[%a15]16
80009204:	5e 2a       	jne %d15,2,80009218 <StartOS+0x60>
  osEE_idle_task_start
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_idle_tdb
)
{
  osEE_hal_save_ctx_and_ready2stacked(p_idle_tdb, p_idle_tdb->hdb.p_scb,
80009206:	40 c4       	mov.aa %a4,%a12
80009208:	99 c5 04 00 	ld.a %a5,[%a12]4
8000920c:	40 56       	mov.aa %a6,%a5
8000920e:	6d 00 3a 06 	call 80009e82 <osEE_hal_save_ctx_and_ready2stacked>
      osEE_idle_task_start(p_idle_tdb);
      osEE_task_end(p_idle_tdb);
80009212:	40 c4       	mov.aa %a4,%a12
80009214:	6d 00 8a 04 	call 80009b28 <osEE_task_end>
}

/* Disable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_disableIRQ(void)
{
    __asm__ volatile ("disable" : : : "memory");
80009218:	0d 00 40 03 	disable 
    }
#if (!defined(OSEE_SHUTDOWN_DO_NOT_RETURN_ON_MAIN))
    osEE_hal_disableIRQ();
    osEE_shutdown_os_extra();
    osEE_call_shutdown_hook(p_ccb, p_ccb->last_error);
    for(;;) {} /* Endless Loop */
8000921c:	3c 00       	j 8000921c <StartOS+0x64>
8000921e:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009222:	cd cf e2 0f 	mtcr $icr,%d15
80009226:	0d 00 c0 04 	isync 
8000922a:	3c 1b       	j 80009260 <StartOS+0xa8>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000922c:	4d c0 e2 4f 	mfcr %d4,$icr
80009230:	02 4f       	mov %d15,%d4
80009232:	8f f4 0f 41 	and %d4,%d4,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009236:	8f f8 0f 31 	and %d3,%d8,255
8000923a:	5f 34 f2 ff 	jne %d4,%d3,8000921e <StartOS+0x66>
8000923e:	3c 11       	j 80009260 <StartOS+0xa8>
  }
#endif /* !OSEE_SINGLECORE */
  if (ev == E_OK) {
#if (!defined(OSEE_STARTOS_RETURN)) || (defined(OSEE_API_DYNAMIC))
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_idle_tdb = p_cdb->p_idle_task;
80009240:	91 00 00 28 	movh.a %a2,32768
80009244:	d9 22 0c 50 	lea %a2,[%a2]332 <8000014c <osEE_cdb_var>>
80009248:	99 2c 04 00 	ld.a %a12,[%a2]4 <80000004 <BootModeHeader0+0x4>>
    /* Fill CCB */
    p_ccb->p_curr                   = p_idle_tdb;
#endif /* OSEE_API_DYNAMIC */

    /* GetActiveApplicationMode can be called inside StartupHook */
    p_ccb->os_status                = OSEE_KERNEL_STARTING;
8000924c:	82 1f       	mov %d15,1
8000924e:	e9 ff 10 00 	st.b [%a15]16,%d15
    p_ccb->app_mode                 = real_mode;
80009252:	e9 f9 11 00 	st.b [%a15]17,%d9
    }
#endif /* !OSEE_SINGLECORE */

/* [SWS_Os_00607] StartOS shall start the OS on the core on which it is called.
    (SRS_Os_80006, SRS_Os_80013) */
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
80009256:	39 ff 10 00 	ld.bu %d15,[%a15]16
8000925a:	df 1f d3 ff 	jne %d15,1,80009200 <StartOS+0x48>
8000925e:	3c ce       	j 800091fa <StartOS+0x42>
    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);
    osEE_end_primitive(flags);
  }

  return ev;
}
80009260:	02 52       	mov %d2,%d5
80009262:	00 90       	ret 

80009264 <GetActiveApplicationMode>:
FUNC(AppModeType, OS_CODE)
  GetActiveApplicationMode
(
  void
)
{
80009264:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI */
    p_ccb = p_cdb->p_ccb;
80009266:	91 00 00 f8 	movh.a %a15,32768
8000926a:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
8000926e:	39 ff 10 00 	ld.bu %d15,[%a15]16 <8000014c <osEE_cdb_var>>
    app_mode = p_ccb->app_mode;
  } else {
    app_mode = INVALID_APPMODE;
80009272:	3b f0 0f 20 	mov %d2,255

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetActiveApplicationMode);

  osEE_stack_monitoring(p_cdb);

  if (p_ccb->os_status >= OSEE_KERNEL_STARTING) {
80009276:	6e 03       	jz %d15,8000927c <GetActiveApplicationMode+0x18>
    app_mode = p_ccb->app_mode;
80009278:	39 f2 11 00 	ld.bu %d2,[%a15]17
  }

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetActiveApplicationMode);

  return app_mode;
}
8000927c:	00 90       	ret 

8000927e <ActivateTask>:
FUNC(StatusType, OS_CODE)
  ActivateTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
8000927e:	40 ae       	mov.aa %a14,%sp
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
80009280:	91 00 00 f8 	movh.a %a15,32768
80009284:	d9 ff 38 40 	lea %a15,[%a15]312 <80000138 <osEE_kdb_var>>
80009288:	4c f2       	ld.w %d15,[%a15]8
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
8000928a:	82 38       	mov %d8,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
8000928c:	7f f4 39 80 	jge.u %d4,%d15,800092fe <ActivateTask+0x80>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
80009290:	91 00 00 f8 	movh.a %a15,32768
80009294:	d9 ff 38 40 	lea %a15,[%a15]312 <80000138 <osEE_kdb_var>>
80009298:	c8 1f       	ld.a %a15,[%a15]4
8000929a:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000929e:	c8 0f       	ld.a %a15,[%a15]0

    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
800092a0:	39 ff 14 00 	ld.bu %d15,[%a15]20
800092a4:	ff 2f 2d 80 	jge.u %d15,2,800092fe <ActivateTask+0x80>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800092a8:	4d c0 e2 9f 	mfcr %d9,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800092ac:	8f f9 0f f1 	and %d15,%d9,255
800092b0:	8b 3f a1 f2 	ge.u %d15,%d15,19
800092b4:	ee 0a       	jnz %d15,800092c8 <ActivateTask+0x4a>
    OsEE_icr icr_temp = icr;
800092b6:	02 9f       	mov %d15,%d9
800092b8:	3b 30 01 20 	mov %d2,19
800092bc:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800092c0:	cd cf e2 0f 	mtcr $icr,%d15
800092c4:	0d 00 c0 04 	isync 
      CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

      ev = osEE_task_activated(p_tdb_act);
800092c8:	40 f4       	mov.aa %a4,%a15
800092ca:	6d 00 23 04 	call 80009b10 <osEE_task_activated>
800092ce:	02 28       	mov %d8,%d2

      if (ev == E_OK) {
800092d0:	f6 28       	jnz %d2,800092e0 <ActivateTask+0x62>
        (void)osEE_scheduler_task_activated(p_kdb, p_tdb_act);
800092d2:	91 00 00 48 	movh.a %a4,32768
800092d6:	d9 44 38 40 	lea %a4,[%a4]312 <80000138 <osEE_kdb_var>>
800092da:	40 f5       	mov.aa %a5,%a15
800092dc:	6d 00 57 04 	call 80009b8a <osEE_scheduler_task_activated>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800092e0:	4d c0 e2 3f 	mfcr %d3,$icr
800092e4:	02 3f       	mov %d15,%d3
800092e6:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
800092ea:	8f f9 0f 21 	and %d2,%d9,255
800092ee:	5f 23 08 00 	jeq %d3,%d2,800092fe <ActivateTask+0x80>
800092f2:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800092f6:	cd cf e2 0f 	mtcr $icr,%d15
800092fa:	0d 00 c0 04 	isync 
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ActivateTask);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
800092fe:	02 82       	mov %d2,%d8
80009300:	00 90       	ret 

80009302 <ChainTask>:
FUNC(StatusType, OS_CODE)
  ChainTask
(
  VAR(TaskType, AUTOMATIC) TaskID
)
{
80009302:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb = p_cdb->p_ccb;
80009304:	91 00 00 f8 	movh.a %a15,32768
80009308:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
8000930c:	48 03       	ld.w %d3,[%a15]0
8000930e:	91 00 00 28 	movh.a %a2,32768
80009312:	d9 22 38 40 	lea %a2,[%a2]312 <80000138 <osEE_kdb_var>>
80009316:	4c 22       	ld.w %d15,[%a2]8
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009318:	82 32       	mov %d2,3
  )
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_CHECKS */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
8000931a:	7f f4 5e 80 	jge.u %d4,%d15,800093d6 <ChainTask+0xd4>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_act = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000931e:	91 00 00 28 	movh.a %a2,32768
80009322:	d9 22 38 40 	lea %a2,[%a2]312 <80000138 <osEE_kdb_var>>
80009326:	99 22 04 00 	ld.a %a2,[%a2]4 <80000004 <BootModeHeader0+0x4>>
8000932a:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
8000932e:	d4 2c       	ld.a %a12,[%a2]
      ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
    } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
    if (p_tdb_act->task_type <= OSEE_TASK_TYPE_EXTENDED) {
80009330:	39 cf 14 00 	ld.bu %d15,[%a12]20
80009334:	ff 2f 51 80 	jge.u %d15,2,800093d6 <ChainTask+0xd4>
      VAR(OsEE_reg, AUTOMATIC)  flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
80009338:	39 ff 1c 00 	ld.bu %d15,[%a15]28
8000933c:	6e 09       	jz %d15,8000934e <ChainTask+0x4c>
        p_ccb->s_isr_all_cnt = 0U;
8000933e:	82 0f       	mov %d15,0
80009340:	e9 ff 1c 00 	st.b [%a15]28,%d15
80009344:	4c f5       	ld.w %d15,[%a15]20
80009346:	cd cf e2 0f 	mtcr $icr,%d15
8000934a:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
8000934e:	39 ff 1e 00 	ld.bu %d15,[%a15]30
80009352:	6e 06       	jz %d15,8000935e <ChainTask+0x5c>
        p_ccb->d_isr_all_cnt = 0U;
80009354:	82 0f       	mov %d15,0
80009356:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
8000935a:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000935e:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009362:	8f f8 0f f1 	and %d15,%d8,255
80009366:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000936a:	ee 0a       	jnz %d15,8000937e <ChainTask+0x7c>
    OsEE_icr icr_temp = icr;
8000936c:	02 8f       	mov %d15,%d8
8000936e:	3b 30 01 20 	mov %d2,19
80009372:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009376:	cd cf e2 0f 	mtcr $icr,%d15
8000937a:	0d 00 c0 04 	isync 
      }
#endif /* !OSEE_HAS_SERVICE_PROTECTION */

      flags = osEE_begin_primitive();

      if (p_tdb_act == p_curr) {
8000937e:	80 cf       	mov.d %d15,%a12
80009380:	7e 35       	jne %d15,%d3,8000938a <ChainTask+0x88>
        /* If the Task chain on it self, flag it. */
        p_tdb_act->p_tcb->status = OSEE_TASK_CHAINED;
80009382:	cc c3       	ld.a %a15,[%a12]12
80009384:	82 5f       	mov %d15,5
80009386:	28 2f       	st.b [%a15]2,%d15
80009388:	3c 15       	j 800093b2 <ChainTask+0xb0>
        ev = E_OK;
      } else {
        ev = osEE_task_activated(p_tdb_act);
8000938a:	40 c4       	mov.aa %a4,%a12
8000938c:	6d 00 c2 03 	call 80009b10 <osEE_task_activated>
        if (ev == E_OK) {
80009390:	df 02 1a 80 	jne %d2,0,800093c4 <ChainTask+0xc2>
          (void)osEE_scheduler_task_insert(p_kdb, p_tdb_act);
80009394:	91 00 00 48 	movh.a %a4,32768
80009398:	d9 44 38 40 	lea %a4,[%a4]312 <80000138 <osEE_kdb_var>>
8000939c:	40 c5       	mov.aa %a5,%a12
8000939e:	6d 00 2a 04 	call 80009bf2 <osEE_scheduler_task_insert>
800093a2:	3c 08       	j 800093b2 <ChainTask+0xb0>
800093a4:	37 8f 08 f0 	insert %d15,%d15,%d8,0,8
800093a8:	cd cf e2 0f 	mtcr $icr,%d15
800093ac:	0d 00 c0 04 	isync 
800093b0:	00 90       	ret 
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
800093b2:	91 00 00 f8 	movh.a %a15,32768
800093b6:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
800093ba:	c8 0f       	ld.a %a15,[%a15]0
800093bc:	c8 14       	ld.a %a4,[%a15]4
800093be:	a0 05       	mov.a %a5,0
800093c0:	1d 00 98 05 	j 80009ef0 <osEE_hal_terminate_ctx>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800093c4:	4d c0 e2 3f 	mfcr %d3,$icr
800093c8:	02 3f       	mov %d15,%d3
800093ca:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
800093ce:	8f f8 0f 81 	and %d8,%d8,255
800093d2:	5f 83 e9 ff 	jne %d3,%d8,800093a4 <ChainTask+0xa2>
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ChainTask);

  return ev;
}
800093d6:	00 90       	ret 

800093d8 <TerminateTask>:
FUNC(StatusType, OS_CODE)
  TerminateTask
(
  void
)
{
800093d8:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb       = p_cdb->p_ccb;
800093da:	91 00 00 f8 	movh.a %a15,32768
800093de:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
800093e2:	c8 02       	ld.a %a2,[%a15]0
#endif /* OSEE_HAS_CHECKS elif (OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING) */
  {
    VAR(OsEE_reg, AUTOMATIC) flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
800093e4:	39 ff 1c 00 	ld.bu %d15,[%a15]28 <8000014c <osEE_cdb_var>>
800093e8:	6e 09       	jz %d15,800093fa <TerminateTask+0x22>
        p_ccb->s_isr_all_cnt = 0U;
800093ea:	82 0f       	mov %d15,0
800093ec:	e9 ff 1c 00 	st.b [%a15]28,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800093f0:	4c f5       	ld.w %d15,[%a15]20
800093f2:	cd cf e2 0f 	mtcr $icr,%d15
800093f6:	0d 00 c0 04 	isync 
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
800093fa:	39 ff 1e 00 	ld.bu %d15,[%a15]30
800093fe:	6e 06       	jz %d15,8000940a <TerminateTask+0x32>
        p_ccb->d_isr_all_cnt = 0U;
80009400:	82 0f       	mov %d15,0
80009402:	e9 ff 1e 00 	st.b [%a15]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
80009406:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000940a:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000940e:	8f ff 0f 21 	and %d2,%d15,255
80009412:	8b 32 a1 22 	ge.u %d2,%d2,19
80009416:	f6 29       	jnz %d2,80009428 <TerminateTask+0x50>
80009418:	3b 30 01 20 	mov %d2,19
8000941c:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009420:	cd cf e2 0f 	mtcr $icr,%d15
80009424:	0d 00 c0 04 	isync 
80009428:	99 24 04 00 	ld.a %a4,[%a2]4
8000942c:	a0 05       	mov.a %a5,0
8000942e:	1d 00 61 05 	j 80009ef0 <osEE_hal_terminate_ctx>

80009432 <Schedule>:
FUNC(StatusType, OS_CODE)
  Schedule
(
  void
)
{
80009432:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb  = p_cdb->p_ccb;
80009434:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_curr = p_ccb->p_curr;
80009438:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>
8000943c:	c8 0f       	ld.a %a15,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb  = p_curr->p_tcb;
8000943e:	c8 3c       	ld.a %a12,[%a15]12
    ev = E_OS_SPINLOCK;
#endif /* OSEE_HAS_RESOURCES */
  } else
#endif /* OSEE_HAS_RESOURCES || OSEE_HAS_SPINLOCKS */
#endif /* OSEE_HAS_CHECKS */
  if (p_tcb->current_prio == p_curr->dispatch_prio)
80009440:	39 c2 01 00 	ld.bu %d2,[%a12]1 <8000014c <osEE_cdb_var>>
80009444:	39 ff 1d 00 	ld.bu %d15,[%a15]29 <8000014c <osEE_cdb_var>>
80009448:	5f f2 2d 80 	jne %d2,%d15,800094a2 <Schedule+0x70>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000944c:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009450:	8f f8 0f f1 	and %d15,%d8,255
80009454:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009458:	ee 0a       	jnz %d15,8000946c <Schedule+0x3a>
    OsEE_icr icr_temp = icr;
8000945a:	02 8f       	mov %d15,%d8
8000945c:	3b 30 01 20 	mov %d2,19
80009460:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009464:	cd cf e2 0f 	mtcr $icr,%d15
80009468:	0d 00 c0 04 	isync 
  {
    /* Begin primitive */
    CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();

    /* Release internal resources */
    p_tcb->current_prio = p_curr->ready_prio;
8000946c:	39 ff 1c 00 	ld.bu %d15,[%a15]28
80009470:	2c c1       	st.b [%a12]1,%d15
    /* Try preemption */
    (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
80009472:	91 00 00 48 	movh.a %a4,32768
80009476:	d9 44 38 40 	lea %a4,[%a4]312 <80000138 <osEE_kdb_var>>
8000947a:	6d 00 36 04 	call 80009ce6 <osEE_scheduler_task_preemption_point>
    /* Restore internal resources */
    p_tcb->current_prio = p_curr->dispatch_prio;
8000947e:	39 ff 1d 00 	ld.bu %d15,[%a15]29
80009482:	2c c1       	st.b [%a12]1,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009484:	4d c0 e2 3f 	mfcr %d3,$icr
80009488:	02 3f       	mov %d15,%d3
8000948a:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000948e:	8f f8 0f 21 	and %d2,%d8,255
80009492:	5f 23 08 00 	jeq %d3,%d2,800094a2 <Schedule+0x70>
80009496:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000949a:	cd cf e2 0f 	mtcr $icr,%d15
8000949e:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_Schedule);

  return ev;
}
800094a2:	82 02       	mov %d2,0
800094a4:	00 90       	ret 

800094a6 <GetResource>:
FUNC(StatusType, OS_CODE)
  GetResource
(
  VAR(ResourceType, AUTOMATIC) ResID
)
{
800094a6:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
800094a8:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_curr = p_ccb->p_curr;
800094ac:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>
800094b0:	c8 04       	ld.a %a4,[%a15]0
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (res_id < p_kdb->p_kcb->free_res_index);
#else
  return (res_id < p_kdb->res_array_size);
800094b2:	91 00 00 f8 	movh.a %a15,32768
800094b6:	d9 ff 38 40 	lea %a15,[%a15]312 <80000138 <osEE_kdb_var>>
800094ba:	4c f4       	ld.w %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
    ev = E_OS_ID;
800094bc:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
800094be:	7f f4 4c 80 	jge.u %d4,%d15,80009556 <GetResource+0xb0>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, OS_APPL_CONST)
      p_reso_db     = (*p_kdb->p_res_ptr_array)[ResID];
800094c2:	91 00 00 f8 	movh.a %a15,32768
800094c6:	d9 ff 38 40 	lea %a15,[%a15]312 <80000138 <osEE_kdb_var>>
800094ca:	c8 3f       	ld.a %a15,[%a15]12
800094cc:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
800094d0:	c8 03       	ld.a %a3,[%a15]0
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, OS_APPL_DATA)
      p_reso_cb     = p_reso_db->p_cb;
800094d2:	d4 32       	ld.a %a2,[%a3]
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_curr_tcb    = p_curr->p_tcb;
800094d4:	cc 43       	ld.a %a15,[%a4]12
    CONST(TaskPrio, AUTOMATIC)
      reso_prio     = p_reso_db->prio;
800094d6:	0c 34       	ld.bu %d15,[%a3]4
    CONST(TaskPrio, AUTOMATIC)
      current_prio  = p_curr_tcb->current_prio;
800094d8:	08 14       	ld.bu %d4,[%a15]1
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800094da:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800094de:	8f f2 0f 31 	and %d3,%d2,255
800094e2:	8b 33 a1 32 	ge.u %d3,%d3,19
800094e6:	f6 3a       	jnz %d3,800094fa <GetResource+0x54>
    OsEE_icr icr_temp = icr;
800094e8:	02 23       	mov %d3,%d2
800094ea:	3b 30 01 50 	mov %d5,19
800094ee:	37 53 08 30 	insert %d3,%d3,%d5,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800094f2:	cd c3 e2 0f 	mtcr $icr,%d3
800094f6:	0d 00 c0 04 	isync 
    /* Set new CCPN value */
    icr_temp.bits.ccpn = OSEE_ISR2_MAX_HW_PRIO;
    osEE_tc_set_icr(icr_temp);
  }

  return icr.reg;
800094fa:	02 23       	mov %d3,%d2
      ev = E_OS_CORE;
    } else
#endif /* !OSEE_SINGLECORE */
#endif /* OSEE_HAS_CHECKS */
    {
      if (current_prio < reso_prio) {
800094fc:	7f f4 16 80 	jge.u %d4,%d15,80009528 <GetResource+0x82>
        p_curr_tcb->current_prio = reso_prio;
80009500:	28 1f       	st.b [%a15]1,%d15

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
80009502:	37 0f 48 50 	extr %d5,%d15,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
80009506:	8b ff 2f 72 	ne %d7,%d15,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
8000950a:	16 7f       	and %d15,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
8000950c:	c2 1f       	add %d15,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
8000950e:	8f 02 d0 61 	andn %d6,%d2,256
80009512:	8f f2 cf 31 	andn %d3,%d2,255
80009516:	a6 f3       	or %d3,%d15
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009518:	8f f2 cf 21 	andn %d2,%d2,255
8000951c:	2b 63 40 37 	sel %d3,%d7,%d3,%d6
80009520:	8b 05 40 52 	lt %d5,%d5,0
80009524:	2b 23 40 35 	sel %d3,%d5,%d3,%d2
        flags = osEE_hal_prepare_ipl(flags, reso_prio);
      }

      p_reso_cb->p_owner    = p_curr;
80009528:	b5 24 08 00 	st.a [%a2]8,%a4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000952c:	4d c0 e2 5f 	mfcr %d5,$icr
80009530:	02 5f       	mov %d15,%d5
80009532:	8f f5 0f 51 	and %d5,%d5,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009536:	8f f3 0f 21 	and %d2,%d3,255
8000953a:	5f 25 08 00 	jeq %d5,%d2,8000954a <GetResource+0xa4>
8000953e:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009542:	cd cf e2 0f 	mtcr $icr,%d15
80009546:	0d 00 c0 04 	isync 

      osEE_end_primitive(flags);

      p_reso_cb->p_next     = p_curr_tcb->p_last_m;
8000954a:	4c f1       	ld.w %d15,[%a15]4
8000954c:	6c 20       	st.w [%a2]0,%d15
      p_reso_cb->prev_prio  = current_prio;
8000954e:	e9 24 04 00 	st.b [%a2]4,%d4
      p_curr_tcb->p_last_m  = p_reso_db;
80009552:	e8 13       	st.a [%a15]4,%a3

      ev = E_OK;
80009554:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetResource);

  return ev;
}
80009556:	00 90       	ret 

80009558 <ReleaseResource>:
FUNC(StatusType, OS_CODE)
  ReleaseResource
(
  VAR(ResourceType, AUTOMATIC) ResID
)
{
80009558:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
8000955a:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_curr = p_ccb->p_curr;
8000955e:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>
80009562:	c8 03       	ld.a %a3,[%a15]0
80009564:	91 00 00 f8 	movh.a %a15,32768
80009568:	d9 ff 38 40 	lea %a15,[%a15]312 <80000138 <osEE_kdb_var>>
8000956c:	4c f4       	ld.w %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
    ev = E_OS_ID;
8000956e:	82 32       	mov %d2,3
  if (p_ccb->os_context > OSEE_TASK_ISR2_CTX)
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  if (!osEE_is_valid_res_id(p_kdb, ResID)) {
80009570:	7f f4 69 80 	jge.u %d4,%d15,80009642 <ReleaseResource+0xea>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, TYPEDEF)
      p_curr_tcb  = p_curr->p_tcb;
80009574:	cc 33       	ld.a %a15,[%a3]12
    CONSTP2VAR(OsEE_ResourceDB, AUTOMATIC, TYPEDEF)
      p_reso_db   = (*p_kdb->p_res_ptr_array)[ResID];
80009576:	91 00 00 28 	movh.a %a2,32768
8000957a:	d9 22 38 40 	lea %a2,[%a2]312 <80000138 <osEE_kdb_var>>
8000957e:	99 22 0c 00 	ld.a %a2,[%a2]12 <8000000c <BootModeHeader0+0xc>>
80009582:	01 24 02 26 	addsc.a %a2,%a2,%d4,2
    CONSTP2VAR(OsEE_ResourceCB, AUTOMATIC, TYPEDEF)
      p_reso_cb   = p_reso_db->p_cb;
80009586:	d4 22       	ld.a %a2,[%a2]
80009588:	d4 22       	ld.a %a2,[%a2]
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000958a:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000958e:	8f ff 0f 21 	and %d2,%d15,255
80009592:	8b 32 a1 22 	ge.u %d2,%d2,19
80009596:	f6 2a       	jnz %d2,800095aa <ReleaseResource+0x52>
    OsEE_icr icr_temp = icr;
80009598:	02 f2       	mov %d2,%d15
8000959a:	3b 30 01 30 	mov %d3,19
8000959e:	37 32 08 20 	insert %d2,%d2,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800095a2:	cd c2 e2 0f 	mtcr $icr,%d2
800095a6:	0d 00 c0 04 	isync 
    {
      VAR(OsEE_reg, AUTOMATIC)
        flags = osEE_begin_primitive();

      /* Pop the Resources head */
      p_curr_tcb->p_last_m = p_curr_tcb->p_last_m->p_cb->p_next;
800095aa:	c8 14       	ld.a %a4,[%a15]4
800095ac:	d4 44       	ld.a %a4,[%a4]
800095ae:	54 42       	ld.w %d2,[%a4]
800095b0:	68 12       	st.w [%a15]4,%d2

      if (p_curr_tcb->p_last_m != NULL) {
800095b2:	df 02 1a 00 	jeq %d2,0,800095e6 <ReleaseResource+0x8e>
        CONST(TaskPrio, AUTOMATIC)
          prev_prio = p_reso_cb->prev_prio;
800095b6:	39 23 04 00 	ld.bu %d3,[%a2]4

        p_curr_tcb->current_prio = prev_prio;
800095ba:	28 13       	st.b [%a15]1,%d3

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
800095bc:	37 03 48 40 	extr %d4,%d3,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
800095c0:	8b f3 2f 62 	ne %d6,%d3,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
800095c4:	8f f3 07 31 	and %d3,%d3,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
800095c8:	c2 13       	add %d3,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
800095ca:	8f 0f d0 51 	andn %d5,%d15,256
800095ce:	8f ff cf 21 	andn %d2,%d15,255
800095d2:	a6 32       	or %d2,%d3
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
800095d4:	8f ff cf f1 	andn %d15,%d15,255
800095d8:	2b 52 40 26 	sel %d2,%d6,%d2,%d5
800095dc:	8b 04 40 42 	lt %d4,%d4,0
800095e0:	2b f2 40 f4 	sel %d15,%d4,%d2,%d15
800095e4:	3c 17       	j 80009612 <ReleaseResource+0xba>
        flags = osEE_hal_prepare_ipl(flags, prev_prio);
      } else {
        CONST(TaskPrio, AUTOMATIC)
          dispatch_prio = p_curr->dispatch_prio;
800095e6:	39 35 1d 00 	ld.bu %d5,[%a3]29

        p_curr_tcb->current_prio = dispatch_prio;
800095ea:	28 15       	st.b [%a15]1,%d5

OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
800095ec:	37 05 48 60 	extr %d6,%d5,0,8
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
800095f0:	8b f5 2f 42 	ne %d4,%d5,255
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
      OSEE_B_SET(flags, 8U, 0U, OSEE_ISR2_VIRT_TO_HW_PRIO(virt_prio));
800095f4:	8f f5 07 51 	and %d5,%d5,127
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
  } else {
    ret_flags =
800095f8:	c2 15       	add %d5,1
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
  } else if (virt_prio == OSEE_ISR_ALL_PRIO) {
    /* Remove the ICR.IE bit from flags */
    ret_flags = OSEE_B_CLEAR(flags, 1U, OSEE_TC_ICR_IE_POS);
800095fa:	8f 0f d0 21 	andn %d2,%d15,256
800095fe:	8f ff cf 31 	andn %d3,%d15,255
80009602:	a6 53       	or %d3,%d5
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_prepare_ipl(OsEE_reg flags, TaskPrio virt_prio)
{
  OsEE_reg ret_flags;
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
    ret_flags = OSEE_B_SET(flags, 8U, 0U, OSEE_ISR_UNMASKED);
80009604:	8f ff cf 51 	andn %d5,%d15,255
80009608:	2b 23 40 34 	sel %d3,%d4,%d3,%d2
8000960c:	fa 06       	lt %d15,%d6,0
8000960e:	2b 53 40 ff 	sel %d15,%d15,%d3,%d5
        flags = osEE_hal_prepare_ipl(flags, dispatch_prio);
      }

      p_reso_cb->p_owner = NULL;
80009612:	82 02       	mov %d2,0
80009614:	59 22 08 00 	st.w [%a2]8,%d2

      /* Preemption point */
      (void)osEE_scheduler_task_preemption_point(p_kdb);
80009618:	91 00 00 48 	movh.a %a4,32768
8000961c:	d9 44 38 40 	lea %a4,[%a4]312 <80000138 <osEE_kdb_var>>
80009620:	6d 00 63 03 	call 80009ce6 <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009624:	4d c0 e2 5f 	mfcr %d5,$icr
80009628:	02 53       	mov %d3,%d5
8000962a:	8f f5 0f 51 	and %d5,%d5,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000962e:	16 ff       	and %d15,255
80009630:	5f f5 08 00 	jeq %d5,%d15,80009640 <ReleaseResource+0xe8>
80009634:	37 f3 08 30 	insert %d3,%d3,%d15,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009638:	cd c3 e2 0f 	mtcr $icr,%d3
8000963c:	0d 00 c0 04 	isync 

      osEE_end_primitive(flags);

      ev = E_OK;
80009640:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ReleaseResource);

  return ev;
}
80009642:	00 90       	ret 

80009644 <ShutdownOS>:
FUNC(StatusType, OS_CODE)
  ShutdownOS
(
  VAR(StatusType, AUTOMATIC) Error
)
{
80009644:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
80009646:	91 00 00 f8 	movh.a %a15,32768
8000964a:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000964e:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009652:	8f f2 0f f1 	and %d15,%d2,255
80009656:	8b 3f a1 f2 	ge.u %d15,%d15,19
8000965a:	ee 0a       	jnz %d15,8000966e <ShutdownOS+0x2a>
    OsEE_icr icr_temp = icr;
8000965c:	02 2f       	mov %d15,%d2
8000965e:	3b 30 01 30 	mov %d3,19
80009662:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009666:	cd cf e2 0f 	mtcr $icr,%d15
8000966a:	0d 00 c0 04 	isync 
  CONST(OsEE_reg, AUTOMATIC)  flags = osEE_begin_primitive();
  CONST(OsEE_kernel_status, AUTOMATIC) os_status = p_ccb->os_status;
8000966e:	39 ff 10 00 	ld.bu %d15,[%a15]16
  {
    ev = E_OS_CALLEVEL;
  } else
#endif /* OSEE_HAS_SERVICE_PROTECTION */
  {
    if ((os_status == OSEE_KERNEL_STARTED) ||
80009672:	c2 ff       	add %d15,-1
80009674:	16 ff       	and %d15,255
80009676:	ff 2f 08 80 	jge.u %d15,2,80009686 <ShutdownOS+0x42>
        (os_status == OSEE_KERNEL_STARTING))
    {
      osEE_shutdown_os(p_cdb, Error);
8000967a:	91 00 00 48 	movh.a %a4,32768
8000967e:	d9 44 0c 50 	lea %a4,[%a4]332 <8000014c <osEE_cdb_var>>
80009682:	1d ff f3 fc 	j 80009068 <osEE_shutdown_os>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009686:	4d c0 e2 3f 	mfcr %d3,$icr
8000968a:	02 3f       	mov %d15,%d3
8000968c:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
80009690:	8f f2 0f 21 	and %d2,%d2,255
80009694:	5f 23 08 00 	jeq %d3,%d2,800096a4 <ShutdownOS+0x60>
80009698:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000969c:	cd cf e2 0f 	mtcr $icr,%d15
800096a0:	0d 00 c0 04 	isync 

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ShutdownOS);
  osEE_end_primitive(flags);

  return ev;
}
800096a4:	82 72       	mov %d2,7
800096a6:	00 90       	ret 

800096a8 <GetTaskID>:
FUNC(StatusType, OS_CODE)
  GetTaskID
(
  VAR(TaskRefType, AUTOMATIC) TaskID
)
{
800096a8:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb = p_cdb->p_ccb;
800096aa:	91 00 00 f8 	movh.a %a15,32768
800096ae:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
800096b2:	3b e0 00 20 	mov %d2,14
  /* [OS566]: The Operating System API shall check in extended mode all pointer
      argument for NULL pointer and return OS_E_PARAMETER_POINTER
      if such argument is NULL.
      +
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
800096b6:	bd 04 24 00 	jz.a %a4,800096fe <GetTaskID+0x56>
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
      p_tdb = p_ccb->p_curr;
800096ba:	c8 02       	ld.a %a2,[%a15]0
       value to return. If it its ISR2 we have to follow the chain and
       find the first task in the list (which is the running task
       which was preempted by the ISR, which could be the idle task),
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
800096bc:	39 2f 14 00 	ld.bu %d15,[%a2]20
800096c0:	ff 2f 05 80 	jge.u %d15,2,800096ca <GetTaskID+0x22>
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
800096c4:	19 22 10 00 	ld.w %d2,[%a2]16
800096c8:	3c 19       	j 800096fa <GetTaskID+0x52>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
800096ca:	82 f2       	mov %d2,-1
       or we are idle. */
    
    if (p_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
      /* BASIC or EXTENDED tasks are the first ones in the stacked queue */
      tid = p_tdb->tid;
    } else if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
800096cc:	de 27       	jne %d15,2,800096fa <GetTaskID+0x52>
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;
800096ce:	c8 3f       	ld.a %a15,[%a15]12
800096d0:	c8 0f       	ld.a %a15,[%a15]0

      while (p_sn != NULL) {
800096d2:	bd 0f 14 00 	jz.a %a15,800096fa <GetTaskID+0x52>
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
800096d6:	c8 12       	ld.a %a2,[%a15]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
800096d8:	39 2f 14 00 	ld.bu %d15,[%a2]20
800096dc:	ff 2f 0b 80 	jge.u %d15,2,800096f2 <GetTaskID+0x4a>
800096e0:	3c 06       	j 800096ec <GetTaskID+0x44>
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
        CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
          p_searched_tdb = p_sn->p_tdb;
800096e2:	c8 12       	ld.a %a2,[%a15]4
        if (p_searched_tdb->task_type <= OSEE_TASK_TYPE_EXTENDED) {
800096e4:	39 2f 14 00 	ld.bu %d15,[%a2]20
800096e8:	ff 2f 05 80 	jge.u %d15,2,800096f2 <GetTaskID+0x4a>
          tid = p_searched_tdb->tid;
800096ec:	19 22 10 00 	ld.w %d2,[%a2]16
          break;
800096f0:	3c 05       	j 800096fa <GetTaskID+0x52>
        } else {
          p_sn = p_sn->p_next;
800096f2:	c8 0f       	ld.a %a15,[%a15]0
      /* In case of ISR2 search the first stacked that is not an
         ISR2. it could be a basic/extended task or an IDLE task */
      P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn = p_ccb->p_stk_sn->p_next;

      while (p_sn != NULL) {
800096f4:	bd 0f f7 ff 	jnz.a %a15,800096e2 <GetTaskID+0x3a>
      MISRA dictate NULL check for pointers always. */
  if (TaskID == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else {
    VAR(TaskType, AUTOMATIC)
      tid = INVALID_TASK;
800096f8:	82 f2       	mov %d2,-1
    } else {
      /* This is the case of the IDLE task. we do nothing because tid
         is already initialized */
    }
    /* XXX: This SHALL be atomic. */
    (*TaskID) = tid;
800096fa:	74 42       	st.w [%a4],%d2
    ev = E_OK;
800096fc:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskID);

  return ev;
}
800096fe:	00 90       	ret 

80009700 <GetTaskState>:
  GetTaskState
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(TaskStateRefType, AUTOMATIC)  State
)
{
80009700:	40 ae       	mov.aa %a14,%sp
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
80009702:	3b e0 00 20 	mov %d2,14
  /* [SWS_Os_00566]: The Operating System API shall check in extended mode all
     pointer argument for NULL pointer and return OS_E_PARAMETER_POINTER
     if such argument is NULL.
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
80009706:	bd 04 38 00 	jz.a %a4,80009776 <GetTaskState+0x76>
)
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  return (tid < p_kdb->tdb_array_size);
8000970a:	91 00 00 f8 	movh.a %a15,32768
8000970e:	d9 ff 38 40 	lea %a15,[%a15]312 <80000138 <osEE_kdb_var>>
80009712:	4c f2       	ld.w %d15,[%a15]8
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009714:	82 32       	mov %d2,3
     +
     MISRA dictate NULL check for pointers always. */
  if (State == NULL) {
    ev = E_OS_PARAM_POINTER;
  } else
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009716:	7f f4 30 80 	jge.u %d4,%d15,80009776 <GetTaskState+0x76>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000971a:	91 00 00 f8 	movh.a %a15,32768
8000971e:	d9 ff 38 40 	lea %a15,[%a15]312 <80000138 <osEE_kdb_var>>
80009722:	c8 1f       	ld.a %a15,[%a15]4
80009724:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
80009728:	c8 0f       	ld.a %a15,[%a15]0
8000972a:	c8 3f       	ld.a %a15,[%a15]12
    switch (local_state) {
8000972c:	0c f2       	ld.bu %d15,[%a15]2
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
8000972e:	82 02       	mov %d2,0
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb = (*p_kdb->p_tdb_ptr_array)[TaskID];
    /* XXX: This SHALL be atomic. Sure for TriCore,
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
    switch (local_state) {
80009730:	ff 6f 23 80 	jge.u %d15,6,80009776 <GetTaskState+0x76>
80009734:	91 10 00 f8 	movh.a %a15,32769
80009738:	d9 ff 40 d9 	lea %a15,[%a15]-26816 <80009740 <GetTaskState+0x40>>
8000973c:	90 ff       	addsc.a %a15,%a15,%d15,2
8000973e:	dc 0f       	ji %a15
80009740:	1d 00 0c 00 	j 80009758 <GetTaskState+0x58>
80009744:	1d 00 0e 00 	j 80009760 <GetTaskState+0x60>
80009748:	1d 00 0c 00 	j 80009760 <GetTaskState+0x60>
8000974c:	1d 00 0e 00 	j 80009768 <GetTaskState+0x68>
80009750:	1d 00 10 00 	j 80009770 <GetTaskState+0x70>
80009754:	1d 00 0e 00 	j 80009770 <GetTaskState+0x70>
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
80009758:	82 0f       	mov %d15,0
8000975a:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
8000975c:	82 02       	mov %d2,0
            visually check generate asm for each architecture */
    CONST(OsEE_task_status, AUTOMATIC) local_state = p_tdb->p_tcb->status;
    switch (local_state) {
      case OSEE_TASK_SUSPENDED:
        (*State) = SUSPENDED;
        break;
8000975e:	00 90       	ret 
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
80009760:	82 1f       	mov %d15,1
80009762:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009764:	82 02       	mov %d2,0
        (*State) = SUSPENDED;
        break;
      case OSEE_TASK_READY:
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
80009766:	00 90       	ret 
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
80009768:	82 3f       	mov %d15,3
8000976a:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
8000976c:	82 02       	mov %d2,0
      case OSEE_TASK_READY_STACKED:
        (*State) = READY;
        break;
      case OSEE_TASK_WAITING:
        (*State) = WAITING;
        break;
8000976e:	00 90       	ret 
      case OSEE_TASK_RUNNING:
      case OSEE_TASK_CHAINED:
        (*State) = RUNNING;
80009770:	82 4f       	mov %d15,4
80009772:	2c 40       	st.b [%a4]0,%d15
      default:
	/* this should never happen */
        OSEE_RUN_ASSERT(OSEE_FALSE,"Invalid Task State");
        break;
    }
    ev = E_OK;
80009774:	82 02       	mov %d2,0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetTaskState);

  return ev;
}
80009776:	00 90       	ret 

80009778 <WaitEvent>:
FUNC(StatusType, OS_CODE)
  WaitEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
80009778:	40 ae       	mov.aa %a14,%sp
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb       = p_cdb->p_ccb;
8000977a:	91 00 00 f8 	movh.a %a15,32768
8000977e:	99 fc 0c 50 	ld.a %a12,[%a15]332 <8000014c <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
80009782:	d4 cd       	ld.a %a13,[%a12]
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
80009784:	cc d3       	ld.a %a15,[%a13]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009786:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
8000978a:	8f f8 0f f1 	and %d15,%d8,255
8000978e:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009792:	ee 0a       	jnz %d15,800097a6 <WaitEvent+0x2e>
    OsEE_icr icr_temp = icr;
80009794:	02 8f       	mov %d15,%d8
80009796:	3b 30 01 20 	mov %d2,19
8000979a:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000979e:	cd cf e2 0f 	mtcr $icr,%d15
800097a2:	0d 00 c0 04 	isync 
    /* Start Critical Section */
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);

    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
800097a6:	4c f3       	ld.w %d15,[%a15]12
800097a8:	26 4f       	and %d15,%d4
800097aa:	ee 13       	jnz %d15,800097d0 <WaitEvent+0x58>
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;
800097ac:	68 24       	st.w [%a15]8,%d4

      p_curr_tcb->p_own_sn =
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
800097ae:	91 00 00 48 	movh.a %a4,32768
800097b2:	d9 44 0c 50 	lea %a4,[%a4]332 <8000014c <osEE_cdb_var>>
800097b6:	d9 c5 04 00 	lea %a5,[%a12]4 <8000014c <osEE_cdb_var>>
800097ba:	6d 00 98 01 	call 80009aea <osEE_scheduler_core_pop_running>
    /* Check if we have to wait */
    if ((p_curr_tcb->event_mask & Mask) == 0U) {
      /* Set the waiting mask */
      p_curr_tcb->wait_mask = Mask;

      p_curr_tcb->p_own_sn =
800097be:	e8 42       	st.a [%a15]16,%a2
        osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);

      p_curr_tcb->status = OSEE_TASK_WAITING;
800097c0:	82 3f       	mov %d15,3
800097c2:	28 2f       	st.b [%a15]2,%d15

      osEE_unlock_core(p_cdb);

      osEE_change_context_from_running(p_curr, p_ccb->p_curr);
800097c4:	40 d4       	mov.aa %a4,%a13
800097c6:	d4 c5       	ld.a %a5,[%a12]
800097c8:	6d 00 c1 02 	call 80009d4a <osEE_change_context_from_running>

      /* Reset the waiting mask when we exit from the wait condition. */
      p_curr_tcb->wait_mask = 0U;
800097cc:	82 0f       	mov %d15,0
800097ce:	68 2f       	st.w [%a15]8,%d15
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800097d0:	4d c0 e2 3f 	mfcr %d3,$icr
800097d4:	02 3f       	mov %d15,%d3
800097d6:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
800097da:	8f f8 0f 21 	and %d2,%d8,255
800097de:	5f 23 08 00 	jeq %d3,%d2,800097ee <WaitEvent+0x76>
800097e2:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800097e6:	cd cf e2 0f 	mtcr $icr,%d15
800097ea:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
}
800097ee:	82 02       	mov %d2,0
800097f0:	00 90       	ret 

800097f2 <SetEvent>:
  SetEvent
(
  VAR(TaskType,      AUTOMATIC) TaskID,
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
800097f2:	40 ae       	mov.aa %a14,%sp
800097f4:	20 08       	sub.a %sp,8
800097f6:	91 00 00 f8 	movh.a %a15,32768
800097fa:	d9 ff 38 40 	lea %a15,[%a15]312 <80000138 <osEE_kdb_var>>
800097fe:	4c f2       	ld.w %d15,[%a15]8
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009800:	3f f4 06 80 	jlt.u %d4,%d15,8000980c <SetEvent+0x1a>
    ev = E_OS_ID;
80009804:	82 3f       	mov %d15,3
80009806:	e9 ef ff ff 	st.b [%a14]-1,%d15
8000980a:	3c 3c       	j 80009882 <SetEvent+0x90>
  } else {
    P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_sn;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_waking_up = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000980c:	91 00 00 f8 	movh.a %a15,32768
80009810:	d9 ff 38 40 	lea %a15,[%a15]312 <80000138 <osEE_kdb_var>>
80009814:	c8 1f       	ld.a %a15,[%a15]4
80009816:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
8000981a:	c8 04       	ld.a %a4,[%a15]0
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
8000981c:	4d c0 e2 8f 	mfcr %d8,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
80009820:	8f f8 0f f1 	and %d15,%d8,255
80009824:	8b 3f a1 f2 	ge.u %d15,%d15,19
80009828:	ee 0a       	jnz %d15,8000983c <SetEvent+0x4a>
    OsEE_icr icr_temp = icr;
8000982a:	02 8f       	mov %d15,%d8
8000982c:	3b 30 01 20 	mov %d2,19
80009830:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009834:	cd cf e2 0f 	mtcr $icr,%d15
80009838:	0d 00 c0 04 	isync 
8000983c:	02 54       	mov %d4,%d5
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();

    p_sn = osEE_task_event_set_mask(p_tdb_waking_up, Mask, &ev);
8000983e:	d9 e5 ff ff 	lea %a5,[%a14]-1
80009842:	6d 00 82 01 	call 80009b46 <osEE_task_event_set_mask>

    if (p_sn != NULL) {
80009846:	bc 2f       	jz.a %a2,80009864 <SetEvent+0x72>
      /* Release the TASK (and the SN) */
      if (osEE_scheduler_task_unblocked(p_kdb, p_sn))
80009848:	91 00 00 48 	movh.a %a4,32768
8000984c:	d9 44 38 40 	lea %a4,[%a4]312 <80000138 <osEE_kdb_var>>
80009850:	40 25       	mov.aa %a5,%a2
80009852:	6d 00 e7 01 	call 80009c20 <osEE_scheduler_task_unblocked>
80009856:	76 27       	jz %d2,80009864 <SetEvent+0x72>
      {
        (void)osEE_scheduler_task_preemption_point(p_kdb);
80009858:	91 00 00 48 	movh.a %a4,32768
8000985c:	d9 44 38 40 	lea %a4,[%a4]312 <80000138 <osEE_kdb_var>>
80009860:	6d 00 43 02 	call 80009ce6 <osEE_scheduler_task_preemption_point>
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
80009864:	4d c0 e2 3f 	mfcr %d3,$icr
80009868:	02 3f       	mov %d15,%d3
8000986a:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
8000986e:	8f f8 0f 21 	and %d2,%d8,255
80009872:	5f 23 08 00 	jeq %d3,%d2,80009882 <SetEvent+0x90>
80009876:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
8000987a:	cd cf e2 0f 	mtcr $icr,%d15
8000987e:	0d 00 c0 04 	isync 
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
80009882:	39 e2 ff ff 	ld.bu %d2,[%a14]-1
80009886:	00 90       	ret 

80009888 <GetEvent>:
  GetEvent
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(EventMaskRefType, AUTOMATIC)  Event
)
{
80009888:	40 ae       	mov.aa %a14,%sp
8000988a:	91 00 00 f8 	movh.a %a15,32768
8000988e:	d9 ff 38 40 	lea %a15,[%a15]312 <80000138 <osEE_kdb_var>>
80009892:	4c f2       	ld.w %d15,[%a15]8
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
80009894:	82 32       	mov %d2,3
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS */
#else
  osEE_stack_monitoring(p_cdb);
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
80009896:	7f f4 11 80 	jge.u %d4,%d15,800098b8 <GetEvent+0x30>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
8000989a:	91 00 00 f8 	movh.a %a15,32768
8000989e:	d9 ff 38 40 	lea %a15,[%a15]312 <80000138 <osEE_kdb_var>>
800098a2:	c8 1f       	ld.a %a15,[%a15]4
800098a4:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
800098a8:	c8 0f       	ld.a %a15,[%a15]0
800098aa:	c8 3f       	ld.a %a15,[%a15]12
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
      ev = E_OS_PARAM_POINTER;
800098ac:	3b e0 00 20 	mov %d2,14
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
800098b0:	bc 44       	jz.a %a4,800098b8 <GetEvent+0x30>
      ev = E_OS_PARAM_POINTER;
    } else
    {
      /* N.B. XXX This MUST Be ATOMIC! */
      (*Event) = p_tcb_event->event_mask;
800098b2:	4c f3       	ld.w %d15,[%a15]12
800098b4:	6c 40       	st.w [%a4]0,%d15

      ev = E_OK;
800098b6:	82 02       	mov %d2,0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
800098b8:	00 90       	ret 

800098ba <ClearEvent>:
FUNC(StatusType, OS_CODE)
  ClearEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
800098ba:	40 ae       	mov.aa %a14,%sp
#if (!defined(OSEE_HAS_ORTI)) && (!defined(OSEE_HAS_ERRORHOOK))
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK */
    p_ccb       = p_cdb->p_ccb;
800098bc:	91 00 00 f8 	movh.a %a15,32768
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
800098c0:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_curr_tcb  = p_curr->p_tcb;
800098c4:	c8 0f       	ld.a %a15,[%a15]0
800098c6:	c8 3f       	ld.a %a15,[%a15]12
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800098c8:	4d c0 e2 2f 	mfcr %d2,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800098cc:	8f f2 0f f1 	and %d15,%d2,255
800098d0:	8b 3f a1 f2 	ge.u %d15,%d15,19
800098d4:	ee 0a       	jnz %d15,800098e8 <ClearEvent+0x2e>
    OsEE_icr icr_temp = icr;
800098d6:	02 2f       	mov %d15,%d2
800098d8:	3b 30 01 30 	mov %d3,19
800098dc:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800098e0:	cd cf e2 0f 	mtcr $icr,%d15
800098e4:	0d 00 c0 04 	isync 
    CONST(OsEE_reg, AUTOMATIC)
      flags = osEE_begin_primitive();
    osEE_lock_core(p_cdb);
    /* XXX: Maybe we need to introduce an HAL for atomic Load-Modify-Store
            Operations */
    p_curr_tcb->event_mask &= ~Mask;
800098e8:	4c f3       	ld.w %d15,[%a15]12
800098ea:	0f 4f e0 40 	andn %d4,%d15,%d4
800098ee:	68 34       	st.w [%a15]12,%d4
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800098f0:	4d c0 e2 3f 	mfcr %d3,$icr
800098f4:	02 3f       	mov %d15,%d3
800098f6:	8f f3 0f 31 	and %d3,%d3,255
  osEE_hal_end_nested_primitive(OsEE_reg flags)
{
  OsEE_icr flags_icr;
  OsEE_icr icr = osEE_tc_get_icr();
  flags_icr.reg = flags;
  if (icr.bits.ccpn != flags_icr.bits.ccpn) {
800098fa:	8f f2 0f 21 	and %d2,%d2,255
800098fe:	5f 23 08 00 	jeq %d3,%d2,8000990e <ClearEvent+0x54>
80009902:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009906:	cd cf e2 0f 	mtcr $icr,%d15
8000990a:	0d 00 c0 04 	isync 
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
}
8000990e:	82 02       	mov %d2,0
80009910:	00 90       	ret 

80009912 <GetISRID>:
FUNC(ISRType, OS_CODE)
  GetISRID
(
  void
)
{
80009912:	40 ae       	mov.aa %a14,%sp
  osEE_get_curr_task
(
  void
)
{
  return osEE_get_curr_core()->p_ccb->p_curr ;
80009914:	91 00 00 f8 	movh.a %a15,32768
80009918:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>
8000991c:	c8 0f       	ld.a %a15,[%a15]0
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
8000991e:	39 ff 14 00 	ld.bu %d15,[%a15]20 <8000014c <osEE_cdb_var>>
    isr_id = p_tdb->tid;
  } else {
    isr_id = INVALID_ISR;
80009922:	82 f2       	mov %d2,-1
{
  VAR(ISRType, AUTOMATIC) isr_id;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)
    p_tdb = osEE_get_curr_task();

  if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
80009924:	5e 22       	jne %d15,2,80009928 <GetISRID+0x16>
    isr_id = p_tdb->tid;
80009926:	48 42       	ld.w %d2,[%a15]16
  } else {
    isr_id = INVALID_ISR;
  }

  return isr_id;
}
80009928:	00 90       	ret 
	...

8000992c <osEE_release_all_m>:
static FUNC_P2VAR(OsEE_MDB, OS_APPL_CONST, OS_CODE)
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
8000992c:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
8000992e:	99 43 0c 00 	ld.a %a3,[%a4]12

  while ((p_tcb->p_last_m != NULL)
80009932:	cc 31       	ld.a %a15,[%a3]4
  osEE_release_all_m
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
80009934:	a0 02       	mov.a %a2,0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
80009936:	bc fb       	jz.a %a15,8000994c <osEE_release_all_m+0x20>
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
80009938:	82 0f       	mov %d15,0
    && (p_tcb->p_last_m->p_cb->p_owner == p_tdb)
#endif /* OSEE_HAS_SPINLOCKS */
  )
  {
    CONSTP2VAR(OsEE_MCB, AUTOMATIC, OS_APPL_DATA)
      p_last_m_cb = p_tcb->p_last_m->p_cb;
8000993a:	c8 0f       	ld.a %a15,[%a15]0
    /* Release the M from the owner */
    p_last_m_cb->p_owner = NULL;
8000993c:	68 2f       	st.w [%a15]8,%d15
    /* Save the first M not realesed */
    if (p_mdb == NULL) {
8000993e:	7c 23       	jnz.a %a2,80009944 <osEE_release_all_m+0x18>
      p_mdb = p_tcb->p_last_m;
80009940:	99 32 04 00 	ld.a %a2,[%a3]4
      osEE_hal_spin_unlock(p_tcb->p_last_m->p_spinlock_arch);
    }
#endif /* OSEE_HAS_SPINLOCKS */

    /* Pop the M head */
    p_tcb->p_last_m = p_last_m_cb->p_next;
80009944:	c8 0f       	ld.a %a15,[%a15]0
80009946:	ec 31       	st.a [%a3]4,%a15
)
{
  P2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)     p_mdb = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;

  while ((p_tcb->p_last_m != NULL)
80009948:	bd 0f f9 ff 	jnz.a %a15,8000993a <osEE_release_all_m+0xe>
    p_tcb->p_last_m = NULL;
  }
#endif /* OSEE_HAS_SPINLOCKS */

  return p_mdb;
}
8000994c:	00 90       	ret 

8000994e <osEE_scheduler_task_wrapper_restore>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_restore
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
8000994e:	40 ae       	mov.aa %a14,%sp
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
80009950:	cc 43       	ld.a %a15,[%a4]12
80009952:	82 4f       	mov %d15,4
80009954:	28 2f       	st.b [%a15]2,%d15
80009956:	00 90       	ret 

80009958 <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
80009958:	40 ae       	mov.aa %a14,%sp
8000995a:	40 4f       	mov.aa %a15,%a4
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
8000995c:	99 42 0c 00 	ld.a %a2,[%a4]12
80009960:	39 22 01 00 	ld.bu %d2,[%a2]1
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
80009964:	82 4f       	mov %d15,4
80009966:	2c 22       	st.b [%a2]2,%d15
)
{
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_priority < OSEE_ISR_ALL_PRIO) {
80009968:	8b f2 0f f2 	eq %d15,%d2,255
8000996c:	ee 13       	jnz %d15,80009992 <osEE_scheduler_task_wrapper_run+0x3a>
8000996e:	4d c0 e2 ff 	mfcr %d15,$icr

/* We always use virtual priorities */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_set_ipl(TaskPrio virt_prio)
{
  OsEE_icr icr  = osEE_tc_get_icr();
  icr.bits.ccpn = (virt_prio < OSEE_ISR2_PRIO_BIT)?
80009972:	37 02 48 40 	extr %d4,%d2,0,8
80009976:	82 03       	mov %d3,0
80009978:	ce 45       	jgez %d4,80009982 <osEE_scheduler_task_wrapper_run+0x2a>
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
8000997a:	8f f2 07 21 	and %d2,%d2,127
8000997e:	1b 12 00 30 	addi %d3,%d2,1
80009982:	37 3f 08 f0 	insert %d15,%d15,%d3,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
80009986:	cd cf e2 0f 	mtcr $icr,%d15
8000998a:	0d 00 c0 04 	isync 
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
8000998e:	0d 00 00 03 	enable 
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_priority);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
80009992:	c8 62       	ld.a %a2,[%a15]24
80009994:	2d 02 00 00 	calli %a2
)
{
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
80009998:	91 00 00 28 	movh.a %a2,32768
8000999c:	99 22 0c 50 	ld.a %a2,[%a2]332 <8000014c <osEE_cdb_var>>

  /* Reset ISR Counters */
/* [SWS_Os_00239] If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and interrupts are still disabled,
    the Operating System module shall enable them. */
  p_ccb->s_isr_os_cnt  = 0U;
800099a0:	82 0f       	mov %d15,0
800099a2:	e9 2f 1d 00 	st.b [%a2]29,%d15
  /* I won't re-enable OS Interrupts since I'm going to enter rescheduling
     critical section */
  if (p_ccb->s_isr_all_cnt > 0U) {
800099a6:	39 2f 1c 00 	ld.bu %d15,[%a2]28
800099aa:	6e 09       	jz %d15,800099bc <osEE_scheduler_task_wrapper_run+0x64>
    p_ccb->s_isr_all_cnt = 0U;
800099ac:	82 0f       	mov %d15,0
800099ae:	e9 2f 1c 00 	st.b [%a2]28,%d15
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800099b2:	4c 25       	ld.w %d15,[%a2]20
800099b4:	cd cf e2 0f 	mtcr $icr,%d15
800099b8:	0d 00 c0 04 	isync 
    osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
  }
  if (p_ccb->d_isr_all_cnt > 0U) {
800099bc:	39 2f 1e 00 	ld.bu %d15,[%a2]30
800099c0:	6e 06       	jz %d15,800099cc <osEE_scheduler_task_wrapper_run+0x74>
    p_ccb->d_isr_all_cnt = 0U;
800099c2:	82 0f       	mov %d15,0
800099c4:	e9 2f 1e 00 	st.b [%a2]30,%d15
}

/* Enable Interrupts */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_hal_enableIRQ(void)
{
  __asm__ volatile ("enable" : : : "memory");
800099c8:	0d 00 00 03 	enable 
 ============================================================================*/
/* Functions to Access ICR register */
OSEE_STATIC_INLINE OsEE_icr OSEE_ALWAYS_INLINE osEE_tc_get_icr(void)
{
  OsEE_icr icr;
  icr.reg = osEE_tc_get_csfr(OSEE_CSFR_ICR);
800099cc:	4d c0 e2 ff 	mfcr %d15,$icr
OSEE_STATIC_INLINE OsEE_reg OSEE_ALWAYS_INLINE
  osEE_hal_begin_nested_primitive(void)
{
  OsEE_icr icr = osEE_tc_get_icr();

  if (icr.bits.ccpn < OSEE_ISR2_MAX_HW_PRIO) {
800099d0:	8f ff 0f 21 	and %d2,%d15,255
800099d4:	8b 32 a1 22 	ge.u %d2,%d2,19
800099d8:	f6 29       	jnz %d2,800099ea <osEE_scheduler_task_wrapper_run+0x92>
800099da:	3b 30 01 20 	mov %d2,19
800099de:	37 2f 08 f0 	insert %d15,%d15,%d2,0,8
  return icr;
}

OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_icr(OsEE_icr icr)
{
  osEE_tc_set_csfr(OSEE_CSFR_ICR, icr.reg);
800099e2:	cd cf e2 0f 	mtcr $icr,%d15
800099e6:	0d 00 c0 04 	isync 

  (void)osEE_begin_primitive();

  osEE_stack_monitoring(p_cdb);

  if (p_to_term->task_type == OSEE_TASK_TYPE_ISR2) {
800099ea:	39 ff 14 00 	ld.bu %d15,[%a15]20
800099ee:	5e 24       	jne %d15,2,800099f6 <osEE_scheduler_task_wrapper_run+0x9e>
  /* [SWS_Os_00369]: If a Category 2 ISR calls GetResource() and ends (returns)
      without calling the corresponding ReleaseResource(), the Operating System
      module shall perform the ReleaseResource() call and shall call the
      ErrorHook() E_OS_RESOURCE */
    CONSTP2VAR(OsEE_MDB, AUTOMATIC, OS_APPL_CONST)
      p_mdb = osEE_release_all_m(p_to_term);
800099f0:	40 f4       	mov.aa %a4,%a15
800099f2:	5c 9d       	call 8000992c <osEE_release_all_m>
800099f4:	3c 03       	j 800099fa <osEE_scheduler_task_wrapper_run+0xa2>
    osEE_call_error_hook(p_ccb, E_OS_MISSINGEND);
#if (defined(OSEE_HAS_RESOURCES)) || (defined(OSEE_HAS_SPINLOCKS))
/* [SWS_Os_0070]: If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and still holds OSEK Resources,
    the Operating System shall release them. */
    (void)osEE_release_all_m(p_to_term);
800099f6:	40 f4       	mov.aa %a4,%a15
800099f8:	5c 9a       	call 8000992c <osEE_release_all_m>
800099fa:	c8 14       	ld.a %a4,[%a15]4
800099fc:	a0 05       	mov.a %a5,0
800099fe:	1d 00 79 02 	j 80009ef0 <osEE_hal_terminate_ctx>

80009a02 <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
80009a02:	40 ae       	mov.aa %a14,%sp
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
80009a04:	91 00 00 f8 	movh.a %a15,32768
80009a08:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>
80009a0c:	39 ff 10 00 	ld.bu %d15,[%a15]16 <8000014c <osEE_cdb_var>>
80009a10:	df 2f fe 7f 	jeq %d15,2,80009a0c <osEE_idle_hook_wrapper+0xa>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
80009a14:	91 00 00 f8 	movh.a %a15,32768
80009a18:	d9 ff 0c 50 	lea %a15,[%a15]332 <8000014c <osEE_cdb_var>>
80009a1c:	c8 14       	ld.a %a4,[%a15]4
80009a1e:	6d 00 ba 01 	call 80009d92 <osEE_idle_task_terminate>
80009a22:	00 90       	ret 

80009a24 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
80009a24:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009a26:	d4 43       	ld.a %a3,[%a4]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
80009a28:	cc 50       	ld.a %a15,[%a5]0
  P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)     p_ret_sn = p_ccb->p_stk_sn;
80009a2a:	99 32 0c 00 	ld.a %a2,[%a3]12

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
80009a2e:	bd 02 13 00 	jz.a %a2,80009a54 <osEE_scheduler_core_rq_preempt_stk+0x30>
    p_ret_tdb = p_ret_sn->p_tdb;
80009a32:	99 22 04 00 	ld.a %a2,[%a2]4
    if (p_rq_sn != NULL) {
80009a36:	bd 0f 1b 00 	jz.a %a15,80009a6c <osEE_scheduler_core_rq_preempt_stk+0x48>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
80009a3a:	99 24 0c 00 	ld.a %a4,[%a2]12
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
80009a3e:	c8 16       	ld.a %a6,[%a15]4
80009a40:	99 66 0c 00 	ld.a %a6,[%a6]12
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
80009a44:	39 42 01 00 	ld.bu %d2,[%a4]1
80009a48:	0c 61       	ld.bu %d15,[%a6]1
80009a4a:	7f f2 13 80 	jge.u %d2,%d15,80009a70 <osEE_scheduler_core_rq_preempt_stk+0x4c>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
80009a4e:	82 2f       	mov %d15,2
80009a50:	2c 42       	st.b [%a4]2,%d15
80009a52:	3c 11       	j 80009a74 <osEE_scheduler_core_rq_preempt_stk+0x50>
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
80009a54:	a0 02       	mov.a %a2,0

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
80009a56:	bd 0f 1e 00 	jz.a %a15,80009a92 <osEE_scheduler_core_rq_preempt_stk+0x6e>
    /* Only Idle TASK stacked -> RQ preempt STK. */
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    p_ret_tdb                 = p_cdb->p_idle_task;
80009a5a:	99 42 04 00 	ld.a %a2,[%a4]4
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
80009a5e:	99 24 0c 00 	ld.a %a4,[%a2]12
80009a62:	82 2f       	mov %d15,2
80009a64:	2c 42       	st.b [%a4]2,%d15
80009a66:	3c 07       	j 80009a74 <osEE_scheduler_core_rq_preempt_stk+0x50>
  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    if (p_tcb->current_prio < dispatch_prio) {
      p_tcb->current_prio = dispatch_prio;
80009a68:	2c 51       	st.b [%a5]1,%d15
80009a6a:	00 90       	ret 
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    p_ret_sn  = NULL;
#else
    p_ret_tdb = NULL;
80009a6c:	a0 02       	mov.a %a2,0
80009a6e:	00 90       	ret 
80009a70:	a0 02       	mov.a %a2,0
80009a72:	00 90       	ret 
    p_ret_tdb = NULL;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
80009a74:	4c f0       	ld.w %d15,[%a15]0
80009a76:	6c 50       	st.w [%a5]0,%d15
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
80009a78:	c8 14       	ld.a %a4,[%a15]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
80009a7a:	99 45 0c 00 	ld.a %a5,[%a4]12
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
80009a7e:	4c 33       	ld.w %d15,[%a3]12
80009a80:	68 0f       	st.w [%a15]0,%d15
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
80009a82:	ec 33       	st.a [%a3]12,%a15
  p_ccb->p_curr                 = p_tdb;
80009a84:	f4 34       	st.a [%a3],%a4

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
80009a86:	39 4f 1d 00 	ld.bu %d15,[%a4]29
    if (p_tcb->current_prio < dispatch_prio) {
80009a8a:	39 52 01 00 	ld.bu %d2,[%a5]1
80009a8e:	3f f2 ed ff 	jlt.u %d2,%d15,80009a68 <osEE_scheduler_core_rq_preempt_stk+0x44>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
80009a92:	00 90       	ret 

80009a94 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   as_ready
)
{
80009a94:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
80009a96:	cc 51       	ld.a %a15,[%a5]4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
80009a98:	c8 32       	ld.a %a2,[%a15]12
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
80009a9a:	76 44       	jz %d4,80009aa2 <osEE_sn_priority_insert+0xe>
80009a9c:	39 f2 1c 00 	ld.bu %d2,[%a15]28
80009aa0:	3c 03       	j 80009aa6 <osEE_sn_priority_insert+0x12>
80009aa2:	39 22 01 00 	ld.bu %d2,[%a2]1
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
80009aa6:	cc 40       	ld.a %a15,[%a4]0
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
80009aa8:	a0 06       	mov.a %a6,0
80009aaa:	7c f3       	jnz.a %a15,80009ab0 <osEE_sn_priority_insert+0x1c>
80009aac:	3c 14       	j 80009ad4 <osEE_sn_priority_insert+0x40>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
80009aae:	60 ff       	mov.a %a15,%d15
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
80009ab0:	c8 12       	ld.a %a2,[%a15]4
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
80009ab2:	99 23 0c 00 	ld.a %a3,[%a2]12

    if (as_ready) {
80009ab6:	76 44       	jz %d4,80009abe <osEE_sn_priority_insert+0x2a>
      prio_to_check = p_cur_tdb->ready_prio;
80009ab8:	39 2f 1c 00 	ld.bu %d15,[%a2]28
80009abc:	3c 02       	j 80009ac0 <osEE_sn_priority_insert+0x2c>
    } else {
      prio_to_check = p_cur_tcb->current_prio;
80009abe:	0c 31       	ld.bu %d15,[%a3]1
    }

    if (new_task_prio <= prio_to_check)
80009ac0:	3f 2f 06 80 	jlt.u %d15,%d2,80009acc <osEE_sn_priority_insert+0x38>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
80009ac4:	4c f0       	ld.w %d15,[%a15]0
80009ac6:	40 f6       	mov.aa %a6,%a15
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
80009ac8:	ee f3       	jnz %d15,80009aae <osEE_sn_priority_insert+0x1a>
    }

    if (new_task_prio <= prio_to_check)
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
80009aca:	60 ff       	mov.a %a15,%d15
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
80009acc:	bc 64       	jz.a %a6,80009ad4 <osEE_sn_priority_insert+0x40>
    p_prev->p_next = p_sn_new;
80009ace:	f4 65       	st.a [%a6],%a5
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
80009ad0:	82 02       	mov %d2,0
80009ad2:	3c 03       	j 80009ad8 <osEE_sn_priority_insert+0x44>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
80009ad4:	f4 45       	st.a [%a4],%a5
    head_changed  = OSEE_TRUE;
80009ad6:	82 12       	mov %d2,1
  }

  p_sn_new->p_next = p_curr;
80009ad8:	ec 50       	st.a [%a5]0,%a15

  return head_changed;
}
80009ada:	00 90       	ret 

80009adc <osEE_scheduler_rq_insert>:
(
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
80009adc:	40 ae       	mov.aa %a14,%sp
  p_sn_new->p_tdb = p_tdb_new;
80009ade:	b5 56 04 00 	st.a [%a5]4,%a6

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
80009ae2:	82 14       	mov %d4,1
80009ae4:	6d ff d8 ff 	call 80009a94 <osEE_sn_priority_insert>
#else
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_FALSE);
#endif /* !OSEE_SCHEDULER_GLOBAL */
}
80009ae8:	00 90       	ret 

80009aea <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
80009aea:	40 ae       	mov.aa %a14,%sp
80009aec:	40 4d       	mov.aa %a13,%a4
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
80009aee:	cc 40       	ld.a %a15,[%a4]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
80009af0:	c8 3c       	ld.a %a12,[%a15]12
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
80009af2:	4c c0       	ld.w %d15,[%a12]0
80009af4:	68 3f       	st.w [%a15]12,%d15
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
80009af6:	6d ff 97 ff 	call 80009a24 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
80009afa:	4c f3       	ld.w %d15,[%a15]12

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
80009afc:	7c 28       	jnz.a %a2,80009b0c <osEE_scheduler_core_pop_running+0x22>
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if (p_curr_stk_sn != NULL) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
80009afe:	80 d3       	mov.d %d3,%a13
80009b00:	c2 43       	add %d3,4
80009b02:	92 42       	add %d2,%d15,4
80009b04:	6a 32       	cmovn %d2,%d15,%d3
80009b06:	60 2d       	mov.a %a13,%d2
80009b08:	4c d0       	ld.w %d15,[%a13]0
80009b0a:	68 0f       	st.w [%a15]0,%d15
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
80009b0c:	40 c2       	mov.aa %a2,%a12
80009b0e:	00 90       	ret 

80009b10 <osEE_task_activated>:

FUNC(StatusType, OS_CODE) osEE_task_activated
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
80009b10:	40 ae       	mov.aa %a14,%sp
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act = p_tdb_act->p_tcb;
80009b12:	cc 43       	ld.a %a15,[%a4]12
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
80009b14:	0c f0       	ld.bu %d15,[%a15]0
80009b16:	39 43 1e 00 	ld.bu %d3,[%a4]30
    ++p_tcb_act->current_num_of_act;
    ev = E_OK;
  } else {
    ev = E_OS_LIMIT;
80009b1a:	82 42       	mov %d2,4
#else
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act) {
80009b1c:	7f 3f 05 80 	jge.u %d15,%d3,80009b26 <osEE_task_activated+0x16>
    ++p_tcb_act->current_num_of_act;
80009b20:	c2 1f       	add %d15,1
80009b22:	28 0f       	st.b [%a15]0,%d15
    ev = E_OK;
80009b24:	82 02       	mov %d2,0
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return ev;
}
80009b26:	00 90       	ret 

80009b28 <osEE_task_end>:
FUNC(void, OS_CODE)
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
80009b28:	40 ae       	mov.aa %a14,%sp
  /* It has to be called already in Multi-Core critical section */
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
80009b2a:	cc 43       	ld.a %a15,[%a4]12

  p_tcb->current_prio = p_tdb->ready_prio;
80009b2c:	39 4f 1c 00 	ld.bu %d15,[%a4]28
80009b30:	28 1f       	st.b [%a15]1,%d15

  --p_tcb->current_num_of_act;
80009b32:	0c f0       	ld.bu %d15,[%a15]0
80009b34:	c2 ff       	add %d15,-1
80009b36:	16 ff       	and %d15,255
80009b38:	28 0f       	st.b [%a15]0,%d15

  if (p_tcb->current_num_of_act == 0U) {
80009b3a:	ee 03       	jnz %d15,80009b40 <osEE_task_end+0x18>
    p_tcb->status = OSEE_TASK_SUSPENDED;
80009b3c:	28 2f       	st.b [%a15]2,%d15
80009b3e:	00 90       	ret 
  } else {
    p_tcb->status = OSEE_TASK_READY;
80009b40:	82 1f       	mov %d15,1
80009b42:	28 2f       	st.b [%a15]2,%d15
80009b44:	00 90       	ret 

80009b46 <osEE_task_event_set_mask>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)    p_tdb_waking_up,
  VAR(EventMaskType, AUTOMATIC)               Mask,
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
80009b46:	40 ae       	mov.aa %a14,%sp
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_waking_up = p_tdb_waking_up->p_tcb;
80009b48:	cc 43       	ld.a %a15,[%a4]12
    *p_ev = E_OS_STATE;
  } else
#endif /* OSEE_HAS_CHECKS */
  {
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;
80009b4a:	02 42       	mov %d2,%d4
80009b4c:	02 43       	mov %d3,%d4
80009b4e:	49 f2 4c 08 	ldmst [%a15]12,%e2

    *p_ev = E_OK;
80009b52:	82 0f       	mov %d15,0
80009b54:	2c 50       	st.b [%a5]0,%d15

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
80009b56:	4c f2       	ld.w %d15,[%a15]8
80009b58:	26 f4       	and %d4,%d15
  P2VAR(StatusType, AUTOMATIC, OS_APPL_DATA)  p_ev
)
{
  /* Initialize the return value to NULL to handle failed error checks. */
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_own_sn        = NULL;
80009b5a:	a0 02       	mov.a %a2,0
    /* Set the event mask only if the task is not suspended */
    p_tcb_waking_up->event_mask |= Mask;

    *p_ev = E_OK;

    if ((p_tcb_waking_up->wait_mask & Mask) != 0U) {
80009b5c:	76 45       	jz %d4,80009b66 <osEE_task_event_set_mask+0x20>
      p_own_sn = p_tcb_waking_up->p_own_sn;
80009b5e:	c8 42       	ld.a %a2,[%a15]16

      /* Set p_own_sn of waking up task to NULL so it won't be inserted in
         RQ more than once. */
      if (p_own_sn != NULL) {
80009b60:	bc 23       	jz.a %a2,80009b66 <osEE_task_event_set_mask+0x20>
        p_tcb_waking_up->p_own_sn = NULL;
80009b62:	82 0f       	mov %d15,0
80009b64:	68 4f       	st.w [%a15]16,%d15
  osEE_lock_kernel();
#endif /* !OSEE_SCHEDULER_GLOBAL */
#endif /* !OSEE_SINGLECORE */

  return p_own_sn;
}
80009b66:	00 90       	ret 

80009b68 <osEE_activate_isr2>:
FUNC(void, OS_CODE)
  osEE_activate_isr2
(
  VAR(TaskType, AUTOMATIC) isr2_id
)
{
80009b68:	40 ae       	mov.aa %a14,%sp
  osEE_stack_monitoring(osEE_get_curr_core());
#endif /* OSEE_HAS_STACK_MONITORING */
  {
    CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
80009b6a:	91 00 00 48 	movh.a %a4,32768
80009b6e:	d9 44 38 40 	lea %a4,[%a4]312 <80000138 <osEE_kdb_var>>
80009b72:	cc 41       	ld.a %a15,[%a4]4
80009b74:	01 f4 02 f6 	addsc.a %a15,%a15,%d4,2
80009b78:	c8 05       	ld.a %a5,[%a15]0

    /* Mark the TASK as Activated (I don't need to protect this increment
       since ISRs cannot be activated by another core (exception done for
       IPI, that have to be handled in a special way in any case). */
    ++p_act_tdb->p_tcb->current_num_of_act;
80009b7a:	cc 53       	ld.a %a15,[%a5]12
80009b7c:	0c f0       	ld.bu %d15,[%a15]0
80009b7e:	c2 1f       	add %d15,1
80009b80:	28 0f       	st.b [%a15]0,%d15

    osEE_scheduler_task_set_running(p_kdb, p_act_tdb, NULL);
80009b82:	a0 06       	mov.a %a6,0
80009b84:	6d 00 c4 00 	call 80009d0c <osEE_scheduler_task_set_running>
80009b88:	00 90       	ret 

80009b8a <osEE_scheduler_task_activated>:
  osEE_scheduler_task_activated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
80009b8a:	40 ae       	mov.aa %a14,%sp
80009b8c:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   is_preemption;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_act   = p_tdb_act->p_tcb;
80009b8e:	99 52 0c 00 	ld.a %a2,[%a5]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb       = p_cdb->p_ccb;
80009b92:	91 00 00 f8 	movh.a %a15,32768
80009b96:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr      = p_ccb->p_curr;
80009b9a:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_curr_tcb  = p_curr->p_tcb;
80009b9c:	99 43 0c 00 	ld.a %a3,[%a4]12 <8000014c <osEE_cdb_var>>
    }
    is_preemption = OSEE_FALSE;
  } else
#endif /* !OSEE_SINGLECORE */
  /* Preemption Check */
  if (p_curr_tcb->current_prio < p_tcb_act->current_prio) {
80009ba0:	39 32 01 00 	ld.bu %d2,[%a3]1 <8000014c <osEE_cdb_var>>
80009ba4:	0c 21       	ld.bu %d15,[%a2]1
80009ba6:	7f f2 15 80 	jge.u %d2,%d15,80009bd0 <osEE_scheduler_task_activated+0x46>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
80009baa:	c8 22       	ld.a %a2,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
80009bac:	4c 20       	ld.w %d15,[%a2]0
80009bae:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
80009bb0:	82 02       	mov %d2,0
80009bb2:	74 22       	st.w [%a2],%d2
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

    /* Set Previous TASK status as Ready but stacked */
    p_curr_tcb->status = OSEE_TASK_READY_STACKED;
80009bb4:	82 2f       	mov %d15,2
80009bb6:	2c 32       	st.b [%a3]2,%d15

    /* Set the activated TASK as current */
    p_new_stk->p_tdb            = p_tdb_act;
80009bb8:	b5 25 04 00 	st.a [%a2]4,%a5
    p_new_stk->p_next           = p_ccb->p_stk_sn;
80009bbc:	4c f3       	ld.w %d15,[%a15]12
80009bbe:	6c 20       	st.w [%a2]0,%d15
    p_ccb->p_stk_sn             = p_new_stk;
80009bc0:	e8 32       	st.a [%a15]12,%a2
    p_ccb->p_curr               = p_tdb_act;
80009bc2:	e8 05       	st.a [%a15]0,%a5
    osEE_task_event_reset_mask(p_tdb_act->p_tcb);
80009bc4:	cc 53       	ld.a %a15,[%a5]12
  osEE_task_event_reset_mask
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
  p_tcb->event_mask = 0U;
80009bc6:	68 32       	st.w [%a15]12,%d2

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_curr, p_tdb_act);
80009bc8:	6d 00 c1 00 	call 80009d4a <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
80009bcc:	82 12       	mov %d2,1
80009bce:	00 90       	ret 
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
80009bd0:	0c 22       	ld.bu %d15,[%a2]2
80009bd2:	ee 05       	jnz %d15,80009bdc <osEE_scheduler_task_activated+0x52>
    p_tcb_act->status = OSEE_TASK_READY;
80009bd4:	82 1f       	mov %d15,1
80009bd6:	2c 22       	st.b [%a2]2,%d15
80009bd8:	82 0f       	mov %d15,0
80009bda:	6c 23       	st.w [%a2]12,%d15
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
80009bdc:	c8 25       	ld.a %a5,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
80009bde:	4c 50       	ld.w %d15,[%a5]0
80009be0:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
80009be2:	82 0f       	mov %d15,0
80009be4:	6c 50       	st.w [%a5]0,%d15
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
80009be6:	d9 f4 04 00 	lea %a4,[%a15]4
80009bea:	6d ff 79 ff 	call 80009adc <osEE_scheduler_rq_insert>
    /* Actually Insert the activated in READY Queue */
    (void)osEE_scheduler_task_insert_rq(p_ccb, p_tdb_act, p_tcb_act);

    osEE_unlock_core(p_cdb);

    is_preemption = OSEE_FALSE;
80009bee:	82 02       	mov %d2,0
  }

  return is_preemption;
}
80009bf0:	00 90       	ret 

80009bf2 <osEE_scheduler_task_insert>:
  osEE_scheduler_task_insert
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act
)
{
80009bf2:	40 ae       	mov.aa %a14,%sp
80009bf4:	40 56       	mov.aa %a6,%a5
  VAR(OsEE_bool, AUTOMATIC)   head_changed;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act     = p_tdb_act->p_tcb;
80009bf6:	cc 53       	ld.a %a15,[%a5]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb         = osEE_task_get_curr_core(p_tdb_act);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb         = p_cdb->p_ccb;
80009bf8:	91 00 00 28 	movh.a %a2,32768
80009bfc:	99 24 0c 50 	ld.a %a4,[%a2]332 <8000014c <osEE_cdb_var>>
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
80009c00:	0c f2       	ld.bu %d15,[%a15]2
80009c02:	ee 05       	jnz %d15,80009c0c <osEE_scheduler_task_insert+0x1a>
    p_tcb_act->status = OSEE_TASK_READY;
80009c04:	82 1f       	mov %d15,1
80009c06:	28 2f       	st.b [%a15]2,%d15
80009c08:	82 0f       	mov %d15,0
80009c0a:	68 3f       	st.w [%a15]12,%d15
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
80009c0c:	99 45 08 00 	ld.a %a5,[%a4]8
  (*pp_first)              = p_sn_allocated->p_next;
80009c10:	4c 50       	ld.w %d15,[%a5]0
80009c12:	6c 42       	st.w [%a4]8,%d15
  p_sn_allocated->p_next  = NULL;
80009c14:	82 0f       	mov %d15,0
80009c16:	6c 50       	st.w [%a5]0,%d15
    osEE_task_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
80009c18:	b0 44       	add.a %a4,4
80009c1a:	6d ff 61 ff 	call 80009adc <osEE_scheduler_rq_insert>

    osEE_unlock_core(p_cdb);
  }

  return head_changed;
}
80009c1e:	00 90       	ret 

80009c20 <osEE_scheduler_task_unblocked>:
  osEE_scheduler_task_unblocked
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
80009c20:	40 ae       	mov.aa %a14,%sp
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
80009c22:	99 56 04 00 	ld.a %a6,[%a5]4
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
80009c26:	cc 63       	ld.a %a15,[%a6]12
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_task_get_curr_core(p_tdb_released);
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
80009c28:	91 00 00 28 	movh.a %a2,32768
80009c2c:	99 2c 0c 50 	ld.a %a12,[%a2]332 <8000014c <osEE_cdb_var>>

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
80009c30:	82 2f       	mov %d15,2
80009c32:	28 2f       	st.b [%a15]2,%d15
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
80009c34:	39 6f 1c 00 	ld.bu %d15,[%a6]28
80009c38:	28 1f       	st.b [%a15]1,%d15
  /* Touch unused parameters */
  (void)p_kdb;

  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
80009c3a:	d9 c4 04 00 	lea %a4,[%a12]4
80009c3e:	6d ff 4f ff 	call 80009adc <osEE_scheduler_rq_insert>
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
80009c42:	82 0f       	mov %d15,0
  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
80009c44:	df 12 0a 80 	jne %d2,1,80009c58 <osEE_scheduler_task_unblocked+0x38>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
80009c48:	d4 c2       	ld.a %a2,[%a12]
80009c4a:	99 22 0c 00 	ld.a %a2,[%a2]12

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if (rq_head_changed == OSEE_TRUE) {
    is_preemption = (p_tcb_released->current_prio >
80009c4e:	0c f1       	ld.bu %d15,[%a15]1
80009c50:	39 22 01 00 	ld.bu %d2,[%a2]1
80009c54:	0b f2 30 f1 	lt.u %d15,%d2,%d15
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
80009c58:	02 f2       	mov %d2,%d15
80009c5a:	00 90       	ret 

80009c5c <osEE_scheduler_task_terminated>:
  osEE_scheduler_task_terminated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
80009c5c:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009c5e:	91 00 00 f8 	movh.a %a15,32768
80009c62:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
80009c66:	c8 0d       	ld.a %a13,[%a15]0
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
80009c68:	99 dc 0c 00 	ld.a %a12,[%a13]12 <8000014c <osEE_cdb_var>>

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
80009c6c:	f4 5d       	st.a [%a5],%a13

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
80009c6e:	0c c2       	ld.bu %d15,[%a12]2
80009c70:	de 4a       	jne %d15,4,80009ca4 <osEE_scheduler_task_terminated+0x48>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
80009c72:	91 00 00 48 	movh.a %a4,32768
80009c76:	d9 44 0c 50 	lea %a4,[%a4]332 <8000014c <osEE_cdb_var>>
80009c7a:	d9 f5 04 00 	lea %a5,[%a15]4 <8000014c <osEE_cdb_var>>
80009c7e:	6d ff 36 ff 	call 80009aea <osEE_scheduler_core_pop_running>
80009c82:	80 28       	mov.d %d8,%a2

      p_tdb_to = p_ccb->p_curr;
80009c84:	4c f0       	ld.w %d15,[%a15]0

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
80009c86:	80 d2       	mov.d %d2,%a13
80009c88:	5f f2 06 00 	jeq %d2,%d15,80009c94 <osEE_scheduler_task_terminated+0x38>
        osEE_task_end(p_tdb_term);
80009c8c:	40 d4       	mov.aa %a4,%a13
80009c8e:	6d ff 4d ff 	call 80009b28 <osEE_task_end>
80009c92:	3c 04       	j 80009c9a <osEE_scheduler_task_terminated+0x3e>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
80009c94:	14 c2       	ld.bu %d2,[%a12]
80009c96:	c2 f2       	add %d2,-1
80009c98:	34 c2       	st.b [%a12],%d2
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
80009c9a:	48 22       	ld.w %d2,[%a15]8
80009c9c:	60 82       	mov.a %a2,%d8
80009c9e:	74 22       	st.w [%a2],%d2
  (*pp_first)       = p_to_free;
80009ca0:	68 28       	st.w [%a15]8,%d8
80009ca2:	3c 20       	j 80009ce2 <osEE_scheduler_task_terminated+0x86>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
80009ca4:	c8 35       	ld.a %a5,[%a15]12

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
80009ca6:	54 52       	ld.w %d2,[%a5]
80009ca8:	68 32       	st.w [%a15]12,%d2
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
80009caa:	39 df 1c 00 	ld.bu %d15,[%a13]28
80009cae:	2c c1       	st.b [%a12]1,%d15
      p_tcb_term->status = OSEE_TASK_READY;
80009cb0:	82 1f       	mov %d15,1
80009cb2:	2c c2       	st.b [%a12]2,%d15
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transition from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
80009cb4:	0c c0       	ld.bu %d15,[%a12]0
80009cb6:	5e 13       	jne %d15,1,80009cbc <osEE_scheduler_task_terminated+0x60>
80009cb8:	82 0f       	mov %d15,0
80009cba:	6c c3       	st.w [%a12]12,%d15
        osEE_task_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
80009cbc:	d9 fc 04 00 	lea %a12,[%a15]4
80009cc0:	40 c4       	mov.aa %a4,%a12
80009cc2:	40 d6       	mov.aa %a6,%a13
80009cc4:	6d ff 0c ff 	call 80009adc <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
80009cc8:	91 00 00 48 	movh.a %a4,32768
80009ccc:	d9 44 0c 50 	lea %a4,[%a4]332 <8000014c <osEE_cdb_var>>
80009cd0:	40 c5       	mov.aa %a5,%a12
80009cd2:	6d ff a9 fe 	call 80009a24 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
80009cd6:	7c 25       	jnz.a %a2,80009ce0 <osEE_scheduler_task_terminated+0x84>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
80009cd8:	c8 32       	ld.a %a2,[%a15]12
80009cda:	4c 21       	ld.w %d15,[%a2]4
          p_ccb->p_curr           = p_tdb_to;
80009cdc:	68 0f       	st.w [%a15]0,%d15
80009cde:	3c 02       	j 80009ce2 <osEE_scheduler_task_terminated+0x86>
        } else {
          p_tdb_to = p_ccb->p_curr;
80009ce0:	4c f0       	ld.w %d15,[%a15]0
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
80009ce2:	60 f2       	mov.a %a2,%d15
80009ce4:	00 90       	ret 

80009ce6 <osEE_scheduler_task_preemption_point>:
FUNC(OsEE_bool, OS_CODE)
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb
)
{
80009ce6:	40 ae       	mov.aa %a14,%sp
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009ce8:	91 00 00 48 	movh.a %a4,32768
80009cec:	99 4f 0c 50 	ld.a %a15,[%a4]332 <8000014c <osEE_cdb_var>>
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
80009cf0:	d9 44 0c 50 	lea %a4,[%a4]332 <8000014c <osEE_cdb_var>>
80009cf4:	d9 f5 04 00 	lea %a5,[%a15]4 <8000014c <osEE_cdb_var>>
80009cf8:	6d ff 96 fe 	call 80009a24 <osEE_scheduler_core_rq_preempt_stk>

    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    is_preemption = OSEE_FALSE;
80009cfc:	82 02       	mov %d2,0
  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);

  /* Unlock the Scheduler (critical section terminated) */
  osEE_unlock_core(p_cdb);

  if (p_prev != NULL) {
80009cfe:	bc 26       	jz.a %a2,80009d0a <osEE_scheduler_task_preemption_point+0x24>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_change_context_from_running(p_prev, p_curr);
80009d00:	40 24       	mov.aa %a4,%a2
80009d02:	c8 05       	ld.a %a5,[%a15]0
80009d04:	6d 00 23 00 	call 80009d4a <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
80009d08:	82 12       	mov %d2,1
  } else {
    is_preemption = OSEE_FALSE;
  }

  return is_preemption;
}
80009d0a:	00 90       	ret 

80009d0c <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn
)
{
80009d0c:	40 ae       	mov.aa %a14,%sp
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
80009d0e:	91 00 00 f8 	movh.a %a15,32768
80009d12:	99 ff 0c 50 	ld.a %a15,[%a15]332 <8000014c <osEE_cdb_var>>
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
80009d16:	c8 04       	ld.a %a4,[%a15]0
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
80009d18:	48 32       	ld.w %d2,[%a15]12

  /* Set previous TASK as stacked only if the activation has been completed */
  if (p_preempted->p_tcb->status == OSEE_TASK_RUNNING) {
80009d1a:	99 42 0c 00 	ld.a %a2,[%a4]12 <8000014c <osEE_cdb_var>>
80009d1e:	0c 22       	ld.bu %d15,[%a2]2
80009d20:	5e 43       	jne %d15,4,80009d26 <osEE_scheduler_task_set_running+0x1a>
    p_preempted->p_tcb->status  = OSEE_TASK_READY_STACKED;
80009d22:	82 2f       	mov %d15,2
80009d24:	2c 22       	st.b [%a2]2,%d15
  }
  p_ccb->p_curr                 = p_tdb;
80009d26:	e8 05       	st.a [%a15]0,%a5

  /* Touch unused parameters */
  (void)p_kdb;
  if (p_sn == NULL) {
80009d28:	7c 68       	jnz.a %a6,80009d38 <osEE_scheduler_task_set_running+0x2c>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_first);
80009d2a:	c8 22       	ld.a %a2,[%a15]8
  (*pp_first)              = p_sn_allocated->p_next;
80009d2c:	4c 20       	ld.w %d15,[%a2]0
80009d2e:	68 2f       	st.w [%a15]8,%d15
  p_sn_allocated->p_next  = NULL;
80009d30:	82 0f       	mov %d15,0
80009d32:	6c 20       	st.w [%a2]0,%d15
    osEE_lock_core(p_cdb);
    /* Alloc the SN for the new Running TASK */
    p_ccb->p_stk_sn             = osEE_sn_alloc(&p_ccb->p_free_sn);
80009d34:	e8 32       	st.a [%a15]12,%a2
80009d36:	3c 02       	j 80009d3a <osEE_scheduler_task_set_running+0x2e>
    osEE_unlock_core(p_cdb);
  } else {
    p_ccb->p_stk_sn             = p_sn;
80009d38:	e8 36       	st.a [%a15]12,%a6
  }

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
80009d3a:	c8 32       	ld.a %a2,[%a15]12
80009d3c:	b5 25 04 00 	st.a [%a2]4,%a5
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
80009d40:	c8 3f       	ld.a %a15,[%a15]12
80009d42:	68 02       	st.w [%a15]0,%d2

  osEE_change_context_from_running(p_preempted, p_tdb);
80009d44:	6d 00 03 00 	call 80009d4a <osEE_change_context_from_running>
80009d48:	00 90       	ret 

80009d4a <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
80009d4a:	40 ae       	mov.aa %a14,%sp
80009d4c:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
80009d4e:	99 52 0c 00 	ld.a %a2,[%a5]12
80009d52:	0c 22       	ld.bu %d15,[%a2]2
80009d54:	5e 28       	jne %d15,2,80009d64 <osEE_change_context_from_running+0x1a>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
80009d56:	40 54       	mov.aa %a4,%a5
80009d58:	99 55 04 00 	ld.a %a5,[%a5]4
80009d5c:	c8 16       	ld.a %a6,[%a15]4
80009d5e:	6d 00 73 00 	call 80009e44 <osEE_hal_save_ctx_and_restore_ctx>
80009d62:	00 90       	ret 
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
80009d64:	40 54       	mov.aa %a4,%a5
80009d66:	99 55 04 00 	ld.a %a5,[%a5]4
80009d6a:	c8 16       	ld.a %a6,[%a15]4
80009d6c:	6d 00 8b 00 	call 80009e82 <osEE_hal_save_ctx_and_ready2stacked>
80009d70:	00 90       	ret 

80009d72 <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
80009d72:	40 ae       	mov.aa %a14,%sp
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
80009d74:	cc 53       	ld.a %a15,[%a5]12
80009d76:	0c f2       	ld.bu %d15,[%a15]2
80009d78:	5e 27       	jne %d15,2,80009d86 <osEE_change_context_from_task_end+0x14>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
80009d7a:	40 54       	mov.aa %a4,%a5
80009d7c:	99 55 04 00 	ld.a %a5,[%a5]4
80009d80:	6d 00 74 00 	call 80009e68 <osEE_hal_restore_ctx>
80009d84:	00 90       	ret 
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
80009d86:	40 54       	mov.aa %a4,%a5
80009d88:	99 55 04 00 	ld.a %a5,[%a5]4
80009d8c:	6d 00 8d 00 	call 80009ea6 <osEE_hal_ready2stacked>
80009d90:	00 90       	ret 

80009d92 <osEE_idle_task_terminate>:
FUNC(void, OS_CODE)
  osEE_idle_task_terminate
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_idle_tdb
)
{
80009d92:	40 ae       	mov.aa %a14,%sp
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
80009d94:	99 45 04 00 	ld.a %a5,[%a4]4
  CONSTP2CONST(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos     = p_sdb->p_bos;
80009d98:	cc 40       	ld.a %a15,[%a4]0
80009d9a:	48 03       	ld.w %d3,[%a15]0
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
80009d9c:	cc 50       	ld.a %a15,[%a5]0
80009d9e:	3c 02       	j 80009da2 <osEE_idle_task_terminate+0x10>

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
80009da0:	60 ff       	mov.a %a15,%d15
80009da2:	4c f0       	ld.w %d15,[%a15]0
  } while ((p_tos != NULL) && (p_tos != p_bos));
80009da4:	8b 0f 20 22 	ne %d2,%d15,0
80009da8:	0b 3f 10 22 	and.ne %d2,%d15,%d3
80009dac:	df 02 fa ff 	jne %d2,0,80009da0 <osEE_idle_task_terminate+0xe>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
80009db0:	ec 50       	st.a [%a5]0,%a15

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
80009db2:	6d 00 5b 00 	call 80009e68 <osEE_hal_restore_ctx>
80009db6:	00 90       	ret 

80009db8 <osEE_cpu_startos>:
}
#endif /* OSEE_SINGLECORE */
#endif /* OSEE_TC_HAS_ISR1_TO_CONF */

OsEE_bool osEE_cpu_startos(void)
{
80009db8:	40 ae       	mov.aa %a14,%sp
 *  
 *  \return Returns the current core ID.
 */ 
OSEE_STATIC_INLINE OsEE_core_id OSEE_ALWAYS_INLINE osEE_get_curr_core_id(void)
{
  return (OsEE_core_id)osEE_tc_get_csfr(OSEE_CSFR_CORE_ID);
80009dba:	4d c0 e1 5f 	mfcr %d5,$core_id
#if (!defined(OSEE_SINGLECORE))
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
80009dbe:	91 00 00 f8 	movh.a %a15,32768
80009dc2:	d9 ff 38 40 	lea %a15,[%a15]312 <80000138 <osEE_kdb_var>>
80009dc6:	c8 2f       	ld.a %a15,[%a15]8
80009dc8:	b0 ff       	add.a %a15,-1
  for (i = 0U; i < tdb_size; ++i) {
80009dca:	bd 0f 2a 00 	jz.a %a15,80009e1e <osEE_cpu_startos+0x66>
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
80009dce:	91 00 00 28 	movh.a %a2,32768
80009dd2:	d9 22 38 40 	lea %a2,[%a2]312 <80000138 <osEE_kdb_var>>
80009dd6:	19 23 04 00 	ld.w %d3,[%a2]4 <80000004 <BootModeHeader0+0x4>>
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
80009dda:	8f 35 00 51 	and %d5,%d5,3
80009dde:	8f b5 00 50 	sh %d5,%d5,11
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
80009de2:	bb f0 ff 4f 	mov.u %d4,65535
80009de6:	82 0f       	mov %d15,0
80009de8:	b0 ff       	add.a %a15,-1
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
    /* ISR2 initialization */
    OsEE_TDB  * const p_tdb = (*p_kdb->p_tdb_ptr_array)[i];
80009dea:	60 33       	mov.a %a3,%d3
80009dec:	90 32       	addsc.a %a2,%a3,%d15,2
80009dee:	d4 22       	ld.a %a2,[%a2]
#if (!defined(OSEE_SINGLECORE))
    if (p_tdb->orig_core_id == curr_core_id) {
#endif /* !OSEE_SINGLECORE */
      if (p_tdb->task_type == OSEE_TASK_TYPE_ISR2) {
80009df0:	39 22 14 00 	ld.bu %d2,[%a2]20
80009df4:	df 22 12 80 	jne %d2,2,80009e18 <osEE_cpu_startos+0x60>
#if (defined(OSEE_HAS_SYSTEM_TIMER))
        if (p_tdb->task_func == &osEE_tricore_system_timer_handler) {
          osEE_tc_initialize_system_timer(p_tdb);
        } else
#endif /* OSEE_HAS_SYSTEM_TIMER */
        if (p_tdb->hdb.isr2_src != OSEE_TC_SRC_INVALID) {
80009df8:	b9 22 08 00 	ld.hu %d2,[%a2]8
80009dfc:	5f 42 0e 00 	jeq %d2,%d4,80009e18 <osEE_cpu_startos+0x60>
80009e00:	60 24       	mov.a %a4,%d2
80009e02:	d9 43 00 08 	lea %a3,[%a4]-32768
80009e06:	11 43 00 3f 	addih.a %a3,%a3,61444
}

OSEE_STATIC_INLINE FUNC(uint8_t, OS_CODE) OSEE_ALWAYS_INLINE
OSEE_ISR2_VIRT_TO_HW_PRIO(TaskPrio virt_prio)
{
  return (uint8_t) (((virt_prio) & (~OSEE_ISR2_PRIO_BIT)) + 1U) ;
80009e0a:	39 22 1c 00 	ld.bu %d2,[%a2]28
80009e0e:	c2 12       	add %d2,1
80009e10:	b7 82 99 23 	insert %d2,%d2,8,7,25
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
      OSEE_TC_SRN_ENABLE | OSEE_TC_SRN_PRIORITY(prio);
80009e14:	a6 52       	or %d2,%d5
 *  Service Request Configuration
 *  [0..7] SRPN = Priority
 *  [10] Service Request enable
 *  [11..12] Type Of Service (means which CPU or DMA will handle it)
 */
  OSEE_TC_SRC_REG(src_offset) = OSEE_TC_SRN_TYPE_OF_SERVICE(tos) |
80009e16:	74 32       	st.w [%a3],%d2
    osEE_tc_setup_inter_irqs();
}
#endif /* !OSEE_SINGLECORE */

  tdb_size = p_kdb->tdb_array_size - 1U;
  for (i = 0U; i < tdb_size; ++i) {
80009e18:	c2 1f       	add %d15,1
80009e1a:	fd f0 e8 7f 	loop %a15,80009dea <osEE_cpu_startos+0x32>
    }
  }
#endif /* OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING */

  return osEE_std_cpu_startos();
}
80009e1e:	82 12       	mov %d2,1
80009e20:	00 90       	ret 

80009e22 <osEE_tc_change_context_from_task_end>:
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
80009e22:	99 42 0c 00 	ld.a %a2,[%a4]12
static FUNC(void, OS_CODE) OSEE_NEVER_INLINE
  osEE_tc_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
80009e26:	40 4f       	mov.aa %a15,%a4
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
80009e28:	0c 22       	ld.bu %d15,[%a2]2
80009e2a:	1e 27       	jeq %d15,2,80009e38 <osEE_tc_change_context_from_task_end+0x16>
    osEE_tc_setareg(a4, p_to);
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
    osEE_tc_jump(osEE_hal_restore_ctx);
  } else {
    osEE_tc_setareg(a4, p_to);
80009e2c:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
80009e2e:	c8 1f       	ld.a %a15,[%a15]4
80009e30:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_ready2stacked);
80009e32:	1d 00 3a 00 	j 80009ea6 <osEE_hal_ready2stacked>
80009e36:	00 90       	ret 
)
{
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
    osEE_tc_setareg(a4, p_to);
80009e38:	40 f4       	mov.aa %a4,%a15
    osEE_tc_setareg(a5, p_to->hdb.p_scb);
80009e3a:	c8 1f       	ld.a %a15,[%a15]4
80009e3c:	40 f5       	mov.aa %a5,%a15
    osEE_tc_jump(osEE_hal_restore_ctx);
80009e3e:	1d 00 15 00 	j 80009e68 <osEE_hal_restore_ctx>
80009e42:	00 90       	ret 

80009e44 <osEE_hal_save_ctx_and_restore_ctx>:
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
80009e44:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
80009e46:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
80009e4a:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
80009e4c:	4c 60       	ld.w %d15,[%a6]0
80009e4e:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80009e52:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
80009e56:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
80009e5a:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
80009e5c:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
80009e60:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the restore CTX */
  osEE_tc_jump(osEE_hal_restore_ctx);
80009e62:	1d 00 03 00 	j 80009e68 <osEE_hal_restore_ctx>
80009e66:	00 90       	ret 

80009e68 <osEE_hal_restore_ctx>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to_tdb,
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_to_scb
)
{
  OsEE_CTX  const * const p_ctx = p_to_scb->p_tos;
80009e68:	cc 50       	ld.a %a15,[%a5]0
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
80009e6a:	c8 32       	ld.a %a2,[%a15]12
  OsEE_pcxi const         pcxi  = p_ctx->pcxi;
80009e6c:	4c f2       	ld.w %d15,[%a15]8
80009e6e:	40 2b       	mov.aa %a11,%a2

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
80009e70:	cd 0f e0 0f 	mtcr $pcxi,%d15
80009e74:	0d 00 c0 04 	isync 
/* Set the return address back */
  osEE_tc_set_RA(p_ctx->ra);
/* Set the PCXI back */
  osEE_tc_csa_set_pcxi(pcxi);
/* Restore the previous Top of Stack */
  p_to_scb->p_tos = p_ctx->p_ctx;
80009e78:	4c f0       	ld.w %d15,[%a15]0
80009e7a:	6c 50       	st.w [%a5]0,%d15
/* Jump to Kernel Wrapper: it will be the "ret" inside
   osEE_scheduler_task_wrapper_restore at:
   1) Restore the CSA so the SP,
   2) Return at RA address, that is the address after change context calling
      site */
  osEE_tc_jump(osEE_scheduler_task_wrapper_restore);
80009e7c:	1d ff 69 fd 	j 8000994e <osEE_scheduler_task_wrapper_restore>
80009e80:	00 90       	ret 

80009e82 <osEE_hal_save_ctx_and_ready2stacked>:
80009e82:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
80009e84:	d9 f2 f0 ff 	lea %a2,[%a15]-16
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
80009e88:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
80009e8a:	4c 60       	ld.w %d15,[%a6]0
80009e8c:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80009e90:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
80009e94:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
80009e98:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
80009e9a:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
80009e9e:	f4 62       	st.a [%a6],%a2
)
{
/* Save the current Context */
  osEE_tc_save_ctx(p_from_scb);
/* Jump to the ready to stacked */
  osEE_tc_jump(osEE_hal_ready2stacked);
80009ea0:	1d 00 03 00 	j 80009ea6 <osEE_hal_ready2stacked>
80009ea4:	00 90       	ret 

80009ea6 <osEE_hal_ready2stacked>:
/*=============================================================================
                          Stack utilities
 ============================================================================*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_set_SP(OsEE_stack * sp)
{
  __asm__ volatile ("mov.aa %%SP, %0" : : "a"(sp) : "memory");
80009ea6:	cc 50       	ld.a %a15,[%a5]0
80009ea8:	40 fa       	mov.aa %sp,%a15
  __asm__ volatile ("isync" : : : "memory");
}

/** The svlcx assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_svlcx(void) {
  __asm__ volatile ("svlcx" : : : "memory");
80009eaa:	0d 00 00 02 	svlcx 
 */
OSEE_STATIC_INLINE OsEE_stack * OSEE_ALWAYS_INLINE osEE_get_SP(void)
{
  OsEE_stack * sp = NULL;
  /* put the stack pointer in a register in order to return it */
  __asm__ volatile ("mov.aa %0, %%SP" : "=a"(sp));
80009eae:	40 af       	mov.aa %a15,%sp
   function (automatically freed memory), since it will be the CSA restoring
   to do that. */
OSEE_STATIC_INLINE OsEE_CTX * OSEE_ALWAYS_INLINE osEE_tc_alloca_ctx(void) {
  OsEE_CTX * sp = (OsEE_CTX *)osEE_get_SP();
/* Stack grows downward, so the following is the actual stack allocation */
  sp -= 1U;
80009eb0:	d9 f2 f0 ff 	lea %a2,[%a15]-16
80009eb4:	40 2a       	mov.aa %sp,%a2
{
  OsEE_CTX * p_new_ctx;
/* Alloc on the stack the new ERIKA's context */
  p_new_ctx         = osEE_tc_alloca_ctx();
/* Save the previous context */
  p_new_ctx->p_ctx  = p_scb->p_tos;
80009eb6:	4c 50       	ld.w %d15,[%a5]0
80009eb8:	59 ff f0 ff 	st.w [%a15]-16,%d15

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80009ebc:	4d 00 e0 ff 	mfcr %d15,$pcxi
/* Save the PCXI */
  p_new_ctx->pcxi   = osEE_tc_csa_get_pcxi();
80009ec0:	59 ff f8 ff 	st.w [%a15]-8,%d15
 ============================================================================*/
OSEE_STATIC_INLINE OsEE_addr OSEE_ALWAYS_INLINE osEE_tc_get_RA(void)
{
  OsEE_addr ra;
  /* gets the current return address */
  __asm__ volatile ("mov.aa %0, %%a11" : "=a"(ra) : : "memory");
80009ec4:	40 b3       	mov.aa %a3,%a11
/* Save the RA */
  p_new_ctx->ra     = osEE_tc_get_RA();
80009ec6:	b5 f3 fc ff 	st.a [%a15]-4,%a3
/* Save the new Top Of Stack */
  p_scb->p_tos = p_new_ctx;
80009eca:	f4 52       	st.a [%a5],%a2
   N.B. The RA saved in this context is not useful, but I prefer to use one
        save ctx code for all the cases for code readability, instead using an
        optimized one for this case */
  osEE_tc_save_ctx(p_to_scb);
/* Jump to Kernel Wrapper */
  osEE_tc_jump(osEE_scheduler_task_wrapper_run);
80009ecc:	1d ff 46 fd 	j 80009958 <osEE_scheduler_task_wrapper_run>
80009ed0:	00 90       	ret 

80009ed2 <osEE_tc_change_context_from_isr2_end>:
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
/* Reset PSW Call Depth Counter, so I can force a RFE */
  osEE_tc_set_csfr(OSEE_CSFR_PSW,
80009ed2:	4d 40 e0 ff 	mfcr %d15,$psw
80009ed6:	8f ff c7 f1 	andn %d15,%d15,127
80009eda:	cd 4f e0 0f 	mtcr $psw,%d15
80009ede:	0d 00 c0 04 	isync 
   but it minimizes the MISRA violation to a single documented point.
*/
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_set_RA(OsEE_addr ra)
{
  /* sets the return address */
  __asm__ volatile ("mov.aa %%a11, %0" : : "a"(ra) : "memory");
80009ee2:	91 10 00 f8 	movh.a %a15,32769
80009ee6:	d9 ff e2 89 	lea %a15,[%a15]-25054 <80009e22 <osEE_tc_change_context_from_task_end>>
80009eea:	40 fb       	mov.aa %a11,%a15
  __asm__ volatile ("rslcx" : : : "memory");
}

/** The rfe assembler instruction */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE osEE_tc_rfe(void) {
  __asm__ volatile ("rfe" : : : "memory");
80009eec:	00 80       	rfe 
80009eee:	00 90       	ret 

80009ef0 <osEE_hal_terminate_ctx>:
  osEE_hal_terminate_ctx
(
  P2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA)  p_term_scb,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
80009ef0:	20 08       	sub.a %sp,8

/* Returns the first CSA in the Free Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_fcx(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_FCX);
80009ef2:	4d 80 e3 2f 	mfcr %d2,$fcx

/* Returns the first CSA in the Previous Context List */
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE osEE_tc_csa_get_pcxi(void)
{
  OsEE_csa_link head;
  head.reg = osEE_tc_get_csfr(OSEE_CSFR_PCXI);
80009ef6:	4d 00 e0 ff 	mfcr %d15,$pcxi
    OsEE_csa_link fcx                 = osEE_tc_csa_get_fcx();
/* Obtain Previous CSA list head, That is the head of the to_free_queue
   (will be new FCX) */
    OsEE_csa_link to_free_queue_head  = osEE_tc_csa_get_pcxi();
/* Get the the of the CSA list to be freed */
    OsEE_csa_link to_free_queue_tail  = p_term_scb->p_tos->pcxi;
80009efa:	cc 40       	ld.a %a15,[%a4]0
80009efc:	48 23       	ld.w %d3,[%a15]8
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
80009efe:	b9 f4 08 00 	ld.hu %d4,[%a15]8
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
80009f02:	37 03 64 38 	extr.u %d3,%d3,16,4
    ((OsEE_reg)l_csa.bits.pcxo << 6U);
80009f06:	06 64       	sh %d4,6
 */
OSEE_STATIC_INLINE OsEE_csa * OSEE_ALWAYS_INLINE
  osEE_tc_csa_link_to_pointer(OsEE_csa_link l_csa)
{
  OsEE_reg tmp_csa_addr;
  tmp_csa_addr = ((OsEE_reg)l_csa.bits.pcxs << 28U) |
80009f08:	8f c3 01 30 	sh %d3,%d3,28
80009f0c:	a6 43       	or %d3,%d4
80009f0e:	60 3f       	mov.a %a15,%d3
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    l_next = p_csa->l_next;
  } else {
    l_next.reg = 0U;
80009f10:	82 03       	mov %d3,0
OSEE_STATIC_INLINE OsEE_csa_link OSEE_ALWAYS_INLINE
  osEE_tc_csa_get_next(OsEE_csa_link l_csa_at)
{
  OsEE_csa_link     l_next;
  const OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
80009f12:	bc f3       	jz.a %a15,80009f18 <osEE_hal_terminate_ctx+0x28>
    l_next = p_csa->l_next;
80009f14:	48 03       	ld.w %d3,[%a15]0
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_next(OsEE_csa_link l_csa_at, OsEE_csa_link l_next)
{
  OsEE_csa * const  p_csa = osEE_tc_csa_link_to_pointer(l_csa_at);
  if (p_csa != NULL) {
    p_csa->l_next = l_next;
80009f16:	68 02       	st.w [%a15]0,%d2

/* Set the first CSA in the Free Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_fcx(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_FCX, l_csa.reg);
80009f18:	cd 8f e3 0f 	mtcr $fcx,%d15
80009f1c:	0d 00 c0 04 	isync 

/* Set the first CSA in the Previous Context List */
OSEE_STATIC_INLINE void OSEE_ALWAYS_INLINE
  osEE_tc_csa_set_pcxi(OsEE_csa_link l_csa)
{
  osEE_tc_set_csfr(OSEE_CSFR_PCXI, l_csa.reg);
80009f20:	cd 03 e0 0f 	mtcr $pcxi,%d3
80009f24:	0d 00 c0 04 	isync 
   since a TASK, not yet started with higher priority of the stacked ones,
   could have been activated. */
   osEE_tc_set_RA(p_term_scb->p_tos->ra);
#endif /* 0 */
/* Pop ERIKA's context */
   p_term_scb->p_tos = p_term_scb->p_tos->p_ctx;
80009f28:	cc 40       	ld.a %a15,[%a4]0
80009f2a:	4c f0       	ld.w %d15,[%a15]0
80009f2c:	6c 40       	st.w [%a4]0,%d15
   "osEE_hal_ready2stacked" PCXI. */
  {
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);
80009f2e:	91 00 00 48 	movh.a %a4,32768
80009f32:	d9 44 38 40 	lea %a4,[%a4]312 <80000138 <osEE_kdb_var>>
80009f36:	d9 a5 04 00 	lea %a5,[%sp]4 <80000138 <osEE_kdb_var>>
80009f3a:	6d ff 91 fe 	call 80009c5c <osEE_scheduler_task_terminated>

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
80009f3e:	d8 01       	ld.a %a15,[%sp]4
80009f40:	39 ff 14 00 	ld.bu %d15,[%a15]20
80009f44:	1e 25       	jeq %d15,2,80009f4e <osEE_hal_terminate_ctx+0x5e>
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
    } else {
/* Prepare to jump to osEE_tc_change_context_from_task_end */
      osEE_tc_setareg(a4, p_to);
80009f46:	40 24       	mov.aa %a4,%a2
      osEE_tc_jump(osEE_tc_change_context_from_task_end);
80009f48:	1d ff 6d ff 	j 80009e22 <osEE_tc_change_context_from_task_end>
    }
  }
/* Fake infinite loop: to turn off 'noreturn' function does return warning */
  for(;;) {
    ;
  }
80009f4c:	3c 00       	j 80009f4c <osEE_hal_terminate_ctx+0x5c>

    p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);

    if (p_from->task_type == OSEE_TASK_TYPE_ISR2) {
/* Call osEE_tc_change_context_from_isr2_end to give it a CSA to return from */
      osEE_tc_change_context_from_isr2_end(p_to);
80009f4e:	40 24       	mov.aa %a4,%a2
80009f50:	6d ff c1 ff 	call 80009ed2 <osEE_tc_change_context_from_isr2_end>
80009f54:	3c fc       	j 80009f4c <osEE_hal_terminate_ctx+0x5c>

80009f56 <__lshrdi3>:
80009f56:	6f 56 0c 80 	jnz.t %d6,5,80009f6e <__lshrdi3+0x18>
80009f5a:	8b 06 02 71 	rsub %d7,%d6,32
80009f5e:	32 56       	rsub %d6
80009f60:	17 45 80 27 	dextr %d2,%d5,%d4,%d7
80009f64:	0f 65 00 30 	sh %d3,%d5,%d6
80009f68:	2b 42 40 26 	sel %d2,%d6,%d2,%d4
80009f6c:	00 90       	ret 
80009f6e:	8b 06 02 60 	add %d6,%d6,32
80009f72:	32 56       	rsub %d6
80009f74:	0f 65 00 20 	sh %d2,%d5,%d6
80009f78:	82 03       	mov %d3,0
80009f7a:	00 90       	ret 

80009f7c <__floatundisf>:
80009f7c:	7b 00 02 20 	movh %d2,32
80009f80:	0b 25 30 f1 	lt.u %d15,%d5,%d2
80009f84:	02 4a       	mov %d10,%d4
80009f86:	02 54       	mov %d4,%d5
80009f88:	ee 08       	jnz %d15,80009f98 <__floatundisf+0x1c>
80009f8a:	b7 0a 95 f5 	insert %d15,%d10,0,11,21
80009f8e:	6e 05       	jz %d15,80009f98 <__floatundisf+0x1c>
80009f90:	b7 0a 0b a0 	insert %d10,%d10,0,0,11
80009f94:	b7 fa 81 a5 	insert %d10,%d10,15,11,1
80009f98:	6d 00 ea 02 	call 8000a56c <__floatunsidf>
80009f9c:	0b 23 10 48 	mov %e4,%d3,%d2
80009fa0:	82 06       	mov %d6,0
80009fa2:	7b 00 1f 74 	movh %d7,16880
80009fa6:	6d 00 34 01 	call 8000a20e <__muldf3>
80009faa:	02 a4       	mov %d4,%d10
80009fac:	0b 23 10 88 	mov %e8,%d3,%d2
80009fb0:	6d 00 de 02 	call 8000a56c <__floatunsidf>
80009fb4:	0b 89 10 48 	mov %e4,%d9,%d8
80009fb8:	0b 23 10 68 	mov %e6,%d3,%d2
80009fbc:	6d 00 ed 00 	call 8000a196 <__adddf3>
80009fc0:	0b 23 10 48 	mov %e4,%d3,%d2
80009fc4:	1d 00 b6 02 	j 8000a530 <__truncdfsf2>

80009fc8 <__extendsfdf2>:
80009fc8:	20 20       	sub.a %sp,32
80009fca:	d9 a4 20 00 	lea %a4,[%sp]32
80009fce:	89 44 2c f5 	st.w [+%a4]-20,%d4
80009fd2:	d9 a5 10 00 	lea %a5,[%sp]16
80009fd6:	6d 00 f1 02 	call 8000a5b8 <__unpack_f>
80009fda:	19 a2 1c 00 	ld.w %d2,[%sp]28
80009fde:	39 a4 10 00 	ld.bu %d4,[%sp]16
80009fe2:	8f e2 1f f0 	sh %d15,%d2,-2
80009fe6:	8f e2 01 20 	sh %d2,%d2,30
80009fea:	74 a2       	st.w [%sp],%d2
80009fec:	78 01       	st.w [%sp]4,%d15
80009fee:	19 a5 14 00 	ld.w %d5,[%sp]20
80009ff2:	19 a6 18 00 	ld.w %d6,[%sp]24
80009ff6:	1d 00 8e 02 	j 8000a512 <__make_dp>

80009ffa <_fpadd_parts>:
80009ffa:	0c 40       	ld.bu %d15,[%a4]0
80009ffc:	40 42       	mov.aa %a2,%a4
80009ffe:	bf 2f cb 80 	jlt.u %d15,2,8000a194 <_fpadd_parts+0x19a>
8000a002:	14 52       	ld.bu %d2,[%a5]
8000a004:	40 52       	mov.aa %a2,%a5
8000a006:	bf 22 c7 80 	jlt.u %d2,2,8000a194 <_fpadd_parts+0x19a>
8000a00a:	5e 4e       	jne %d15,4,8000a026 <_fpadd_parts+0x2c>
8000a00c:	40 42       	mov.aa %a2,%a4
8000a00e:	df 42 c3 80 	jne %d2,4,8000a194 <_fpadd_parts+0x19a>
8000a012:	19 42 04 00 	ld.w %d2,[%a4]4
8000a016:	4c 51       	ld.w %d15,[%a5]4
8000a018:	5f f2 be 00 	jeq %d2,%d15,8000a194 <_fpadd_parts+0x19a>
8000a01c:	91 00 00 f8 	movh.a %a15,32768
8000a020:	d9 f2 d4 80 	lea %a2,[%a15]3604 <80000e14 <__thenan_df>>
8000a024:	00 90       	ret 
8000a026:	40 52       	mov.aa %a2,%a5
8000a028:	df 42 b6 00 	jeq %d2,4,8000a194 <_fpadd_parts+0x19a>
8000a02c:	df 22 11 80 	jne %d2,2,8000a04e <_fpadd_parts+0x54>
8000a030:	40 42       	mov.aa %a2,%a4
8000a032:	df 2f b1 80 	jne %d15,2,8000a194 <_fpadd_parts+0x19a>
8000a036:	40 63       	mov.aa %a3,%a6
8000a038:	a0 4f       	mov.a %a15,4
8000a03a:	44 4f       	ld.w %d15,[%a4+]
8000a03c:	64 3f       	st.w [%a3+],%d15
8000a03e:	fc fe       	loop %a15,8000a03a <_fpadd_parts+0x40>
8000a040:	4c 21       	ld.w %d15,[%a2]4
8000a042:	19 52 04 00 	ld.w %d2,[%a5]4
8000a046:	40 62       	mov.aa %a2,%a6
8000a048:	26 2f       	and %d15,%d2
8000a04a:	6c 61       	st.w [%a6]4,%d15
8000a04c:	00 90       	ret 
8000a04e:	40 52       	mov.aa %a2,%a5
8000a050:	df 2f a2 00 	jeq %d15,2,8000a194 <_fpadd_parts+0x19a>
8000a054:	4c 42       	ld.w %d15,[%a4]8
8000a056:	19 52 08 00 	ld.w %d2,[%a5]8
8000a05a:	40 6f       	mov.aa %a15,%a6
8000a05c:	52 23       	sub %d3,%d15,%d2
8000a05e:	0b 30 c0 c1 	abs %d12,%d3
8000a062:	8b 0c 84 42 	ge %d4,%d12,64
8000a066:	40 5c       	mov.aa %a12,%a5
8000a068:	40 4d       	mov.aa %a13,%a4
8000a06a:	09 4a 4c 09 	ld.d %e10,[%a4]12
8000a06e:	09 58 4c 09 	ld.d %e8,[%a5]12
8000a072:	df 04 35 80 	jne %d4,0,8000a0dc <_fpadd_parts+0xe2>
8000a076:	bf 13 19 00 	jlt %d3,1,8000a0a8 <_fpadd_parts+0xae>
8000a07a:	0b 89 10 48 	mov %e4,%d9,%d8
8000a07e:	02 c6       	mov %d6,%d12
8000a080:	6d ff 6b ff 	call 80009f56 <__lshrdi3>
8000a084:	d2 14       	mov %e4,1
8000a086:	02 c6       	mov %d6,%d12
8000a088:	02 2e       	mov %d14,%d2
8000a08a:	02 3d       	mov %d13,%d3
8000a08c:	6d 00 89 02 	call 8000a59e <__ashldi3>
8000a090:	8b f2 9f 20 	addx %d2,%d2,-1
8000a094:	8b f3 bf 30 	addc %d3,%d3,-1
8000a098:	26 82       	and %d2,%d8
8000a09a:	26 93       	and %d3,%d9
8000a09c:	a6 23       	or %d3,%d2
8000a09e:	02 e8       	mov %d8,%d14
8000a0a0:	8b 03 00 85 	or.ne %d8,%d3,0
8000a0a4:	02 d9       	mov %d9,%d13
8000a0a6:	3c 21       	j 8000a0e8 <_fpadd_parts+0xee>
8000a0a8:	df 03 20 00 	jeq %d3,0,8000a0e8 <_fpadd_parts+0xee>
8000a0ac:	0b ab 10 48 	mov %e4,%d11,%d10
8000a0b0:	02 c6       	mov %d6,%d12
8000a0b2:	6d ff 52 ff 	call 80009f56 <__lshrdi3>
8000a0b6:	d2 14       	mov %e4,1
8000a0b8:	02 c6       	mov %d6,%d12
8000a0ba:	02 2e       	mov %d14,%d2
8000a0bc:	02 3d       	mov %d13,%d3
8000a0be:	6d 00 70 02 	call 8000a59e <__ashldi3>
8000a0c2:	8b f2 9f 20 	addx %d2,%d2,-1
8000a0c6:	8b f3 bf 30 	addc %d3,%d3,-1
8000a0ca:	26 a2       	and %d2,%d10
8000a0cc:	26 b3       	and %d3,%d11
8000a0ce:	a6 23       	or %d3,%d2
8000a0d0:	02 ea       	mov %d10,%d14
8000a0d2:	42 cf       	add %d15,%d12
8000a0d4:	8b 03 00 a5 	or.ne %d10,%d3,0
8000a0d8:	02 db       	mov %d11,%d13
8000a0da:	3c 07       	j 8000a0e8 <_fpadd_parts+0xee>
8000a0dc:	3f f2 05 00 	jlt %d2,%d15,8000a0e6 <_fpadd_parts+0xec>
8000a0e0:	02 2f       	mov %d15,%d2
8000a0e2:	d2 0a       	mov %e10,0
8000a0e4:	3c 02       	j 8000a0e8 <_fpadd_parts+0xee>
8000a0e6:	d2 08       	mov %e8,0
8000a0e8:	19 d4 04 00 	ld.w %d4,[%a13]4
8000a0ec:	19 c2 04 00 	ld.w %d2,[%a12]4
8000a0f0:	5f 24 34 00 	jeq %d4,%d2,8000a158 <_fpadd_parts+0x15e>
8000a0f4:	0b 8a c0 20 	subx %d2,%d10,%d8
8000a0f8:	0b 9b d0 30 	subc %d3,%d11,%d9
8000a0fc:	76 45       	jz %d4,8000a106 <_fpadd_parts+0x10c>
8000a0fe:	0b a8 c0 20 	subx %d2,%d8,%d10
8000a102:	0b b9 d0 30 	subc %d3,%d9,%d11
8000a106:	0e 37       	jltz %d3,8000a114 <_fpadd_parts+0x11a>
8000a108:	82 04       	mov %d4,0
8000a10a:	68 14       	st.w [%a15]4,%d4
8000a10c:	68 2f       	st.w [%a15]8,%d15
8000a10e:	89 f2 4c 09 	st.d [%a15]12,%e2
8000a112:	3c 0c       	j 8000a12a <_fpadd_parts+0x130>
8000a114:	68 2f       	st.w [%a15]8,%d15
8000a116:	8b 03 00 f1 	rsub %d15,%d3,0
8000a11a:	82 14       	mov %d4,1
8000a11c:	8b 02 00 31 	rsub %d3,%d2,0
8000a120:	ab ff 1f f2 	cadd %d15,%d2,%d15,-1
8000a124:	68 14       	st.w [%a15]4,%d4
8000a126:	68 33       	st.w [%a15]12,%d3
8000a128:	68 4f       	st.w [%a15]16,%d15
8000a12a:	82 f5       	mov %d5,-1
8000a12c:	06 c5       	sh %d5,-4
8000a12e:	48 32       	ld.w %d2,[%a15]12
8000a130:	48 43       	ld.w %d3,[%a15]16
8000a132:	8b f2 9f 60 	addx %d6,%d2,-1
8000a136:	8b f3 bf 40 	addc %d4,%d3,-1
8000a13a:	3a 54       	eq %d15,%d4,%d5
8000a13c:	8b f6 3f f4 	and.ne %d15,%d6,-1
8000a140:	0b 54 a0 f2 	or.lt.u %d15,%d4,%d5
8000a144:	6e 12       	jz %d15,8000a168 <_fpadd_parts+0x16e>
8000a146:	4c f2       	ld.w %d15,[%a15]8
8000a148:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000a14c:	c2 ff       	add %d15,-1
8000a14e:	06 12       	sh %d2,1
8000a150:	68 32       	st.w [%a15]12,%d2
8000a152:	68 43       	st.w [%a15]16,%d3
8000a154:	68 2f       	st.w [%a15]8,%d15
8000a156:	3c ec       	j 8000a12e <_fpadd_parts+0x134>
8000a158:	0b a8 40 20 	addx %d2,%d8,%d10
8000a15c:	68 2f       	st.w [%a15]8,%d15
8000a15e:	0b b9 50 f0 	addc %d15,%d9,%d11
8000a162:	68 14       	st.w [%a15]4,%d4
8000a164:	68 32       	st.w [%a15]12,%d2
8000a166:	68 4f       	st.w [%a15]16,%d15
8000a168:	82 3f       	mov %d15,3
8000a16a:	28 0f       	st.b [%a15]0,%d15
8000a16c:	4c f4       	ld.w %d15,[%a15]16
8000a16e:	7b 00 00 42 	movh %d4,8192
8000a172:	0b 4f 30 31 	lt.u %d3,%d15,%d4
8000a176:	48 32       	ld.w %d2,[%a15]12
8000a178:	40 f2       	mov.aa %a2,%a15
8000a17a:	f6 3d       	jnz %d3,8000a194 <_fpadd_parts+0x19a>
8000a17c:	8f 12 00 31 	and %d3,%d2,1
8000a180:	77 2f 80 2f 	dextr %d2,%d15,%d2,31
8000a184:	06 ff       	sh %d15,-1
8000a186:	96 00       	or %d15,0
8000a188:	68 4f       	st.w [%a15]16,%d15
8000a18a:	4c f2       	ld.w %d15,[%a15]8
8000a18c:	a6 32       	or %d2,%d3
8000a18e:	c2 1f       	add %d15,1
8000a190:	68 32       	st.w [%a15]12,%d2
8000a192:	68 2f       	st.w [%a15]8,%d15
8000a194:	00 90       	ret 

8000a196 <__adddf3>:
8000a196:	20 50       	sub.a %sp,80
8000a198:	d9 a4 04 00 	lea %a4,[%sp]4
8000a19c:	d9 a5 14 00 	lea %a5,[%sp]20
8000a1a0:	89 a4 44 09 	st.d [%sp]4,%e4
8000a1a4:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a1a8:	6d 00 d9 02 	call 8000a75a <__unpack_d>
8000a1ac:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a1b0:	d9 a5 28 00 	lea %a5,[%sp]40
8000a1b4:	6d 00 d3 02 	call 8000a75a <__unpack_d>
8000a1b8:	d9 a4 14 00 	lea %a4,[%sp]20
8000a1bc:	d9 a5 28 00 	lea %a5,[%sp]40
8000a1c0:	d9 a6 3c 00 	lea %a6,[%sp]60
8000a1c4:	6d ff 1b ff 	call 80009ffa <_fpadd_parts>
8000a1c8:	40 24       	mov.aa %a4,%a2
8000a1ca:	1d 00 3f 02 	j 8000a648 <__pack_d>

8000a1ce <__subdf3>:
8000a1ce:	20 50       	sub.a %sp,80
8000a1d0:	d9 a4 04 00 	lea %a4,[%sp]4
8000a1d4:	d9 a5 14 00 	lea %a5,[%sp]20
8000a1d8:	89 a4 44 09 	st.d [%sp]4,%e4
8000a1dc:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a1e0:	6d 00 bd 02 	call 8000a75a <__unpack_d>
8000a1e4:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a1e8:	d9 a5 28 00 	lea %a5,[%sp]40
8000a1ec:	6d 00 b7 02 	call 8000a75a <__unpack_d>
8000a1f0:	58 0b       	ld.w %d15,[%sp]44
8000a1f2:	d9 a4 14 00 	lea %a4,[%sp]20
8000a1f6:	8f 1f 80 f1 	xor %d15,%d15,1
8000a1fa:	d9 a5 28 00 	lea %a5,[%sp]40
8000a1fe:	d9 a6 3c 00 	lea %a6,[%sp]60
8000a202:	78 0b       	st.w [%sp]44,%d15
8000a204:	6d ff fb fe 	call 80009ffa <_fpadd_parts>
8000a208:	40 24       	mov.aa %a4,%a2
8000a20a:	1d 00 1f 02 	j 8000a648 <__pack_d>

8000a20e <__muldf3>:
8000a20e:	20 50       	sub.a %sp,80
8000a210:	d9 a4 04 00 	lea %a4,[%sp]4
8000a214:	d9 a5 14 00 	lea %a5,[%sp]20
8000a218:	89 a4 44 09 	st.d [%sp]4,%e4
8000a21c:	89 a6 4c 09 	st.d [%sp]12,%e6
8000a220:	6d 00 9d 02 	call 8000a75a <__unpack_d>
8000a224:	d9 a4 0c 00 	lea %a4,[%sp]12
8000a228:	d9 a5 28 00 	lea %a5,[%sp]40
8000a22c:	6d 00 97 02 	call 8000a75a <__unpack_d>
8000a230:	39 a3 14 00 	ld.bu %d3,[%sp]20
8000a234:	ff 23 0c 80 	jge.u %d3,2,8000a24c <__muldf3+0x3e>
8000a238:	19 a2 18 00 	ld.w %d2,[%sp]24
8000a23c:	58 0b       	ld.w %d15,[%sp]44
8000a23e:	d9 a4 14 00 	lea %a4,[%sp]20
8000a242:	0b f2 10 f1 	ne %d15,%d2,%d15
8000a246:	78 06       	st.w [%sp]24,%d15
8000a248:	1d 00 b3 00 	j 8000a3ae <__muldf3+0x1a0>
8000a24c:	39 af 28 00 	ld.bu %d15,[%sp]40
8000a250:	ff 2f 0c 80 	jge.u %d15,2,8000a268 <__muldf3+0x5a>
8000a254:	58 0b       	ld.w %d15,[%sp]44
8000a256:	19 a2 18 00 	ld.w %d2,[%sp]24
8000a25a:	d9 a4 28 00 	lea %a4,[%sp]40
8000a25e:	0b f2 10 f1 	ne %d15,%d2,%d15
8000a262:	78 0b       	st.w [%sp]44,%d15
8000a264:	1d 00 a5 00 	j 8000a3ae <__muldf3+0x1a0>
8000a268:	df 43 09 80 	jne %d3,4,8000a27a <__muldf3+0x6c>
8000a26c:	91 00 00 48 	movh.a %a4,32768
8000a270:	d9 44 d4 80 	lea %a4,[%a4]3604 <80000e14 <__thenan_df>>
8000a274:	df 2f 9d 00 	jeq %d15,2,8000a3ae <__muldf3+0x1a0>
8000a278:	3c e0       	j 8000a238 <__muldf3+0x2a>
8000a27a:	5e 48       	jne %d15,4,8000a28a <__muldf3+0x7c>
8000a27c:	91 00 00 48 	movh.a %a4,32768
8000a280:	d9 44 d4 80 	lea %a4,[%a4]3604 <80000e14 <__thenan_df>>
8000a284:	df 23 95 00 	jeq %d3,2,8000a3ae <__muldf3+0x1a0>
8000a288:	3c e6       	j 8000a254 <__muldf3+0x46>
8000a28a:	df 23 d7 7f 	jeq %d3,2,8000a238 <__muldf3+0x2a>
8000a28e:	df 2f e3 7f 	jeq %d15,2,8000a254 <__muldf3+0x46>
8000a292:	58 08       	ld.w %d15,[%sp]32
8000a294:	19 ab 38 00 	ld.w %d11,[%sp]56 <80000008 <BootModeHeader0+0x8>>
8000a298:	d2 00       	mov %e0,0
8000a29a:	19 a0 34 00 	ld.w %d0,[%sp]52
8000a29e:	73 bf 68 60 	mul.u %e6,%d15,%d11
8000a2a2:	82 0c       	mov %d12,0
8000a2a4:	73 0f 68 40 	mul.u %e4,%d15,%d0
8000a2a8:	19 aa 24 00 	ld.w %d10,[%sp]36
8000a2ac:	82 02       	mov %d2,0
8000a2ae:	03 cf 0a 77 	madd %d7,%d7,%d15,%d12
8000a2b2:	03 b2 0a 77 	madd %d7,%d7,%d2,%d11
8000a2b6:	03 1f 0a 55 	madd %d5,%d5,%d15,%d1
8000a2ba:	03 02 0a 55 	madd %d5,%d5,%d2,%d0
8000a2be:	82 0d       	mov %d13,0
8000a2c0:	03 a0 68 26 	madd.u %e2,%e6,%d0,%d10
8000a2c4:	03 d0 0a 33 	madd %d3,%d3,%d0,%d13
8000a2c8:	03 a1 0a 33 	madd %d3,%d3,%d1,%d10
8000a2cc:	0b 54 10 08 	mov %e0,%d4,%d5
8000a2d0:	42 20       	add %d0,%d2
8000a2d2:	3a 73       	eq %d15,%d3,%d7
8000a2d4:	0b 62 50 f2 	and.ge.u %d15,%d2,%d6
8000a2d8:	0b 37 a0 f2 	or.lt.u %d15,%d7,%d3
8000a2dc:	8b 0f 00 62 	eq %d6,%d15,0
8000a2e0:	3a 50       	eq %d15,%d0,%d5
8000a2e2:	0b 41 50 f2 	and.ge.u %d15,%d1,%d4
8000a2e6:	0b 05 a0 f2 	or.lt.u %d15,%d5,%d0
8000a2ea:	ba 0f       	eq %d15,%d15,0
8000a2ec:	53 1f 40 40 	mul.u %e4,%d15,1
8000a2f0:	02 38       	mov %d8,%d3
8000a2f2:	82 09       	mov %d9,0
8000a2f4:	03 ab 68 28 	madd.u %e2,%e8,%d11,%d10
8000a2f8:	02 5f       	mov %d15,%d5
8000a2fa:	03 db 0a 33 	madd %d3,%d3,%d11,%d13
8000a2fe:	42 6f       	add %d15,%d6
8000a300:	03 ac 0a 33 	madd %d3,%d3,%d12,%d10
8000a304:	0b 4f 10 68 	mov %e6,%d15,%d4
8000a308:	0b 62 40 40 	addx %d4,%d2,%d6
8000a30c:	0b 73 50 20 	addc %d2,%d3,%d7
8000a310:	58 07       	ld.w %d15,[%sp]28
8000a312:	19 a3 30 00 	ld.w %d3,[%sp]48
8000a316:	19 a5 18 00 	ld.w %d5,[%sp]24
8000a31a:	42 3f       	add %d15,%d3
8000a31c:	19 a3 2c 00 	ld.w %d3,[%sp]44
8000a320:	c2 4f       	add %d15,4
8000a322:	0b 35 10 31 	ne %d3,%d5,%d3
8000a326:	59 a3 00 10 	st.w [%sp]64,%d3
8000a32a:	7b 00 00 52 	movh %d5,8192
8000a32e:	0b 52 50 31 	ge.u %d3,%d2,%d5
8000a332:	df 03 1b 00 	jeq %d3,0,8000a368 <__muldf3+0x15a>
8000a336:	8f 14 00 31 	and %d3,%d4,1
8000a33a:	76 37       	jz %d3,8000a348 <__muldf3+0x13a>
8000a33c:	8f f0 1f 30 	sh %d3,%d0,-1
8000a340:	77 10 80 1f 	dextr %d1,%d0,%d1,31
8000a344:	b7 f3 81 0f 	insert %d0,%d3,15,31,1
8000a348:	77 42 80 4f 	dextr %d4,%d2,%d4,31
8000a34c:	c2 1f       	add %d15,1
8000a34e:	06 f2       	sh %d2,-1
8000a350:	3c ed       	j 8000a32a <__muldf3+0x11c>
8000a352:	77 42 80 20 	dextr %d2,%d2,%d4,1
8000a356:	06 14       	sh %d4,1
8000a358:	ce 04       	jgez %d0,8000a360 <__muldf3+0x152>
8000a35a:	8f 14 40 51 	or %d5,%d4,1
8000a35e:	02 54       	mov %d4,%d5
8000a360:	77 10 80 00 	dextr %d0,%d0,%d1,1
8000a364:	c2 ff       	add %d15,-1
8000a366:	06 11       	sh %d1,1
8000a368:	7b 00 00 51 	movh %d5,4096
8000a36c:	0b 52 30 31 	lt.u %d3,%d2,%d5
8000a370:	df 03 f1 ff 	jne %d3,0,8000a352 <__muldf3+0x144>
8000a374:	78 11       	st.w [%sp]68,%d15
8000a376:	02 4f       	mov %d15,%d4
8000a378:	16 ff       	and %d15,255
8000a37a:	8b 0f 28 f2 	ne %d15,%d15,128
8000a37e:	ee 0f       	jnz %d15,8000a39c <__muldf3+0x18e>
8000a380:	a6 10       	or %d0,%d1
8000a382:	77 42 00 fc 	dextr %d15,%d2,%d4,24
8000a386:	8b 00 20 02 	ne %d0,%d0,0
8000a38a:	0f f0 e0 00 	andn %d0,%d0,%d15
8000a38e:	76 07       	jz %d0,8000a39c <__muldf3+0x18e>
8000a390:	8b 04 88 40 	addx %d4,%d4,128
8000a394:	8b 02 a0 20 	addc %d2,%d2,0
8000a398:	8f f4 cf 41 	andn %d4,%d4,255
8000a39c:	d9 a4 10 10 	lea %a4,[%sp]80
8000a3a0:	82 3f       	mov %d15,3
8000a3a2:	59 a4 08 10 	st.w [%sp]72,%d4
8000a3a6:	59 a2 0c 10 	st.w [%sp]76,%d2
8000a3aa:	89 4f 2c f4 	st.b [+%a4]-20 <800003ec <IfxAsclin2_TX_P33_8_OUT>>,%d15
8000a3ae:	1d 00 4d 01 	j 8000a648 <__pack_d>

8000a3b2 <__divdf3>:
8000a3b2:	20 38       	sub.a %sp,56
8000a3b4:	40 a4       	mov.aa %a4,%sp
8000a3b6:	d9 a5 10 00 	lea %a5,[%sp]16
8000a3ba:	89 a4 40 09 	st.d [%sp],%e4
8000a3be:	89 a6 48 09 	st.d [%sp]8,%e6
8000a3c2:	6d 00 cc 01 	call 8000a75a <__unpack_d>
8000a3c6:	d9 a4 08 00 	lea %a4,[%sp]8
8000a3ca:	d9 a5 24 00 	lea %a5,[%sp]36
8000a3ce:	6d 00 c6 01 	call 8000a75a <__unpack_d>
8000a3d2:	39 a2 10 00 	ld.bu %d2,[%sp]16
8000a3d6:	bf 22 76 80 	jlt.u %d2,2,8000a4c2 <__divdf3+0x110>
8000a3da:	39 af 24 00 	ld.bu %d15,[%sp]36
8000a3de:	d9 a4 24 00 	lea %a4,[%sp]36
8000a3e2:	bf 2f 72 80 	jlt.u %d15,2,8000a4c6 <__divdf3+0x114>
8000a3e6:	19 a4 14 00 	ld.w %d4,[%sp]20
8000a3ea:	19 a3 28 00 	ld.w %d3,[%sp]40
8000a3ee:	c6 43       	xor %d3,%d4
8000a3f0:	59 a3 14 00 	st.w [%sp]20,%d3
8000a3f4:	1b e2 ff 3f 	addi %d3,%d2,-2
8000a3f8:	8f d3 0f 31 	and %d3,%d3,253
8000a3fc:	f6 38       	jnz %d3,8000a40c <__divdf3+0x5a>
8000a3fe:	91 00 00 48 	movh.a %a4,32768
8000a402:	d9 44 d4 80 	lea %a4,[%a4]3604 <80000e14 <__thenan_df>>
8000a406:	5f f2 5e 80 	jne %d2,%d15,8000a4c2 <__divdf3+0x110>
8000a40a:	3c 5e       	j 8000a4c6 <__divdf3+0x114>
8000a40c:	5e 47       	jne %d15,4,8000a41a <__divdf3+0x68>
8000a40e:	d2 02       	mov %e2,0
8000a410:	82 0f       	mov %d15,0
8000a412:	89 a2 5c 09 	st.d [%sp]28,%e2
8000a416:	78 06       	st.w [%sp]24,%d15
8000a418:	3c 55       	j 8000a4c2 <__divdf3+0x110>
8000a41a:	5e 25       	jne %d15,2,8000a424 <__divdf3+0x72>
8000a41c:	82 4f       	mov %d15,4
8000a41e:	e9 af 10 00 	st.b [%sp]16,%d15
8000a422:	3c 50       	j 8000a4c2 <__divdf3+0x110>
8000a424:	58 06       	ld.w %d15,[%sp]24
8000a426:	09 a2 5c 09 	ld.d %e2,[%sp]28
8000a42a:	09 a4 70 09 	ld.d %e4,[%sp]48
8000a42e:	19 a6 2c 00 	ld.w %d6,[%sp]44
8000a432:	52 66       	sub %d6,%d15,%d6
8000a434:	3a 53       	eq %d15,%d3,%d5
8000a436:	0b 42 50 f2 	and.ge.u %d15,%d2,%d4
8000a43a:	59 a6 18 00 	st.w [%sp]24,%d6
8000a43e:	0b 35 a0 f2 	or.lt.u %d15,%d5,%d3
8000a442:	ee 07       	jnz %d15,8000a450 <__divdf3+0x9e>
8000a444:	c2 f6       	add %d6,-1
8000a446:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000a44a:	59 a6 18 00 	st.w [%sp]24,%d6
8000a44e:	06 12       	sh %d2,1
8000a450:	82 01       	mov %d1,0
8000a452:	7b 00 00 f1 	movh %d15,4096
8000a456:	82 00       	mov %d0,0
8000a458:	82 07       	mov %d7,0
8000a45a:	c5 0f 3c 00 	lea %a15,3c <_.+0x3b>
8000a45e:	0b 53 00 61 	eq %d6,%d3,%d5
8000a462:	0b 42 30 62 	and.lt.u %d6,%d2,%d4
8000a466:	0b 53 a0 62 	or.lt.u %d6,%d3,%d5
8000a46a:	f6 6b       	jnz %d6,8000a480 <__divdf3+0xce>
8000a46c:	0f 10 a0 80 	or %d8,%d0,%d1
8000a470:	0f f7 a0 60 	or %d6,%d7,%d15
8000a474:	0b 42 c0 20 	subx %d2,%d2,%d4
8000a478:	02 80       	mov %d0,%d8
8000a47a:	02 67       	mov %d7,%d6
8000a47c:	0b 53 d0 30 	subc %d3,%d3,%d5
8000a480:	77 1f 80 1f 	dextr %d1,%d15,%d1,31
8000a484:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000a488:	06 ff       	sh %d15,-1
8000a48a:	06 12       	sh %d2,1
8000a48c:	fd f0 e9 7f 	loop %a15,8000a45e <__divdf3+0xac>
8000a490:	02 0f       	mov %d15,%d0
8000a492:	16 ff       	and %d15,255
8000a494:	8b 0f 28 f2 	ne %d15,%d15,128
8000a498:	0b 70 10 48 	mov %e4,%d0,%d7
8000a49c:	ee 0f       	jnz %d15,8000a4ba <__divdf3+0x108>
8000a49e:	a6 32       	or %d2,%d3
8000a4a0:	77 07 00 fc 	dextr %d15,%d7,%d0,24
8000a4a4:	8b 02 20 22 	ne %d2,%d2,0
8000a4a8:	0f f2 e0 20 	andn %d2,%d2,%d15
8000a4ac:	76 27       	jz %d2,8000a4ba <__divdf3+0x108>
8000a4ae:	8b 00 88 00 	addx %d0,%d0,128
8000a4b2:	8b 07 a0 40 	addc %d4,%d7,0
8000a4b6:	8f f0 cf 51 	andn %d5,%d0,255
8000a4ba:	59 a5 1c 00 	st.w [%sp]28,%d5
8000a4be:	59 a4 20 00 	st.w [%sp]32,%d4
8000a4c2:	d9 a4 10 00 	lea %a4,[%sp]16
8000a4c6:	1d 00 c1 00 	j 8000a648 <__pack_d>

8000a4ca <__floatsidf>:
8000a4ca:	20 18       	sub.a %sp,24
8000a4cc:	82 3f       	mov %d15,3
8000a4ce:	2c a4       	st.b [%sp]4,%d15
8000a4d0:	8f 14 1e f0 	sh %d15,%d4,-31
8000a4d4:	78 02       	st.w [%sp]8,%d15
8000a4d6:	f6 44       	jnz %d4,8000a4de <__floatsidf+0x14>
8000a4d8:	82 2f       	mov %d15,2
8000a4da:	2c a4       	st.b [%sp]4,%d15
8000a4dc:	3c 16       	j 8000a508 <__floatsidf+0x3e>
8000a4de:	6e 09       	jz %d15,8000a4f0 <__floatsidf+0x26>
8000a4e0:	7b 00 00 f8 	movh %d15,32768
8000a4e4:	82 02       	mov %d2,0
8000a4e6:	7b 00 1e 3c 	movh %d3,49632
8000a4ea:	5f f4 13 00 	jeq %d4,%d15,8000a510 <__floatsidf+0x46>
8000a4ee:	32 54       	rsub %d4
8000a4f0:	0f 04 b0 f1 	clz %d15,%d4
8000a4f4:	1b df 01 60 	addi %d6,%d15,29
8000a4f8:	82 05       	mov %d5,0
8000a4fa:	6d 00 52 00 	call 8000a59e <__ashldi3>
8000a4fe:	8b ff 01 f1 	rsub %d15,%d15,31
8000a502:	89 a2 50 09 	st.d [%sp]16,%e2
8000a506:	78 03       	st.w [%sp]12,%d15
8000a508:	d9 a4 04 00 	lea %a4,[%sp]4
8000a50c:	6d 00 9e 00 	call 8000a648 <__pack_d>
8000a510:	00 90       	ret 

8000a512 <__make_dp>:
8000a512:	20 18       	sub.a %sp,24
8000a514:	09 a2 58 09 	ld.d %e2,[%sp]24
8000a518:	d9 a4 04 00 	lea %a4,[%sp]4
8000a51c:	e9 a4 04 00 	st.b [%sp]4,%d4
8000a520:	59 a5 08 00 	st.w [%sp]8,%d5
8000a524:	59 a6 0c 00 	st.w [%sp]12,%d6
8000a528:	89 a2 50 09 	st.d [%sp]16,%e2
8000a52c:	1d 00 8e 00 	j 8000a648 <__pack_d>

8000a530 <__truncdfsf2>:
8000a530:	20 20       	sub.a %sp,32
8000a532:	d9 a4 20 00 	lea %a4,[%sp]32
8000a536:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000a53a:	d9 a5 0c 00 	lea %a5,[%sp]12
8000a53e:	6d 00 0e 01 	call 8000a75a <__unpack_d>
8000a542:	19 a7 18 00 	ld.w %d7,[%sp]24
8000a546:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000a54a:	39 a4 0c 00 	ld.bu %d4,[%sp]12
8000a54e:	77 72 00 21 	dextr %d2,%d2,%d7,2
8000a552:	b7 07 02 7f 	insert %d7,%d7,0,30,2
8000a556:	02 23       	mov %d3,%d2
8000a558:	8f 12 40 21 	or %d2,%d2,1
8000a55c:	19 a5 10 00 	ld.w %d5,[%sp]16
8000a560:	19 a6 14 00 	ld.w %d6,[%sp]20
8000a564:	2b 32 40 77 	sel %d7,%d7,%d2,%d3
8000a568:	1d 00 65 00 	j 8000a632 <__make_fp>

8000a56c <__floatunsidf>:
8000a56c:	20 18       	sub.a %sp,24
8000a56e:	82 0f       	mov %d15,0
8000a570:	78 02       	st.w [%sp]8,%d15
8000a572:	f6 44       	jnz %d4,8000a57a <__floatunsidf+0xe>
8000a574:	82 2f       	mov %d15,2
8000a576:	2c a4       	st.b [%sp]4,%d15
8000a578:	3c 0f       	j 8000a596 <__floatunsidf+0x2a>
8000a57a:	82 3f       	mov %d15,3
8000a57c:	2c a4       	st.b [%sp]4,%d15
8000a57e:	0f 04 b0 f1 	clz %d15,%d4
8000a582:	1b df 01 60 	addi %d6,%d15,29
8000a586:	82 05       	mov %d5,0
8000a588:	6d 00 0b 00 	call 8000a59e <__ashldi3>
8000a58c:	8b ff 01 f1 	rsub %d15,%d15,31
8000a590:	89 a2 50 09 	st.d [%sp]16,%e2
8000a594:	78 03       	st.w [%sp]12,%d15
8000a596:	d9 a4 04 00 	lea %a4,[%sp]4
8000a59a:	1d 00 57 00 	j 8000a648 <__pack_d>

8000a59e <__ashldi3>:
8000a59e:	6f 56 07 80 	jnz.t %d6,5,8000a5ac <__ashldi3+0xe>
8000a5a2:	0f 64 00 20 	sh %d2,%d4,%d6
8000a5a6:	17 45 80 36 	dextr %d3,%d5,%d4,%d6
8000a5aa:	00 90       	ret 
8000a5ac:	8b 06 1e 60 	add %d6,%d6,-32
8000a5b0:	82 02       	mov %d2,0
8000a5b2:	0f 64 00 30 	sh %d3,%d4,%d6
8000a5b6:	00 90       	ret 

8000a5b8 <__unpack_f>:
8000a5b8:	54 43       	ld.w %d3,[%a4]
8000a5ba:	37 03 77 f0 	extr.u %d15,%d3,0,23
8000a5be:	37 03 e8 2b 	extr.u %d2,%d3,23,8
8000a5c2:	8f 13 1e 30 	sh %d3,%d3,-31
8000a5c6:	59 53 04 00 	st.w [%a5]4,%d3
8000a5ca:	df 02 18 80 	jne %d2,0,8000a5fa <__unpack_f+0x42>
8000a5ce:	ee 03       	jnz %d15,8000a5d4 <__unpack_f+0x1c>
8000a5d0:	82 2f       	mov %d15,2
8000a5d2:	3c 19       	j 8000a604 <__unpack_f+0x4c>
8000a5d4:	3b 20 f8 2f 	mov %d2,-126
8000a5d8:	59 52 08 00 	st.w [%a5]8,%d2
8000a5dc:	82 32       	mov %d2,3
8000a5de:	34 52       	st.b [%a5],%d2
8000a5e0:	06 7f       	sh %d15,7
8000a5e2:	3b 10 f8 2f 	mov %d2,-127
8000a5e6:	7b 00 00 44 	movh %d4,16384
8000a5ea:	06 1f       	sh %d15,1
8000a5ec:	02 23       	mov %d3,%d2
8000a5ee:	c2 f2       	add %d2,-1
8000a5f0:	3f 4f fd ff 	jlt.u %d15,%d4,8000a5ea <__unpack_f+0x32>
8000a5f4:	59 53 08 00 	st.w [%a5]8,%d3
8000a5f8:	3c 1b       	j 8000a62e <__unpack_f+0x76>
8000a5fa:	8b f2 2f 32 	ne %d3,%d2,255
8000a5fe:	f6 3f       	jnz %d3,8000a61c <__unpack_f+0x64>
8000a600:	ee 04       	jnz %d15,8000a608 <__unpack_f+0x50>
8000a602:	82 4f       	mov %d15,4
8000a604:	2c 50       	st.b [%a5]0,%d15
8000a606:	00 90       	ret 
8000a608:	7b 00 04 20 	movh %d2,64
8000a60c:	26 f2       	and %d2,%d15
8000a60e:	76 22       	jz %d2,8000a612 <__unpack_f+0x5a>
8000a610:	82 12       	mov %d2,1
8000a612:	b7 0f 01 fb 	insert %d15,%d15,0,22,1
8000a616:	34 52       	st.b [%a5],%d2
8000a618:	06 7f       	sh %d15,7
8000a61a:	3c 0a       	j 8000a62e <__unpack_f+0x76>
8000a61c:	1b 12 f8 2f 	addi %d2,%d2,-127
8000a620:	06 7f       	sh %d15,7
8000a622:	59 52 08 00 	st.w [%a5]8,%d2
8000a626:	b7 ff 01 ff 	insert %d15,%d15,15,30,1
8000a62a:	82 32       	mov %d2,3
8000a62c:	34 52       	st.b [%a5],%d2
8000a62e:	6c 53       	st.w [%a5]12,%d15
8000a630:	00 90       	ret 

8000a632 <__make_fp>:
8000a632:	20 10       	sub.a %sp,16
8000a634:	40 a4       	mov.aa %a4,%sp
8000a636:	34 a4       	st.b [%sp],%d4
8000a638:	59 a5 04 00 	st.w [%sp]4,%d5
8000a63c:	59 a6 08 00 	st.w [%sp]8,%d6
8000a640:	59 a7 0c 00 	st.w [%sp]12,%d7
8000a644:	1d 00 e1 00 	j 8000a806 <__pack_f>

8000a648 <__pack_d>:
8000a648:	14 42       	ld.bu %d2,[%a4]
8000a64a:	19 49 0c 00 	ld.w %d9,[%a4]12
8000a64e:	19 48 10 00 	ld.w %d8,[%a4]16
8000a652:	19 4c 04 00 	ld.w %d12,[%a4]4
8000a656:	ff 22 0b 80 	jge.u %d2,2,8000a66c <__pack_d+0x24>
8000a65a:	77 98 00 9c 	dextr %d9,%d8,%d9,24
8000a65e:	06 88       	sh %d8,-8
8000a660:	02 95       	mov %d5,%d9
8000a662:	b7 18 8d 49 	insert %d4,%d8,1,19,13
8000a666:	3b f0 7f f0 	mov %d15,2047
8000a66a:	3c 6f       	j 8000a748 <__pack_d+0x100>
8000a66c:	3b f0 7f f0 	mov %d15,2047
8000a670:	d2 04       	mov %e4,0
8000a672:	df 42 6b 00 	jeq %d2,4,8000a748 <__pack_d+0x100>
8000a676:	0f 89 a0 f0 	or %d15,%d9,%d8
8000a67a:	8b 22 00 32 	eq %d3,%d2,2
8000a67e:	8b 0f e0 34 	or.eq %d3,%d15,0
8000a682:	82 0f       	mov %d15,0
8000a684:	df 03 62 80 	jne %d3,0,8000a748 <__pack_d+0x100>
8000a688:	19 42 08 00 	ld.w %d2,[%a4]8
8000a68c:	3b 20 c0 ff 	mov %d15,-1022
8000a690:	7f f2 36 00 	jge %d2,%d15,8000a6fc <__pack_d+0xb4>
8000a694:	a2 2f       	sub %d15,%d2
8000a696:	8b 9f 83 42 	ge %d4,%d15,57
8000a69a:	82 02       	mov %d2,0
8000a69c:	df 04 18 80 	jne %d4,0,8000a6cc <__pack_d+0x84>
8000a6a0:	0b 98 10 48 	mov %e4,%d8,%d9
8000a6a4:	02 f6       	mov %d6,%d15
8000a6a6:	6d ff 58 fc 	call 80009f56 <__lshrdi3>
8000a6aa:	d2 14       	mov %e4,1
8000a6ac:	02 f6       	mov %d6,%d15
8000a6ae:	0b 32 10 a8 	mov %e10,%d2,%d3
8000a6b2:	6d ff 76 ff 	call 8000a59e <__ashldi3>
8000a6b6:	8b f2 9f 20 	addx %d2,%d2,-1
8000a6ba:	8b f3 bf 30 	addc %d3,%d3,-1
8000a6be:	26 29       	and %d9,%d2
8000a6c0:	26 38       	and %d8,%d3
8000a6c2:	a6 98       	or %d8,%d9
8000a6c4:	02 b2       	mov %d2,%d11
8000a6c6:	8b 08 00 25 	or.ne %d2,%d8,0
8000a6ca:	02 a3       	mov %d3,%d10
8000a6cc:	02 2f       	mov %d15,%d2
8000a6ce:	16 ff       	and %d15,255
8000a6d0:	8b 0f 28 f2 	ne %d15,%d15,128
8000a6d4:	ee 07       	jnz %d15,8000a6e2 <__pack_d+0x9a>
8000a6d6:	8f 02 10 f1 	and %d15,%d2,256
8000a6da:	6e 08       	jz %d15,8000a6ea <__pack_d+0xa2>
8000a6dc:	8b 02 88 20 	addx %d2,%d2,128
8000a6e0:	3c 03       	j 8000a6e6 <__pack_d+0x9e>
8000a6e2:	8b f2 87 20 	addx %d2,%d2,127
8000a6e6:	8b 03 a0 30 	addc %d3,%d3,0
8000a6ea:	7b 00 00 41 	movh %d4,4096
8000a6ee:	0b 43 50 f1 	ge.u %d15,%d3,%d4
8000a6f2:	77 23 00 5c 	dextr %d5,%d3,%d2,24
8000a6f6:	8f 83 1f 40 	sh %d4,%d3,-8
8000a6fa:	3c 27       	j 8000a748 <__pack_d+0x100>
8000a6fc:	3b 00 40 30 	mov %d3,1024
8000a700:	3b f0 7f f0 	mov %d15,2047
8000a704:	7f 32 22 00 	jge %d2,%d3,8000a748 <__pack_d+0x100>
8000a708:	02 9f       	mov %d15,%d9
8000a70a:	16 ff       	and %d15,255
8000a70c:	8b 0f 28 f2 	ne %d15,%d15,128
8000a710:	ee 07       	jnz %d15,8000a71e <__pack_d+0xd6>
8000a712:	8f 09 10 f1 	and %d15,%d9,256
8000a716:	6e 08       	jz %d15,8000a726 <__pack_d+0xde>
8000a718:	8b 09 88 90 	addx %d9,%d9,128
8000a71c:	3c 03       	j 8000a722 <__pack_d+0xda>
8000a71e:	8b f9 87 90 	addx %d9,%d9,127
8000a722:	8b 08 a0 80 	addc %d8,%d8,0
8000a726:	7b 00 00 32 	movh %d3,8192
8000a72a:	0b 38 50 f1 	ge.u %d15,%d8,%d3
8000a72e:	ee 04       	jnz %d15,8000a736 <__pack_d+0xee>
8000a730:	1b f2 3f f0 	addi %d15,%d2,1023
8000a734:	3c 06       	j 8000a740 <__pack_d+0xf8>
8000a736:	77 98 80 9f 	dextr %d9,%d8,%d9,31
8000a73a:	1b 02 40 f0 	addi %d15,%d2,1024
8000a73e:	06 f8       	sh %d8,-1
8000a740:	77 98 00 5c 	dextr %d5,%d8,%d9,24
8000a744:	8f 88 1f 40 	sh %d4,%d8,-8
8000a748:	d2 02       	mov %e2,0
8000a74a:	37 43 14 40 	insert %d4,%d3,%d4,0,20
8000a74e:	37 f4 0b fa 	insert %d15,%d4,%d15,20,11
8000a752:	02 52       	mov %d2,%d5
8000a754:	37 cf 81 3f 	insert %d3,%d15,%d12,31,1
8000a758:	00 90       	ret 

8000a75a <__unpack_d>:
8000a75a:	19 44 04 00 	ld.w %d4,[%a4]4
8000a75e:	54 42       	ld.w %d2,[%a4]
8000a760:	37 04 74 50 	extr.u %d5,%d4,0,20
8000a764:	37 04 6b fa 	extr.u %d15,%d4,20,11
8000a768:	8f 14 1e 40 	sh %d4,%d4,-31
8000a76c:	59 54 04 00 	st.w [%a5]4,%d4
8000a770:	02 53       	mov %d3,%d5
8000a772:	ee 21       	jnz %d15,8000a7b4 <__unpack_d+0x5a>
8000a774:	0f 25 a0 f0 	or %d15,%d5,%d2
8000a778:	ee 03       	jnz %d15,8000a77e <__unpack_d+0x24>
8000a77a:	82 2f       	mov %d15,2
8000a77c:	3c 23       	j 8000a7c2 <__unpack_d+0x68>
8000a77e:	3b 20 c0 ff 	mov %d15,-1022
8000a782:	6c 52       	st.w [%a5]8,%d15
8000a784:	82 3f       	mov %d15,3
8000a786:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000a78a:	2c 50       	st.b [%a5]0,%d15
8000a78c:	8f 82 00 20 	sh %d2,%d2,8
8000a790:	3b 10 c0 ff 	mov %d15,-1023
8000a794:	77 23 80 30 	dextr %d3,%d3,%d2,1
8000a798:	7b 00 00 61 	movh %d6,4096
8000a79c:	0b 63 30 51 	lt.u %d5,%d3,%d6
8000a7a0:	02 f4       	mov %d4,%d15
8000a7a2:	06 12       	sh %d2,1
8000a7a4:	c2 ff       	add %d15,-1
8000a7a6:	df 05 f7 ff 	jne %d5,0,8000a794 <__unpack_d+0x3a>
8000a7aa:	59 54 08 00 	st.w [%a5]8,%d4
8000a7ae:	59 52 0c 00 	st.w [%a5]12,%d2
8000a7b2:	3c 27       	j 8000a800 <__unpack_d+0xa6>
8000a7b4:	3b f0 7f 40 	mov %d4,2047
8000a7b8:	fe 47       	jne %d15,%d4,8000a7e6 <__unpack_d+0x8c>
8000a7ba:	0f 25 a0 f0 	or %d15,%d5,%d2
8000a7be:	ee 04       	jnz %d15,8000a7c6 <__unpack_d+0x6c>
8000a7c0:	82 4f       	mov %d15,4
8000a7c2:	2c 50       	st.b [%a5]0,%d15
8000a7c4:	00 90       	ret 
8000a7c6:	7b 80 00 f0 	movh %d15,8
8000a7ca:	26 5f       	and %d15,%d5
8000a7cc:	6e 02       	jz %d15,8000a7d0 <__unpack_d+0x76>
8000a7ce:	82 1f       	mov %d15,1
8000a7d0:	2c 50       	st.b [%a5]0,%d15
8000a7d2:	b7 03 81 f9 	insert %d15,%d3,0,19,1
8000a7d6:	77 2f 00 f4 	dextr %d15,%d15,%d2,8
8000a7da:	8f 82 00 40 	sh %d4,%d2,8
8000a7de:	59 54 0c 00 	st.w [%a5]12,%d4
8000a7e2:	6c 54       	st.w [%a5]16,%d15
8000a7e4:	00 90       	ret 
8000a7e6:	1b 1f c0 ff 	addi %d15,%d15,-1023
8000a7ea:	77 25 00 34 	dextr %d3,%d5,%d2,8
8000a7ee:	6c 52       	st.w [%a5]8,%d15
8000a7f0:	8f 82 00 20 	sh %d2,%d2,8
8000a7f4:	82 3f       	mov %d15,3
8000a7f6:	b7 f3 01 3e 	insert %d3,%d3,15,28,1
8000a7fa:	2c 50       	st.b [%a5]0,%d15
8000a7fc:	59 52 0c 00 	st.w [%a5]12,%d2
8000a800:	59 53 10 00 	st.w [%a5]16,%d3
8000a804:	00 90       	ret 

8000a806 <__pack_f>:
8000a806:	14 45       	ld.bu %d5,[%a4]
8000a808:	4c 43       	ld.w %d15,[%a4]12
8000a80a:	19 47 04 00 	ld.w %d7,[%a4]4
8000a80e:	ff 25 09 80 	jge.u %d5,2,8000a820 <__pack_f+0x1a>
8000a812:	37 0f f6 33 	extr.u %d3,%d15,7,22
8000a816:	b7 f3 01 3b 	insert %d3,%d3,15,22,1
8000a81a:	3b f0 0f 40 	mov %d4,255
8000a81e:	3c 4f       	j 8000a8bc <__pack_f+0xb6>
8000a820:	3b f0 0f 40 	mov %d4,255
8000a824:	82 03       	mov %d3,0
8000a826:	df 45 4b 00 	jeq %d5,4,8000a8bc <__pack_f+0xb6>
8000a82a:	8b 25 00 62 	eq %d6,%d5,2
8000a82e:	8b 0f e0 64 	or.eq %d6,%d15,0
8000a832:	82 04       	mov %d4,0
8000a834:	df 06 44 80 	jne %d6,0,8000a8bc <__pack_f+0xb6>
8000a838:	19 45 08 00 	ld.w %d5,[%a4]8
8000a83c:	8b 25 98 42 	ge %d4,%d5,-126
8000a840:	df 04 24 80 	jne %d4,0,8000a888 <__pack_f+0x82>
8000a844:	8b 25 18 51 	rsub %d5,%d5,-126
8000a848:	8b a5 81 42 	ge %d4,%d5,26
8000a84c:	f6 4c       	jnz %d4,8000a864 <__pack_f+0x5e>
8000a84e:	82 12       	mov %d2,1
8000a850:	0f 52 00 20 	sh %d2,%d2,%d5
8000a854:	8b 05 00 31 	rsub %d3,%d5,0
8000a858:	c2 f2       	add %d2,-1
8000a85a:	0f 3f 00 30 	sh %d3,%d15,%d3
8000a85e:	26 2f       	and %d15,%d2
8000a860:	8b 0f 00 35 	or.ne %d3,%d15,0
8000a864:	8f f3 07 f1 	and %d15,%d3,127
8000a868:	8b 0f 24 f2 	ne %d15,%d15,64
8000a86c:	ee 06       	jnz %d15,8000a878 <__pack_f+0x72>
8000a86e:	8f 03 08 f1 	and %d15,%d3,128
8000a872:	ab 03 04 3f 	cadd %d3,%d15,%d3,64
8000a876:	3c 03       	j 8000a87c <__pack_f+0x76>
8000a878:	1b f3 03 30 	addi %d3,%d3,63
8000a87c:	7b 00 00 f4 	movh %d15,16384
8000a880:	0b f3 50 41 	ge.u %d4,%d3,%d15
8000a884:	06 93       	sh %d3,-7
8000a886:	3c 1b       	j 8000a8bc <__pack_f+0xb6>
8000a888:	8b 05 88 62 	ge %d6,%d5,128
8000a88c:	3b f0 0f 40 	mov %d4,255
8000a890:	df 06 16 80 	jne %d6,0,8000a8bc <__pack_f+0xb6>
8000a894:	8f ff 07 31 	and %d3,%d15,127
8000a898:	8b 03 24 32 	ne %d3,%d3,64
8000a89c:	f6 36       	jnz %d3,8000a8a8 <__pack_f+0xa2>
8000a89e:	8f 0f 08 31 	and %d3,%d15,128
8000a8a2:	ab 0f 04 f3 	cadd %d15,%d3,%d15,64
8000a8a6:	3c 03       	j 8000a8ac <__pack_f+0xa6>
8000a8a8:	1b ff 03 f0 	addi %d15,%d15,63
8000a8ac:	1b f5 07 40 	addi %d4,%d5,127
8000a8b0:	ce f4       	jgez %d15,8000a8b8 <__pack_f+0xb2>
8000a8b2:	06 ff       	sh %d15,-1
8000a8b4:	1b 05 08 40 	addi %d4,%d5,128
8000a8b8:	8f 9f 1f 30 	sh %d3,%d15,-7
8000a8bc:	82 02       	mov %d2,0
8000a8be:	37 32 17 20 	insert %d2,%d2,%d3,0,23
8000a8c2:	37 42 88 2b 	insert %d2,%d2,%d4,23,8
8000a8c6:	37 72 81 2f 	insert %d2,%d2,%d7,31,1
8000a8ca:	00 90       	ret 

8000a8cc <malloc>:
8000a8cc:	91 00 00 f7 	movh.a %a15,28672
8000a8d0:	99 f4 40 40 	ld.a %a4,[%a15]1280 <70000500 <_impure_ptr>>
8000a8d4:	1d 00 09 00 	j 8000a8e6 <_malloc_r>

8000a8d8 <free>:
8000a8d8:	91 00 00 f7 	movh.a %a15,28672
8000a8dc:	40 45       	mov.aa %a5,%a4
8000a8de:	99 f4 40 40 	ld.a %a4,[%a15]1280 <70000500 <_impure_ptr>>
8000a8e2:	1d 00 f7 02 	j 8000aed0 <_free_r>

8000a8e6 <_malloc_r>:
8000a8e6:	1b b4 00 f0 	addi %d15,%d4,11
8000a8ea:	8b 7f 61 82 	lt.u %d8,%d15,23
8000a8ee:	8f 7f c0 f1 	andn %d15,%d15,7
8000a8f2:	ab 0f a1 88 	seln %d8,%d8,%d15,16
8000a8f6:	0b 48 30 41 	lt.u %d4,%d8,%d4
8000a8fa:	8b 08 20 45 	or.lt %d4,%d8,0
8000a8fe:	40 4d       	mov.aa %a13,%a4
8000a900:	76 45       	jz %d4,8000a90a <_malloc_r+0x24>
8000a902:	da 0c       	mov %d15,12
8000a904:	6c 40       	st.w [%a4]0,%d15
8000a906:	1d 00 2a 02 	j 8000ad5a <_malloc_r+0x474>
8000a90a:	91 00 00 f7 	movh.a %a15,28672
8000a90e:	8b 88 bf f2 	ge.u %d15,%d8,504
8000a912:	6d 00 37 02 	call 8000ad80 <__malloc_lock>
8000a916:	d9 ff 38 30 	lea %a15,[%a15]248 <700000f8 <__malloc_av_>>
8000a91a:	ee 19       	jnz %d15,8000a94c <_malloc_r+0x66>
8000a91c:	8f d8 1f 20 	sh %d2,%d8,-3
8000a920:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000a924:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000a928:	7d 2c 09 80 	jne.a %a12,%a2,8000a93a <_malloc_r+0x54>
8000a92c:	d9 c2 08 00 	lea %a2,[%a12]8
8000a930:	99 cc 14 00 	ld.a %a12,[%a12]20
8000a934:	c2 22       	add %d2,2
8000a936:	7d 2c 58 00 	jeq.a %a12,%a2,8000a9e6 <_malloc_r+0x100>
8000a93a:	cc c3       	ld.a %a15,[%a12]12
8000a93c:	99 c2 08 00 	ld.a %a2,[%a12]8
8000a940:	4c c1       	ld.w %d15,[%a12]4
8000a942:	ec 23       	st.a [%a2]12,%a15
8000a944:	8f 3f c0 f1 	andn %d15,%d15,3
8000a948:	e8 22       	st.a [%a15]8,%a2
8000a94a:	3c 74       	j 8000aa32 <_malloc_r+0x14c>
8000a94c:	8f 78 1f f0 	sh %d15,%d8,-9
8000a950:	3b f0 03 20 	mov %d2,63
8000a954:	6e 27       	jz %d15,8000a9a2 <_malloc_r+0xbc>
8000a956:	8f a8 1f 20 	sh %d2,%d8,-6
8000a95a:	1b 82 03 20 	addi %d2,%d2,56
8000a95e:	bf 5f 22 80 	jlt.u %d15,5,8000a9a2 <_malloc_r+0xbc>
8000a962:	8b 5f a1 22 	ge.u %d2,%d15,21
8000a966:	f6 24       	jnz %d2,8000a96e <_malloc_r+0x88>
8000a968:	1b bf 05 20 	addi %d2,%d15,91
8000a96c:	3c 1b       	j 8000a9a2 <_malloc_r+0xbc>
8000a96e:	8b 5f a5 22 	ge.u %d2,%d15,85
8000a972:	f6 26       	jnz %d2,8000a97e <_malloc_r+0x98>
8000a974:	8f 48 1f 20 	sh %d2,%d8,-12
8000a978:	1b e2 06 20 	addi %d2,%d2,110
8000a97c:	3c 13       	j 8000a9a2 <_malloc_r+0xbc>
8000a97e:	8b 5f b5 22 	ge.u %d2,%d15,341
8000a982:	f6 26       	jnz %d2,8000a98e <_malloc_r+0xa8>
8000a984:	8f 18 1f 20 	sh %d2,%d8,-15
8000a988:	1b 72 07 20 	addi %d2,%d2,119
8000a98c:	3c 0b       	j 8000a9a2 <_malloc_r+0xbc>
8000a98e:	3b 50 55 30 	mov %d3,1365
8000a992:	3b e0 07 20 	mov %d2,126
8000a996:	7f 3f 06 80 	jge.u %d15,%d3,8000a9a2 <_malloc_r+0xbc>
8000a99a:	8f e8 1e 20 	sh %d2,%d8,-18
8000a99e:	1b c2 07 20 	addi %d2,%d2,124
8000a9a2:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000a9a6:	99 2c 0c 00 	ld.a %a12,[%a2]12
8000a9aa:	7d 2c 1d 00 	jeq.a %a12,%a2,8000a9e4 <_malloc_r+0xfe>
8000a9ae:	19 c4 04 00 	ld.w %d4,[%a12]4
8000a9b2:	8f 34 c0 41 	andn %d4,%d4,3
8000a9b6:	5a 84       	sub %d15,%d4,%d8
8000a9b8:	8b 0f 41 32 	lt %d3,%d15,16
8000a9bc:	f6 33       	jnz %d3,8000a9c2 <_malloc_r+0xdc>
8000a9be:	c2 f2       	add %d2,-1
8000a9c0:	3c 12       	j 8000a9e4 <_malloc_r+0xfe>
8000a9c2:	0e fe       	jltz %d15,8000a9de <_malloc_r+0xf8>
8000a9c4:	cc c3       	ld.a %a15,[%a12]12
8000a9c6:	99 c2 08 00 	ld.a %a2,[%a12]8
8000a9ca:	ec 23       	st.a [%a2]12,%a15
8000a9cc:	e8 22       	st.a [%a15]8,%a2
8000a9ce:	01 c4 00 f6 	addsc.a %a15,%a12,%d4,0
8000a9d2:	b7 10 21 20 	imask %e2,1,0,1
8000a9d6:	49 f2 44 08 	ldmst [%a15]4,%e2
8000a9da:	1d 00 cc 01 	j 8000ad72 <_malloc_r+0x48c>
8000a9de:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000a9e2:	3c e4       	j 8000a9aa <_malloc_r+0xc4>
8000a9e4:	c2 12       	add %d2,1
8000a9e6:	c8 4c       	ld.a %a12,[%a15]16
8000a9e8:	91 00 00 37 	movh.a %a3,28672
8000a9ec:	d9 33 00 40 	lea %a3,[%a3]256 <70000100 <__malloc_av_+0x8>>
8000a9f0:	7d 3c 83 00 	jeq.a %a12,%a3,8000aaf6 <_malloc_r+0x210>
8000a9f4:	4c c1       	ld.w %d15,[%a12]4
8000a9f6:	8f 3f c0 f1 	andn %d15,%d15,3
8000a9fa:	52 83       	sub %d3,%d15,%d8
8000a9fc:	8b 03 41 42 	lt %d4,%d3,16
8000aa00:	df 04 16 80 	jne %d4,0,8000aa2c <_malloc_r+0x146>
8000aa04:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000aa08:	8f 18 40 81 	or %d8,%d8,1
8000aa0c:	59 c8 04 00 	st.w [%a12]4,%d8
8000aa10:	e8 52       	st.a [%a15]20,%a2
8000aa12:	e8 42       	st.a [%a15]16,%a2
8000aa14:	8f 13 40 f1 	or %d15,%d3,1
8000aa18:	b5 23 0c 00 	st.a [%a2]12,%a3
8000aa1c:	b5 23 08 00 	st.a [%a2]8,%a3
8000aa20:	6c 21       	st.w [%a2]4,%d15
8000aa22:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000aa26:	74 23       	st.w [%a2],%d3
8000aa28:	1d 00 a5 01 	j 8000ad72 <_malloc_r+0x48c>
8000aa2c:	e8 53       	st.a [%a15]20,%a3
8000aa2e:	e8 43       	st.a [%a15]16,%a3
8000aa30:	0e 33       	jltz %d3,8000aa36 <_malloc_r+0x150>
8000aa32:	10 cf       	addsc.a %a15,%a12,%d15,0
8000aa34:	3c cf       	j 8000a9d2 <_malloc_r+0xec>
8000aa36:	3b 00 20 30 	mov %d3,512
8000aa3a:	7f 3f 15 80 	jge.u %d15,%d3,8000aa64 <_malloc_r+0x17e>
8000aa3e:	06 df       	sh %d15,-3
8000aa40:	d0 f2       	addsc.a %a2,%a15,%d15,3
8000aa42:	48 14       	ld.w %d4,[%a15]4
8000aa44:	99 24 08 00 	ld.a %a4,[%a2]8
8000aa48:	8f ef 3f 30 	sha %d3,%d15,-2
8000aa4c:	b5 c2 0c 00 	st.a [%a12]12,%a2
8000aa50:	b5 c4 08 00 	st.a [%a12]8,%a4
8000aa54:	d7 14 01 33 	insert %d3,%d4,1,%d3,1
8000aa58:	b5 2c 08 00 	st.a [%a2]8,%a12
8000aa5c:	68 13       	st.w [%a15]4,%d3
8000aa5e:	b5 4c 0c 00 	st.a [%a4]12,%a12
8000aa62:	3c 4a       	j 8000aaf6 <_malloc_r+0x210>
8000aa64:	8f af 1f 40 	sh %d4,%d15,-6
8000aa68:	8f 7f 1f 30 	sh %d3,%d15,-9
8000aa6c:	1b 84 03 40 	addi %d4,%d4,56
8000aa70:	bf 53 22 80 	jlt.u %d3,5,8000aab4 <_malloc_r+0x1ce>
8000aa74:	8b 53 a1 42 	ge.u %d4,%d3,21
8000aa78:	f6 44       	jnz %d4,8000aa80 <_malloc_r+0x19a>
8000aa7a:	1b b3 05 40 	addi %d4,%d3,91
8000aa7e:	3c 1b       	j 8000aab4 <_malloc_r+0x1ce>
8000aa80:	8b 53 a5 42 	ge.u %d4,%d3,85
8000aa84:	f6 46       	jnz %d4,8000aa90 <_malloc_r+0x1aa>
8000aa86:	8f 4f 1f 40 	sh %d4,%d15,-12
8000aa8a:	1b e4 06 40 	addi %d4,%d4,110
8000aa8e:	3c 13       	j 8000aab4 <_malloc_r+0x1ce>
8000aa90:	8b 53 b5 42 	ge.u %d4,%d3,341
8000aa94:	f6 46       	jnz %d4,8000aaa0 <_malloc_r+0x1ba>
8000aa96:	8f 1f 1f 40 	sh %d4,%d15,-15
8000aa9a:	1b 74 07 40 	addi %d4,%d4,119
8000aa9e:	3c 0b       	j 8000aab4 <_malloc_r+0x1ce>
8000aaa0:	3b 50 55 50 	mov %d5,1365
8000aaa4:	3b e0 07 40 	mov %d4,126
8000aaa8:	7f 53 06 80 	jge.u %d3,%d5,8000aab4 <_malloc_r+0x1ce>
8000aaac:	8f ef 1e 40 	sh %d4,%d15,-18
8000aab0:	1b c4 07 40 	addi %d4,%d4,124
8000aab4:	01 f4 03 46 	addsc.a %a4,%a15,%d4,3
8000aab8:	99 42 08 00 	ld.a %a2,[%a4]8
8000aabc:	7d 42 0d 80 	jne.a %a2,%a4,8000aad6 <_malloc_r+0x1f0>
8000aac0:	4c f1       	ld.w %d15,[%a15]4
8000aac2:	86 e4       	sha %d4,-2
8000aac4:	d7 1f 01 44 	insert %d4,%d15,1,%d4,1
8000aac8:	40 24       	mov.aa %a4,%a2
8000aaca:	68 14       	st.w [%a15]4,%d4
8000aacc:	3c 0d       	j 8000aae6 <_malloc_r+0x200>
8000aace:	99 22 08 00 	ld.a %a2,[%a2]8
8000aad2:	7d 42 08 00 	jeq.a %a2,%a4,8000aae2 <_malloc_r+0x1fc>
8000aad6:	19 23 04 00 	ld.w %d3,[%a2]4
8000aada:	8f 33 c0 31 	andn %d3,%d3,3
8000aade:	3f 3f f8 ff 	jlt.u %d15,%d3,8000aace <_malloc_r+0x1e8>
8000aae2:	99 24 0c 00 	ld.a %a4,[%a2]12
8000aae6:	b5 c4 0c 00 	st.a [%a12]12,%a4
8000aaea:	b5 c2 08 00 	st.a [%a12]8,%a2
8000aaee:	b5 4c 08 00 	st.a [%a4]8,%a12
8000aaf2:	b5 2c 0c 00 	st.a [%a2]12,%a12
8000aaf6:	8f e2 3f 30 	sha %d3,%d2,-2
8000aafa:	82 1f       	mov %d15,1
8000aafc:	0f 3f 00 f0 	sh %d15,%d15,%d3
8000ab00:	48 13       	ld.w %d3,[%a15]4
8000ab02:	3f f3 73 80 	jlt.u %d3,%d15,8000abe8 <_malloc_r+0x302>
8000ab06:	0f 3f 80 40 	and %d4,%d15,%d3
8000ab0a:	f6 49       	jnz %d4,8000ab1c <_malloc_r+0x236>
8000ab0c:	8f 32 c0 21 	andn %d2,%d2,3
8000ab10:	06 1f       	sh %d15,1
8000ab12:	0f 3f 80 40 	and %d4,%d15,%d3
8000ab16:	c2 42       	add %d2,4
8000ab18:	df 04 fc 7f 	jeq %d4,0,8000ab10 <_malloc_r+0x22a>
8000ab1c:	01 f2 03 26 	addsc.a %a2,%a15,%d2,3
8000ab20:	02 24       	mov %d4,%d2
8000ab22:	40 24       	mov.aa %a4,%a2
8000ab24:	99 4c 0c 00 	ld.a %a12,[%a4]12
8000ab28:	7d 4c 3c 00 	jeq.a %a12,%a4,8000aba0 <_malloc_r+0x2ba>
8000ab2c:	19 c6 04 00 	ld.w %d6,[%a12]4
8000ab30:	8f 36 c0 61 	andn %d6,%d6,3
8000ab34:	0b 86 80 30 	sub %d3,%d6,%d8
8000ab38:	8b 03 41 52 	lt %d5,%d3,16
8000ab3c:	df 05 1d 80 	jne %d5,0,8000ab76 <_malloc_r+0x290>
8000ab40:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000ab44:	8f 18 40 81 	or %d8,%d8,1
8000ab48:	59 c8 04 00 	st.w [%a12]4,%d8
8000ab4c:	99 c4 0c 00 	ld.a %a4,[%a12]12
8000ab50:	09 c5 88 05 	ld.a %a5,[+%a12]8
8000ab54:	8f 13 40 f1 	or %d15,%d3,1
8000ab58:	b5 54 0c 00 	st.a [%a5]12,%a4
8000ab5c:	b5 45 08 00 	st.a [%a4]8,%a5
8000ab60:	e8 52       	st.a [%a15]20,%a2
8000ab62:	e8 42       	st.a [%a15]16,%a2
8000ab64:	b5 23 0c 00 	st.a [%a2]12,%a3
8000ab68:	b5 23 08 00 	st.a [%a2]8,%a3
8000ab6c:	6c 21       	st.w [%a2]4,%d15
8000ab6e:	01 23 00 26 	addsc.a %a2,%a2,%d3,0
8000ab72:	74 23       	st.w [%a2],%d3
8000ab74:	3c 0e       	j 8000ab90 <_malloc_r+0x2aa>
8000ab76:	bf 03 12 00 	jlt %d3,0,8000ab9a <_malloc_r+0x2b4>
8000ab7a:	01 c6 00 f6 	addsc.a %a15,%a12,%d6,0
8000ab7e:	b7 10 21 20 	imask %e2,1,0,1
8000ab82:	49 f2 44 08 	ldmst [%a15]4,%e2
8000ab86:	cc c3       	ld.a %a15,[%a12]12
8000ab88:	09 c2 88 05 	ld.a %a2,[+%a12]8
8000ab8c:	ec 23       	st.a [%a2]12,%a15
8000ab8e:	e8 22       	st.a [%a15]8,%a2
8000ab90:	40 d4       	mov.aa %a4,%a13
8000ab92:	6d 00 f8 00 	call 8000ad82 <__malloc_unlock>
8000ab96:	1d 00 f3 00 	j 8000ad7c <_malloc_r+0x496>
8000ab9a:	99 cc 0c 00 	ld.a %a12,[%a12]12
8000ab9e:	3c c5       	j 8000ab28 <_malloc_r+0x242>
8000aba0:	c2 14       	add %d4,1
8000aba2:	8f 34 00 31 	and %d3,%d4,3
8000aba6:	d9 44 08 00 	lea %a4,[%a4]8
8000abaa:	df 03 bd ff 	jne %d3,0,8000ab24 <_malloc_r+0x23e>
8000abae:	8f 32 00 31 	and %d3,%d2,3
8000abb2:	f6 36       	jnz %d3,8000abbe <_malloc_r+0x2d8>
8000abb4:	48 12       	ld.w %d2,[%a15]4
8000abb6:	0f f2 e0 20 	andn %d2,%d2,%d15
8000abba:	68 12       	st.w [%a15]4,%d2
8000abbc:	3c 07       	j 8000abca <_malloc_r+0x2e4>
8000abbe:	d9 24 f8 ff 	lea %a4,[%a2]-8
8000abc2:	d4 22       	ld.a %a2,[%a2]
8000abc4:	c2 f2       	add %d2,-1
8000abc6:	7d 42 f4 7f 	jeq.a %a2,%a4,8000abae <_malloc_r+0x2c8>
8000abca:	06 1f       	sh %d15,1
8000abcc:	48 12       	ld.w %d2,[%a15]4
8000abce:	8b 0f 20 32 	ne %d3,%d15,0
8000abd2:	0b f2 50 32 	and.ge.u %d3,%d2,%d15
8000abd6:	76 39       	jz %d3,8000abe8 <_malloc_r+0x302>
8000abd8:	0f 2f 80 30 	and %d3,%d15,%d2
8000abdc:	f6 34       	jnz %d3,8000abe4 <_malloc_r+0x2fe>
8000abde:	c2 44       	add %d4,4
8000abe0:	06 1f       	sh %d15,1
8000abe2:	3c fb       	j 8000abd8 <_malloc_r+0x2f2>
8000abe4:	02 42       	mov %d2,%d4
8000abe6:	3c 9b       	j 8000ab1c <_malloc_r+0x236>
8000abe8:	c8 2c       	ld.a %a12,[%a15]8
8000abea:	19 ca 04 00 	ld.w %d10,[%a12]4
8000abee:	8f 3a c0 a1 	andn %d10,%d10,3
8000abf2:	5a 8a       	sub %d15,%d10,%d8
8000abf4:	8b 0f 41 22 	lt %d2,%d15,16
8000abf8:	0b 8a a0 22 	or.lt.u %d2,%d10,%d8
8000abfc:	df 02 b1 00 	jeq %d2,0,8000ad5e <_malloc_r+0x478>
8000ac00:	91 00 00 27 	movh.a %a2,28672
8000ac04:	19 2b f8 00 	ld.w %d11,[%a2]3128 <70000c38 <__malloc_top_pad>>
8000ac08:	91 00 00 27 	movh.a %a2,28672
8000ac0c:	42 8b       	add %d11,%d8
8000ac0e:	19 23 30 30 	ld.w %d3,[%a2]240 <700000f0 <__malloc_sbrk_base>>
8000ac12:	1b fb 00 f1 	addi %d15,%d11,4111
8000ac16:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000ac1a:	1b 0b 01 20 	addi %d2,%d11,16
8000ac1e:	8b f3 3f b2 	ne %d11,%d3,-1
8000ac22:	2b 2f 40 bb 	sel %d11,%d11,%d15,%d2
8000ac26:	40 d4       	mov.aa %a4,%a13
8000ac28:	02 b4       	mov %d4,%d11
8000ac2a:	80 2c       	mov.d %d12,%a2
8000ac2c:	6d 00 ac 00 	call 8000ad84 <_sbrk_r>
8000ac30:	80 29       	mov.d %d9,%a2
8000ac32:	df f9 86 00 	jeq %d9,-1,8000ad3e <_malloc_r+0x458>
8000ac36:	80 c2       	mov.d %d2,%a12
8000ac38:	80 c3       	mov.d %d3,%a12
8000ac3a:	42 a2       	add %d2,%d10
8000ac3c:	80 f4       	mov.d %d4,%a15
8000ac3e:	0b 29 30 f1 	lt.u %d15,%d9,%d2
8000ac42:	0b 43 10 f2 	and.ne %d15,%d3,%d4
8000ac46:	01 fc 10 d4 	ne.a %d13,%a12,%a15
8000ac4a:	ee 7a       	jnz %d15,8000ad3e <_malloc_r+0x458>
8000ac4c:	91 00 00 e7 	movh.a %a14,28672
8000ac50:	19 e3 c8 00 	ld.w %d3,[%a14]3080 <70000c08 <__malloc_current_mallinfo>>
8000ac54:	42 b3       	add %d3,%d11
8000ac56:	59 e3 c8 00 	st.w [%a14]3080 <70000c08 <__malloc_current_mallinfo>>,%d3
8000ac5a:	5f 29 0c 80 	jne %d9,%d2,8000ac72 <_malloc_r+0x38c>
8000ac5e:	b7 09 14 f6 	insert %d15,%d9,0,12,20
8000ac62:	ee 08       	jnz %d15,8000ac72 <_malloc_r+0x38c>
8000ac64:	c8 22       	ld.a %a2,[%a15]8
8000ac66:	42 ba       	add %d10,%d11
8000ac68:	8f 1a 40 a1 	or %d10,%d10,1
8000ac6c:	59 2a 04 00 	st.w [%a2]4,%d10
8000ac70:	3c 55       	j 8000ad1a <_malloc_r+0x434>
8000ac72:	60 c2       	mov.a %a2,%d12
8000ac74:	19 2f 30 30 	ld.w %d15,[%a2]240
8000ac78:	5e f6       	jne %d15,-1,8000ac84 <_malloc_r+0x39e>
8000ac7a:	91 00 00 27 	movh.a %a2,28672
8000ac7e:	59 29 30 30 	st.w [%a2]240 <700000f0 <__malloc_sbrk_base>>,%d9
8000ac82:	3c 06       	j 8000ac8e <_malloc_r+0x3a8>
8000ac84:	0b 29 80 20 	sub %d2,%d9,%d2
8000ac88:	42 23       	add %d3,%d2
8000ac8a:	59 e3 c8 00 	st.w [%a14]3080 <70000c08 <__malloc_current_mallinfo>>,%d3
8000ac8e:	8f 79 00 21 	and %d2,%d9,7
8000ac92:	82 0f       	mov %d15,0
8000ac94:	76 24       	jz %d2,8000ac9c <_malloc_r+0x3b6>
8000ac96:	8b 82 00 f1 	rsub %d15,%d2,8
8000ac9a:	42 f9       	add %d9,%d15
8000ac9c:	42 9b       	add %d11,%d9
8000ac9e:	b7 0b 14 b6 	insert %d11,%d11,0,12,20
8000aca2:	1b 0f 00 21 	addi %d2,%d15,4096
8000aca6:	5a b2       	sub %d15,%d2,%d11
8000aca8:	40 d4       	mov.aa %a4,%a13
8000acaa:	02 f4       	mov %d4,%d15
8000acac:	6d 00 6c 00 	call 8000ad84 <_sbrk_r>
8000acb0:	80 22       	mov.d %d2,%a2
8000acb2:	df f2 04 80 	jne %d2,-1,8000acba <_malloc_r+0x3d4>
8000acb6:	60 92       	mov.a %a2,%d9
8000acb8:	82 0f       	mov %d15,0
8000acba:	80 2b       	mov.d %d11,%a2
8000acbc:	19 e2 c8 00 	ld.w %d2,[%a14]3080 <70000c08 <__malloc_current_mallinfo>>
8000acc0:	a2 9b       	sub %d11,%d9
8000acc2:	42 f2       	add %d2,%d15
8000acc4:	60 92       	mov.a %a2,%d9
8000acc6:	42 bf       	add %d15,%d11
8000acc8:	68 29       	st.w [%a15]8,%d9
8000acca:	8f 1f 40 31 	or %d3,%d15,1
8000acce:	59 e2 c8 00 	st.w [%a14]3080 <70000c08 <__malloc_current_mallinfo>>,%d2
8000acd2:	59 23 04 00 	st.w [%a2]4 <70000c08 <__malloc_current_mallinfo>>,%d3
8000acd6:	df 0d 22 00 	jeq %d13,0,8000ad1a <_malloc_r+0x434>
8000acda:	8b 0a a1 f2 	ge.u %d15,%d10,16
8000acde:	ee 05       	jnz %d15,8000ace8 <_malloc_r+0x402>
8000ace0:	82 12       	mov %d2,1
8000ace2:	59 22 04 00 	st.w [%a2]4,%d2
8000ace6:	3c 2c       	j 8000ad3e <_malloc_r+0x458>
8000ace8:	1b 4a ff af 	addi %d10,%d10,-12
8000acec:	8f 7a c0 f1 	andn %d15,%d10,7
8000acf0:	10 c2       	addsc.a %a2,%a12,%d15,0
8000acf2:	82 52       	mov %d2,5
8000acf4:	59 22 04 00 	st.w [%a2]4,%d2
8000acf8:	59 22 08 00 	st.w [%a2]8,%d2
8000acfc:	19 c2 04 00 	ld.w %d2,[%a12]4
8000ad00:	8f 12 00 21 	and %d2,%d2,1
8000ad04:	a6 f2       	or %d2,%d15
8000ad06:	59 c2 04 00 	st.w [%a12]4,%d2
8000ad0a:	8b 0f 61 f2 	lt.u %d15,%d15,16
8000ad0e:	ee 06       	jnz %d15,8000ad1a <_malloc_r+0x434>
8000ad10:	40 d4       	mov.aa %a4,%a13
8000ad12:	d9 c5 08 00 	lea %a5,[%a12]8
8000ad16:	6d 00 dd 00 	call 8000aed0 <_free_r>
8000ad1a:	91 00 00 27 	movh.a %a2,28672
8000ad1e:	19 ef c8 00 	ld.w %d15,[%a14]3080 <70000c08 <__malloc_current_mallinfo>>
8000ad22:	19 22 f4 00 	ld.w %d2,[%a2]3124 <70000c34 <__malloc_max_sbrked_mem>>
8000ad26:	7f f2 04 80 	jge.u %d2,%d15,8000ad2e <_malloc_r+0x448>
8000ad2a:	59 2f f4 00 	st.w [%a2]3124 <70000c34 <__malloc_max_sbrked_mem>>,%d15
8000ad2e:	91 00 00 27 	movh.a %a2,28672
8000ad32:	19 22 f0 00 	ld.w %d2,[%a2]3120 <70000c30 <__malloc_max_total_mem>>
8000ad36:	7f f2 04 80 	jge.u %d2,%d15,8000ad3e <_malloc_r+0x458>
8000ad3a:	59 2f f0 00 	st.w [%a2]3120 <70000c30 <__malloc_max_total_mem>>,%d15
8000ad3e:	c8 22       	ld.a %a2,[%a15]8
8000ad40:	19 22 04 00 	ld.w %d2,[%a2]4 <70000c30 <__malloc_max_total_mem>>
8000ad44:	8f 32 c0 21 	andn %d2,%d2,3
8000ad48:	5a 82       	sub %d15,%d2,%d8
8000ad4a:	8b 0f 41 32 	lt %d3,%d15,16
8000ad4e:	0b 82 a0 32 	or.lt.u %d3,%d2,%d8
8000ad52:	76 36       	jz %d3,8000ad5e <_malloc_r+0x478>
8000ad54:	40 d4       	mov.aa %a4,%a13
8000ad56:	6d 00 16 00 	call 8000ad82 <__malloc_unlock>
8000ad5a:	a0 0c       	mov.a %a12,0
8000ad5c:	3c 10       	j 8000ad7c <_malloc_r+0x496>
8000ad5e:	c8 2c       	ld.a %a12,[%a15]8
8000ad60:	8f 18 40 21 	or %d2,%d8,1
8000ad64:	96 01       	or %d15,1
8000ad66:	01 c8 00 26 	addsc.a %a2,%a12,%d8,0
8000ad6a:	59 c2 04 00 	st.w [%a12]4,%d2
8000ad6e:	e8 22       	st.a [%a15]8,%a2
8000ad70:	6c 21       	st.w [%a2]4,%d15
8000ad72:	40 d4       	mov.aa %a4,%a13
8000ad74:	6d 00 07 00 	call 8000ad82 <__malloc_unlock>
8000ad78:	d9 cc 08 00 	lea %a12,[%a12]8
8000ad7c:	40 c2       	mov.aa %a2,%a12
8000ad7e:	00 90       	ret 

8000ad80 <__malloc_lock>:
8000ad80:	00 90       	ret 

8000ad82 <__malloc_unlock>:
8000ad82:	00 90       	ret 

8000ad84 <_sbrk_r>:
8000ad84:	82 0f       	mov %d15,0
8000ad86:	91 00 00 c7 	movh.a %a12,28672
8000ad8a:	59 cf c0 10 	st.w [%a12]3136 <70000c40 <errno>>,%d15
8000ad8e:	40 4f       	mov.aa %a15,%a4
8000ad90:	6d 00 2c 17 	call 8000dbe8 <sbrk>
8000ad94:	80 2f       	mov.d %d15,%a2
8000ad96:	5e f5       	jne %d15,-1,8000ada0 <_sbrk_r+0x1c>
8000ad98:	19 cf c0 10 	ld.w %d15,[%a12]3136 <70000c40 <errno>>
8000ad9c:	6e 02       	jz %d15,8000ada0 <_sbrk_r+0x1c>
8000ad9e:	68 0f       	st.w [%a15]0,%d15
8000ada0:	00 90       	ret 

8000ada2 <strlen>:
8000ada2:	80 42       	mov.d %d2,%a4
8000ada4:	80 4f       	mov.d %d15,%a4
8000ada6:	60 ff       	mov.a %a15,%d15
8000ada8:	79 f3 00 00 	ld.b %d3,[%a15]0
8000adac:	76 33       	jz %d3,8000adb2 <strlen+0x10>
8000adae:	c2 1f       	add %d15,1
8000adb0:	3c fb       	j 8000ada6 <strlen+0x4>
8000adb2:	52 22       	sub %d2,%d15,%d2
8000adb4:	00 90       	ret 

8000adb6 <_vsnprintf_r>:
8000adb6:	20 68       	sub.a %sp,104
8000adb8:	40 4f       	mov.aa %a15,%a4
8000adba:	ce 45       	jgez %d4,8000adc4 <_vsnprintf_r+0xe>
8000adbc:	da 8b       	mov %d15,139
8000adbe:	6c 40       	st.w [%a4]0,%d15
8000adc0:	82 f2       	mov %d2,-1
8000adc2:	00 90       	ret 
8000adc4:	02 4f       	mov %d15,%d4
8000adc6:	3b 80 20 20 	mov %d2,520
8000adca:	f9 a2 0c 00 	st.h [%sp]12,%d2
8000adce:	92 f2       	add %d2,%d15,-1
8000add0:	ea 02       	cmovn %d2,%d15,0
8000add2:	f4 a5       	st.a [%sp],%a5
8000add4:	b5 a5 10 00 	st.a [%sp]16,%a5
8000add8:	59 a2 08 00 	st.w [%sp]8,%d2
8000addc:	59 a2 14 00 	st.w [%sp]20,%d2
8000ade0:	40 a5       	mov.aa %a5,%sp
8000ade2:	82 f2       	mov %d2,-1
8000ade4:	f9 a2 0e 00 	st.h [%sp]14,%d2
8000ade8:	6d 00 4a 01 	call 8000b07c <_svfprintf_r>
8000adec:	ff f2 05 00 	jge %d2,-1,8000adf6 <_vsnprintf_r+0x40>
8000adf0:	3b b0 08 30 	mov %d3,139
8000adf4:	68 03       	st.w [%a15]0,%d3
8000adf6:	6e 04       	jz %d15,8000adfe <_vsnprintf_r+0x48>
8000adf8:	d8 00       	ld.a %a15,[%sp]0
8000adfa:	82 0f       	mov %d15,0
8000adfc:	28 0f       	st.b [%a15]0,%d15
8000adfe:	00 90       	ret 

8000ae00 <vsnprintf>:
8000ae00:	91 00 00 37 	movh.a %a3,28672
8000ae04:	40 42       	mov.aa %a2,%a4
8000ae06:	99 34 40 40 	ld.a %a4,[%a3]1280 <70000500 <_impure_ptr>>
8000ae0a:	40 5f       	mov.aa %a15,%a5
8000ae0c:	40 67       	mov.aa %a7,%a6
8000ae0e:	40 25       	mov.aa %a5,%a2
8000ae10:	40 f6       	mov.aa %a6,%a15
8000ae12:	1d ff d2 ff 	j 8000adb6 <_vsnprintf_r>

8000ae16 <_malloc_trim_r>:
8000ae16:	02 4f       	mov %d15,%d4
8000ae18:	40 4f       	mov.aa %a15,%a4
8000ae1a:	6d ff b3 ff 	call 8000ad80 <__malloc_lock>
8000ae1e:	91 00 00 c7 	movh.a %a12,28672
8000ae22:	d9 cc 38 30 	lea %a12,[%a12]248 <700000f8 <__malloc_av_>>
8000ae26:	99 c2 08 00 	ld.a %a2,[%a12]8 <70000008 <osEE_ccb_var>>
8000ae2a:	3b 00 00 21 	mov %d2,4096
8000ae2e:	19 28 04 00 	ld.w %d8,[%a2]4
8000ae32:	8f 38 c0 81 	andn %d8,%d8,3
8000ae36:	5a f8       	sub %d15,%d8,%d15
8000ae38:	1b ff fe f0 	addi %d15,%d15,4079
8000ae3c:	b7 0f 0c f0 	insert %d15,%d15,0,0,12
8000ae40:	1b 0f 00 ff 	addi %d15,%d15,-4096
8000ae44:	7f 2f 07 00 	jge %d15,%d2,8000ae52 <_malloc_trim_r+0x3c>
8000ae48:	40 f4       	mov.aa %a4,%a15
8000ae4a:	6d ff 9c ff 	call 8000ad82 <__malloc_unlock>
8000ae4e:	82 02       	mov %d2,0
8000ae50:	00 90       	ret 
8000ae52:	40 f4       	mov.aa %a4,%a15
8000ae54:	82 04       	mov %d4,0
8000ae56:	6d ff 97 ff 	call 8000ad84 <_sbrk_r>
8000ae5a:	99 c3 08 00 	ld.a %a3,[%a12]8
8000ae5e:	60 84       	mov.a %a4,%d8
8000ae60:	30 43       	add.a %a3,%a4
8000ae62:	7d 32 f3 ff 	jne.a %a2,%a3,8000ae48 <_malloc_trim_r+0x32>
8000ae66:	40 f4       	mov.aa %a4,%a15
8000ae68:	8b 0f 00 41 	rsub %d4,%d15,0
8000ae6c:	6d ff 8c ff 	call 8000ad84 <_sbrk_r>
8000ae70:	80 22       	mov.d %d2,%a2
8000ae72:	df f2 1c 80 	jne %d2,-1,8000aeaa <_malloc_trim_r+0x94>
8000ae76:	40 f4       	mov.aa %a4,%a15
8000ae78:	82 04       	mov %d4,0
8000ae7a:	6d ff 85 ff 	call 8000ad84 <_sbrk_r>
8000ae7e:	99 c3 08 00 	ld.a %a3,[%a12]8
8000ae82:	01 32 20 40 	sub.a %a4,%a2,%a3
8000ae86:	80 4f       	mov.d %d15,%a4
8000ae88:	8b 0f 41 22 	lt %d2,%d15,16
8000ae8c:	df 02 de ff 	jne %d2,0,8000ae48 <_malloc_trim_r+0x32>
8000ae90:	91 00 00 47 	movh.a %a4,28672
8000ae94:	99 44 30 30 	ld.a %a4,[%a4]240 <700000f0 <__malloc_sbrk_base>>
8000ae98:	96 01       	or %d15,1
8000ae9a:	6c 31       	st.w [%a3]4,%d15
8000ae9c:	01 42 20 20 	sub.a %a2,%a2,%a4
8000aea0:	91 00 00 47 	movh.a %a4,28672
8000aea4:	b5 42 c8 00 	st.a [%a4]3080 <70000c08 <__malloc_current_mallinfo>>,%a2
8000aea8:	3c d0       	j 8000ae48 <_malloc_trim_r+0x32>
8000aeaa:	99 c2 08 00 	ld.a %a2,[%a12]8
8000aeae:	a2 f8       	sub %d8,%d15
8000aeb0:	8f 18 40 81 	or %d8,%d8,1
8000aeb4:	59 28 04 00 	st.w [%a2]4,%d8
8000aeb8:	91 00 00 27 	movh.a %a2,28672
8000aebc:	19 22 c8 00 	ld.w %d2,[%a2]3080 <70000c08 <__malloc_current_mallinfo>>
8000aec0:	40 f4       	mov.aa %a4,%a15
8000aec2:	5a f2       	sub %d15,%d2,%d15
8000aec4:	59 2f c8 00 	st.w [%a2]3080 <70000c08 <__malloc_current_mallinfo>>,%d15
8000aec8:	6d ff 5d ff 	call 8000ad82 <__malloc_unlock>
8000aecc:	82 12       	mov %d2,1
8000aece:	00 90       	ret 

8000aed0 <_free_r>:
8000aed0:	40 4d       	mov.aa %a13,%a4
8000aed2:	bd 05 d4 00 	jz.a %a5,8000b07a <_free_r+0x1aa>
8000aed6:	40 5c       	mov.aa %a12,%a5
8000aed8:	6d ff 54 ff 	call 8000ad80 <__malloc_lock>
8000aedc:	19 c4 fc ff 	ld.w %d4,[%a12]-4
8000aee0:	d9 cf f8 ff 	lea %a15,[%a12]-8
8000aee4:	8f 14 c0 f1 	andn %d15,%d4,1
8000aee8:	91 00 00 27 	movh.a %a2,28672
8000aeec:	10 f3       	addsc.a %a3,%a15,%d15,0
8000aeee:	d9 22 38 30 	lea %a2,[%a2]248 <700000f8 <__malloc_av_>>
8000aef2:	99 24 08 00 	ld.a %a4,[%a2]8 <70000008 <osEE_ccb_var>>
8000aef6:	19 33 04 00 	ld.w %d3,[%a3]4 <70000008 <osEE_ccb_var>>
8000aefa:	8f 14 00 41 	and %d4,%d4,1
8000aefe:	8f 33 c0 31 	andn %d3,%d3,3
8000af02:	7d 43 24 80 	jne.a %a3,%a4,8000af4a <_free_r+0x7a>
8000af06:	42 3f       	add %d15,%d3
8000af08:	f6 4d       	jnz %d4,8000af22 <_free_r+0x52>
8000af0a:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000af0e:	60 23       	mov.a %a3,%d2
8000af10:	42 2f       	add %d15,%d2
8000af12:	01 3f 20 f0 	sub.a %a15,%a15,%a3
8000af16:	c8 33       	ld.a %a3,[%a15]12
8000af18:	c8 24       	ld.a %a4,[%a15]8
8000af1a:	b5 43 0c 00 	st.a [%a4]12,%a3
8000af1e:	b5 34 08 00 	st.a [%a3]8,%a4
8000af22:	8f 1f 40 21 	or %d2,%d15,1
8000af26:	68 12       	st.w [%a15]4,%d2
8000af28:	ec 22       	st.a [%a2]8,%a15
8000af2a:	91 00 00 f7 	movh.a %a15,28672
8000af2e:	19 f2 34 30 	ld.w %d2,[%a15]244 <700000f4 <__malloc_trim_threshold>>
8000af32:	3f 2f 09 80 	jlt.u %d15,%d2,8000af44 <_free_r+0x74>
8000af36:	91 00 00 f7 	movh.a %a15,28672
8000af3a:	40 d4       	mov.aa %a4,%a13
8000af3c:	19 f4 f8 00 	ld.w %d4,[%a15]3128 <70000c38 <__malloc_top_pad>>
8000af40:	6d ff 6b ff 	call 8000ae16 <_malloc_trim_r>
8000af44:	40 d4       	mov.aa %a4,%a13
8000af46:	1d ff 1e ff 	j 8000ad82 <__malloc_unlock>
8000af4a:	59 33 04 00 	st.w [%a3]4,%d3
8000af4e:	82 02       	mov %d2,0
8000af50:	df 04 16 80 	jne %d4,0,8000af7c <_free_r+0xac>
8000af54:	19 c2 f8 ff 	ld.w %d2,[%a12]-8
8000af58:	60 24       	mov.a %a4,%d2
8000af5a:	42 2f       	add %d15,%d2
8000af5c:	01 4f 20 f0 	sub.a %a15,%a15,%a4
8000af60:	c8 25       	ld.a %a5,[%a15]8
8000af62:	91 00 00 47 	movh.a %a4,28672
8000af66:	d9 44 00 40 	lea %a4,[%a4]256 <70000100 <__malloc_av_+0x8>>
8000af6a:	82 12       	mov %d2,1
8000af6c:	7d 45 08 00 	jeq.a %a5,%a4,8000af7c <_free_r+0xac>
8000af70:	c8 34       	ld.a %a4,[%a15]12
8000af72:	82 02       	mov %d2,0
8000af74:	b5 54 0c 00 	st.a [%a5]12,%a4
8000af78:	b5 45 08 00 	st.a [%a4]8,%a5
8000af7c:	01 33 00 46 	addsc.a %a4,%a3,%d3,0
8000af80:	19 44 04 00 	ld.w %d4,[%a4]4
8000af84:	6f 04 18 80 	jnz.t %d4,0,8000afb4 <_free_r+0xe4>
8000af88:	42 3f       	add %d15,%d3
8000af8a:	99 35 08 00 	ld.a %a5,[%a3]8
8000af8e:	f6 2d       	jnz %d2,8000afa8 <_free_r+0xd8>
8000af90:	91 00 00 47 	movh.a %a4,28672
8000af94:	d9 44 00 40 	lea %a4,[%a4]256 <70000100 <__malloc_av_+0x8>>
8000af98:	7d 45 08 80 	jne.a %a5,%a4,8000afa8 <_free_r+0xd8>
8000af9c:	ec 25       	st.a [%a2]20,%a15
8000af9e:	ec 24       	st.a [%a2]16,%a15
8000afa0:	e8 35       	st.a [%a15]12,%a5
8000afa2:	e8 25       	st.a [%a15]8,%a5
8000afa4:	82 12       	mov %d2,1
8000afa6:	3c 07       	j 8000afb4 <_free_r+0xe4>
8000afa8:	99 33 0c 00 	ld.a %a3,[%a3]12
8000afac:	b5 53 0c 00 	st.a [%a5]12,%a3
8000afb0:	b5 35 08 00 	st.a [%a3]8,%a5
8000afb4:	8f 1f 40 31 	or %d3,%d15,1
8000afb8:	10 f3       	addsc.a %a3,%a15,%d15,0
8000afba:	68 13       	st.w [%a15]4,%d3
8000afbc:	6c 30       	st.w [%a3]0,%d15
8000afbe:	df 02 c3 ff 	jne %d2,0,8000af44 <_free_r+0x74>
8000afc2:	3b 00 20 20 	mov %d2,512
8000afc6:	7f 2f 12 80 	jge.u %d15,%d2,8000afea <_free_r+0x11a>
8000afca:	19 23 04 00 	ld.w %d3,[%a2]4
8000afce:	06 df       	sh %d15,-3
8000afd0:	8f ef 3f 20 	sha %d2,%d15,-2
8000afd4:	d7 13 01 22 	insert %d2,%d3,1,%d2,1
8000afd8:	59 22 04 00 	st.w [%a2]4,%d2
8000afdc:	d0 22       	addsc.a %a2,%a2,%d15,3
8000afde:	99 23 08 00 	ld.a %a3,[%a2]8
8000afe2:	e8 32       	st.a [%a15]12,%a2
8000afe4:	e8 23       	st.a [%a15]8,%a3
8000afe6:	ec 22       	st.a [%a2]8,%a15
8000afe8:	3c 46       	j 8000b074 <_free_r+0x1a4>
8000afea:	8f af 1f 30 	sh %d3,%d15,-6
8000afee:	8f 7f 1f 20 	sh %d2,%d15,-9
8000aff2:	1b 83 03 30 	addi %d3,%d3,56
8000aff6:	bf 52 22 80 	jlt.u %d2,5,8000b03a <_free_r+0x16a>
8000affa:	8b 52 a1 32 	ge.u %d3,%d2,21
8000affe:	f6 34       	jnz %d3,8000b006 <_free_r+0x136>
8000b000:	1b b2 05 30 	addi %d3,%d2,91
8000b004:	3c 1b       	j 8000b03a <_free_r+0x16a>
8000b006:	8b 52 a5 32 	ge.u %d3,%d2,85
8000b00a:	f6 36       	jnz %d3,8000b016 <_free_r+0x146>
8000b00c:	8f 4f 1f 30 	sh %d3,%d15,-12
8000b010:	1b e3 06 30 	addi %d3,%d3,110
8000b014:	3c 13       	j 8000b03a <_free_r+0x16a>
8000b016:	8b 52 b5 32 	ge.u %d3,%d2,341
8000b01a:	f6 36       	jnz %d3,8000b026 <_free_r+0x156>
8000b01c:	8f 1f 1f 30 	sh %d3,%d15,-15
8000b020:	1b 73 07 30 	addi %d3,%d3,119
8000b024:	3c 0b       	j 8000b03a <_free_r+0x16a>
8000b026:	3b 50 55 40 	mov %d4,1365
8000b02a:	3b e0 07 30 	mov %d3,126
8000b02e:	7f 42 06 80 	jge.u %d2,%d4,8000b03a <_free_r+0x16a>
8000b032:	8f ef 1e 30 	sh %d3,%d15,-18
8000b036:	1b c3 07 30 	addi %d3,%d3,124
8000b03a:	01 23 03 66 	addsc.a %a6,%a2,%d3,3
8000b03e:	99 65 08 00 	ld.a %a5,[%a6]8
8000b042:	40 53       	mov.aa %a3,%a5
8000b044:	7d 65 0d 80 	jne.a %a5,%a6,8000b05e <_free_r+0x18e>
8000b048:	4c 21       	ld.w %d15,[%a2]4
8000b04a:	86 e3       	sha %d3,-2
8000b04c:	d7 1f 01 33 	insert %d3,%d15,1,%d3,1
8000b050:	59 23 04 00 	st.w [%a2]4,%d3
8000b054:	3c 0d       	j 8000b06e <_free_r+0x19e>
8000b056:	99 33 08 00 	ld.a %a3,[%a3]8
8000b05a:	7d 63 08 00 	jeq.a %a3,%a6,8000b06a <_free_r+0x19a>
8000b05e:	19 32 04 00 	ld.w %d2,[%a3]4
8000b062:	8f 32 c0 21 	andn %d2,%d2,3
8000b066:	3f 2f f8 ff 	jlt.u %d15,%d2,8000b056 <_free_r+0x186>
8000b06a:	99 35 0c 00 	ld.a %a5,[%a3]12
8000b06e:	e8 35       	st.a [%a15]12,%a5
8000b070:	e8 23       	st.a [%a15]8,%a3
8000b072:	ec 52       	st.a [%a5]8,%a15
8000b074:	ec 33       	st.a [%a3]12,%a15
8000b076:	1d ff 67 ff 	j 8000af44 <_free_r+0x74>
8000b07a:	00 90       	ret 

8000b07c <_svfprintf_r>:
8000b07c:	20 d0       	sub.a %sp,208
8000b07e:	80 5b       	mov.d %d11,%a5
8000b080:	80 4c       	mov.d %d12,%a4
8000b082:	b5 a6 18 00 	st.a [%sp]24,%a6
8000b086:	40 7f       	mov.aa %a15,%a7
8000b088:	6d 00 c4 0f 	call 8000d010 <_localeconv_r>
8000b08c:	d4 22       	ld.a %a2,[%a2]
8000b08e:	40 24       	mov.aa %a4,%a2
8000b090:	b5 a2 34 00 	st.a [%sp]52,%a2
8000b094:	6d ff 87 fe 	call 8000ada2 <strlen>
8000b098:	60 b2       	mov.a %a2,%d11
8000b09a:	59 a2 20 00 	st.w [%sp]32,%d2
8000b09e:	8c 26       	ld.h %d15,[%a2]12
8000b0a0:	6f 7f 16 00 	jz.t %d15,7,8000b0cc <_svfprintf_r+0x50>
8000b0a4:	4c 24       	ld.w %d15,[%a2]16
8000b0a6:	ee 13       	jnz %d15,8000b0cc <_svfprintf_r+0x50>
8000b0a8:	60 c4       	mov.a %a4,%d12
8000b0aa:	3b 00 04 40 	mov %d4,64
8000b0ae:	6d ff 1c fc 	call 8000a8e6 <_malloc_r>
8000b0b2:	60 b3       	mov.a %a3,%d11
8000b0b4:	f4 32       	st.a [%a3],%a2
8000b0b6:	b5 32 10 00 	st.a [%a3]16,%a2
8000b0ba:	7c 26       	jnz.a %a2,8000b0c6 <_svfprintf_r+0x4a>
8000b0bc:	60 cf       	mov.a %a15,%d12
8000b0be:	da 0c       	mov %d15,12
8000b0c0:	68 0f       	st.w [%a15]0,%d15
8000b0c2:	82 f2       	mov %d2,-1
8000b0c4:	00 90       	ret 
8000b0c6:	60 b2       	mov.a %a2,%d11
8000b0c8:	da 40       	mov %d15,64
8000b0ca:	6c 25       	st.w [%a2]20,%d15
8000b0cc:	82 0f       	mov %d15,0
8000b0ce:	d9 a2 10 20 	lea %a2,[%sp]144
8000b0d2:	a0 03       	mov.a %a3,0
8000b0d4:	b5 a2 1c 10 	st.a [%sp]92,%a2
8000b0d8:	78 19       	st.w [%sp]100,%d15
8000b0da:	78 18       	st.w [%sp]96,%d15
8000b0dc:	78 05       	st.w [%sp]20,%d15
8000b0de:	78 0b       	st.w [%sp]44,%d15
8000b0e0:	78 0c       	st.w [%sp]48,%d15
8000b0e2:	b5 a3 3c 00 	st.a [%sp]60,%a3
8000b0e6:	78 0e       	st.w [%sp]56,%d15
8000b0e8:	78 0a       	st.w [%sp]40,%d15
8000b0ea:	40 2e       	mov.aa %a14,%a2
8000b0ec:	99 ac 18 00 	ld.a %a12,[%sp]24
8000b0f0:	79 cf 00 00 	ld.b %d15,[%a12]0
8000b0f4:	8b 0f 20 32 	ne %d3,%d15,0
8000b0f8:	8b 5f 22 34 	and.ne %d3,%d15,37
8000b0fc:	76 33       	jz %d3,8000b102 <_svfprintf_r+0x86>
8000b0fe:	b0 1c       	add.a %a12,1
8000b100:	3c f8       	j 8000b0f0 <_svfprintf_r+0x74>
8000b102:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b106:	01 3c 20 30 	sub.a %a3,%a12,%a3
8000b10a:	80 3f       	mov.d %d15,%a3
8000b10c:	6e 23       	jz %d15,8000b152 <_svfprintf_r+0xd6>
8000b10e:	19 a3 24 10 	ld.w %d3,[%sp]100
8000b112:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b116:	42 f3       	add %d3,%d15
8000b118:	59 a3 24 10 	st.w [%sp]100,%d3
8000b11c:	19 a3 20 10 	ld.w %d3,[%sp]96
8000b120:	f4 e3       	st.a [%a14],%a3
8000b122:	c2 13       	add %d3,1
8000b124:	6c e1       	st.w [%a14]4,%d15
8000b126:	59 a3 20 10 	st.w [%sp]96,%d3
8000b12a:	8b 83 80 32 	ge %d3,%d3,8
8000b12e:	d9 ee 08 00 	lea %a14,[%a14]8
8000b132:	76 3b       	jz %d3,8000b148 <_svfprintf_r+0xcc>
8000b134:	60 c4       	mov.a %a4,%d12
8000b136:	60 b5       	mov.a %a5,%d11
8000b138:	d9 a6 1c 10 	lea %a6,[%sp]92
8000b13c:	6d 00 7d 12 	call 8000d636 <__ssprint_r>
8000b140:	df 02 69 88 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000b144:	d9 ae 10 20 	lea %a14,[%sp]144
8000b148:	19 a2 28 00 	ld.w %d2,[%sp]40
8000b14c:	42 f2       	add %d2,%d15
8000b14e:	59 a2 28 00 	st.w [%sp]40,%d2
8000b152:	79 cf 00 00 	ld.b %d15,[%a12]0
8000b156:	df 0f 56 08 	jeq %d15,0,8000c202 <_svfprintf_r+0x1186>
8000b15a:	82 0f       	mov %d15,0
8000b15c:	82 02       	mov %d2,0
8000b15e:	e9 af 01 10 	st.b [%sp]65,%d15
8000b162:	d9 c2 01 00 	lea %a2,[%a12]1
8000b166:	82 0f       	mov %d15,0
8000b168:	82 fe       	mov %d14,-1
8000b16a:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b16e:	82 0a       	mov %d10,0
8000b170:	79 22 00 00 	ld.b %d2,[%a2]0
8000b174:	d9 23 01 00 	lea %a3,[%a2]1
8000b178:	b5 a3 18 00 	st.a [%sp]24,%a3
8000b17c:	59 a2 10 00 	st.w [%sp]16,%d2
8000b180:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b184:	1b 02 fe 3f 	addi %d3,%d2,-32
8000b188:	8b 93 a5 42 	ge.u %d4,%d3,89
8000b18c:	df 04 19 84 	jne %d4,0,8000b9be <_svfprintf_r+0x942>
8000b190:	91 10 00 28 	movh.a %a2,32769
8000b194:	d9 22 20 6b 	lea %a2,[%a2]-20064 <8000b1a0 <_svfprintf_r+0x124>>
8000b198:	01 23 02 76 	addsc.a %a7,%a2,%d3,2
8000b19c:	dc 07       	ji %a7
8000b19e:	00 00       	nop 
8000b1a0:	1d 00 c3 00 	j 8000b326 <_svfprintf_r+0x2aa>
8000b1a4:	1d 00 0d 04 	j 8000b9be <_svfprintf_r+0x942>
8000b1a8:	1d 00 0b 04 	j 8000b9be <_svfprintf_r+0x942>
8000b1ac:	1d 00 c0 00 	j 8000b32c <_svfprintf_r+0x2b0>
8000b1b0:	1d 00 07 04 	j 8000b9be <_svfprintf_r+0x942>
8000b1b4:	1d 00 05 04 	j 8000b9be <_svfprintf_r+0x942>
8000b1b8:	1d 00 03 04 	j 8000b9be <_svfprintf_r+0x942>
8000b1bc:	1d 00 01 04 	j 8000b9be <_svfprintf_r+0x942>
8000b1c0:	1d 00 ff 03 	j 8000b9be <_svfprintf_r+0x942>
8000b1c4:	1d 00 fd 03 	j 8000b9be <_svfprintf_r+0x942>
8000b1c8:	1d 00 b5 00 	j 8000b332 <_svfprintf_r+0x2b6>
8000b1cc:	1d 00 9c 00 	j 8000b304 <_svfprintf_r+0x288>
8000b1d0:	1d 00 f7 03 	j 8000b9be <_svfprintf_r+0x942>
8000b1d4:	1d 00 b8 00 	j 8000b344 <_svfprintf_r+0x2c8>
8000b1d8:	1d 00 b9 00 	j 8000b34a <_svfprintf_r+0x2ce>
8000b1dc:	1d 00 f1 03 	j 8000b9be <_svfprintf_r+0x942>
8000b1e0:	1d 00 de 00 	j 8000b39c <_svfprintf_r+0x320>
8000b1e4:	1d 00 df 00 	j 8000b3a2 <_svfprintf_r+0x326>
8000b1e8:	1d 00 dd 00 	j 8000b3a2 <_svfprintf_r+0x326>
8000b1ec:	1d 00 db 00 	j 8000b3a2 <_svfprintf_r+0x326>
8000b1f0:	1d 00 d9 00 	j 8000b3a2 <_svfprintf_r+0x326>
8000b1f4:	1d 00 d7 00 	j 8000b3a2 <_svfprintf_r+0x326>
8000b1f8:	1d 00 d5 00 	j 8000b3a2 <_svfprintf_r+0x326>
8000b1fc:	1d 00 d3 00 	j 8000b3a2 <_svfprintf_r+0x326>
8000b200:	1d 00 d1 00 	j 8000b3a2 <_svfprintf_r+0x326>
8000b204:	1d 00 cf 00 	j 8000b3a2 <_svfprintf_r+0x326>
8000b208:	1d 00 db 03 	j 8000b9be <_svfprintf_r+0x942>
8000b20c:	1d 00 d9 03 	j 8000b9be <_svfprintf_r+0x942>
8000b210:	1d 00 d7 03 	j 8000b9be <_svfprintf_r+0x942>
8000b214:	1d 00 d5 03 	j 8000b9be <_svfprintf_r+0x942>
8000b218:	1d 00 d3 03 	j 8000b9be <_svfprintf_r+0x942>
8000b21c:	1d 00 d1 03 	j 8000b9be <_svfprintf_r+0x942>
8000b220:	1d 00 cf 03 	j 8000b9be <_svfprintf_r+0x942>
8000b224:	1d 00 cd 03 	j 8000b9be <_svfprintf_r+0x942>
8000b228:	1d 00 cb 03 	j 8000b9be <_svfprintf_r+0x942>
8000b22c:	1d 00 c9 03 	j 8000b9be <_svfprintf_r+0x942>
8000b230:	1d 00 f9 00 	j 8000b422 <_svfprintf_r+0x3a6>
8000b234:	1d 00 21 01 	j 8000b476 <_svfprintf_r+0x3fa>
8000b238:	1d 00 c3 03 	j 8000b9be <_svfprintf_r+0x942>
8000b23c:	1d 00 1d 01 	j 8000b476 <_svfprintf_r+0x3fa>
8000b240:	1d 00 bf 03 	j 8000b9be <_svfprintf_r+0x942>
8000b244:	1d 00 bd 03 	j 8000b9be <_svfprintf_r+0x942>
8000b248:	1d 00 bb 03 	j 8000b9be <_svfprintf_r+0x942>
8000b24c:	1d 00 b9 03 	j 8000b9be <_svfprintf_r+0x942>
8000b250:	1d 00 c6 00 	j 8000b3dc <_svfprintf_r+0x360>
8000b254:	1d 00 b5 03 	j 8000b9be <_svfprintf_r+0x942>
8000b258:	1d 00 b3 03 	j 8000b9be <_svfprintf_r+0x942>
8000b25c:	1d 00 92 02 	j 8000b780 <_svfprintf_r+0x704>
8000b260:	1d 00 af 03 	j 8000b9be <_svfprintf_r+0x942>
8000b264:	1d 00 ad 03 	j 8000b9be <_svfprintf_r+0x942>
8000b268:	1d 00 ab 03 	j 8000b9be <_svfprintf_r+0x942>
8000b26c:	1d 00 a9 03 	j 8000b9be <_svfprintf_r+0x942>
8000b270:	1d 00 a7 03 	j 8000b9be <_svfprintf_r+0x942>
8000b274:	1d 00 d0 02 	j 8000b814 <_svfprintf_r+0x798>
8000b278:	1d 00 a3 03 	j 8000b9be <_svfprintf_r+0x942>
8000b27c:	1d 00 a1 03 	j 8000b9be <_svfprintf_r+0x942>
8000b280:	1d 00 4b 00 	j 8000b316 <_svfprintf_r+0x29a>
8000b284:	1d 00 9d 03 	j 8000b9be <_svfprintf_r+0x942>
8000b288:	1d 00 9b 03 	j 8000b9be <_svfprintf_r+0x942>
8000b28c:	1d 00 99 03 	j 8000b9be <_svfprintf_r+0x942>
8000b290:	1d 00 97 03 	j 8000b9be <_svfprintf_r+0x942>
8000b294:	1d 00 95 03 	j 8000b9be <_svfprintf_r+0x942>
8000b298:	1d 00 93 03 	j 8000b9be <_svfprintf_r+0x942>
8000b29c:	1d 00 91 03 	j 8000b9be <_svfprintf_r+0x942>
8000b2a0:	1d 00 8f 03 	j 8000b9be <_svfprintf_r+0x942>
8000b2a4:	1d 00 8d 03 	j 8000b9be <_svfprintf_r+0x942>
8000b2a8:	1d 00 8b 03 	j 8000b9be <_svfprintf_r+0x942>
8000b2ac:	1d 00 b0 00 	j 8000b40c <_svfprintf_r+0x390>
8000b2b0:	1d 00 2f 00 	j 8000b30e <_svfprintf_r+0x292>
8000b2b4:	1d 00 e1 00 	j 8000b476 <_svfprintf_r+0x3fa>
8000b2b8:	1d 00 df 00 	j 8000b476 <_svfprintf_r+0x3fa>
8000b2bc:	1d 00 dd 00 	j 8000b476 <_svfprintf_r+0x3fa>
8000b2c0:	1d 00 91 00 	j 8000b3e2 <_svfprintf_r+0x366>
8000b2c4:	1d 00 25 00 	j 8000b30e <_svfprintf_r+0x292>
8000b2c8:	1d 00 7b 03 	j 8000b9be <_svfprintf_r+0x942>
8000b2cc:	1d 00 79 03 	j 8000b9be <_svfprintf_r+0x942>
8000b2d0:	1d 00 8c 00 	j 8000b3e8 <_svfprintf_r+0x36c>
8000b2d4:	1d 00 75 03 	j 8000b9be <_svfprintf_r+0x942>
8000b2d8:	1d 00 39 02 	j 8000b74a <_svfprintf_r+0x6ce>
8000b2dc:	1d 00 54 02 	j 8000b784 <_svfprintf_r+0x708>
8000b2e0:	1d 00 66 02 	j 8000b7ac <_svfprintf_r+0x730>
8000b2e4:	1d 00 90 00 	j 8000b404 <_svfprintf_r+0x388>
8000b2e8:	1d 00 6b 03 	j 8000b9be <_svfprintf_r+0x942>
8000b2ec:	1d 00 77 02 	j 8000b7da <_svfprintf_r+0x75e>
8000b2f0:	1d 00 67 03 	j 8000b9be <_svfprintf_r+0x942>
8000b2f4:	1d 00 92 02 	j 8000b818 <_svfprintf_r+0x79c>
8000b2f8:	1d 00 63 03 	j 8000b9be <_svfprintf_r+0x942>
8000b2fc:	1d 00 61 03 	j 8000b9be <_svfprintf_r+0x942>
8000b300:	1d 00 a0 02 	j 8000b840 <_svfprintf_r+0x7c4>
8000b304:	da 2b       	mov %d15,43
8000b306:	99 a2 18 00 	ld.a %a2,[%sp]24
8000b30a:	1d ff 33 ff 	j 8000b170 <_svfprintf_r+0xf4>
8000b30e:	e9 af 01 10 	st.b [%sp]65,%d15
8000b312:	1d 00 8c 00 	j 8000b42a <_svfprintf_r+0x3ae>
8000b316:	e9 af 01 10 	st.b [%sp]65,%d15
8000b31a:	7b 00 00 f8 	movh %d15,32768
8000b31e:	1b 0f e4 f0 	addi %d15,%d15,3648
8000b322:	1d 00 95 02 	j 8000b84c <_svfprintf_r+0x7d0>
8000b326:	ab 0f 82 ff 	sel %d15,%d15,%d15,32
8000b32a:	3c ee       	j 8000b306 <_svfprintf_r+0x28a>
8000b32c:	8f 1a 40 a1 	or %d10,%d10,1
8000b330:	3c eb       	j 8000b306 <_svfprintf_r+0x28a>
8000b332:	48 02       	ld.w %d2,[%a15]0
8000b334:	b0 4f       	add.a %a15,4
8000b336:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b33a:	ff 02 e6 7f 	jge %d2,0,8000b306 <_svfprintf_r+0x28a>
8000b33e:	32 52       	rsub %d2
8000b340:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b344:	8f 4a 40 a1 	or %d10,%d10,4
8000b348:	3c df       	j 8000b306 <_svfprintf_r+0x28a>
8000b34a:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b34e:	99 a2 18 00 	ld.a %a2,[%sp]24
8000b352:	79 32 00 00 	ld.b %d2,[%a3]0
8000b356:	b0 12       	add.a %a2,1
8000b358:	59 a2 10 00 	st.w [%sp]16,%d2
8000b35c:	8b a2 02 32 	eq %d3,%d2,42
8000b360:	f6 33       	jnz %d3,8000b366 <_svfprintf_r+0x2ea>
8000b362:	82 05       	mov %d5,0
8000b364:	3c 08       	j 8000b374 <_svfprintf_r+0x2f8>
8000b366:	48 0e       	ld.w %d14,[%a15]0
8000b368:	b5 a2 18 00 	st.a [%sp]24,%a2
8000b36c:	b0 4f       	add.a %a15,4
8000b36e:	8b fe 5f e3 	max %d14,%d14,-1
8000b372:	3c ca       	j 8000b306 <_svfprintf_r+0x28a>
8000b374:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b378:	1b 02 fd 3f 	addi %d3,%d2,-48
8000b37c:	ff a3 0a 80 	jge.u %d3,10,8000b390 <_svfprintf_r+0x314>
8000b380:	79 22 00 00 	ld.b %d2,[%a2]0
8000b384:	13 a5 20 53 	madd %d5,%d3,%d5,10
8000b388:	59 a2 10 00 	st.w [%sp]16,%d2
8000b38c:	b0 12       	add.a %a2,1
8000b38e:	3c f3       	j 8000b374 <_svfprintf_r+0x2f8>
8000b390:	8b f5 5f e3 	max %d14,%d5,-1
8000b394:	b5 a2 18 00 	st.a [%sp]24,%a2
8000b398:	1d ff f4 fe 	j 8000b180 <_svfprintf_r+0x104>
8000b39c:	8f 0a 48 a1 	or %d10,%d10,128
8000b3a0:	3c b3       	j 8000b306 <_svfprintf_r+0x28a>
8000b3a2:	82 02       	mov %d2,0
8000b3a4:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b3a8:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b3ac:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b3b0:	1b 02 fd 4f 	addi %d4,%d2,-48
8000b3b4:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000b3b8:	99 a2 18 00 	ld.a %a2,[%sp]24
8000b3bc:	13 a2 20 24 	madd %d2,%d4,%d2,10
8000b3c0:	b0 12       	add.a %a2,1
8000b3c2:	59 a2 1c 00 	st.w [%sp]28,%d2
8000b3c6:	79 32 00 00 	ld.b %d2,[%a3]0
8000b3ca:	b5 a2 18 00 	st.a [%sp]24,%a2
8000b3ce:	59 a2 10 00 	st.w [%sp]16,%d2
8000b3d2:	1b 02 fd 4f 	addi %d4,%d2,-48
8000b3d6:	bf a4 e9 ff 	jlt.u %d4,10,8000b3a8 <_svfprintf_r+0x32c>
8000b3da:	3c dd       	j 8000b394 <_svfprintf_r+0x318>
8000b3dc:	8f 8a 40 a1 	or %d10,%d10,8
8000b3e0:	3c 93       	j 8000b306 <_svfprintf_r+0x28a>
8000b3e2:	8f 0a 44 a1 	or %d10,%d10,64
8000b3e6:	3c 90       	j 8000b306 <_svfprintf_r+0x28a>
8000b3e8:	99 a3 18 00 	ld.a %a3,[%sp]24
8000b3ec:	79 33 00 00 	ld.b %d3,[%a3]0
8000b3f0:	8b c3 26 32 	ne %d3,%d3,108
8000b3f4:	f6 35       	jnz %d3,8000b3fe <_svfprintf_r+0x382>
8000b3f6:	b0 13       	add.a %a3,1
8000b3f8:	b5 a3 18 00 	st.a [%sp]24,%a3
8000b3fc:	3c 04       	j 8000b404 <_svfprintf_r+0x388>
8000b3fe:	8f 0a 41 a1 	or %d10,%d10,16
8000b402:	3c 82       	j 8000b306 <_svfprintf_r+0x28a>
8000b404:	8f 0a 42 a1 	or %d10,%d10,32
8000b408:	1d ff 7f ff 	j 8000b306 <_svfprintf_r+0x28a>
8000b40c:	48 03       	ld.w %d3,[%a15]0
8000b40e:	d9 fc 04 00 	lea %a12,[%a15]4
8000b412:	e9 a3 28 10 	st.b [%sp]104,%d3
8000b416:	82 03       	mov %d3,0
8000b418:	e9 a3 01 10 	st.b [%sp]65,%d3
8000b41c:	60 ad       	mov.a %a13,%d10
8000b41e:	1d 00 dc 02 	j 8000b9d6 <_svfprintf_r+0x95a>
8000b422:	e9 af 01 10 	st.b [%sp]65,%d15
8000b426:	8f 0a 41 a1 	or %d10,%d10,16
8000b42a:	60 ad       	mov.a %a13,%d10
8000b42c:	6f 5a 07 00 	jz.t %d10,5,8000b43a <_svfprintf_r+0x3be>
8000b430:	d9 fc 08 00 	lea %a12,[%a15]8
8000b434:	09 f8 40 09 	ld.d %e8,[%a15]
8000b438:	3c 12       	j 8000b45c <_svfprintf_r+0x3e0>
8000b43a:	d9 f2 04 00 	lea %a2,[%a15]4
8000b43e:	6f 4a 05 00 	jz.t %d10,4,8000b448 <_svfprintf_r+0x3cc>
8000b442:	40 2c       	mov.aa %a12,%a2
8000b444:	48 08       	ld.w %d8,[%a15]0
8000b446:	3c 09       	j 8000b458 <_svfprintf_r+0x3dc>
8000b448:	48 03       	ld.w %d3,[%a15]0
8000b44a:	40 2c       	mov.aa %a12,%a2
8000b44c:	0b 30 00 88 	mov %e8,%d3
8000b450:	6f 6a 06 00 	jz.t %d10,6,8000b45c <_svfprintf_r+0x3e0>
8000b454:	37 03 50 80 	extr %d8,%d3,0,16
8000b458:	0b 80 00 88 	mov %e8,%d8
8000b45c:	82 13       	mov %d3,1
8000b45e:	ff 09 1d 02 	jge %d9,0,8000b898 <_svfprintf_r+0x81c>
8000b462:	32 59       	rsub %d9
8000b464:	32 58       	rsub %d8
8000b466:	3b d0 02 70 	mov %d7,45
8000b46a:	ab f9 1f 98 	cadd %d9,%d8,%d9,-1
8000b46e:	e9 a7 01 10 	st.b [%sp]65,%d7
8000b472:	1d 00 13 02 	j 8000b898 <_svfprintf_r+0x81c>
8000b476:	e9 af 01 10 	st.b [%sp]65,%d15
8000b47a:	4c f0       	ld.w %d15,[%a15]0
8000b47c:	d9 fc 08 00 	lea %a12,[%a15]8
8000b480:	78 0b       	st.w [%sp]44,%d15
8000b482:	4c f1       	ld.w %d15,[%a15]4
8000b484:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000b488:	78 0c       	st.w [%sp]48,%d15
8000b48a:	19 a5 30 00 	ld.w %d5,[%sp]48
8000b48e:	6d 00 b3 10 	call 8000d5f4 <__fpclassifyd>
8000b492:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000b496:	19 a5 30 00 	ld.w %d5,[%sp]48
8000b49a:	df 12 18 80 	jne %d2,1,8000b4ca <_svfprintf_r+0x44e>
8000b49e:	d2 06       	mov %e6,0
8000b4a0:	6d 00 50 14 	call 8000dd40 <__ltdf2>
8000b4a4:	ce 25       	jgez %d2,8000b4ae <_svfprintf_r+0x432>
8000b4a6:	3b d0 02 30 	mov %d3,45
8000b4aa:	e9 a3 01 10 	st.b [%sp]65,%d3
8000b4ae:	58 04       	ld.w %d15,[%sp]16
8000b4b0:	7b 00 00 78 	movh %d7,32768
8000b4b4:	8b 8f 84 32 	ge %d3,%d15,72
8000b4b8:	1b 47 e3 d0 	addi %d13,%d7,3636
8000b4bc:	df 03 17 80 	jne %d3,0,8000b4ea <_svfprintf_r+0x46e>
8000b4c0:	7b 00 00 78 	movh %d7,32768
8000b4c4:	1b 07 e3 d0 	addi %d13,%d7,3632
8000b4c8:	3c 11       	j 8000b4ea <_svfprintf_r+0x46e>
8000b4ca:	6d 00 95 10 	call 8000d5f4 <__fpclassifyd>
8000b4ce:	58 04       	ld.w %d15,[%sp]16
8000b4d0:	df 02 13 80 	jne %d2,0,8000b4f6 <_svfprintf_r+0x47a>
8000b4d4:	7b 00 00 78 	movh %d7,32768
8000b4d8:	8b 8f 84 32 	ge %d3,%d15,72
8000b4dc:	1b c7 e3 d0 	addi %d13,%d7,3644
8000b4e0:	f6 35       	jnz %d3,8000b4ea <_svfprintf_r+0x46e>
8000b4e2:	7b 00 00 78 	movh %d7,32768
8000b4e6:	1b 87 e3 d0 	addi %d13,%d7,3640
8000b4ea:	8f 0a c8 a1 	andn %d10,%d10,128
8000b4ee:	60 ad       	mov.a %a13,%d10
8000b4f0:	82 39       	mov %d9,3
8000b4f2:	1d 00 78 02 	j 8000b9e2 <_svfprintf_r+0x966>
8000b4f6:	8f 0f c2 f1 	andn %d15,%d15,32
8000b4fa:	78 01       	st.w [%sp]4,%d15
8000b4fc:	df fe 09 00 	jeq %d14,-1,8000b50e <_svfprintf_r+0x492>
8000b500:	8b 0e 00 72 	eq %d7,%d14,0
8000b504:	8b 7f 04 74 	and.eq %d7,%d15,71
8000b508:	ab 1e a0 e7 	seln %d14,%d7,%d14,1
8000b50c:	3c 02       	j 8000b510 <_svfprintf_r+0x494>
8000b50e:	82 6e       	mov %d14,6
8000b510:	19 a3 30 00 	ld.w %d3,[%sp]48
8000b514:	8f 0a 50 21 	or %d2,%d10,256
8000b518:	60 2d       	mov.a %a13,%d2
8000b51a:	d8 0b       	ld.a %a15,[%sp]44
8000b51c:	82 0f       	mov %d15,0
8000b51e:	ce 34       	jgez %d3,8000b526 <_svfprintf_r+0x4aa>
8000b520:	9b 03 00 38 	addih %d3,%d3,32768
8000b524:	da 2d       	mov %d15,45
8000b526:	78 09       	st.w [%sp]36,%d15
8000b528:	58 01       	ld.w %d15,[%sp]4
8000b52a:	02 e9       	mov %d9,%d14
8000b52c:	8b 6f 04 22 	eq %d2,%d15,70
8000b530:	82 36       	mov %d6,3
8000b532:	f6 28       	jnz %d2,8000b542 <_svfprintf_r+0x4c6>
8000b534:	8b 5f 24 12 	ne %d1,%d15,69
8000b538:	1b 1e 00 50 	addi %d5,%d14,1
8000b53c:	82 26       	mov %d6,2
8000b53e:	2b e5 50 91 	seln %d9,%d1,%d5,%d14
8000b542:	60 c4       	mov.a %a4,%d12
8000b544:	80 f4       	mov.d %d4,%a15
8000b546:	02 35       	mov %d5,%d3
8000b548:	02 97       	mov %d7,%d9
8000b54a:	d9 a5 04 10 	lea %a5,[%sp]68
8000b54e:	d9 a6 08 10 	lea %a6,[%sp]72
8000b552:	d9 a7 14 10 	lea %a7,[%sp]84
8000b556:	59 a2 0c 00 	st.w [%sp]12,%d2
8000b55a:	59 a3 08 00 	st.w [%sp]8,%d3
8000b55e:	6d 00 ef 06 	call 8000c33c <_dtoa_r>
8000b562:	58 01       	ld.w %d15,[%sp]4
8000b564:	80 2d       	mov.d %d13,%a2
8000b566:	8b 7f 24 12 	ne %d1,%d15,71
8000b56a:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000b56e:	19 a3 08 00 	ld.w %d3,[%sp]8
8000b572:	df 01 11 80 	jne %d1,0,8000b594 <_svfprintf_r+0x518>
8000b576:	6f 0a 0f 80 	jnz.t %d10,0,8000b594 <_svfprintf_r+0x518>
8000b57a:	19 a2 14 10 	ld.w %d2,[%sp]84
8000b57e:	58 01       	ld.w %d15,[%sp]4
8000b580:	a2 d2       	sub %d2,%d13
8000b582:	59 a2 14 00 	st.w [%sp]20,%d2
8000b586:	8b 7f 04 42 	eq %d4,%d15,71
8000b58a:	19 a5 04 10 	ld.w %d5,[%sp]68
8000b58e:	df 04 36 80 	jne %d4,0,8000b5fa <_svfprintf_r+0x57e>
8000b592:	3c 3e       	j 8000b60e <_svfprintf_r+0x592>
8000b594:	0b 9d 00 80 	add %d8,%d13,%d9
8000b598:	df 02 1c 00 	jeq %d2,0,8000b5d0 <_svfprintf_r+0x554>
8000b59c:	60 d2       	mov.a %a2,%d13
8000b59e:	80 f4       	mov.d %d4,%a15
8000b5a0:	79 20 00 00 	ld.b %d0,[%a2]0
8000b5a4:	d2 06       	mov %e6,0
8000b5a6:	02 35       	mov %d5,%d3
8000b5a8:	8b 00 03 f2 	eq %d15,%d0,48
8000b5ac:	59 a3 08 00 	st.w [%sp]8,%d3
8000b5b0:	6d 00 68 13 	call 8000dc80 <__nedf2>
8000b5b4:	8b 02 20 22 	ne %d2,%d2,0
8000b5b8:	0f 2f 80 00 	and %d0,%d15,%d2
8000b5bc:	19 a3 08 00 	ld.w %d3,[%sp]8
8000b5c0:	76 05       	jz %d0,8000b5ca <_svfprintf_r+0x54e>
8000b5c2:	8b 19 00 01 	rsub %d0,%d9,1
8000b5c6:	59 a0 04 10 	st.w [%sp]68,%d0
8000b5ca:	19 a2 04 10 	ld.w %d2,[%sp]68
8000b5ce:	42 28       	add %d8,%d2
8000b5d0:	80 f4       	mov.d %d4,%a15
8000b5d2:	d2 06       	mov %e6,0
8000b5d4:	02 35       	mov %d5,%d3
8000b5d6:	6d 00 35 13 	call 8000dc40 <__eqdf2>
8000b5da:	f6 23       	jnz %d2,8000b5e0 <_svfprintf_r+0x564>
8000b5dc:	59 a8 14 10 	st.w [%sp]84,%d8
8000b5e0:	3b 00 03 00 	mov %d0,48
8000b5e4:	19 a3 14 10 	ld.w %d3,[%sp]84
8000b5e8:	7f 83 c9 ff 	jge.u %d3,%d8,8000b57a <_svfprintf_r+0x4fe>
8000b5ec:	1b 13 00 10 	addi %d1,%d3,1
8000b5f0:	60 32       	mov.a %a2,%d3
8000b5f2:	59 a1 14 10 	st.w [%sp]84,%d1
8000b5f6:	34 20       	st.b [%a2],%d0
8000b5f8:	3c f6       	j 8000b5e4 <_svfprintf_r+0x568>
8000b5fa:	0b 5e 20 31 	lt %d3,%d14,%d5
8000b5fe:	8b d5 3f 35 	or.lt %d3,%d5,-3
8000b602:	df 03 88 00 	jeq %d3,0,8000b712 <_svfprintf_r+0x696>
8000b606:	58 04       	ld.w %d15,[%sp]16
8000b608:	c2 ef       	add %d15,-2
8000b60a:	78 04       	st.w [%sp]16,%d15
8000b60c:	3c 06       	j 8000b618 <_svfprintf_r+0x59c>
8000b60e:	58 04       	ld.w %d15,[%sp]16
8000b610:	8b 6f 86 32 	ge %d3,%d15,102
8000b614:	df 03 69 80 	jne %d3,0,8000b6e6 <_svfprintf_r+0x66a>
8000b618:	19 a2 10 00 	ld.w %d2,[%sp]16
8000b61c:	9a f5       	add %d15,%d5,-1
8000b61e:	78 11       	st.w [%sp]68,%d15
8000b620:	e9 a2 0d 10 	st.b [%sp]77,%d2
8000b624:	3b b0 02 30 	mov %d3,43
8000b628:	ce f4       	jgez %d15,8000b630 <_svfprintf_r+0x5b4>
8000b62a:	32 5f       	rsub %d15
8000b62c:	3b d0 02 30 	mov %d3,45
8000b630:	e9 a3 0e 10 	st.b [%sp]78,%d3
8000b634:	8b af 40 32 	lt %d3,%d15,10
8000b638:	df 03 3e 80 	jne %d3,0,8000b6b4 <_svfprintf_r+0x638>
8000b63c:	82 06       	mov %d6,0
8000b63e:	3b a0 00 00 	mov %d0,10
8000b642:	4b 0f 01 42 	div %e4,%d15,%d0
8000b646:	8b 66 00 71 	rsub %d7,%d6,6
8000b64a:	60 72       	mov.a %a2,%d7
8000b64c:	d9 af 14 10 	lea %a15,[%sp]84
8000b650:	1b 05 03 30 	addi %d3,%d5,48
8000b654:	30 2f       	add.a %a15,%a2
8000b656:	28 03       	st.b [%a15]0,%d3
8000b658:	8b a4 80 32 	ge %d3,%d4,10
8000b65c:	02 4f       	mov %d15,%d4
8000b65e:	c2 16       	add %d6,1
8000b660:	df 03 f1 ff 	jne %d3,0,8000b642 <_svfprintf_r+0x5c6>
8000b664:	60 74       	mov.a %a4,%d7
8000b666:	d9 a2 10 30 	lea %a2,[%sp]208
8000b66a:	1b 04 03 f0 	addi %d15,%d4,48
8000b66e:	30 42       	add.a %a2,%a4
8000b670:	d9 f7 ff ff 	lea %a7,[%a15]-1
8000b674:	e9 ff ff ff 	st.b [%a15]-1,%d15
8000b678:	80 22       	mov.d %d2,%a2
8000b67a:	d9 af 1b 10 	lea %a15,[%sp]91
8000b67e:	80 ff       	mov.d %d15,%a15
8000b680:	1b 32 f8 4f 	addi %d4,%d2,-125
8000b684:	82 03       	mov %d3,0
8000b686:	01 7f 20 30 	sub.a %a3,%a15,%a7
8000b68a:	3f 4f 08 80 	jlt.u %d15,%d4,8000b69a <_svfprintf_r+0x61e>
8000b68e:	80 a2       	mov.d %d2,%sp
8000b690:	1b 02 0d 20 	addi %d2,%d2,208
8000b694:	8b 52 07 42 	eq %d4,%d2,117
8000b698:	76 46       	jz %d4,8000b6a4 <_svfprintf_r+0x628>
8000b69a:	a0 03       	mov.a %a3,0
8000b69c:	3c 04       	j 8000b6a4 <_svfprintf_r+0x628>
8000b69e:	0c 70       	ld.bu %d15,[%a7]0
8000b6a0:	b0 17       	add.a %a7,1
8000b6a2:	28 0f       	st.b [%a15]0,%d15
8000b6a4:	60 3f       	mov.a %a15,%d3
8000b6a6:	d9 a2 0d 10 	lea %a2,[%sp]77
8000b6aa:	b0 2f       	add.a %a15,2
8000b6ac:	30 2f       	add.a %a15,%a2
8000b6ae:	c2 13       	add %d3,1
8000b6b0:	fc 37       	loop %a3,8000b69e <_svfprintf_r+0x622>
8000b6b2:	3c 0b       	j 8000b6c8 <_svfprintf_r+0x64c>
8000b6b4:	3b 00 03 30 	mov %d3,48
8000b6b8:	1b 0f 03 f0 	addi %d15,%d15,48
8000b6bc:	e9 a3 0f 10 	st.b [%sp]79,%d3
8000b6c0:	e9 af 10 10 	st.b [%sp]80,%d15
8000b6c4:	d9 af 11 10 	lea %a15,[%sp]81
8000b6c8:	d9 a7 0d 10 	lea %a7,[%sp]77
8000b6cc:	01 7f 20 70 	sub.a %a7,%a15,%a7
8000b6d0:	80 79       	mov.d %d9,%a7
8000b6d2:	58 05       	ld.w %d15,[%sp]20
8000b6d4:	b5 a7 38 00 	st.a [%sp]56,%a7
8000b6d8:	42 f9       	add %d9,%d15
8000b6da:	ff 2f 04 00 	jge %d15,2,8000b6e2 <_svfprintf_r+0x666>
8000b6de:	6f 0a 2c 00 	jz.t %d10,0,8000b736 <_svfprintf_r+0x6ba>
8000b6e2:	c2 19       	add %d9,1
8000b6e4:	3c 29       	j 8000b736 <_svfprintf_r+0x6ba>
8000b6e6:	58 04       	ld.w %d15,[%sp]16
8000b6e8:	8b 6f 26 42 	ne %d4,%d15,102
8000b6ec:	df 04 15 80 	jne %d4,0,8000b716 <_svfprintf_r+0x69a>
8000b6f0:	02 59       	mov %d9,%d5
8000b6f2:	8e 59       	jlez %d5,8000b704 <_svfprintf_r+0x688>
8000b6f4:	f6 e3       	jnz %d14,8000b6fa <_svfprintf_r+0x67e>
8000b6f6:	6f 0a 20 00 	jz.t %d10,0,8000b736 <_svfprintf_r+0x6ba>
8000b6fa:	1b 1e 00 30 	addi %d3,%d14,1
8000b6fe:	0b 35 00 90 	add %d9,%d5,%d3
8000b702:	3c 1a       	j 8000b736 <_svfprintf_r+0x6ba>
8000b704:	f6 e4       	jnz %d14,8000b70c <_svfprintf_r+0x690>
8000b706:	82 19       	mov %d9,1
8000b708:	6f 0a 17 00 	jz.t %d10,0,8000b736 <_svfprintf_r+0x6ba>
8000b70c:	1b 2e 00 90 	addi %d9,%d14,2
8000b710:	3c 13       	j 8000b736 <_svfprintf_r+0x6ba>
8000b712:	da 67       	mov %d15,103
8000b714:	78 04       	st.w [%sp]16,%d15
8000b716:	58 05       	ld.w %d15,[%sp]20
8000b718:	8f 1a 00 a1 	and %d10,%d10,1
8000b71c:	0b a5 00 90 	add %d9,%d5,%d10
8000b720:	7f f5 0b 00 	jge %d5,%d15,8000b736 <_svfprintf_r+0x6ba>
8000b724:	8b 15 40 92 	lt %d9,%d5,1
8000b728:	8b 25 00 31 	rsub %d3,%d5,2
8000b72c:	ab 13 80 39 	sel %d3,%d9,%d3,1
8000b730:	19 a9 14 00 	ld.w %d9,[%sp]20
8000b734:	42 39       	add %d9,%d3
8000b736:	58 09       	ld.w %d15,[%sp]36
8000b738:	82 0e       	mov %d14,0
8000b73a:	df 0f 55 01 	jeq %d15,0,8000b9e4 <_svfprintf_r+0x968>
8000b73e:	3b d0 02 70 	mov %d7,45
8000b742:	e9 a7 01 10 	st.b [%sp]65,%d7
8000b746:	1d 00 4f 01 	j 8000b9e4 <_svfprintf_r+0x968>
8000b74a:	e9 af 01 10 	st.b [%sp]65,%d15
8000b74e:	d9 f2 04 00 	lea %a2,[%a15]4
8000b752:	6f 5a 09 00 	jz.t %d10,5,8000b764 <_svfprintf_r+0x6e8>
8000b756:	58 0a       	ld.w %d15,[%sp]40
8000b758:	c8 03       	ld.a %a3,[%a15]0
8000b75a:	0b f0 00 48 	mov %e4,%d15
8000b75e:	89 34 40 09 	st.d [%a3],%e4
8000b762:	3c 0c       	j 8000b77a <_svfprintf_r+0x6fe>
8000b764:	6f 4a 08 80 	jnz.t %d10,4,8000b774 <_svfprintf_r+0x6f8>
8000b768:	6f 6a 06 00 	jz.t %d10,6,8000b774 <_svfprintf_r+0x6f8>
8000b76c:	c8 03       	ld.a %a3,[%a15]0
8000b76e:	58 0a       	ld.w %d15,[%sp]40
8000b770:	ac 30       	st.h [%a3]0,%d15
8000b772:	3c 04       	j 8000b77a <_svfprintf_r+0x6fe>
8000b774:	c8 03       	ld.a %a3,[%a15]0
8000b776:	58 0a       	ld.w %d15,[%sp]40
8000b778:	6c 30       	st.w [%a3]0,%d15
8000b77a:	40 2f       	mov.aa %a15,%a2
8000b77c:	1d ff b8 fc 	j 8000b0ec <_svfprintf_r+0x70>
8000b780:	8f 0a 41 a1 	or %d10,%d10,16
8000b784:	6f 5a 07 00 	jz.t %d10,5,8000b792 <_svfprintf_r+0x716>
8000b788:	d9 fc 08 00 	lea %a12,[%a15]8
8000b78c:	09 f8 40 09 	ld.d %e8,[%a15]
8000b790:	3c 0c       	j 8000b7a8 <_svfprintf_r+0x72c>
8000b792:	d9 fc 04 00 	lea %a12,[%a15]4
8000b796:	6f 4a 07 80 	jnz.t %d10,4,8000b7a4 <_svfprintf_r+0x728>
8000b79a:	6f 6a 05 00 	jz.t %d10,6,8000b7a4 <_svfprintf_r+0x728>
8000b79e:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000b7a2:	3c 02       	j 8000b7a6 <_svfprintf_r+0x72a>
8000b7a4:	48 08       	ld.w %d8,[%a15]0
8000b7a6:	82 09       	mov %d9,0
8000b7a8:	82 03       	mov %d3,0
8000b7aa:	3c 73       	j 8000b890 <_svfprintf_r+0x814>
8000b7ac:	3b 00 03 40 	mov %d4,48
8000b7b0:	7b 00 00 f8 	movh %d15,32768
8000b7b4:	1b 1f e5 f0 	addi %d15,%d15,3665
8000b7b8:	e9 a4 02 10 	st.b [%sp]66,%d4
8000b7bc:	3b 80 07 40 	mov %d4,120
8000b7c0:	78 0f       	st.w [%sp]60,%d15
8000b7c2:	02 4f       	mov %d15,%d4
8000b7c4:	d9 fc 04 00 	lea %a12,[%a15]4
8000b7c8:	48 08       	ld.w %d8,[%a15]0
8000b7ca:	82 09       	mov %d9,0
8000b7cc:	8f 2a 40 a1 	or %d10,%d10,2
8000b7d0:	e9 a4 03 10 	st.b [%sp]67,%d4
8000b7d4:	82 23       	mov %d3,2
8000b7d6:	78 04       	st.w [%sp]16,%d15
8000b7d8:	3c 5c       	j 8000b890 <_svfprintf_r+0x814>
8000b7da:	82 07       	mov %d7,0
8000b7dc:	48 0d       	ld.w %d13,[%a15]0
8000b7de:	e9 a7 01 10 	st.b [%sp]65,%d7
8000b7e2:	02 e9       	mov %d9,%d14
8000b7e4:	60 ad       	mov.a %a13,%d10
8000b7e6:	d9 fc 04 00 	lea %a12,[%a15]4
8000b7ea:	60 d4       	mov.a %a4,%d13
8000b7ec:	0e ef       	jltz %d14,8000b80a <_svfprintf_r+0x78e>
8000b7ee:	82 04       	mov %d4,0
8000b7f0:	02 e5       	mov %d5,%d14
8000b7f2:	6d 00 14 0c 	call 8000d01a <memchr>
8000b7f6:	bd 02 f6 00 	jz.a %a2,8000b9e2 <_svfprintf_r+0x966>
8000b7fa:	60 d4       	mov.a %a4,%d13
8000b7fc:	01 42 20 30 	sub.a %a3,%a2,%a4
8000b800:	80 32       	mov.d %d2,%a3
8000b802:	0b e2 80 91 	min %d9,%d2,%d14
8000b806:	1d 00 ee 00 	j 8000b9e2 <_svfprintf_r+0x966>
8000b80a:	6d ff cc fa 	call 8000ada2 <strlen>
8000b80e:	02 29       	mov %d9,%d2
8000b810:	1d 00 e9 00 	j 8000b9e2 <_svfprintf_r+0x966>
8000b814:	8f 0a 41 a1 	or %d10,%d10,16
8000b818:	6f 5a 07 00 	jz.t %d10,5,8000b826 <_svfprintf_r+0x7aa>
8000b81c:	d9 fc 08 00 	lea %a12,[%a15]8
8000b820:	09 f8 40 09 	ld.d %e8,[%a15]
8000b824:	3c 0c       	j 8000b83c <_svfprintf_r+0x7c0>
8000b826:	d9 fc 04 00 	lea %a12,[%a15]4
8000b82a:	6f 4a 07 80 	jnz.t %d10,4,8000b838 <_svfprintf_r+0x7bc>
8000b82e:	6f 6a 05 00 	jz.t %d10,6,8000b838 <_svfprintf_r+0x7bc>
8000b832:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000b836:	3c 02       	j 8000b83a <_svfprintf_r+0x7be>
8000b838:	48 08       	ld.w %d8,[%a15]0
8000b83a:	82 09       	mov %d9,0
8000b83c:	82 13       	mov %d3,1
8000b83e:	3c 29       	j 8000b890 <_svfprintf_r+0x814>
8000b840:	e9 af 01 10 	st.b [%sp]65,%d15
8000b844:	7b 00 00 f8 	movh %d15,32768
8000b848:	1b 1f e5 f0 	addi %d15,%d15,3665
8000b84c:	78 0f       	st.w [%sp]60,%d15
8000b84e:	6f 5a 07 00 	jz.t %d10,5,8000b85c <_svfprintf_r+0x7e0>
8000b852:	d9 fc 08 00 	lea %a12,[%a15]8
8000b856:	09 f8 40 09 	ld.d %e8,[%a15]
8000b85a:	3c 0c       	j 8000b872 <_svfprintf_r+0x7f6>
8000b85c:	d9 fc 04 00 	lea %a12,[%a15]4
8000b860:	6f 4a 07 80 	jnz.t %d10,4,8000b86e <_svfprintf_r+0x7f2>
8000b864:	6f 6a 05 00 	jz.t %d10,6,8000b86e <_svfprintf_r+0x7f2>
8000b868:	b9 f8 00 00 	ld.hu %d8,[%a15]0
8000b86c:	3c 02       	j 8000b870 <_svfprintf_r+0x7f4>
8000b86e:	48 08       	ld.w %d8,[%a15]0
8000b870:	82 09       	mov %d9,0
8000b872:	82 23       	mov %d3,2
8000b874:	6f 0a 0e 00 	jz.t %d10,0,8000b890 <_svfprintf_r+0x814>
8000b878:	0f 89 a0 40 	or %d4,%d9,%d8
8000b87c:	76 4a       	jz %d4,8000b890 <_svfprintf_r+0x814>
8000b87e:	58 04       	ld.w %d15,[%sp]16
8000b880:	3b 00 03 70 	mov %d7,48
8000b884:	e9 a7 02 10 	st.b [%sp]66,%d7
8000b888:	e9 af 03 10 	st.b [%sp]67,%d15
8000b88c:	8f 2a 40 a1 	or %d10,%d10,2
8000b890:	82 07       	mov %d7,0
8000b892:	60 ad       	mov.a %a13,%d10
8000b894:	e9 a7 01 10 	st.b [%sp]65,%d7
8000b898:	80 d2       	mov.d %d2,%a13
8000b89a:	8b 0e 80 72 	ge %d7,%d14,0
8000b89e:	8f 02 c8 41 	andn %d4,%d2,128
8000b8a2:	2b 24 40 27 	sel %d2,%d7,%d4,%d2
8000b8a6:	0f 98 a0 60 	or %d6,%d8,%d9
8000b8aa:	8b 0e 20 42 	ne %d4,%d14,0
8000b8ae:	8b 06 00 45 	or.ne %d4,%d6,0
8000b8b2:	60 2d       	mov.a %a13,%d2
8000b8b4:	df 04 72 00 	jeq %d4,0,8000b998 <_svfprintf_r+0x91c>
8000b8b8:	df 13 06 00 	jeq %d3,1,8000b8c4 <_svfprintf_r+0x848>
8000b8bc:	df 23 57 00 	jeq %d3,2,8000b96a <_svfprintf_r+0x8ee>
8000b8c0:	82 03       	mov %d3,0
8000b8c2:	3c 03       	j 8000b8c8 <_svfprintf_r+0x84c>
8000b8c4:	82 04       	mov %d4,0
8000b8c6:	3c 22       	j 8000b90a <_svfprintf_r+0x88e>
8000b8c8:	8b 73 02 71 	rsub %d7,%d3,39
8000b8cc:	60 72       	mov.a %a2,%d7
8000b8ce:	8f 78 00 41 	and %d4,%d8,7
8000b8d2:	d9 a3 28 10 	lea %a3,[%sp]104
8000b8d6:	77 89 80 8e 	dextr %d8,%d9,%d8,29
8000b8da:	30 23       	add.a %a3,%a2
8000b8dc:	1b 04 03 40 	addi %d4,%d4,48
8000b8e0:	06 d9       	sh %d9,-3
8000b8e2:	34 34       	st.b [%a3],%d4
8000b8e4:	0f 89 a0 60 	or %d6,%d9,%d8
8000b8e8:	c2 13       	add %d3,1
8000b8ea:	df 06 ef ff 	jne %d6,0,8000b8c8 <_svfprintf_r+0x84c>
8000b8ee:	80 d2       	mov.d %d2,%a13
8000b8f0:	80 3d       	mov.d %d13,%a3
8000b8f2:	6f 02 61 00 	jz.t %d2,0,8000b9b4 <_svfprintf_r+0x938>
8000b8f6:	8b 04 03 42 	eq %d4,%d4,48
8000b8fa:	df 04 5d 80 	jne %d4,0,8000b9b4 <_svfprintf_r+0x938>
8000b8fe:	3b 00 03 70 	mov %d7,48
8000b902:	c2 fd       	add %d13,-1
8000b904:	e9 37 ff ff 	st.b [%a3]-1,%d7
8000b908:	3c 56       	j 8000b9b4 <_svfprintf_r+0x938>
8000b90a:	8b 84 02 71 	rsub %d7,%d4,40
8000b90e:	8b 09 00 32 	eq %d3,%d9,0
8000b912:	60 73       	mov.a %a3,%d7
8000b914:	8b a8 a0 34 	and.ge.u %d3,%d8,10
8000b918:	d9 a7 28 10 	lea %a7,[%sp]104
8000b91c:	8b 09 00 35 	or.ne %d3,%d9,0
8000b920:	30 37       	add.a %a7,%a3
8000b922:	1b 14 00 d0 	addi %d13,%d4,1
8000b926:	df 03 1b 00 	jeq %d3,0,8000b95c <_svfprintf_r+0x8e0>
8000b92a:	8b 74 02 41 	rsub %d4,%d4,39
8000b92e:	60 42       	mov.a %a2,%d4
8000b930:	fb a0 00 60 	mov %e6,10
8000b934:	0b 89 10 48 	mov %e4,%d9,%d8
8000b938:	d9 af 28 10 	lea %a15,[%sp]104
8000b93c:	30 2f       	add.a %a15,%a2
8000b93e:	6d 00 98 12 	call 8000de6e <__umoddi3>
8000b942:	0b 89 10 48 	mov %e4,%d9,%d8
8000b946:	1b 02 03 20 	addi %d2,%d2,48
8000b94a:	fb a0 00 60 	mov %e6,10
8000b94e:	28 02       	st.b [%a15]0,%d2
8000b950:	6d 00 3f 12 	call 8000ddce <__udivdi3>
8000b954:	02 d4       	mov %d4,%d13
8000b956:	0b 23 10 88 	mov %e8,%d3,%d2
8000b95a:	3c d8       	j 8000b90a <_svfprintf_r+0x88e>
8000b95c:	80 7d       	mov.d %d13,%a7
8000b95e:	1b 08 03 80 	addi %d8,%d8,48
8000b962:	c2 fd       	add %d13,-1
8000b964:	e9 78 ff ff 	st.b [%a7]-1,%d8
8000b968:	3c 26       	j 8000b9b4 <_svfprintf_r+0x938>
8000b96a:	82 03       	mov %d3,0
8000b96c:	d8 0f       	ld.a %a15,[%sp]60
8000b96e:	80 ad       	mov.d %d13,%sp
8000b970:	8f f8 00 f1 	and %d15,%d8,15
8000b974:	8b 73 02 71 	rsub %d7,%d3,39
8000b978:	1b 8d 06 d0 	addi %d13,%d13,104
8000b97c:	10 f7       	addsc.a %a7,%a15,%d15,0
8000b97e:	42 7d       	add %d13,%d7
8000b980:	77 89 00 8e 	dextr %d8,%d9,%d8,28
8000b984:	0c 70       	ld.bu %d15,[%a7]0
8000b986:	60 d2       	mov.a %a2,%d13
8000b988:	06 c9       	sh %d9,-4
8000b98a:	2c 20       	st.b [%a2]0,%d15
8000b98c:	0f 89 a0 40 	or %d4,%d9,%d8
8000b990:	c2 13       	add %d3,1
8000b992:	df 04 ed ff 	jne %d4,0,8000b96c <_svfprintf_r+0x8f0>
8000b996:	3c 0f       	j 8000b9b4 <_svfprintf_r+0x938>
8000b998:	80 a2       	mov.d %d2,%sp
8000b99a:	1b 02 09 d0 	addi %d13,%d2,144
8000b99e:	f6 3b       	jnz %d3,8000b9b4 <_svfprintf_r+0x938>
8000b9a0:	80 df       	mov.d %d15,%a13
8000b9a2:	2e 09       	jz.t %d15,0,8000b9b4 <_svfprintf_r+0x938>
8000b9a4:	1b 02 0d d0 	addi %d13,%d2,208
8000b9a8:	60 d2       	mov.a %a2,%d13
8000b9aa:	3b 00 03 70 	mov %d7,48
8000b9ae:	89 27 3f e4 	st.b [+%a2]-65,%d7
8000b9b2:	80 2d       	mov.d %d13,%a2
8000b9b4:	d9 a3 10 20 	lea %a3,[%sp]144
8000b9b8:	80 39       	mov.d %d9,%a3
8000b9ba:	a2 d9       	sub %d9,%d13
8000b9bc:	3c 14       	j 8000b9e4 <_svfprintf_r+0x968>
8000b9be:	e9 af 01 10 	st.b [%sp]65,%d15
8000b9c2:	58 04       	ld.w %d15,[%sp]16
8000b9c4:	df 0f 1f 04 	jeq %d15,0,8000c202 <_svfprintf_r+0x1186>
8000b9c8:	82 03       	mov %d3,0
8000b9ca:	60 ad       	mov.a %a13,%d10
8000b9cc:	e9 af 28 10 	st.b [%sp]104,%d15
8000b9d0:	e9 a3 01 10 	st.b [%sp]65,%d3
8000b9d4:	40 fc       	mov.aa %a12,%a15
8000b9d6:	80 a2       	mov.d %d2,%sp
8000b9d8:	82 19       	mov %d9,1
8000b9da:	82 0e       	mov %d14,0
8000b9dc:	1b 82 06 d0 	addi %d13,%d2,104
8000b9e0:	3c 02       	j 8000b9e4 <_svfprintf_r+0x968>
8000b9e2:	82 0e       	mov %d14,0
8000b9e4:	79 a7 01 10 	ld.b %d7,[%sp]65
8000b9e8:	80 df       	mov.d %d15,%a13
8000b9ea:	0b e9 a0 a1 	max %d10,%d9,%d14
8000b9ee:	80 d2       	mov.d %d2,%a13
8000b9f0:	16 02       	and %d15,2
8000b9f2:	ab 1a 00 a7 	cadd %d10,%d7,%d10,1
8000b9f6:	60 ff       	mov.a %a15,%d15
8000b9f8:	8a 2a       	cadd %d10,%d15,2
8000b9fa:	8f 42 08 f1 	and %d15,%d2,132
8000b9fe:	ee 48       	jnz %d15,8000ba8e <_svfprintf_r+0xa12>
8000ba00:	19 a8 1c 00 	ld.w %d8,[%sp]28
8000ba04:	a2 a8       	sub %d8,%d10
8000ba06:	bf 18 44 00 	jlt %d8,1,8000ba8e <_svfprintf_r+0xa12>
8000ba0a:	91 00 00 28 	movh.a %a2,32768
8000ba0e:	d9 22 f4 90 	lea %a2,[%a2]3700 <80000e74 <blanks.4035>>
8000ba12:	19 a1 24 10 	ld.w %d1,[%sp]100 <80000e74 <blanks.4035>>
8000ba16:	19 a4 20 10 	ld.w %d4,[%sp]96 <80000e74 <blanks.4035>>
8000ba1a:	8b 18 81 72 	ge %d7,%d8,17
8000ba1e:	f4 e2       	st.a [%a14],%a2
8000ba20:	df 07 20 00 	jeq %d7,0,8000ba60 <_svfprintf_r+0x9e4>
8000ba24:	1b 14 00 00 	addi %d0,%d4,1
8000ba28:	3b 00 01 20 	mov %d2,16
8000ba2c:	1b 01 01 10 	addi %d1,%d1,16
8000ba30:	59 e2 04 00 	st.w [%a14]4,%d2
8000ba34:	59 a0 20 10 	st.w [%sp]96,%d0
8000ba38:	59 a1 24 10 	st.w [%sp]100,%d1
8000ba3c:	8b 80 80 02 	ge %d0,%d0,8
8000ba40:	d9 ee 08 00 	lea %a14,[%a14]8
8000ba44:	76 0b       	jz %d0,8000ba5a <_svfprintf_r+0x9de>
8000ba46:	60 c4       	mov.a %a4,%d12
8000ba48:	60 b5       	mov.a %a5,%d11
8000ba4a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000ba4e:	6d 00 f4 0d 	call 8000d636 <__ssprint_r>
8000ba52:	df 02 e0 83 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000ba56:	d9 ae 10 20 	lea %a14,[%sp]144
8000ba5a:	1b 08 ff 8f 	addi %d8,%d8,-16
8000ba5e:	3c d6       	j 8000ba0a <_svfprintf_r+0x98e>
8000ba60:	c2 14       	add %d4,1
8000ba62:	42 81       	add %d1,%d8
8000ba64:	59 e8 04 00 	st.w [%a14]4,%d8
8000ba68:	59 a4 20 10 	st.w [%sp]96,%d4
8000ba6c:	59 a1 24 10 	st.w [%sp]100,%d1
8000ba70:	8b 84 80 42 	ge %d4,%d4,8
8000ba74:	d9 ee 08 00 	lea %a14,[%a14]8
8000ba78:	76 4b       	jz %d4,8000ba8e <_svfprintf_r+0xa12>
8000ba7a:	60 c4       	mov.a %a4,%d12
8000ba7c:	60 b5       	mov.a %a5,%d11
8000ba7e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000ba82:	6d 00 da 0d 	call 8000d636 <__ssprint_r>
8000ba86:	df 02 c6 83 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000ba8a:	d9 ae 10 20 	lea %a14,[%sp]144
8000ba8e:	79 a4 01 10 	ld.b %d4,[%sp]65
8000ba92:	df 04 21 00 	jeq %d4,0,8000bad4 <_svfprintf_r+0xa58>
8000ba96:	19 a4 24 10 	ld.w %d4,[%sp]100
8000ba9a:	d9 a7 01 10 	lea %a7,[%sp]65
8000ba9e:	c2 14       	add %d4,1
8000baa0:	59 a4 24 10 	st.w [%sp]100,%d4
8000baa4:	19 a4 20 10 	ld.w %d4,[%sp]96
8000baa8:	82 17       	mov %d7,1
8000baaa:	c2 14       	add %d4,1
8000baac:	f4 e7       	st.a [%a14],%a7
8000baae:	59 e7 04 00 	st.w [%a14]4,%d7
8000bab2:	59 a4 20 10 	st.w [%sp]96,%d4
8000bab6:	8b 84 80 42 	ge %d4,%d4,8
8000baba:	d9 ee 08 00 	lea %a14,[%a14]8
8000babe:	76 4b       	jz %d4,8000bad4 <_svfprintf_r+0xa58>
8000bac0:	60 c4       	mov.a %a4,%d12
8000bac2:	60 b5       	mov.a %a5,%d11
8000bac4:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bac8:	6d 00 b7 0d 	call 8000d636 <__ssprint_r>
8000bacc:	df 02 a3 83 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000bad0:	d9 ae 10 20 	lea %a14,[%sp]144
8000bad4:	bd 0f 21 00 	jz.a %a15,8000bb16 <_svfprintf_r+0xa9a>
8000bad8:	19 a4 24 10 	ld.w %d4,[%sp]100
8000badc:	d9 a7 02 10 	lea %a7,[%sp]66
8000bae0:	c2 24       	add %d4,2
8000bae2:	59 a4 24 10 	st.w [%sp]100,%d4
8000bae6:	19 a4 20 10 	ld.w %d4,[%sp]96
8000baea:	82 27       	mov %d7,2
8000baec:	c2 14       	add %d4,1
8000baee:	f4 e7       	st.a [%a14],%a7
8000baf0:	59 e7 04 00 	st.w [%a14]4,%d7
8000baf4:	59 a4 20 10 	st.w [%sp]96,%d4
8000baf8:	8b 84 80 42 	ge %d4,%d4,8
8000bafc:	d9 ee 08 00 	lea %a14,[%a14]8
8000bb00:	76 4b       	jz %d4,8000bb16 <_svfprintf_r+0xa9a>
8000bb02:	60 c4       	mov.a %a4,%d12
8000bb04:	60 b5       	mov.a %a5,%d11
8000bb06:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bb0a:	6d 00 96 0d 	call 8000d636 <__ssprint_r>
8000bb0e:	df 02 82 83 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000bb12:	d9 ae 10 20 	lea %a14,[%sp]144
8000bb16:	8b 0f 28 42 	ne %d4,%d15,128
8000bb1a:	df 04 48 80 	jne %d4,0,8000bbaa <_svfprintf_r+0xb2e>
8000bb1e:	58 07       	ld.w %d15,[%sp]28
8000bb20:	7b 00 00 28 	movh %d2,32768
8000bb24:	60 23       	mov.a %a3,%d2
8000bb26:	a2 af       	sub %d15,%d10
8000bb28:	d9 3f e4 90 	lea %a15,[%a3]3684
8000bb2c:	bf 1f 3f 00 	jlt %d15,1,8000bbaa <_svfprintf_r+0xb2e>
8000bb30:	19 a7 24 10 	ld.w %d7,[%sp]100
8000bb34:	19 a4 20 10 	ld.w %d4,[%sp]96
8000bb38:	8b 1f 81 82 	ge %d8,%d15,17
8000bb3c:	ec e0       	st.a [%a14]0,%a15
8000bb3e:	df 08 20 00 	jeq %d8,0,8000bb7e <_svfprintf_r+0xb02>
8000bb42:	1b 14 00 00 	addi %d0,%d4,1
8000bb46:	3b 00 01 20 	mov %d2,16
8000bb4a:	1b 07 01 10 	addi %d1,%d7,16
8000bb4e:	59 e2 04 00 	st.w [%a14]4,%d2
8000bb52:	59 a0 20 10 	st.w [%sp]96,%d0
8000bb56:	59 a1 24 10 	st.w [%sp]100,%d1
8000bb5a:	8b 80 80 02 	ge %d0,%d0,8
8000bb5e:	d9 ee 08 00 	lea %a14,[%a14]8
8000bb62:	76 0b       	jz %d0,8000bb78 <_svfprintf_r+0xafc>
8000bb64:	60 c4       	mov.a %a4,%d12
8000bb66:	60 b5       	mov.a %a5,%d11
8000bb68:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bb6c:	6d 00 65 0d 	call 8000d636 <__ssprint_r>
8000bb70:	df 02 51 83 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000bb74:	d9 ae 10 20 	lea %a14,[%sp]144
8000bb78:	1b 0f ff ff 	addi %d15,%d15,-16
8000bb7c:	3c da       	j 8000bb30 <_svfprintf_r+0xab4>
8000bb7e:	c2 14       	add %d4,1
8000bb80:	42 f7       	add %d7,%d15
8000bb82:	6c e1       	st.w [%a14]4,%d15
8000bb84:	59 a4 20 10 	st.w [%sp]96,%d4
8000bb88:	59 a7 24 10 	st.w [%sp]100,%d7
8000bb8c:	8b 84 80 42 	ge %d4,%d4,8
8000bb90:	d9 ee 08 00 	lea %a14,[%a14]8
8000bb94:	76 4b       	jz %d4,8000bbaa <_svfprintf_r+0xb2e>
8000bb96:	60 c4       	mov.a %a4,%d12
8000bb98:	60 b5       	mov.a %a5,%d11
8000bb9a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bb9e:	6d 00 4c 0d 	call 8000d636 <__ssprint_r>
8000bba2:	df 02 38 83 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000bba6:	d9 ae 10 20 	lea %a14,[%sp]144
8000bbaa:	7b 00 00 88 	movh %d8,32768
8000bbae:	a2 9e       	sub %d14,%d9
8000bbb0:	1b 48 e6 80 	addi %d8,%d8,3684
8000bbb4:	c5 0f 10 00 	lea %a15,10 <_.+0xf>
8000bbb8:	bf 1e 3c 00 	jlt %d14,1,8000bc30 <_svfprintf_r+0xbb4>
8000bbbc:	19 a6 24 10 	ld.w %d6,[%sp]100
8000bbc0:	19 a4 20 10 	ld.w %d4,[%sp]96
8000bbc4:	8b 1e 81 02 	ge %d0,%d14,17
8000bbc8:	74 e8       	st.w [%a14],%d8
8000bbca:	df 00 1c 00 	jeq %d0,0,8000bc02 <_svfprintf_r+0xb86>
8000bbce:	c2 14       	add %d4,1
8000bbd0:	1b 06 01 00 	addi %d0,%d6,16
8000bbd4:	ec e1       	st.a [%a14]4,%a15
8000bbd6:	59 a4 20 10 	st.w [%sp]96,%d4
8000bbda:	59 a0 24 10 	st.w [%sp]100,%d0
8000bbde:	8b 84 80 42 	ge %d4,%d4,8
8000bbe2:	d9 ee 08 00 	lea %a14,[%a14]8
8000bbe6:	76 4b       	jz %d4,8000bbfc <_svfprintf_r+0xb80>
8000bbe8:	60 c4       	mov.a %a4,%d12
8000bbea:	60 b5       	mov.a %a5,%d11
8000bbec:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bbf0:	6d 00 23 0d 	call 8000d636 <__ssprint_r>
8000bbf4:	df 02 0f 83 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000bbf8:	d9 ae 10 20 	lea %a14,[%sp]144
8000bbfc:	1b 0e ff ef 	addi %d14,%d14,-16
8000bc00:	3c de       	j 8000bbbc <_svfprintf_r+0xb40>
8000bc02:	c2 14       	add %d4,1
8000bc04:	42 e6       	add %d6,%d14
8000bc06:	59 ee 04 00 	st.w [%a14]4,%d14
8000bc0a:	59 a4 20 10 	st.w [%sp]96,%d4
8000bc0e:	59 a6 24 10 	st.w [%sp]100,%d6
8000bc12:	8b 84 80 42 	ge %d4,%d4,8
8000bc16:	d9 ee 08 00 	lea %a14,[%a14]8
8000bc1a:	76 4b       	jz %d4,8000bc30 <_svfprintf_r+0xbb4>
8000bc1c:	60 c4       	mov.a %a4,%d12
8000bc1e:	60 b5       	mov.a %a5,%d11
8000bc20:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bc24:	6d 00 09 0d 	call 8000d636 <__ssprint_r>
8000bc28:	df 02 f5 82 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000bc2c:	d9 ae 10 20 	lea %a14,[%sp]144
8000bc30:	80 df       	mov.d %d15,%a13
8000bc32:	19 ae 24 10 	ld.w %d14,[%sp]100
8000bc36:	19 a8 20 10 	ld.w %d8,[%sp]96
8000bc3a:	6f 8f 1d 80 	jnz.t %d15,8,8000bc74 <_svfprintf_r+0xbf8>
8000bc3e:	c2 18       	add %d8,1
8000bc40:	59 e9 04 00 	st.w [%a14]4,%d9
8000bc44:	42 e9       	add %d9,%d14
8000bc46:	59 a8 20 10 	st.w [%sp]96,%d8
8000bc4a:	74 ed       	st.w [%a14],%d13
8000bc4c:	59 a9 24 10 	st.w [%sp]100,%d9
8000bc50:	8b 88 80 82 	ge %d8,%d8,8
8000bc54:	d9 ef 08 00 	lea %a15,[%a14]8
8000bc58:	df 08 79 02 	jeq %d8,0,8000c14a <_svfprintf_r+0x10ce>
8000bc5c:	60 c4       	mov.a %a4,%d12
8000bc5e:	60 b5       	mov.a %a5,%d11
8000bc60:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bc64:	6d 00 e9 0c 	call 8000d636 <__ssprint_r>
8000bc68:	df 02 d5 82 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000bc6c:	d9 af 10 20 	lea %a15,[%sp]144
8000bc70:	1d 00 6d 02 	j 8000c14a <_svfprintf_r+0x10ce>
8000bc74:	19 a2 10 00 	ld.w %d2,[%sp]16
8000bc78:	8b 62 46 f2 	lt %d15,%d2,102
8000bc7c:	df 0f be 81 	jne %d15,0,8000bff8 <_svfprintf_r+0xf7c>
8000bc80:	d2 06       	mov %e6,0
8000bc82:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000bc86:	19 a5 30 00 	ld.w %d5,[%sp]48
8000bc8a:	6d 00 db 0f 	call 8000dc40 <__eqdf2>
8000bc8e:	df 02 78 80 	jne %d2,0,8000bd7e <_svfprintf_r+0xd02>
8000bc92:	7b 00 00 38 	movh %d3,32768
8000bc96:	1b 23 e6 30 	addi %d3,%d3,3682
8000bc9a:	c2 18       	add %d8,1
8000bc9c:	74 e3       	st.w [%a14],%d3
8000bc9e:	1b 1e 00 90 	addi %d9,%d14,1
8000bca2:	82 13       	mov %d3,1
8000bca4:	59 a8 20 10 	st.w [%sp]96,%d8
8000bca8:	59 e3 04 00 	st.w [%a14]4,%d3
8000bcac:	59 a9 24 10 	st.w [%sp]100,%d9
8000bcb0:	8b 88 80 82 	ge %d8,%d8,8
8000bcb4:	d9 ef 08 00 	lea %a15,[%a14]8
8000bcb8:	76 8b       	jz %d8,8000bcce <_svfprintf_r+0xc52>
8000bcba:	60 c4       	mov.a %a4,%d12
8000bcbc:	60 b5       	mov.a %a5,%d11
8000bcbe:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bcc2:	6d 00 ba 0c 	call 8000d636 <__ssprint_r>
8000bcc6:	df 02 a6 82 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000bcca:	d9 af 10 20 	lea %a15,[%sp]144
8000bcce:	58 11       	ld.w %d15,[%sp]68
8000bcd0:	19 a2 14 00 	ld.w %d2,[%sp]20
8000bcd4:	3f 2f 05 00 	jlt %d15,%d2,8000bcde <_svfprintf_r+0xc62>
8000bcd8:	80 df       	mov.d %d15,%a13
8000bcda:	6f 0f 38 02 	jz.t %d15,0,8000c14a <_svfprintf_r+0x10ce>
8000bcde:	58 08       	ld.w %d15,[%sp]32
8000bce0:	19 a2 20 00 	ld.w %d2,[%sp]32
8000bce4:	68 1f       	st.w [%a15]4,%d15
8000bce6:	58 19       	ld.w %d15,[%sp]100
8000bce8:	99 a3 34 00 	ld.a %a3,[%sp]52
8000bcec:	42 2f       	add %d15,%d2
8000bcee:	78 19       	st.w [%sp]100,%d15
8000bcf0:	58 18       	ld.w %d15,[%sp]96
8000bcf2:	e8 03       	st.a [%a15]0,%a3
8000bcf4:	c2 1f       	add %d15,1
8000bcf6:	78 18       	st.w [%sp]96,%d15
8000bcf8:	8b 8f 80 f2 	ge %d15,%d15,8
8000bcfc:	d9 ff 08 00 	lea %a15,[%a15]8
8000bd00:	6e 0b       	jz %d15,8000bd16 <_svfprintf_r+0xc9a>
8000bd02:	60 c4       	mov.a %a4,%d12
8000bd04:	60 b5       	mov.a %a5,%d11
8000bd06:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bd0a:	6d 00 96 0c 	call 8000d636 <__ssprint_r>
8000bd0e:	df 02 82 82 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000bd12:	d9 af 10 20 	lea %a15,[%sp]144
8000bd16:	58 05       	ld.w %d15,[%sp]20
8000bd18:	7b 00 00 88 	movh %d8,32768
8000bd1c:	c2 ff       	add %d15,-1
8000bd1e:	1b 48 e6 80 	addi %d8,%d8,3684
8000bd22:	3b 00 01 90 	mov %d9,16
8000bd26:	bf 1f 12 02 	jlt %d15,1,8000c14a <_svfprintf_r+0x10ce>
8000bd2a:	19 a5 24 10 	ld.w %d5,[%sp]100
8000bd2e:	19 a3 20 10 	ld.w %d3,[%sp]96
8000bd32:	8b 1f 81 42 	ge %d4,%d15,17
8000bd36:	68 08       	st.w [%a15]0,%d8
8000bd38:	df 04 1c 00 	jeq %d4,0,8000bd70 <_svfprintf_r+0xcf4>
8000bd3c:	c2 13       	add %d3,1
8000bd3e:	1b 05 01 40 	addi %d4,%d5,16
8000bd42:	68 19       	st.w [%a15]4,%d9
8000bd44:	59 a3 20 10 	st.w [%sp]96,%d3
8000bd48:	59 a4 24 10 	st.w [%sp]100,%d4
8000bd4c:	8b 83 80 32 	ge %d3,%d3,8
8000bd50:	d9 ff 08 00 	lea %a15,[%a15]8
8000bd54:	76 3b       	jz %d3,8000bd6a <_svfprintf_r+0xcee>
8000bd56:	60 c4       	mov.a %a4,%d12
8000bd58:	60 b5       	mov.a %a5,%d11
8000bd5a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bd5e:	6d 00 6c 0c 	call 8000d636 <__ssprint_r>
8000bd62:	df 02 58 82 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000bd66:	d9 af 10 20 	lea %a15,[%sp]144
8000bd6a:	1b 0f ff ff 	addi %d15,%d15,-16
8000bd6e:	3c de       	j 8000bd2a <_svfprintf_r+0xcae>
8000bd70:	12 54       	add %d4,%d15,%d5
8000bd72:	68 1f       	st.w [%a15]4,%d15
8000bd74:	59 a4 24 10 	st.w [%sp]100,%d4
8000bd78:	9a 13       	add %d15,%d3,1
8000bd7a:	1d 00 e1 01 	j 8000c13c <_svfprintf_r+0x10c0>
8000bd7e:	19 a3 04 10 	ld.w %d3,[%sp]68
8000bd82:	ff 13 8e 00 	jge %d3,1,8000be9e <_svfprintf_r+0xe22>
8000bd86:	7b 00 00 38 	movh %d3,32768
8000bd8a:	1b 23 e6 30 	addi %d3,%d3,3682
8000bd8e:	c2 18       	add %d8,1
8000bd90:	74 e3       	st.w [%a14],%d3
8000bd92:	1b 1e 00 90 	addi %d9,%d14,1
8000bd96:	82 13       	mov %d3,1
8000bd98:	59 a8 20 10 	st.w [%sp]96,%d8
8000bd9c:	59 e3 04 00 	st.w [%a14]4,%d3
8000bda0:	59 a9 24 10 	st.w [%sp]100,%d9
8000bda4:	8b 88 80 82 	ge %d8,%d8,8
8000bda8:	d9 ef 08 00 	lea %a15,[%a14]8
8000bdac:	76 8b       	jz %d8,8000bdc2 <_svfprintf_r+0xd46>
8000bdae:	60 c4       	mov.a %a4,%d12
8000bdb0:	60 b5       	mov.a %a5,%d11
8000bdb2:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bdb6:	6d 00 40 0c 	call 8000d636 <__ssprint_r>
8000bdba:	df 02 2c 82 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000bdbe:	d9 af 10 20 	lea %a15,[%sp]144
8000bdc2:	58 11       	ld.w %d15,[%sp]68
8000bdc4:	19 a2 14 00 	ld.w %d2,[%sp]20
8000bdc8:	a6 2f       	or %d15,%d2
8000bdca:	ee 04       	jnz %d15,8000bdd2 <_svfprintf_r+0xd56>
8000bdcc:	80 df       	mov.d %d15,%a13
8000bdce:	6f 0f be 01 	jz.t %d15,0,8000c14a <_svfprintf_r+0x10ce>
8000bdd2:	58 08       	ld.w %d15,[%sp]32
8000bdd4:	19 a2 20 00 	ld.w %d2,[%sp]32
8000bdd8:	68 1f       	st.w [%a15]4,%d15
8000bdda:	58 19       	ld.w %d15,[%sp]100
8000bddc:	99 a3 34 00 	ld.a %a3,[%sp]52
8000bde0:	42 2f       	add %d15,%d2
8000bde2:	78 19       	st.w [%sp]100,%d15
8000bde4:	58 18       	ld.w %d15,[%sp]96
8000bde6:	e8 03       	st.a [%a15]0,%a3
8000bde8:	c2 1f       	add %d15,1
8000bdea:	78 18       	st.w [%sp]96,%d15
8000bdec:	8b 8f 80 f2 	ge %d15,%d15,8
8000bdf0:	d9 ff 08 00 	lea %a15,[%a15]8
8000bdf4:	6e 0b       	jz %d15,8000be0a <_svfprintf_r+0xd8e>
8000bdf6:	60 c4       	mov.a %a4,%d12
8000bdf8:	60 b5       	mov.a %a5,%d11
8000bdfa:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bdfe:	6d 00 1c 0c 	call 8000d636 <__ssprint_r>
8000be02:	df 02 08 82 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000be06:	d9 af 10 20 	lea %a15,[%sp]144
8000be0a:	58 11       	ld.w %d15,[%sp]68
8000be0c:	7b 00 00 88 	movh %d8,32768
8000be10:	32 5f       	rsub %d15
8000be12:	1b 48 e6 80 	addi %d8,%d8,3684
8000be16:	3b 00 01 90 	mov %d9,16
8000be1a:	bf 1f 3a 00 	jlt %d15,1,8000be8e <_svfprintf_r+0xe12>
8000be1e:	19 a5 24 10 	ld.w %d5,[%sp]100
8000be22:	19 a3 20 10 	ld.w %d3,[%sp]96
8000be26:	8b 1f 81 42 	ge %d4,%d15,17
8000be2a:	68 08       	st.w [%a15]0,%d8
8000be2c:	df 04 1c 00 	jeq %d4,0,8000be64 <_svfprintf_r+0xde8>
8000be30:	c2 13       	add %d3,1
8000be32:	1b 05 01 40 	addi %d4,%d5,16
8000be36:	68 19       	st.w [%a15]4,%d9
8000be38:	59 a3 20 10 	st.w [%sp]96,%d3
8000be3c:	59 a4 24 10 	st.w [%sp]100,%d4
8000be40:	8b 83 80 32 	ge %d3,%d3,8
8000be44:	d9 ff 08 00 	lea %a15,[%a15]8
8000be48:	76 3b       	jz %d3,8000be5e <_svfprintf_r+0xde2>
8000be4a:	60 c4       	mov.a %a4,%d12
8000be4c:	60 b5       	mov.a %a5,%d11
8000be4e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000be52:	6d 00 f2 0b 	call 8000d636 <__ssprint_r>
8000be56:	df 02 de 81 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000be5a:	d9 af 10 20 	lea %a15,[%sp]144
8000be5e:	1b 0f ff ff 	addi %d15,%d15,-16
8000be62:	3c de       	j 8000be1e <_svfprintf_r+0xda2>
8000be64:	68 1f       	st.w [%a15]4,%d15
8000be66:	12 54       	add %d4,%d15,%d5
8000be68:	9a 13       	add %d15,%d3,1
8000be6a:	78 18       	st.w [%sp]96,%d15
8000be6c:	59 a4 24 10 	st.w [%sp]100,%d4
8000be70:	8b 8f 80 f2 	ge %d15,%d15,8
8000be74:	d9 ff 08 00 	lea %a15,[%a15]8
8000be78:	6e 0b       	jz %d15,8000be8e <_svfprintf_r+0xe12>
8000be7a:	60 c4       	mov.a %a4,%d12
8000be7c:	60 b5       	mov.a %a5,%d11
8000be7e:	d9 a6 1c 10 	lea %a6,[%sp]92
8000be82:	6d 00 da 0b 	call 8000d636 <__ssprint_r>
8000be86:	df 02 c6 81 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000be8a:	d9 af 10 20 	lea %a15,[%sp]144
8000be8e:	58 05       	ld.w %d15,[%sp]20
8000be90:	68 0d       	st.w [%a15]0,%d13
8000be92:	68 1f       	st.w [%a15]4,%d15
8000be94:	19 a2 14 00 	ld.w %d2,[%sp]20
8000be98:	58 19       	ld.w %d15,[%sp]100
8000be9a:	1d 00 4d 01 	j 8000c134 <_svfprintf_r+0x10b8>
8000be9e:	58 05       	ld.w %d15,[%sp]20
8000bea0:	74 ed       	st.w [%a14],%d13
8000bea2:	3f f3 6a 00 	jlt %d3,%d15,8000bf76 <_svfprintf_r+0xefa>
8000bea6:	02 f9       	mov %d9,%d15
8000bea8:	c2 18       	add %d8,1
8000beaa:	42 e9       	add %d9,%d14
8000beac:	59 a8 20 10 	st.w [%sp]96,%d8
8000beb0:	6c e1       	st.w [%a14]4,%d15
8000beb2:	59 a9 24 10 	st.w [%sp]100,%d9
8000beb6:	8b 88 80 82 	ge %d8,%d8,8
8000beba:	d9 ef 08 00 	lea %a15,[%a14]8
8000bebe:	76 8b       	jz %d8,8000bed4 <_svfprintf_r+0xe58>
8000bec0:	60 c4       	mov.a %a4,%d12
8000bec2:	60 b5       	mov.a %a5,%d11
8000bec4:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bec8:	6d 00 b7 0b 	call 8000d636 <__ssprint_r>
8000becc:	df 02 a3 81 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000bed0:	d9 af 10 20 	lea %a15,[%sp]144
8000bed4:	58 11       	ld.w %d15,[%sp]68
8000bed6:	19 a2 14 00 	ld.w %d2,[%sp]20
8000beda:	7b 00 00 88 	movh %d8,32768
8000bede:	a2 2f       	sub %d15,%d2
8000bee0:	1b 48 e6 80 	addi %d8,%d8,3684
8000bee4:	3b 00 01 90 	mov %d9,16
8000bee8:	bf 1f 3a 00 	jlt %d15,1,8000bf5c <_svfprintf_r+0xee0>
8000beec:	19 a5 24 10 	ld.w %d5,[%sp]100
8000bef0:	19 a3 20 10 	ld.w %d3,[%sp]96
8000bef4:	8b 1f 81 42 	ge %d4,%d15,17
8000bef8:	68 08       	st.w [%a15]0,%d8
8000befa:	df 04 1c 00 	jeq %d4,0,8000bf32 <_svfprintf_r+0xeb6>
8000befe:	c2 13       	add %d3,1
8000bf00:	1b 05 01 40 	addi %d4,%d5,16
8000bf04:	68 19       	st.w [%a15]4,%d9
8000bf06:	59 a3 20 10 	st.w [%sp]96,%d3
8000bf0a:	59 a4 24 10 	st.w [%sp]100,%d4
8000bf0e:	8b 83 80 32 	ge %d3,%d3,8
8000bf12:	d9 ff 08 00 	lea %a15,[%a15]8
8000bf16:	76 3b       	jz %d3,8000bf2c <_svfprintf_r+0xeb0>
8000bf18:	60 c4       	mov.a %a4,%d12
8000bf1a:	60 b5       	mov.a %a5,%d11
8000bf1c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bf20:	6d 00 8b 0b 	call 8000d636 <__ssprint_r>
8000bf24:	df 02 77 81 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000bf28:	d9 af 10 20 	lea %a15,[%sp]144
8000bf2c:	1b 0f ff ff 	addi %d15,%d15,-16
8000bf30:	3c de       	j 8000beec <_svfprintf_r+0xe70>
8000bf32:	68 1f       	st.w [%a15]4,%d15
8000bf34:	12 54       	add %d4,%d15,%d5
8000bf36:	9a 13       	add %d15,%d3,1
8000bf38:	78 18       	st.w [%sp]96,%d15
8000bf3a:	59 a4 24 10 	st.w [%sp]100,%d4
8000bf3e:	8b 8f 80 f2 	ge %d15,%d15,8
8000bf42:	d9 ff 08 00 	lea %a15,[%a15]8
8000bf46:	6e 0b       	jz %d15,8000bf5c <_svfprintf_r+0xee0>
8000bf48:	60 c4       	mov.a %a4,%d12
8000bf4a:	60 b5       	mov.a %a5,%d11
8000bf4c:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bf50:	6d 00 73 0b 	call 8000d636 <__ssprint_r>
8000bf54:	df 02 5f 81 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000bf58:	d9 af 10 20 	lea %a15,[%sp]144
8000bf5c:	80 df       	mov.d %d15,%a13
8000bf5e:	6f 0f f6 00 	jz.t %d15,0,8000c14a <_svfprintf_r+0x10ce>
8000bf62:	99 a3 34 00 	ld.a %a3,[%sp]52
8000bf66:	58 08       	ld.w %d15,[%sp]32
8000bf68:	19 a2 20 00 	ld.w %d2,[%sp]32
8000bf6c:	68 1f       	st.w [%a15]4,%d15
8000bf6e:	e8 03       	st.a [%a15]0,%a3
8000bf70:	58 19       	ld.w %d15,[%sp]100
8000bf72:	1d 00 e1 00 	j 8000c134 <_svfprintf_r+0x10b8>
8000bf76:	c2 18       	add %d8,1
8000bf78:	59 e3 04 00 	st.w [%a14]4,%d3
8000bf7c:	42 e3       	add %d3,%d14
8000bf7e:	59 a8 20 10 	st.w [%sp]96,%d8
8000bf82:	59 a3 24 10 	st.w [%sp]100,%d3
8000bf86:	8b 88 80 82 	ge %d8,%d8,8
8000bf8a:	d9 ef 08 00 	lea %a15,[%a14]8
8000bf8e:	76 8b       	jz %d8,8000bfa4 <_svfprintf_r+0xf28>
8000bf90:	60 c4       	mov.a %a4,%d12
8000bf92:	60 b5       	mov.a %a5,%d11
8000bf94:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bf98:	6d 00 4f 0b 	call 8000d636 <__ssprint_r>
8000bf9c:	df 02 3b 81 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000bfa0:	d9 af 10 20 	lea %a15,[%sp]144
8000bfa4:	58 08       	ld.w %d15,[%sp]32
8000bfa6:	19 a2 20 00 	ld.w %d2,[%sp]32
8000bfaa:	68 1f       	st.w [%a15]4,%d15
8000bfac:	58 19       	ld.w %d15,[%sp]100
8000bfae:	99 a3 34 00 	ld.a %a3,[%sp]52
8000bfb2:	42 2f       	add %d15,%d2
8000bfb4:	78 19       	st.w [%sp]100,%d15
8000bfb6:	58 18       	ld.w %d15,[%sp]96
8000bfb8:	99 ae 04 10 	ld.a %a14,[%sp]68
8000bfbc:	c2 1f       	add %d15,1
8000bfbe:	60 d2       	mov.a %a2,%d13
8000bfc0:	e8 03       	st.a [%a15]0,%a3
8000bfc2:	78 18       	st.w [%sp]96,%d15
8000bfc4:	8b 8f 80 f2 	ge %d15,%d15,8
8000bfc8:	30 2e       	add.a %a14,%a2
8000bfca:	d9 ff 08 00 	lea %a15,[%a15]8
8000bfce:	6e 0b       	jz %d15,8000bfe4 <_svfprintf_r+0xf68>
8000bfd0:	60 c4       	mov.a %a4,%d12
8000bfd2:	60 b5       	mov.a %a5,%d11
8000bfd4:	d9 a6 1c 10 	lea %a6,[%sp]92
8000bfd8:	6d 00 2f 0b 	call 8000d636 <__ssprint_r>
8000bfdc:	df 02 1b 81 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000bfe0:	d9 af 10 20 	lea %a15,[%sp]144
8000bfe4:	19 a2 14 00 	ld.w %d2,[%sp]20
8000bfe8:	58 11       	ld.w %d15,[%sp]68
8000bfea:	e8 0e       	st.a [%a15]0,%a14
8000bfec:	5a f2       	sub %d15,%d2,%d15
8000bfee:	68 1f       	st.w [%a15]4,%d15
8000bff0:	19 a2 24 10 	ld.w %d2,[%sp]100
8000bff4:	1d 00 a0 00 	j 8000c134 <_svfprintf_r+0x10b8>
8000bff8:	c2 18       	add %d8,1
8000bffa:	82 13       	mov %d3,1
8000bffc:	1b 1e 00 90 	addi %d9,%d14,1
8000c000:	58 05       	ld.w %d15,[%sp]20
8000c002:	59 a8 20 10 	st.w [%sp]96,%d8
8000c006:	74 ed       	st.w [%a14],%d13
8000c008:	59 e3 04 00 	st.w [%a14]4,%d3
8000c00c:	59 a9 24 10 	st.w [%sp]100,%d9
8000c010:	8b 88 80 82 	ge %d8,%d8,8
8000c014:	ff 2f 05 00 	jge %d15,2,8000c01e <_svfprintf_r+0xfa2>
8000c018:	80 d2       	mov.d %d2,%a13
8000c01a:	6f 02 81 00 	jz.t %d2,0,8000c11c <_svfprintf_r+0x10a0>
8000c01e:	d9 ef 08 00 	lea %a15,[%a14]8
8000c022:	76 8b       	jz %d8,8000c038 <_svfprintf_r+0xfbc>
8000c024:	60 c4       	mov.a %a4,%d12
8000c026:	60 b5       	mov.a %a5,%d11
8000c028:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c02c:	6d 00 05 0b 	call 8000d636 <__ssprint_r>
8000c030:	df 02 f1 80 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000c034:	d9 af 10 20 	lea %a15,[%sp]144
8000c038:	58 08       	ld.w %d15,[%sp]32
8000c03a:	19 a2 20 00 	ld.w %d2,[%sp]32
8000c03e:	68 1f       	st.w [%a15]4,%d15
8000c040:	58 19       	ld.w %d15,[%sp]100
8000c042:	99 a3 34 00 	ld.a %a3,[%sp]52
8000c046:	42 2f       	add %d15,%d2
8000c048:	78 19       	st.w [%sp]100,%d15
8000c04a:	58 18       	ld.w %d15,[%sp]96
8000c04c:	e8 03       	st.a [%a15]0,%a3
8000c04e:	c2 1f       	add %d15,1
8000c050:	78 18       	st.w [%sp]96,%d15
8000c052:	8b 8f 80 f2 	ge %d15,%d15,8
8000c056:	d9 ff 08 00 	lea %a15,[%a15]8
8000c05a:	6e 0b       	jz %d15,8000c070 <_svfprintf_r+0xff4>
8000c05c:	60 c4       	mov.a %a4,%d12
8000c05e:	60 b5       	mov.a %a5,%d11
8000c060:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c064:	6d 00 e9 0a 	call 8000d636 <__ssprint_r>
8000c068:	df 02 d5 80 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000c06c:	d9 af 10 20 	lea %a15,[%sp]144
8000c070:	d2 06       	mov %e6,0
8000c072:	19 a4 2c 00 	ld.w %d4,[%sp]44
8000c076:	19 a5 30 00 	ld.w %d5,[%sp]48
8000c07a:	6d 00 03 0e 	call 8000dc80 <__nedf2>
8000c07e:	58 05       	ld.w %d15,[%sp]20
8000c080:	c2 ff       	add %d15,-1
8000c082:	76 2c       	jz %d2,8000c09a <_svfprintf_r+0x101e>
8000c084:	19 a2 24 10 	ld.w %d2,[%sp]100
8000c088:	60 de       	mov.a %a14,%d13
8000c08a:	68 1f       	st.w [%a15]4,%d15
8000c08c:	42 2f       	add %d15,%d2
8000c08e:	78 19       	st.w [%sp]100,%d15
8000c090:	58 18       	ld.w %d15,[%sp]96
8000c092:	b0 1e       	add.a %a14,1
8000c094:	e8 0e       	st.a [%a15]0,%a14
8000c096:	c2 1f       	add %d15,1
8000c098:	3c 31       	j 8000c0fa <_svfprintf_r+0x107e>
8000c09a:	7b 00 00 88 	movh %d8,32768
8000c09e:	1b 48 e6 80 	addi %d8,%d8,3684
8000c0a2:	3b 00 01 90 	mov %d9,16
8000c0a6:	bf 1f 3f 00 	jlt %d15,1,8000c124 <_svfprintf_r+0x10a8>
8000c0aa:	19 a5 24 10 	ld.w %d5,[%sp]100
8000c0ae:	19 a3 20 10 	ld.w %d3,[%sp]96
8000c0b2:	8b 1f 81 42 	ge %d4,%d15,17
8000c0b6:	68 08       	st.w [%a15]0,%d8
8000c0b8:	df 04 1c 00 	jeq %d4,0,8000c0f0 <_svfprintf_r+0x1074>
8000c0bc:	c2 13       	add %d3,1
8000c0be:	1b 05 01 40 	addi %d4,%d5,16
8000c0c2:	68 19       	st.w [%a15]4,%d9
8000c0c4:	59 a3 20 10 	st.w [%sp]96,%d3
8000c0c8:	59 a4 24 10 	st.w [%sp]100,%d4
8000c0cc:	8b 83 80 32 	ge %d3,%d3,8
8000c0d0:	d9 ff 08 00 	lea %a15,[%a15]8
8000c0d4:	76 3b       	jz %d3,8000c0ea <_svfprintf_r+0x106e>
8000c0d6:	60 c4       	mov.a %a4,%d12
8000c0d8:	60 b5       	mov.a %a5,%d11
8000c0da:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c0de:	6d 00 ac 0a 	call 8000d636 <__ssprint_r>
8000c0e2:	df 02 98 80 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000c0e6:	d9 af 10 20 	lea %a15,[%sp]144
8000c0ea:	1b 0f ff ff 	addi %d15,%d15,-16
8000c0ee:	3c de       	j 8000c0aa <_svfprintf_r+0x102e>
8000c0f0:	12 54       	add %d4,%d15,%d5
8000c0f2:	68 1f       	st.w [%a15]4,%d15
8000c0f4:	59 a4 24 10 	st.w [%sp]100,%d4
8000c0f8:	9a 13       	add %d15,%d3,1
8000c0fa:	78 18       	st.w [%sp]96,%d15
8000c0fc:	8b 8f 80 f2 	ge %d15,%d15,8
8000c100:	d9 ff 08 00 	lea %a15,[%a15]8
8000c104:	6e 10       	jz %d15,8000c124 <_svfprintf_r+0x10a8>
8000c106:	60 c4       	mov.a %a4,%d12
8000c108:	60 b5       	mov.a %a5,%d11
8000c10a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c10e:	6d 00 94 0a 	call 8000d636 <__ssprint_r>
8000c112:	df 02 80 80 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000c116:	d9 af 10 20 	lea %a15,[%sp]144
8000c11a:	3c 05       	j 8000c124 <_svfprintf_r+0x10a8>
8000c11c:	df 08 f5 ff 	jne %d8,0,8000c106 <_svfprintf_r+0x108a>
8000c120:	d9 ef 08 00 	lea %a15,[%a14]8
8000c124:	58 0e       	ld.w %d15,[%sp]56
8000c126:	d9 a3 0d 10 	lea %a3,[%sp]77
8000c12a:	68 1f       	st.w [%a15]4,%d15
8000c12c:	19 a2 38 00 	ld.w %d2,[%sp]56
8000c130:	58 19       	ld.w %d15,[%sp]100
8000c132:	e8 03       	st.a [%a15]0,%a3
8000c134:	42 2f       	add %d15,%d2
8000c136:	78 19       	st.w [%sp]100,%d15
8000c138:	58 18       	ld.w %d15,[%sp]96
8000c13a:	c2 1f       	add %d15,1
8000c13c:	78 18       	st.w [%sp]96,%d15
8000c13e:	8b 8f 80 f2 	ge %d15,%d15,8
8000c142:	df 0f 8d fd 	jne %d15,0,8000bc5c <_svfprintf_r+0xbe0>
8000c146:	d9 ff 08 00 	lea %a15,[%a15]8
8000c14a:	80 df       	mov.d %d15,%a13
8000c14c:	ae 2d       	jnz.t %d15,2,8000c166 <_svfprintf_r+0x10ea>
8000c14e:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000c152:	0b 2a a0 f1 	max %d15,%d10,%d2
8000c156:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c15a:	42 f2       	add %d2,%d15
8000c15c:	58 19       	ld.w %d15,[%sp]100
8000c15e:	59 a2 28 00 	st.w [%sp]40,%d2
8000c162:	6e 49       	jz %d15,8000c1f4 <_svfprintf_r+0x1178>
8000c164:	3c 40       	j 8000c1e4 <_svfprintf_r+0x1168>
8000c166:	58 07       	ld.w %d15,[%sp]28
8000c168:	3b 00 01 80 	mov %d8,16
8000c16c:	a2 af       	sub %d15,%d10
8000c16e:	bf 1f f0 7f 	jlt %d15,1,8000c14e <_svfprintf_r+0x10d2>
8000c172:	91 00 00 28 	movh.a %a2,32768
8000c176:	d9 22 f4 90 	lea %a2,[%a2]3700 <80000e74 <blanks.4035>>
8000c17a:	19 a5 24 10 	ld.w %d5,[%sp]100 <80000e74 <blanks.4035>>
8000c17e:	19 a3 20 10 	ld.w %d3,[%sp]96 <80000e74 <blanks.4035>>
8000c182:	8b 1f 81 42 	ge %d4,%d15,17
8000c186:	e8 02       	st.a [%a15]0,%a2
8000c188:	df 04 1c 00 	jeq %d4,0,8000c1c0 <_svfprintf_r+0x1144>
8000c18c:	c2 13       	add %d3,1
8000c18e:	1b 05 01 40 	addi %d4,%d5,16
8000c192:	68 18       	st.w [%a15]4,%d8
8000c194:	59 a3 20 10 	st.w [%sp]96,%d3
8000c198:	59 a4 24 10 	st.w [%sp]100,%d4
8000c19c:	8b 83 80 32 	ge %d3,%d3,8
8000c1a0:	d9 ff 08 00 	lea %a15,[%a15]8
8000c1a4:	76 3b       	jz %d3,8000c1ba <_svfprintf_r+0x113e>
8000c1a6:	60 c4       	mov.a %a4,%d12
8000c1a8:	60 b5       	mov.a %a5,%d11
8000c1aa:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c1ae:	6d 00 44 0a 	call 8000d636 <__ssprint_r>
8000c1b2:	df 02 30 80 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000c1b6:	d9 af 10 20 	lea %a15,[%sp]144
8000c1ba:	1b 0f ff ff 	addi %d15,%d15,-16
8000c1be:	3c da       	j 8000c172 <_svfprintf_r+0x10f6>
8000c1c0:	12 54       	add %d4,%d15,%d5
8000c1c2:	68 1f       	st.w [%a15]4,%d15
8000c1c4:	9a 13       	add %d15,%d3,1
8000c1c6:	78 18       	st.w [%sp]96,%d15
8000c1c8:	59 a4 24 10 	st.w [%sp]100,%d4
8000c1cc:	8b 8f 40 f2 	lt %d15,%d15,8
8000c1d0:	ee bf       	jnz %d15,8000c14e <_svfprintf_r+0x10d2>
8000c1d2:	60 c4       	mov.a %a4,%d12
8000c1d4:	60 b5       	mov.a %a5,%d11
8000c1d6:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c1da:	6d 00 2e 0a 	call 8000d636 <__ssprint_r>
8000c1de:	df 02 b8 7f 	jeq %d2,0,8000c14e <_svfprintf_r+0x10d2>
8000c1e2:	3c 18       	j 8000c212 <_svfprintf_r+0x1196>
8000c1e4:	60 c4       	mov.a %a4,%d12
8000c1e6:	60 b5       	mov.a %a5,%d11
8000c1e8:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c1ec:	6d 00 25 0a 	call 8000d636 <__ssprint_r>
8000c1f0:	df 02 11 80 	jne %d2,0,8000c212 <_svfprintf_r+0x1196>
8000c1f4:	82 0f       	mov %d15,0
8000c1f6:	78 18       	st.w [%sp]96,%d15
8000c1f8:	40 cf       	mov.aa %a15,%a12
8000c1fa:	d9 ae 10 20 	lea %a14,[%sp]144
8000c1fe:	1d ff 77 f7 	j 8000b0ec <_svfprintf_r+0x70>
8000c202:	58 19       	ld.w %d15,[%sp]100
8000c204:	6e 07       	jz %d15,8000c212 <_svfprintf_r+0x1196>
8000c206:	60 c4       	mov.a %a4,%d12
8000c208:	60 b5       	mov.a %a5,%d11
8000c20a:	d9 a6 1c 10 	lea %a6,[%sp]92
8000c20e:	6d 00 14 0a 	call 8000d636 <__ssprint_r>
8000c212:	60 b3       	mov.a %a3,%d11
8000c214:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c218:	8c 36       	ld.h %d15,[%a3]12
8000c21a:	16 40       	and %d15,64
8000c21c:	aa f2       	cmov %d2,%d15,-1
8000c21e:	00 90       	ret 

8000c220 <quorem>:
8000c220:	19 58 10 00 	ld.w %d8,[%a5]16
8000c224:	4c 44       	ld.w %d15,[%a4]16
8000c226:	82 02       	mov %d2,0
8000c228:	3f 8f 88 00 	jlt %d15,%d8,8000c338 <quorem+0x118>
8000c22c:	c2 f8       	add %d8,-1
8000c22e:	80 4f       	mov.d %d15,%a4
8000c230:	8f 28 00 20 	sh %d2,%d8,2
8000c234:	60 2f       	mov.a %a15,%d2
8000c236:	1b 4f 01 90 	addi %d9,%d15,20
8000c23a:	d9 5c 14 00 	lea %a12,[%a5]20
8000c23e:	01 fc 10 d0 	add.a %a13,%a12,%a15
8000c242:	01 f9 00 f6 	addsc.a %a15,%a15,%d9,0
8000c246:	54 dc       	ld.w %d12,[%a13]
8000c248:	4c f0       	ld.w %d15,[%a15]0
8000c24a:	c2 1c       	add %d12,1
8000c24c:	4b cf 11 c2 	div.u %e12,%d15,%d12
8000c250:	02 ca       	mov %d10,%d12
8000c252:	df 0c 3d 00 	jeq %d12,0,8000c2cc <quorem+0xac>
8000c256:	60 96       	mov.a %a6,%d9
8000c258:	40 c2       	mov.aa %a2,%a12
8000c25a:	82 05       	mov %d5,0
8000c25c:	82 06       	mov %d6,0
8000c25e:	54 22       	ld.w %d2,[%a2]
8000c260:	40 63       	mov.aa %a3,%a6
8000c262:	b7 02 10 38 	insert %d3,%d2,0,16,16
8000c266:	8f 02 1f 20 	sh %d2,%d2,-16
8000c26a:	03 a3 0a 35 	madd %d3,%d5,%d3,%d10
8000c26e:	b0 42       	add.a %a2,4
8000c270:	8f 03 1f 40 	sh %d4,%d3,-16
8000c274:	03 a2 0a 24 	madd %d2,%d4,%d2,%d10
8000c278:	44 34       	ld.w %d4,[%a3+]
8000c27a:	b7 03 10 38 	insert %d3,%d3,0,16,16
8000c27e:	b7 04 10 f8 	insert %d15,%d4,0,16,16
8000c282:	8f 02 1f 50 	sh %d5,%d2,-16
8000c286:	42 f6       	add %d6,%d15
8000c288:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000c28c:	0b 36 80 30 	sub %d3,%d6,%d3
8000c290:	8f 04 1f 40 	sh %d4,%d4,-16
8000c294:	8f 03 3f f0 	sha %d15,%d3,-16
8000c298:	0b 24 80 20 	sub %d2,%d4,%d2
8000c29c:	42 f2       	add %d2,%d15
8000c29e:	37 23 10 38 	insert %d3,%d3,%d2,16,16
8000c2a2:	8f 02 3f 60 	sha %d6,%d2,-16
8000c2a6:	80 2f       	mov.d %d15,%a2
8000c2a8:	80 d2       	mov.d %d2,%a13
8000c2aa:	74 63       	st.w [%a6],%d3
8000c2ac:	40 36       	mov.aa %a6,%a3
8000c2ae:	7f f2 d8 ff 	jge.u %d2,%d15,8000c25e <quorem+0x3e>
8000c2b2:	4c f0       	ld.w %d15,[%a15]0
8000c2b4:	ee 0c       	jnz %d15,8000c2cc <quorem+0xac>
8000c2b6:	b0 cf       	add.a %a15,-4
8000c2b8:	80 f2       	mov.d %d2,%a15
8000c2ba:	3f 29 05 80 	jlt.u %d9,%d2,8000c2c4 <quorem+0xa4>
8000c2be:	59 48 10 00 	st.w [%a4]16,%d8
8000c2c2:	3c 05       	j 8000c2cc <quorem+0xac>
8000c2c4:	4c f0       	ld.w %d15,[%a15]0
8000c2c6:	ee fc       	jnz %d15,8000c2be <quorem+0x9e>
8000c2c8:	c2 f8       	add %d8,-1
8000c2ca:	3c f6       	j 8000c2b6 <quorem+0x96>
8000c2cc:	40 4e       	mov.aa %a14,%a4
8000c2ce:	6d 00 b9 08 	call 8000d440 <__mcmp>
8000c2d2:	bf 02 32 00 	jlt %d2,0,8000c336 <quorem+0x116>
8000c2d6:	60 92       	mov.a %a2,%d9
8000c2d8:	1b 1c 00 a0 	addi %d10,%d12,1
8000c2dc:	82 04       	mov %d4,0
8000c2de:	40 2f       	mov.aa %a15,%a2
8000c2e0:	44 f3       	ld.w %d3,[%a15+]
8000c2e2:	54 c5       	ld.w %d5,[%a12]
8000c2e4:	b7 03 10 28 	insert %d2,%d3,0,16,16
8000c2e8:	8f 05 1f f0 	sh %d15,%d5,-16
8000c2ec:	42 42       	add %d2,%d4
8000c2ee:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000c2f2:	8f 03 1f 30 	sh %d3,%d3,-16
8000c2f6:	a2 42       	sub %d2,%d4
8000c2f8:	8f 02 3f 40 	sha %d4,%d2,-16
8000c2fc:	a2 f3       	sub %d3,%d15
8000c2fe:	42 43       	add %d3,%d4
8000c300:	8f 03 3f 40 	sha %d4,%d3,-16
8000c304:	b0 4c       	add.a %a12,4
8000c306:	37 32 10 38 	insert %d3,%d2,%d3,16,16
8000c30a:	80 df       	mov.d %d15,%a13
8000c30c:	80 c2       	mov.d %d2,%a12
8000c30e:	74 23       	st.w [%a2],%d3
8000c310:	40 f2       	mov.aa %a2,%a15
8000c312:	7f 2f e6 ff 	jge.u %d15,%d2,8000c2de <quorem+0xbe>
8000c316:	60 92       	mov.a %a2,%d9
8000c318:	01 28 02 f6 	addsc.a %a15,%a2,%d8,2
8000c31c:	4c f0       	ld.w %d15,[%a15]0
8000c31e:	ee 0c       	jnz %d15,8000c336 <quorem+0x116>
8000c320:	b0 cf       	add.a %a15,-4
8000c322:	80 f2       	mov.d %d2,%a15
8000c324:	3f 29 05 80 	jlt.u %d9,%d2,8000c32e <quorem+0x10e>
8000c328:	59 e8 10 00 	st.w [%a14]16,%d8
8000c32c:	3c 05       	j 8000c336 <quorem+0x116>
8000c32e:	4c f0       	ld.w %d15,[%a15]0
8000c330:	ee fc       	jnz %d15,8000c328 <quorem+0x108>
8000c332:	c2 f8       	add %d8,-1
8000c334:	3c f6       	j 8000c320 <quorem+0x100>
8000c336:	02 a2       	mov %d2,%d10
8000c338:	00 90       	ret 
	...

8000c33c <_dtoa_r>:
8000c33c:	20 58       	sub.a %sp,88
8000c33e:	b5 a5 08 10 	st.a [%sp]72,%a5
8000c342:	99 45 00 10 	ld.a %a5,[%a4]64
8000c346:	59 a6 1c 00 	st.w [%sp]28,%d6
8000c34a:	59 a7 28 00 	st.w [%sp]40,%d7
8000c34e:	b5 a7 38 00 	st.a [%sp]56,%a7
8000c352:	40 4d       	mov.aa %a13,%a4
8000c354:	0b 45 10 88 	mov %e8,%d5,%d4
8000c358:	40 6c       	mov.aa %a12,%a6
8000c35a:	0b 45 10 c8 	mov %e12,%d5,%d4
8000c35e:	bc 5e       	jz.a %a5,8000c37a <_dtoa_r+0x3e>
8000c360:	19 4f 04 10 	ld.w %d15,[%a4]68
8000c364:	82 12       	mov %d2,1
8000c366:	0f f2 00 20 	sh %d2,%d2,%d15
8000c36a:	6c 51       	st.w [%a5]4,%d15
8000c36c:	59 52 08 00 	st.w [%a5]8,%d2
8000c370:	82 0f       	mov %d15,0
8000c372:	6d 00 99 06 	call 8000d0a4 <_Bfree>
8000c376:	59 df 00 10 	st.w [%a13]64,%d15
8000c37a:	ce 96       	jgez %d9,8000c386 <_dtoa_r+0x4a>
8000c37c:	82 1f       	mov %d15,1
8000c37e:	6c c0       	st.w [%a12]0,%d15
8000c380:	b7 09 81 df 	insert %d13,%d9,0,31,1
8000c384:	3c 03       	j 8000c38a <_dtoa_r+0x4e>
8000c386:	82 0f       	mov %d15,0
8000c388:	6c c0       	st.w [%a12]0,%d15
8000c38a:	7b 00 ff 27 	movh %d2,32752
8000c38e:	26 d2       	and %d2,%d13
8000c390:	7b 00 ff 37 	movh %d3,32752
8000c394:	5f 32 22 80 	jne %d2,%d3,8000c3d8 <_dtoa_r+0x9c>
8000c398:	99 a3 08 10 	ld.a %a3,[%sp]72
8000c39c:	3b f0 70 22 	mov %d2,9999
8000c3a0:	91 00 00 f8 	movh.a %a15,32768
8000c3a4:	74 32       	st.w [%a3],%d2
8000c3a6:	d9 ff cd a0 	lea %a15,[%a15]3725 <80000e8d <blanks.4035+0x19>>
8000c3aa:	f6 c8       	jnz %d12,8000c3ba <_dtoa_r+0x7e>
8000c3ac:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000c3b0:	ee 05       	jnz %d15,8000c3ba <_dtoa_r+0x7e>
8000c3b2:	91 00 00 f8 	movh.a %a15,32768
8000c3b6:	d9 ff c4 a0 	lea %a15,[%a15]3716 <80000e84 <blanks.4035+0x10>>
8000c3ba:	99 a3 38 00 	ld.a %a3,[%sp]56 <80000e84 <blanks.4035+0x10>>
8000c3be:	40 f2       	mov.aa %a2,%a15
8000c3c0:	bd 03 26 06 	jz.a %a3,8000d00c <_dtoa_r+0xcd0>
8000c3c4:	80 ff       	mov.d %d15,%a15
8000c3c6:	79 f3 03 00 	ld.b %d3,[%a15]3 <80000003 <BootModeHeader0+0x3>>
8000c3ca:	1b 8f 00 20 	addi %d2,%d15,8
8000c3ce:	c2 3f       	add %d15,3
8000c3d0:	2b 2f 50 f3 	seln %d15,%d3,%d15,%d2
8000c3d4:	6c 30       	st.w [%a3]0,%d15
8000c3d6:	00 90       	ret 
8000c3d8:	0b cd 10 48 	mov %e4,%d13,%d12
8000c3dc:	d2 06       	mov %e6,0
8000c3de:	0b cd 10 88 	mov %e8,%d13,%d12
8000c3e2:	6d 00 2f 0c 	call 8000dc40 <__eqdf2>
8000c3e6:	df 02 13 80 	jne %d2,0,8000c40c <_dtoa_r+0xd0>
8000c3ea:	99 a3 08 10 	ld.a %a3,[%sp]72
8000c3ee:	d8 0e       	ld.a %a15,[%sp]56
8000c3f0:	82 1f       	mov %d15,1
8000c3f2:	91 00 00 28 	movh.a %a2,32768
8000c3f6:	6c 30       	st.w [%a3]0,%d15
8000c3f8:	d9 22 d1 a0 	lea %a2,[%a2]3729 <80000e91 <blanks.4035+0x1d>>
8000c3fc:	bd 0f 08 06 	jz.a %a15,8000d00c <_dtoa_r+0xcd0>
8000c400:	7b 00 00 f8 	movh %d15,32768
8000c404:	1b 2f e9 f0 	addi %d15,%d15,3730
8000c408:	68 0f       	st.w [%a15]0,%d15
8000c40a:	00 90       	ret 
8000c40c:	0b cd 10 48 	mov %e4,%d13,%d12
8000c410:	40 d4       	mov.aa %a4,%a13
8000c412:	d9 a5 14 10 	lea %a5,[%sp]84
8000c416:	d9 a6 10 10 	lea %a6,[%sp]80
8000c41a:	6d 00 99 08 	call 8000d54c <__d2b>
8000c41e:	37 0d 6b ba 	extr.u %d11,%d13,20,11
8000c422:	40 2e       	mov.aa %a14,%a2
8000c424:	19 aa 10 10 	ld.w %d10,[%sp]80
8000c428:	76 bd       	jz %d11,8000c442 <_dtoa_r+0x106>
8000c42a:	b7 09 0c fa 	insert %d15,%d9,0,20,12
8000c42e:	0b cd 10 48 	mov %e4,%d13,%d12
8000c432:	7b 00 ff 23 	movh %d2,16368
8000c436:	0f 2f a0 50 	or %d5,%d15,%d2
8000c43a:	1b 1b c0 bf 	addi %d11,%d11,-1023
8000c43e:	82 0f       	mov %d15,0
8000c440:	3c 22       	j 8000c484 <_dtoa_r+0x148>
8000c442:	19 ab 14 10 	ld.w %d11,[%sp]84
8000c446:	3b e0 be 4f 	mov %d4,-1042
8000c44a:	42 ab       	add %d11,%d10
8000c44c:	a2 b4       	sub %d4,%d11
8000c44e:	3b f0 be 2f 	mov %d2,-1041
8000c452:	0f 4c 00 40 	sh %d4,%d12,%d4
8000c456:	3f 2b 0f 00 	jlt %d11,%d2,8000c474 <_dtoa_r+0x138>
8000c45a:	1b 2b 41 30 	addi %d3,%d11,1042
8000c45e:	3b e0 c0 4f 	mov %d4,-1010
8000c462:	a2 b4       	sub %d4,%d11
8000c464:	8b 03 00 21 	rsub %d2,%d3,0
8000c468:	0f 2c 00 20 	sh %d2,%d12,%d2
8000c46c:	0f 4d 00 f0 	sh %d15,%d13,%d4
8000c470:	0f f2 a0 40 	or %d4,%d2,%d15
8000c474:	6d ff 7c f0 	call 8000a56c <__floatunsidf>
8000c478:	0b 23 10 48 	mov %e4,%d3,%d2
8000c47c:	9b 03 e1 5f 	addih %d5,%d3,65040
8000c480:	c2 fb       	add %d11,-1
8000c482:	82 1f       	mov %d15,1
8000c484:	b7 00 ab 69 	imask %e6,0,19,11
8000c488:	78 13       	st.w [%sp]76,%d15
8000c48a:	6d ff a2 ee 	call 8000a1ce <__subdf3>
8000c48e:	7b 30 fd 73 	movh %d7,16339
8000c492:	0b 23 10 48 	mov %e4,%d3,%d2
8000c496:	7b f0 36 66 	movh %d6,25455
8000c49a:	1b 77 7a 78 	addi %d7,%d7,-30809
8000c49e:	1b 16 36 64 	addi %d6,%d6,17249
8000c4a2:	6d ff b6 ee 	call 8000a20e <__muldf3>
8000c4a6:	7b 70 fc 73 	movh %d7,16327
8000c4aa:	0b 23 10 48 	mov %e4,%d3,%d2
8000c4ae:	7b 10 b6 68 	movh %d6,35681
8000c4b2:	1b 87 a2 78 	addi %d7,%d7,-30168
8000c4b6:	1b 36 8b 6c 	addi %d6,%d6,-14157
8000c4ba:	6d ff 6e ee 	call 8000a196 <__adddf3>
8000c4be:	02 b4       	mov %d4,%d11
8000c4c0:	0b 23 10 88 	mov %e8,%d3,%d2
8000c4c4:	6d ff 03 f0 	call 8000a4ca <__floatsidf>
8000c4c8:	7b 30 fd 73 	movh %d7,16339
8000c4cc:	0b 23 10 48 	mov %e4,%d3,%d2
8000c4d0:	7b f0 09 65 	movh %d6,20639
8000c4d4:	1b 37 41 74 	addi %d7,%d7,17427
8000c4d8:	1b b6 9f 67 	addi %d6,%d6,31227
8000c4dc:	6d ff 99 ee 	call 8000a20e <__muldf3>
8000c4e0:	0b 89 10 48 	mov %e4,%d9,%d8
8000c4e4:	0b 23 10 68 	mov %e6,%d3,%d2
8000c4e8:	6d ff 57 ee 	call 8000a196 <__adddf3>
8000c4ec:	0b 23 10 48 	mov %e4,%d3,%d2
8000c4f0:	0b 23 10 88 	mov %e8,%d3,%d2
8000c4f4:	6d 00 46 0c 	call 8000dd80 <__fixdfsi>
8000c4f8:	0b 89 10 48 	mov %e4,%d9,%d8
8000c4fc:	d2 06       	mov %e6,0
8000c4fe:	59 a2 08 00 	st.w [%sp]8,%d2
8000c502:	6d 00 1f 0c 	call 8000dd40 <__ltdf2>
8000c506:	ff 02 12 00 	jge %d2,0,8000c52a <_dtoa_r+0x1ee>
8000c50a:	19 a4 08 00 	ld.w %d4,[%sp]8
8000c50e:	6d ff de ef 	call 8000a4ca <__floatsidf>
8000c512:	0b 89 10 48 	mov %e4,%d9,%d8
8000c516:	0b 23 10 68 	mov %e6,%d3,%d2
8000c51a:	6d 00 b3 0b 	call 8000dc80 <__nedf2>
8000c51e:	19 a3 08 00 	ld.w %d3,[%sp]8
8000c522:	ab f3 1f 32 	cadd %d3,%d2,%d3,-1
8000c526:	59 a3 08 00 	st.w [%sp]8,%d3
8000c52a:	19 a2 08 00 	ld.w %d2,[%sp]8
8000c52e:	82 13       	mov %d3,1
8000c530:	8b 72 a1 f2 	ge.u %d15,%d2,23
8000c534:	59 a3 3c 00 	st.w [%sp]60,%d3
8000c538:	ee 18       	jnz %d15,8000c568 <_dtoa_r+0x22c>
8000c53a:	91 00 00 f8 	movh.a %a15,32768
8000c53e:	d9 ff f4 c0 	lea %a15,[%a15]3892 <80000f34 <__mprec_tens>>
8000c542:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000c546:	0b cd 10 68 	mov %e6,%d13,%d12
8000c54a:	09 f4 40 09 	ld.d %e4,[%a15]
8000c54e:	6d 00 b9 0b 	call 8000dcc0 <__gtdf2>
8000c552:	8e 28       	jlez %d2,8000c562 <_dtoa_r+0x226>
8000c554:	58 02       	ld.w %d15,[%sp]8
8000c556:	82 02       	mov %d2,0
8000c558:	c2 ff       	add %d15,-1
8000c55a:	78 02       	st.w [%sp]8,%d15
8000c55c:	59 a2 3c 00 	st.w [%sp]60,%d2
8000c560:	3c 04       	j 8000c568 <_dtoa_r+0x22c>
8000c562:	82 03       	mov %d3,0
8000c564:	59 a3 3c 00 	st.w [%sp]60,%d3
8000c568:	0b ba 80 b0 	sub %d11,%d10,%d11
8000c56c:	9a fb       	add %d15,%d11,-1
8000c56e:	82 02       	mov %d2,0
8000c570:	78 06       	st.w [%sp]24,%d15
8000c572:	59 a2 14 00 	st.w [%sp]20,%d2
8000c576:	ce f6       	jgez %d15,8000c582 <_dtoa_r+0x246>
8000c578:	32 5f       	rsub %d15
8000c57a:	82 03       	mov %d3,0
8000c57c:	78 05       	st.w [%sp]20,%d15
8000c57e:	59 a3 18 00 	st.w [%sp]24,%d3
8000c582:	58 02       	ld.w %d15,[%sp]8
8000c584:	0e fa       	jltz %d15,8000c598 <_dtoa_r+0x25c>
8000c586:	19 a2 18 00 	ld.w %d2,[%sp]24
8000c58a:	78 0d       	st.w [%sp]52,%d15
8000c58c:	42 f2       	add %d2,%d15
8000c58e:	82 0f       	mov %d15,0
8000c590:	59 a2 18 00 	st.w [%sp]24,%d2
8000c594:	78 08       	st.w [%sp]32,%d15
8000c596:	3c 0d       	j 8000c5b0 <_dtoa_r+0x274>
8000c598:	19 a2 14 00 	ld.w %d2,[%sp]20
8000c59c:	19 a3 08 00 	ld.w %d3,[%sp]8
8000c5a0:	82 0f       	mov %d15,0
8000c5a2:	a2 32       	sub %d2,%d3
8000c5a4:	32 53       	rsub %d3
8000c5a6:	59 a2 14 00 	st.w [%sp]20,%d2
8000c5aa:	59 a3 20 00 	st.w [%sp]32,%d3
8000c5ae:	78 0d       	st.w [%sp]52,%d15
8000c5b0:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000c5b4:	82 18       	mov %d8,1
8000c5b6:	ff a2 46 80 	jge.u %d2,10,8000c642 <_dtoa_r+0x306>
8000c5ba:	bf 62 06 00 	jlt %d2,6,8000c5c6 <_dtoa_r+0x28a>
8000c5be:	c2 c2       	add %d2,-4
8000c5c0:	59 a2 1c 00 	st.w [%sp]28,%d2
8000c5c4:	82 08       	mov %d8,0
8000c5c6:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000c5ca:	c2 e3       	add %d3,-2
8000c5cc:	ff 43 4b 80 	jge.u %d3,4,8000c662 <_dtoa_r+0x326>
8000c5d0:	91 10 00 f8 	movh.a %a15,32769
8000c5d4:	d9 ff 60 7c 	lea %a15,[%a15]-14880 <8000c5e0 <_dtoa_r+0x2a4>>
8000c5d8:	01 f3 02 f6 	addsc.a %a15,%a15,%d3,2
8000c5dc:	dc 0f       	ji %a15
8000c5de:	00 00       	nop 
8000c5e0:	1d 00 08 00 	j 8000c5f0 <_dtoa_r+0x2b4>
8000c5e4:	1d 00 1c 00 	j 8000c61c <_dtoa_r+0x2e0>
8000c5e8:	1d 00 08 00 	j 8000c5f8 <_dtoa_r+0x2bc>
8000c5ec:	1d 00 1c 00 	j 8000c624 <_dtoa_r+0x2e8>
8000c5f0:	82 03       	mov %d3,0
8000c5f2:	59 a3 24 00 	st.w [%sp]36,%d3
8000c5f6:	3c 03       	j 8000c5fc <_dtoa_r+0x2c0>
8000c5f8:	82 1f       	mov %d15,1
8000c5fa:	78 09       	st.w [%sp]36,%d15
8000c5fc:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c600:	59 a2 2c 00 	st.w [%sp]44,%d2
8000c604:	59 a2 10 00 	st.w [%sp]16,%d2
8000c608:	02 23       	mov %d3,%d2
8000c60a:	ff 12 38 00 	jge %d2,1,8000c67a <_dtoa_r+0x33e>
8000c60e:	82 13       	mov %d3,1
8000c610:	82 1f       	mov %d15,1
8000c612:	59 a3 2c 00 	st.w [%sp]44,%d3
8000c616:	78 04       	st.w [%sp]16,%d15
8000c618:	82 12       	mov %d2,1
8000c61a:	3c 21       	j 8000c65c <_dtoa_r+0x320>
8000c61c:	82 03       	mov %d3,0
8000c61e:	59 a3 24 00 	st.w [%sp]36,%d3
8000c622:	3c 03       	j 8000c628 <_dtoa_r+0x2ec>
8000c624:	82 1f       	mov %d15,1
8000c626:	78 09       	st.w [%sp]36,%d15
8000c628:	19 a3 08 00 	ld.w %d3,[%sp]8
8000c62c:	19 a2 28 00 	ld.w %d2,[%sp]40
8000c630:	42 32       	add %d2,%d3
8000c632:	59 a2 2c 00 	st.w [%sp]44,%d2
8000c636:	c2 12       	add %d2,1
8000c638:	59 a2 10 00 	st.w [%sp]16,%d2
8000c63c:	8b 12 40 33 	max %d3,%d2,1
8000c640:	3c 1d       	j 8000c67a <_dtoa_r+0x33e>
8000c642:	82 0f       	mov %d15,0
8000c644:	82 12       	mov %d2,1
8000c646:	82 f3       	mov %d3,-1
8000c648:	78 07       	st.w [%sp]28,%d15
8000c64a:	82 ff       	mov %d15,-1
8000c64c:	59 a2 24 00 	st.w [%sp]36,%d2
8000c650:	59 a3 2c 00 	st.w [%sp]44,%d3
8000c654:	78 04       	st.w [%sp]16,%d15
8000c656:	3b 20 01 30 	mov %d3,18
8000c65a:	82 02       	mov %d2,0
8000c65c:	59 a2 28 00 	st.w [%sp]40,%d2
8000c660:	3c 0d       	j 8000c67a <_dtoa_r+0x33e>
8000c662:	82 ff       	mov %d15,-1
8000c664:	82 13       	mov %d3,1
8000c666:	78 0b       	st.w [%sp]44,%d15
8000c668:	82 f2       	mov %d2,-1
8000c66a:	82 0f       	mov %d15,0
8000c66c:	59 a3 24 00 	st.w [%sp]36,%d3
8000c670:	59 a2 10 00 	st.w [%sp]16,%d2
8000c674:	3b 20 01 30 	mov %d3,18
8000c678:	78 0a       	st.w [%sp]40,%d15
8000c67a:	82 05       	mov %d5,0
8000c67c:	59 d5 04 10 	st.w [%a13]68,%d5
8000c680:	82 45       	mov %d5,4
8000c682:	1b 45 01 00 	addi %d0,%d5,20
8000c686:	3f 03 09 80 	jlt.u %d3,%d0,8000c698 <_dtoa_r+0x35c>
8000c68a:	19 d0 04 10 	ld.w %d0,[%a13]68
8000c68e:	06 15       	sh %d5,1
8000c690:	c2 10       	add %d0,1
8000c692:	59 d0 04 10 	st.w [%a13]68,%d0
8000c696:	3c f6       	j 8000c682 <_dtoa_r+0x346>
8000c698:	40 d4       	mov.aa %a4,%a13
8000c69a:	19 d4 04 10 	ld.w %d4,[%a13]68
8000c69e:	6d 00 d8 04 	call 8000d04e <_Balloc>
8000c6a2:	19 a2 10 00 	ld.w %d2,[%sp]16
8000c6a6:	b5 a2 0c 00 	st.a [%sp]12,%a2
8000c6aa:	8b f2 60 32 	lt.u %d3,%d2,15
8000c6ae:	b5 d2 00 10 	st.a [%a13]64,%a2
8000c6b2:	26 38       	and %d8,%d3
8000c6b4:	df 08 97 01 	jeq %d8,0,8000c9e2 <_dtoa_r+0x6a6>
8000c6b8:	19 a3 08 00 	ld.w %d3,[%sp]8
8000c6bc:	89 ac 40 19 	st.d [%sp]64,%e12
8000c6c0:	bf 13 3f 00 	jlt %d3,1,8000c73e <_dtoa_r+0x402>
8000c6c4:	91 00 00 f8 	movh.a %a15,32768
8000c6c8:	8f f3 00 31 	and %d3,%d3,15
8000c6cc:	d9 ff f4 c0 	lea %a15,[%a15]3892 <80000f34 <__mprec_tens>>
8000c6d0:	19 ae 08 00 	ld.w %d14,[%sp]8 <80000f34 <__mprec_tens>>
8000c6d4:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000c6d8:	86 ce       	sha %d14,-4
8000c6da:	09 f8 40 09 	ld.d %e8,[%a15]
8000c6de:	82 2a       	mov %d10,2
8000c6e0:	6f 4e 11 00 	jz.t %d14,4,8000c702 <_dtoa_r+0x3c6>
8000c6e4:	91 00 00 f8 	movh.a %a15,32768
8000c6e8:	0b cd 10 48 	mov %e4,%d13,%d12
8000c6ec:	d9 ff cc c0 	lea %a15,[%a15]3852 <80000f0c <__mprec_bigtens>>
8000c6f0:	09 f6 60 09 	ld.d %e6,[%a15]32 <80000020 <_start>>
8000c6f4:	6d ff 5f ee 	call 8000a3b2 <__divdf3>
8000c6f8:	0b 23 10 c8 	mov %e12,%d3,%d2
8000c6fc:	8f fe 00 e1 	and %d14,%d14,15
8000c700:	82 3a       	mov %d10,3
8000c702:	7b 00 00 b8 	movh %d11,32768
8000c706:	82 0f       	mov %d15,0
8000c708:	1b cb f0 b0 	addi %d11,%d11,3852
8000c70c:	df 0e 12 00 	jeq %d14,0,8000c730 <_dtoa_r+0x3f4>
8000c710:	6f 0e 0d 00 	jz.t %d14,0,8000c72a <_dtoa_r+0x3ee>
8000c714:	60 b2       	mov.a %a2,%d11
8000c716:	d0 2f       	addsc.a %a15,%a2,%d15,3
8000c718:	0b 89 10 48 	mov %e4,%d9,%d8
8000c71c:	09 f6 40 09 	ld.d %e6,[%a15]
8000c720:	6d ff 77 ed 	call 8000a20e <__muldf3>
8000c724:	0b 23 10 88 	mov %e8,%d3,%d2
8000c728:	c2 1a       	add %d10,1
8000c72a:	86 fe       	sha %d14,-1
8000c72c:	c2 1f       	add %d15,1
8000c72e:	3c ef       	j 8000c70c <_dtoa_r+0x3d0>
8000c730:	0b cd 10 48 	mov %e4,%d13,%d12
8000c734:	0b 89 10 68 	mov %e6,%d9,%d8
8000c738:	6d ff 3d ee 	call 8000a3b2 <__divdf3>
8000c73c:	3c 2c       	j 8000c794 <_dtoa_r+0x458>
8000c73e:	19 a8 08 00 	ld.w %d8,[%sp]8
8000c742:	82 2a       	mov %d10,2
8000c744:	32 58       	rsub %d8
8000c746:	df 08 29 00 	jeq %d8,0,8000c798 <_dtoa_r+0x45c>
8000c74a:	91 00 00 f8 	movh.a %a15,32768
8000c74e:	8f f8 00 31 	and %d3,%d8,15
8000c752:	d9 ff f4 c0 	lea %a15,[%a15]3892 <80000f34 <__mprec_tens>>
8000c756:	01 f3 03 f6 	addsc.a %a15,%a15,%d3,3
8000c75a:	09 a4 40 19 	ld.d %e4,[%sp]64
8000c75e:	09 f6 40 09 	ld.d %e6,[%a15]
8000c762:	7b 00 00 c8 	movh %d12,32768
8000c766:	6d ff 54 ed 	call 8000a20e <__muldf3>
8000c76a:	82 09       	mov %d9,0
8000c76c:	86 c8       	sha %d8,-4
8000c76e:	1b cc f0 c0 	addi %d12,%d12,3852
8000c772:	df 08 11 00 	jeq %d8,0,8000c794 <_dtoa_r+0x458>
8000c776:	6f 08 0c 00 	jz.t %d8,0,8000c78e <_dtoa_r+0x452>
8000c77a:	60 c3       	mov.a %a3,%d12
8000c77c:	01 39 03 f6 	addsc.a %a15,%a3,%d9,3
8000c780:	0b 23 10 48 	mov %e4,%d3,%d2
8000c784:	09 f6 40 09 	ld.d %e6,[%a15]
8000c788:	c2 1a       	add %d10,1
8000c78a:	6d ff 42 ed 	call 8000a20e <__muldf3>
8000c78e:	86 f8       	sha %d8,-1
8000c790:	c2 19       	add %d9,1
8000c792:	3c f0       	j 8000c772 <_dtoa_r+0x436>
8000c794:	0b 23 10 c8 	mov %e12,%d3,%d2
8000c798:	19 a2 3c 00 	ld.w %d2,[%sp]60
8000c79c:	df 02 23 00 	jeq %d2,0,8000c7e2 <_dtoa_r+0x4a6>
8000c7a0:	0b cd 10 48 	mov %e4,%d13,%d12
8000c7a4:	b7 00 2a 6a 	imask %e6,0,20,10
8000c7a8:	6d 00 cc 0a 	call 8000dd40 <__ltdf2>
8000c7ac:	ff 02 20 00 	jge %d2,0,8000c7ec <_dtoa_r+0x4b0>
8000c7b0:	19 a3 10 00 	ld.w %d3,[%sp]16
8000c7b4:	df 03 21 00 	jeq %d3,0,8000c7f6 <_dtoa_r+0x4ba>
8000c7b8:	58 0b       	ld.w %d15,[%sp]44
8000c7ba:	bf 1f 12 01 	jlt %d15,1,8000c9de <_dtoa_r+0x6a2>
8000c7be:	19 a2 08 00 	ld.w %d2,[%sp]8
8000c7c2:	0b cd 10 48 	mov %e4,%d13,%d12
8000c7c6:	c2 f2       	add %d2,-1
8000c7c8:	82 06       	mov %d6,0
8000c7ca:	7b 40 02 74 	movh %d7,16420
8000c7ce:	59 a2 30 00 	st.w [%sp]48,%d2
8000c7d2:	6d ff 1e ed 	call 8000a20e <__muldf3>
8000c7d6:	c2 1a       	add %d10,1
8000c7d8:	0b 23 10 c8 	mov %e12,%d3,%d2
8000c7dc:	99 ac 2c 00 	ld.a %a12,[%sp]44
8000c7e0:	3c 10       	j 8000c800 <_dtoa_r+0x4c4>
8000c7e2:	19 a3 08 00 	ld.w %d3,[%sp]8
8000c7e6:	59 a3 30 00 	st.w [%sp]48,%d3
8000c7ea:	3c 03       	j 8000c7f0 <_dtoa_r+0x4b4>
8000c7ec:	58 02       	ld.w %d15,[%sp]8
8000c7ee:	78 0c       	st.w [%sp]48,%d15
8000c7f0:	99 ac 10 00 	ld.a %a12,[%sp]16
8000c7f4:	3c 06       	j 8000c800 <_dtoa_r+0x4c4>
8000c7f6:	19 a2 08 00 	ld.w %d2,[%sp]8
8000c7fa:	a0 0c       	mov.a %a12,0
8000c7fc:	59 a2 30 00 	st.w [%sp]48,%d2
8000c800:	02 a4       	mov %d4,%d10
8000c802:	6d ff 64 ee 	call 8000a4ca <__floatsidf>
8000c806:	0b cd 10 68 	mov %e6,%d13,%d12
8000c80a:	0b 23 10 48 	mov %e4,%d3,%d2
8000c80e:	6d ff 00 ed 	call 8000a20e <__muldf3>
8000c812:	0b 23 10 48 	mov %e4,%d3,%d2
8000c816:	82 06       	mov %d6,0
8000c818:	7b c0 01 74 	movh %d7,16412
8000c81c:	6d ff bd ec 	call 8000a196 <__adddf3>
8000c820:	0b 23 10 a8 	mov %e10,%d3,%d2
8000c824:	0b 23 10 e8 	mov %e14,%d3,%d2
8000c828:	60 b2       	mov.a %a2,%d11
8000c82a:	11 02 cc ff 	addih.a %a15,%a2,64704
8000c82e:	80 ff       	mov.d %d15,%a15
8000c830:	bd 0c 1e 80 	jnz.a %a12,8000c86c <_dtoa_r+0x530>
8000c834:	0b cd 10 48 	mov %e4,%d13,%d12
8000c838:	82 06       	mov %d6,0
8000c83a:	7b 40 01 74 	movh %d7,16404
8000c83e:	6d ff c8 ec 	call 8000a1ce <__subdf3>
8000c842:	80 f7       	mov.d %d7,%a15
8000c844:	0b 23 10 48 	mov %e4,%d3,%d2
8000c848:	02 e6       	mov %d6,%d14
8000c84a:	0b 23 10 88 	mov %e8,%d3,%d2
8000c84e:	6d 00 39 0a 	call 8000dcc0 <__gtdf2>
8000c852:	ff 12 8e 02 	jge %d2,1,8000cd6e <_dtoa_r+0xa32>
8000c856:	0b 89 10 48 	mov %e4,%d9,%d8
8000c85a:	02 e6       	mov %d6,%d14
8000c85c:	9b 0b cc 77 	addih %d7,%d11,31936
8000c860:	6d 00 70 0a 	call 8000dd40 <__ltdf2>
8000c864:	bf 02 7d 02 	jlt %d2,0,8000cd5e <_dtoa_r+0xa22>
8000c868:	1d 00 bb 00 	j 8000c9de <_dtoa_r+0x6a2>
8000c86c:	80 c5       	mov.d %d5,%a12
8000c86e:	91 00 00 f8 	movh.a %a15,32768
8000c872:	19 a2 24 00 	ld.w %d2,[%sp]36
8000c876:	d9 ff f4 c0 	lea %a15,[%a15]3892 <80000f34 <__mprec_tens>>
8000c87a:	c2 f5       	add %d5,-1
8000c87c:	01 f5 03 f6 	addsc.a %a15,%a15,%d5,3
8000c880:	df 02 57 00 	jeq %d2,0,8000c92e <_dtoa_r+0x5f2>
8000c884:	b7 00 a9 4a 	imask %e4,0,21,9
8000c888:	09 f6 40 09 	ld.d %e6,[%a15]
8000c88c:	6d ff 93 ed 	call 8000a3b2 <__divdf3>
8000c890:	0b ef 10 68 	mov %e6,%d15,%d14
8000c894:	0b 23 10 48 	mov %e4,%d3,%d2
8000c898:	6d ff 9b ec 	call 8000a1ce <__subdf3>
8000c89c:	d8 03       	ld.a %a15,[%sp]12
8000c89e:	0b 23 10 a8 	mov %e10,%d3,%d2
8000c8a2:	0b cd 10 48 	mov %e4,%d13,%d12
8000c8a6:	80 fe       	mov.d %d14,%a15
8000c8a8:	6d 00 6c 0a 	call 8000dd80 <__fixdfsi>
8000c8ac:	02 24       	mov %d4,%d2
8000c8ae:	02 2f       	mov %d15,%d2
8000c8b0:	6d ff 0d ee 	call 8000a4ca <__floatsidf>
8000c8b4:	0b cd 10 48 	mov %e4,%d13,%d12
8000c8b8:	0b 23 10 68 	mov %e6,%d3,%d2
8000c8bc:	c2 1e       	add %d14,1
8000c8be:	6d ff 88 ec 	call 8000a1ce <__subdf3>
8000c8c2:	1b 0f 03 50 	addi %d5,%d15,48
8000c8c6:	28 05       	st.b [%a15]0,%d5
8000c8c8:	0b ab 10 68 	mov %e6,%d11,%d10
8000c8cc:	0b 23 10 48 	mov %e4,%d3,%d2
8000c8d0:	0b 23 10 88 	mov %e8,%d3,%d2
8000c8d4:	6d 00 36 0a 	call 8000dd40 <__ltdf2>
8000c8d8:	bf 02 86 03 	jlt %d2,0,8000cfe4 <_dtoa_r+0xca8>
8000c8dc:	b7 00 2a 4a 	imask %e4,0,20,10
8000c8e0:	0b 89 10 68 	mov %e6,%d9,%d8
8000c8e4:	6d ff 75 ec 	call 8000a1ce <__subdf3>
8000c8e8:	0b ab 10 68 	mov %e6,%d11,%d10
8000c8ec:	0b 23 10 48 	mov %e4,%d3,%d2
8000c8f0:	6d 00 28 0a 	call 8000dd40 <__ltdf2>
8000c8f4:	bf 02 ea 00 	jlt %d2,0,8000cac8 <_dtoa_r+0x78c>
8000c8f8:	19 a3 0c 00 	ld.w %d3,[%sp]12
8000c8fc:	02 e5       	mov %d5,%d14
8000c8fe:	80 cf       	mov.d %d15,%a12
8000c900:	a2 35       	sub %d5,%d3
8000c902:	7f f5 6e 00 	jge %d5,%d15,8000c9de <_dtoa_r+0x6a2>
8000c906:	0b ab 10 48 	mov %e4,%d11,%d10
8000c90a:	82 06       	mov %d6,0
8000c90c:	7b 40 02 74 	movh %d7,16420
8000c910:	6d ff 7f ec 	call 8000a20e <__muldf3>
8000c914:	0b 89 10 48 	mov %e4,%d9,%d8
8000c918:	82 06       	mov %d6,0
8000c91a:	7b 40 02 74 	movh %d7,16420
8000c91e:	0b 23 10 a8 	mov %e10,%d3,%d2
8000c922:	6d ff 76 ec 	call 8000a20e <__muldf3>
8000c926:	60 ef       	mov.a %a15,%d14
8000c928:	0b 23 10 c8 	mov %e12,%d3,%d2
8000c92c:	3c bb       	j 8000c8a2 <_dtoa_r+0x566>
8000c92e:	0b ef 10 68 	mov %e6,%d15,%d14
8000c932:	09 f4 40 09 	ld.d %e4,[%a15]
8000c936:	6d ff 6c ec 	call 8000a20e <__muldf3>
8000c93a:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000c93e:	0b 23 10 a8 	mov %e10,%d3,%d2
8000c942:	30 c3       	add.a %a3,%a12
8000c944:	99 ac 0c 00 	ld.a %a12,[%sp]12
8000c948:	80 3e       	mov.d %d14,%a3
8000c94a:	0b cd 10 48 	mov %e4,%d13,%d12
8000c94e:	d9 cf 01 00 	lea %a15,[%a12]1
8000c952:	6d 00 17 0a 	call 8000dd80 <__fixdfsi>
8000c956:	02 24       	mov %d4,%d2
8000c958:	02 2f       	mov %d15,%d2
8000c95a:	6d ff b8 ed 	call 8000a4ca <__floatsidf>
8000c95e:	0b cd 10 48 	mov %e4,%d13,%d12
8000c962:	0b 23 10 68 	mov %e6,%d3,%d2
8000c966:	6d ff 34 ec 	call 8000a1ce <__subdf3>
8000c96a:	1b 0f 03 50 	addi %d5,%d15,48
8000c96e:	0b 23 10 88 	mov %e8,%d3,%d2
8000c972:	80 f2       	mov.d %d2,%a15
8000c974:	34 c5       	st.b [%a12],%d5
8000c976:	5f e2 29 80 	jne %d2,%d14,8000c9c8 <_dtoa_r+0x68c>
8000c97a:	0b ab 10 48 	mov %e4,%d11,%d10
8000c97e:	b7 00 a9 6a 	imask %e6,0,21,9
8000c982:	6d ff 0a ec 	call 8000a196 <__adddf3>
8000c986:	0b 89 10 48 	mov %e4,%d9,%d8
8000c98a:	0b 23 10 68 	mov %e6,%d3,%d2
8000c98e:	6d 00 99 09 	call 8000dcc0 <__gtdf2>
8000c992:	ff 12 9b 00 	jge %d2,1,8000cac8 <_dtoa_r+0x78c>
8000c996:	b7 00 a9 4a 	imask %e4,0,21,9
8000c99a:	0b ab 10 68 	mov %e6,%d11,%d10
8000c99e:	6d ff 18 ec 	call 8000a1ce <__subdf3>
8000c9a2:	0b 89 10 48 	mov %e4,%d9,%d8
8000c9a6:	0b 23 10 68 	mov %e6,%d3,%d2
8000c9aa:	6d 00 cb 09 	call 8000dd40 <__ltdf2>
8000c9ae:	ff 02 18 00 	jge %d2,0,8000c9de <_dtoa_r+0x6a2>
8000c9b2:	60 e2       	mov.a %a2,%d14
8000c9b4:	60 ef       	mov.a %a15,%d14
8000c9b6:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000c9ba:	b0 ff       	add.a %a15,-1
8000c9bc:	8b 0f 03 f2 	eq %d15,%d15,48
8000c9c0:	df 0f 12 03 	jeq %d15,0,8000cfe4 <_dtoa_r+0xca8>
8000c9c4:	80 fe       	mov.d %d14,%a15
8000c9c6:	3c f6       	j 8000c9b2 <_dtoa_r+0x676>
8000c9c8:	0b 89 10 48 	mov %e4,%d9,%d8
8000c9cc:	82 06       	mov %d6,0
8000c9ce:	7b 40 02 74 	movh %d7,16420
8000c9d2:	6d ff 1e ec 	call 8000a20e <__muldf3>
8000c9d6:	40 fc       	mov.aa %a12,%a15
8000c9d8:	0b 23 10 c8 	mov %e12,%d3,%d2
8000c9dc:	3c b7       	j 8000c94a <_dtoa_r+0x60e>
8000c9de:	09 ac 40 19 	ld.d %e12,[%sp]64
8000c9e2:	19 a3 14 10 	ld.w %d3,[%sp]84
8000c9e6:	19 a2 08 00 	ld.w %d2,[%sp]8
8000c9ea:	8b 03 80 52 	ge %d5,%d3,0
8000c9ee:	8b f2 40 54 	and.lt %d5,%d2,15
8000c9f2:	df 05 9e 00 	jeq %d5,0,8000cb2e <_dtoa_r+0x7f2>
8000c9f6:	91 00 00 f8 	movh.a %a15,32768
8000c9fa:	d9 ff f4 c0 	lea %a15,[%a15]3892 <80000f34 <__mprec_tens>>
8000c9fe:	19 a3 10 00 	ld.w %d3,[%sp]16 <80000f34 <__mprec_tens>>
8000ca02:	01 f2 03 f6 	addsc.a %a15,%a15,%d2,3
8000ca06:	19 a2 28 00 	ld.w %d2,[%sp]40
8000ca0a:	fa 13       	lt %d15,%d3,1
8000ca0c:	87 f2 1f f0 	and.t %d15,%d2,31,%d15,0
8000ca10:	09 f8 40 09 	ld.d %e8,[%a15]
8000ca14:	6e 16       	jz %d15,8000ca40 <_dtoa_r+0x704>
8000ca16:	df 03 a4 81 	jne %d3,0,8000cd5e <_dtoa_r+0xa22>
8000ca1a:	0b 89 10 48 	mov %e4,%d9,%d8
8000ca1e:	82 06       	mov %d6,0
8000ca20:	7b 40 01 74 	movh %d7,16404
8000ca24:	6d ff f5 eb 	call 8000a20e <__muldf3>
8000ca28:	0b cd 10 68 	mov %e6,%d13,%d12
8000ca2c:	0b 23 10 48 	mov %e4,%d3,%d2
8000ca30:	a0 0c       	mov.a %a12,0
8000ca32:	6d 00 67 09 	call 8000dd00 <__gedf2>
8000ca36:	a0 0f       	mov.a %a15,0
8000ca38:	ff 02 95 01 	jge %d2,0,8000cd62 <_dtoa_r+0xa26>
8000ca3c:	1d 00 9d 01 	j 8000cd76 <_dtoa_r+0xa3a>
8000ca40:	d8 03       	ld.a %a15,[%sp]12
8000ca42:	0b cd 10 a8 	mov %e10,%d13,%d12
8000ca46:	0b 89 10 68 	mov %e6,%d9,%d8
8000ca4a:	0b ab 10 48 	mov %e4,%d11,%d10
8000ca4e:	80 fe       	mov.d %d14,%a15
8000ca50:	6d ff b1 ec 	call 8000a3b2 <__divdf3>
8000ca54:	0b 23 10 48 	mov %e4,%d3,%d2
8000ca58:	c2 1e       	add %d14,1
8000ca5a:	6d 00 93 09 	call 8000dd80 <__fixdfsi>
8000ca5e:	02 24       	mov %d4,%d2
8000ca60:	02 2f       	mov %d15,%d2
8000ca62:	6d ff 34 ed 	call 8000a4ca <__floatsidf>
8000ca66:	0b 89 10 68 	mov %e6,%d9,%d8
8000ca6a:	0b 23 10 48 	mov %e4,%d3,%d2
8000ca6e:	6d ff d0 eb 	call 8000a20e <__muldf3>
8000ca72:	0b ab 10 48 	mov %e4,%d11,%d10
8000ca76:	0b 23 10 68 	mov %e6,%d3,%d2
8000ca7a:	6d ff aa eb 	call 8000a1ce <__subdf3>
8000ca7e:	0b 23 10 48 	mov %e4,%d3,%d2
8000ca82:	1b 0f 03 30 	addi %d3,%d15,48
8000ca86:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000ca8a:	28 03       	st.b [%a15]0,%d3
8000ca8c:	02 e3       	mov %d3,%d14
8000ca8e:	a2 23       	sub %d3,%d2
8000ca90:	19 a2 10 00 	ld.w %d2,[%sp]16
8000ca94:	5f 23 3c 80 	jne %d3,%d2,8000cb0c <_dtoa_r+0x7d0>
8000ca98:	0b 45 10 68 	mov %e6,%d5,%d4
8000ca9c:	6d ff 7d eb 	call 8000a196 <__adddf3>
8000caa0:	0b 89 10 68 	mov %e6,%d9,%d8
8000caa4:	0b 23 10 48 	mov %e4,%d3,%d2
8000caa8:	0b 23 10 a8 	mov %e10,%d3,%d2
8000caac:	6d 00 0a 09 	call 8000dcc0 <__gtdf2>
8000cab0:	4e 2e       	jgtz %d2,8000cacc <_dtoa_r+0x790>
8000cab2:	0b ab 10 48 	mov %e4,%d11,%d10
8000cab6:	0b 89 10 68 	mov %e6,%d9,%d8
8000caba:	6d 00 c3 08 	call 8000dc40 <__eqdf2>
8000cabe:	df 02 95 82 	jne %d2,0,8000cfe8 <_dtoa_r+0xcac>
8000cac2:	ae 05       	jnz.t %d15,0,8000cacc <_dtoa_r+0x790>
8000cac4:	1d 00 92 02 	j 8000cfe8 <_dtoa_r+0xcac>
8000cac8:	58 0c       	ld.w %d15,[%sp]48
8000caca:	78 02       	st.w [%sp]8,%d15
8000cacc:	58 03       	ld.w %d15,[%sp]12
8000cace:	a2 ef       	sub %d15,%d14
8000cad0:	46 0f       	not %d15
8000cad2:	60 e2       	mov.a %a2,%d14
8000cad4:	60 ef       	mov.a %a15,%d14
8000cad6:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000cada:	b0 ff       	add.a %a15,-1
8000cadc:	8b 93 03 32 	eq %d3,%d3,57
8000cae0:	df 03 11 00 	jeq %d3,0,8000cb02 <_dtoa_r+0x7c6>
8000cae4:	9f 0f 0d 80 	jned %d15,0,8000cafe <_dtoa_r+0x7c2>
8000cae8:	19 a3 08 00 	ld.w %d3,[%sp]8
8000caec:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000caf0:	c2 13       	add %d3,1
8000caf2:	da 30       	mov %d15,48
8000caf4:	59 a3 08 00 	st.w [%sp]8,%d3
8000caf8:	2c 30       	st.b [%a3]0,%d15
8000cafa:	40 3f       	mov.aa %a15,%a3
8000cafc:	3c 03       	j 8000cb02 <_dtoa_r+0x7c6>
8000cafe:	80 fe       	mov.d %d14,%a15
8000cb00:	3c e9       	j 8000cad2 <_dtoa_r+0x796>
8000cb02:	0c f0       	ld.bu %d15,[%a15]0
8000cb04:	c2 1f       	add %d15,1
8000cb06:	28 0f       	st.b [%a15]0,%d15
8000cb08:	1d 00 70 02 	j 8000cfe8 <_dtoa_r+0xcac>
8000cb0c:	82 06       	mov %d6,0
8000cb0e:	7b 40 02 74 	movh %d7,16420
8000cb12:	6d ff 7e eb 	call 8000a20e <__muldf3>
8000cb16:	d2 06       	mov %e6,0
8000cb18:	0b 23 10 48 	mov %e4,%d3,%d2
8000cb1c:	0b 23 10 a8 	mov %e10,%d3,%d2
8000cb20:	60 ef       	mov.a %a15,%d14
8000cb22:	6d 00 8f 08 	call 8000dc40 <__eqdf2>
8000cb26:	df 02 90 ff 	jne %d2,0,8000ca46 <_dtoa_r+0x70a>
8000cb2a:	1d 00 5f 02 	j 8000cfe8 <_dtoa_r+0xcac>
8000cb2e:	19 a2 24 00 	ld.w %d2,[%sp]36
8000cb32:	58 08       	ld.w %d15,[%sp]32
8000cb34:	19 a8 14 00 	ld.w %d8,[%sp]20
8000cb38:	a0 0f       	mov.a %a15,0
8000cb3a:	df 02 3b 00 	jeq %d2,0,8000cbb0 <_dtoa_r+0x874>
8000cb3e:	58 07       	ld.w %d15,[%sp]28
8000cb40:	ff 2f 10 00 	jge %d15,2,8000cb60 <_dtoa_r+0x824>
8000cb44:	58 13       	ld.w %d15,[%sp]76
8000cb46:	6e 05       	jz %d15,8000cb50 <_dtoa_r+0x814>
8000cb48:	1b 33 43 30 	addi %d3,%d3,1075
8000cb4c:	58 08       	ld.w %d15,[%sp]32
8000cb4e:	3c 22       	j 8000cb92 <_dtoa_r+0x856>
8000cb50:	19 a3 10 10 	ld.w %d3,[%sp]80
8000cb54:	58 08       	ld.w %d15,[%sp]32
8000cb56:	8b 63 03 31 	rsub %d3,%d3,54
8000cb5a:	19 a8 14 00 	ld.w %d8,[%sp]20
8000cb5e:	3c 1a       	j 8000cb92 <_dtoa_r+0x856>
8000cb60:	58 04       	ld.w %d15,[%sp]16
8000cb62:	19 a2 20 00 	ld.w %d2,[%sp]32
8000cb66:	c2 ff       	add %d15,-1
8000cb68:	3f f2 04 00 	jlt %d2,%d15,8000cb70 <_dtoa_r+0x834>
8000cb6c:	5a f2       	sub %d15,%d2,%d15
8000cb6e:	3c 0b       	j 8000cb84 <_dtoa_r+0x848>
8000cb70:	19 a3 20 00 	ld.w %d3,[%sp]32
8000cb74:	78 08       	st.w [%sp]32,%d15
8000cb76:	52 32       	sub %d2,%d15,%d3
8000cb78:	19 a3 34 00 	ld.w %d3,[%sp]52
8000cb7c:	82 0f       	mov %d15,0
8000cb7e:	42 23       	add %d3,%d2
8000cb80:	59 a3 34 00 	st.w [%sp]52,%d3
8000cb84:	19 a3 10 00 	ld.w %d3,[%sp]16
8000cb88:	19 a8 14 00 	ld.w %d8,[%sp]20
8000cb8c:	ce 33       	jgez %d3,8000cb92 <_dtoa_r+0x856>
8000cb8e:	a2 38       	sub %d8,%d3
8000cb90:	82 03       	mov %d3,0
8000cb92:	19 a2 14 00 	ld.w %d2,[%sp]20
8000cb96:	40 d4       	mov.aa %a4,%a13
8000cb98:	42 32       	add %d2,%d3
8000cb9a:	59 a2 14 00 	st.w [%sp]20,%d2
8000cb9e:	19 a2 18 00 	ld.w %d2,[%sp]24
8000cba2:	82 14       	mov %d4,1
8000cba4:	42 32       	add %d2,%d3
8000cba6:	59 a2 18 00 	st.w [%sp]24,%d2
8000cbaa:	6d 00 1b 03 	call 8000d1e0 <__i2b>
8000cbae:	40 2f       	mov.aa %a15,%a2
8000cbb0:	19 a2 18 00 	ld.w %d2,[%sp]24
8000cbb4:	8b 18 80 32 	ge %d3,%d8,1
8000cbb8:	8b 12 80 34 	and.ge %d3,%d2,1
8000cbbc:	76 3e       	jz %d3,8000cbd8 <_dtoa_r+0x89c>
8000cbbe:	0b 82 80 31 	min %d3,%d2,%d8
8000cbc2:	19 a2 14 00 	ld.w %d2,[%sp]20
8000cbc6:	a2 38       	sub %d8,%d3
8000cbc8:	a2 32       	sub %d2,%d3
8000cbca:	59 a2 14 00 	st.w [%sp]20,%d2
8000cbce:	19 a2 18 00 	ld.w %d2,[%sp]24
8000cbd2:	a2 32       	sub %d2,%d3
8000cbd4:	59 a2 18 00 	st.w [%sp]24,%d2
8000cbd8:	19 a3 20 00 	ld.w %d3,[%sp]32
8000cbdc:	bf 13 27 00 	jlt %d3,1,8000cc2a <_dtoa_r+0x8ee>
8000cbe0:	19 a2 24 00 	ld.w %d2,[%sp]36
8000cbe4:	df 02 1c 00 	jeq %d2,0,8000cc1c <_dtoa_r+0x8e0>
8000cbe8:	bf 1f 13 00 	jlt %d15,1,8000cc0e <_dtoa_r+0x8d2>
8000cbec:	40 f5       	mov.aa %a5,%a15
8000cbee:	02 f4       	mov %d4,%d15
8000cbf0:	40 d4       	mov.aa %a4,%a13
8000cbf2:	6d 00 8c 03 	call 8000d30a <__pow5mult>
8000cbf6:	40 e6       	mov.aa %a6,%a14
8000cbf8:	40 d4       	mov.aa %a4,%a13
8000cbfa:	40 25       	mov.aa %a5,%a2
8000cbfc:	40 2f       	mov.aa %a15,%a2
8000cbfe:	6d 00 f9 02 	call 8000d1f0 <__multiply>
8000cc02:	40 e5       	mov.aa %a5,%a14
8000cc04:	40 2c       	mov.aa %a12,%a2
8000cc06:	40 d4       	mov.aa %a4,%a13
8000cc08:	6d 00 4e 02 	call 8000d0a4 <_Bfree>
8000cc0c:	40 ce       	mov.aa %a14,%a12
8000cc0e:	19 a4 20 00 	ld.w %d4,[%sp]32
8000cc12:	40 d4       	mov.aa %a4,%a13
8000cc14:	a2 f4       	sub %d4,%d15
8000cc16:	40 e5       	mov.aa %a5,%a14
8000cc18:	76 49       	jz %d4,8000cc2a <_dtoa_r+0x8ee>
8000cc1a:	3c 05       	j 8000cc24 <_dtoa_r+0x8e8>
8000cc1c:	19 a4 20 00 	ld.w %d4,[%sp]32
8000cc20:	40 d4       	mov.aa %a4,%a13
8000cc22:	40 e5       	mov.aa %a5,%a14
8000cc24:	6d 00 73 03 	call 8000d30a <__pow5mult>
8000cc28:	40 2e       	mov.aa %a14,%a2
8000cc2a:	40 d4       	mov.aa %a4,%a13
8000cc2c:	82 14       	mov %d4,1
8000cc2e:	6d 00 d9 02 	call 8000d1e0 <__i2b>
8000cc32:	19 a3 34 00 	ld.w %d3,[%sp]52
8000cc36:	40 2c       	mov.aa %a12,%a2
8000cc38:	8e 3c       	jlez %d3,8000cc50 <_dtoa_r+0x914>
8000cc3a:	40 d4       	mov.aa %a4,%a13
8000cc3c:	40 25       	mov.aa %a5,%a2
8000cc3e:	02 34       	mov %d4,%d3
8000cc40:	6d 00 65 03 	call 8000d30a <__pow5mult>
8000cc44:	58 07       	ld.w %d15,[%sp]28
8000cc46:	40 2c       	mov.aa %a12,%a2
8000cc48:	82 09       	mov %d9,0
8000cc4a:	ff 2f 1f 00 	jge %d15,2,8000cc88 <_dtoa_r+0x94c>
8000cc4e:	3c 06       	j 8000cc5a <_dtoa_r+0x91e>
8000cc50:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000cc54:	82 09       	mov %d9,0
8000cc56:	ff 22 15 00 	jge %d2,2,8000cc80 <_dtoa_r+0x944>
8000cc5a:	82 09       	mov %d9,0
8000cc5c:	df 0c 12 80 	jne %d12,0,8000cc80 <_dtoa_r+0x944>
8000cc60:	b7 0d 0c fa 	insert %d15,%d13,0,20,12
8000cc64:	ee 0e       	jnz %d15,8000cc80 <_dtoa_r+0x944>
8000cc66:	7b 00 ff f7 	movh %d15,32752
8000cc6a:	26 df       	and %d15,%d13
8000cc6c:	6e 0a       	jz %d15,8000cc80 <_dtoa_r+0x944>
8000cc6e:	19 a3 14 00 	ld.w %d3,[%sp]20
8000cc72:	58 06       	ld.w %d15,[%sp]24
8000cc74:	c2 13       	add %d3,1
8000cc76:	c2 1f       	add %d15,1
8000cc78:	59 a3 14 00 	st.w [%sp]20,%d3
8000cc7c:	78 06       	st.w [%sp]24,%d15
8000cc7e:	82 19       	mov %d9,1
8000cc80:	19 a3 34 00 	ld.w %d3,[%sp]52
8000cc84:	82 12       	mov %d2,1
8000cc86:	76 39       	jz %d3,8000cc98 <_dtoa_r+0x95c>
8000cc88:	4c c4       	ld.w %d15,[%a12]16
8000cc8a:	90 c3       	addsc.a %a3,%a12,%d15,2
8000cc8c:	19 34 10 00 	ld.w %d4,[%a3]16
8000cc90:	6d 00 54 02 	call 8000d138 <__hi0bits>
8000cc94:	8b 02 02 21 	rsub %d2,%d2,32
8000cc98:	58 06       	ld.w %d15,[%sp]24
8000cc9a:	42 2f       	add %d15,%d2
8000cc9c:	16 1f       	and %d15,31
8000cc9e:	6e 0a       	jz %d15,8000ccb2 <_dtoa_r+0x976>
8000cca0:	8b 0f 02 31 	rsub %d3,%d15,32
8000cca4:	8b cf 01 f1 	rsub %d15,%d15,28
8000cca8:	ff 53 07 00 	jge %d3,5,8000ccb6 <_dtoa_r+0x97a>
8000ccac:	df 43 10 00 	jeq %d3,4,8000cccc <_dtoa_r+0x990>
8000ccb0:	02 3f       	mov %d15,%d3
8000ccb2:	1b cf 01 f0 	addi %d15,%d15,28
8000ccb6:	19 a2 14 00 	ld.w %d2,[%sp]20
8000ccba:	19 a3 18 00 	ld.w %d3,[%sp]24
8000ccbe:	42 f2       	add %d2,%d15
8000ccc0:	42 f3       	add %d3,%d15
8000ccc2:	59 a2 14 00 	st.w [%sp]20,%d2
8000ccc6:	42 f8       	add %d8,%d15
8000ccc8:	59 a3 18 00 	st.w [%sp]24,%d3
8000cccc:	58 05       	ld.w %d15,[%sp]20
8000ccce:	8e f7       	jlez %d15,8000ccdc <_dtoa_r+0x9a0>
8000ccd0:	40 e5       	mov.aa %a5,%a14
8000ccd2:	40 d4       	mov.aa %a4,%a13
8000ccd4:	02 f4       	mov %d4,%d15
8000ccd6:	6d 00 58 03 	call 8000d386 <__lshift>
8000ccda:	40 2e       	mov.aa %a14,%a2
8000ccdc:	19 a2 18 00 	ld.w %d2,[%sp]24
8000cce0:	8e 27       	jlez %d2,8000ccee <_dtoa_r+0x9b2>
8000cce2:	40 c5       	mov.aa %a5,%a12
8000cce4:	40 d4       	mov.aa %a4,%a13
8000cce6:	02 24       	mov %d4,%d2
8000cce8:	6d 00 4f 03 	call 8000d386 <__lshift>
8000ccec:	40 2c       	mov.aa %a12,%a2
8000ccee:	19 a3 3c 00 	ld.w %d3,[%sp]60
8000ccf2:	df 03 20 00 	jeq %d3,0,8000cd32 <_dtoa_r+0x9f6>
8000ccf6:	40 e4       	mov.aa %a4,%a14
8000ccf8:	40 c5       	mov.aa %a5,%a12
8000ccfa:	6d 00 a3 03 	call 8000d440 <__mcmp>
8000ccfe:	ff 02 1a 00 	jge %d2,0,8000cd32 <_dtoa_r+0x9f6>
8000cd02:	58 02       	ld.w %d15,[%sp]8
8000cd04:	40 e5       	mov.aa %a5,%a14
8000cd06:	c2 ff       	add %d15,-1
8000cd08:	40 d4       	mov.aa %a4,%a13
8000cd0a:	fb a0 00 40 	mov %e4,10
8000cd0e:	78 02       	st.w [%sp]8,%d15
8000cd10:	6d 00 d3 01 	call 8000d0b6 <__multadd>
8000cd14:	19 a2 2c 00 	ld.w %d2,[%sp]44
8000cd18:	19 a3 24 00 	ld.w %d3,[%sp]36
8000cd1c:	59 a2 10 00 	st.w [%sp]16,%d2
8000cd20:	40 2e       	mov.aa %a14,%a2
8000cd22:	76 38       	jz %d3,8000cd32 <_dtoa_r+0x9f6>
8000cd24:	40 f5       	mov.aa %a5,%a15
8000cd26:	40 d4       	mov.aa %a4,%a13
8000cd28:	fb a0 00 40 	mov %e4,10
8000cd2c:	6d 00 c5 01 	call 8000d0b6 <__multadd>
8000cd30:	40 2f       	mov.aa %a15,%a2
8000cd32:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000cd36:	19 a3 10 00 	ld.w %d3,[%sp]16
8000cd3a:	8b 32 80 f2 	ge %d15,%d2,3
8000cd3e:	8b 13 40 f4 	and.lt %d15,%d3,1
8000cd42:	6e 2a       	jz %d15,8000cd96 <_dtoa_r+0xa5a>
8000cd44:	f6 3f       	jnz %d3,8000cd62 <_dtoa_r+0xa26>
8000cd46:	40 c5       	mov.aa %a5,%a12
8000cd48:	40 d4       	mov.aa %a4,%a13
8000cd4a:	d2 54       	mov %e4,5
8000cd4c:	6d 00 b5 01 	call 8000d0b6 <__multadd>
8000cd50:	40 e4       	mov.aa %a4,%a14
8000cd52:	40 25       	mov.aa %a5,%a2
8000cd54:	40 2c       	mov.aa %a12,%a2
8000cd56:	6d 00 75 03 	call 8000d440 <__mcmp>
8000cd5a:	4e 2e       	jgtz %d2,8000cd76 <_dtoa_r+0xa3a>
8000cd5c:	3c 03       	j 8000cd62 <_dtoa_r+0xa26>
8000cd5e:	a0 0c       	mov.a %a12,0
8000cd60:	a0 0f       	mov.a %a15,0
8000cd62:	58 0a       	ld.w %d15,[%sp]40
8000cd64:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000cd68:	46 0f       	not %d15
8000cd6a:	78 02       	st.w [%sp]8,%d15
8000cd6c:	3c 11       	j 8000cd8e <_dtoa_r+0xa52>
8000cd6e:	58 0c       	ld.w %d15,[%sp]48
8000cd70:	a0 0c       	mov.a %a12,0
8000cd72:	78 02       	st.w [%sp]8,%d15
8000cd74:	a0 0f       	mov.a %a15,0
8000cd76:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cd7a:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000cd7e:	19 ae 0c 00 	ld.w %d14,[%sp]12
8000cd82:	da 31       	mov %d15,49
8000cd84:	c2 12       	add %d2,1
8000cd86:	c2 1e       	add %d14,1
8000cd88:	2c 30       	st.b [%a3]0,%d15
8000cd8a:	59 a2 08 00 	st.w [%sp]8,%d2
8000cd8e:	80 f8       	mov.d %d8,%a15
8000cd90:	a0 0f       	mov.a %a15,0
8000cd92:	1d 00 14 01 	j 8000cfba <_dtoa_r+0xc7e>
8000cd96:	19 a3 24 00 	ld.w %d3,[%sp]36
8000cd9a:	f6 35       	jnz %d3,8000cda4 <_dtoa_r+0xa68>
8000cd9c:	19 a8 0c 00 	ld.w %d8,[%sp]12
8000cda0:	1d 00 c2 00 	j 8000cf24 <_dtoa_r+0xbe8>
8000cda4:	8e 87       	jlez %d8,8000cdb2 <_dtoa_r+0xa76>
8000cda6:	40 f5       	mov.aa %a5,%a15
8000cda8:	40 d4       	mov.aa %a4,%a13
8000cdaa:	02 84       	mov %d4,%d8
8000cdac:	6d 00 ed 02 	call 8000d386 <__lshift>
8000cdb0:	40 2f       	mov.aa %a15,%a2
8000cdb2:	80 f8       	mov.d %d8,%a15
8000cdb4:	df 09 16 00 	jeq %d9,0,8000cde0 <_dtoa_r+0xaa4>
8000cdb8:	40 d4       	mov.aa %a4,%a13
8000cdba:	48 14       	ld.w %d4,[%a15]4
8000cdbc:	6d 00 49 01 	call 8000d04e <_Balloc>
8000cdc0:	48 44       	ld.w %d4,[%a15]16
8000cdc2:	d9 24 0c 00 	lea %a4,[%a2]12
8000cdc6:	c2 24       	add %d4,2
8000cdc8:	d9 f5 0c 00 	lea %a5,[%a15]12
8000cdcc:	06 24       	sh %d4,2
8000cdce:	80 2f       	mov.d %d15,%a2
8000cdd0:	6d 00 31 01 	call 8000d032 <memcpy>
8000cdd4:	60 f5       	mov.a %a5,%d15
8000cdd6:	40 d4       	mov.aa %a4,%a13
8000cdd8:	82 14       	mov %d4,1
8000cdda:	6d 00 d6 02 	call 8000d386 <__lshift>
8000cdde:	80 28       	mov.d %d8,%a2
8000cde0:	19 a9 0c 00 	ld.w %d9,[%sp]12
8000cde4:	8f 1c 00 a1 	and %d10,%d12,1
8000cde8:	40 e4       	mov.aa %a4,%a14
8000cdea:	40 c5       	mov.aa %a5,%a12
8000cdec:	6d ff 1a fa 	call 8000c220 <quorem>
8000cdf0:	40 e4       	mov.aa %a4,%a14
8000cdf2:	40 f5       	mov.aa %a5,%a15
8000cdf4:	02 2e       	mov %d14,%d2
8000cdf6:	1b 02 03 f0 	addi %d15,%d2,48
8000cdfa:	6d 00 23 03 	call 8000d440 <__mcmp>
8000cdfe:	60 86       	mov.a %a6,%d8
8000ce00:	40 d4       	mov.aa %a4,%a13
8000ce02:	40 c5       	mov.aa %a5,%a12
8000ce04:	02 2b       	mov %d11,%d2
8000ce06:	6d 00 3e 03 	call 8000d482 <__mdiff>
8000ce0a:	19 22 0c 00 	ld.w %d2,[%a2]12
8000ce0e:	80 2d       	mov.d %d13,%a2
8000ce10:	82 1c       	mov %d12,1
8000ce12:	f6 26       	jnz %d2,8000ce1e <_dtoa_r+0xae2>
8000ce14:	40 e4       	mov.aa %a4,%a14
8000ce16:	40 25       	mov.aa %a5,%a2
8000ce18:	6d 00 14 03 	call 8000d440 <__mcmp>
8000ce1c:	02 2c       	mov %d12,%d2
8000ce1e:	60 d5       	mov.a %a5,%d13
8000ce20:	40 d4       	mov.aa %a4,%a13
8000ce22:	6d 00 41 01 	call 8000d0a4 <_Bfree>
8000ce26:	19 a3 1c 00 	ld.w %d3,[%sp]28
8000ce2a:	1b 19 00 d0 	addi %d13,%d9,1
8000ce2e:	a6 c3       	or %d3,%d12
8000ce30:	f6 3f       	jnz %d3,8000ce4e <_dtoa_r+0xb12>
8000ce32:	f6 ae       	jnz %d10,8000ce4e <_dtoa_r+0xb12>
8000ce34:	8b 9f 03 32 	eq %d3,%d15,57
8000ce38:	40 e2       	mov.aa %a2,%a14
8000ce3a:	df 03 3a 80 	jne %d3,0,8000ceae <_dtoa_r+0xb72>
8000ce3e:	1b 1e 03 20 	addi %d2,%d14,49
8000ce42:	8b 1b 80 b2 	ge %d11,%d11,1
8000ce46:	2b f2 40 fb 	sel %d15,%d11,%d2,%d15
8000ce4a:	02 de       	mov %d14,%d13
8000ce4c:	3c 37       	j 8000ceba <_dtoa_r+0xb7e>
8000ce4e:	ce b5       	jgez %d11,8000ce58 <_dtoa_r+0xb1c>
8000ce50:	02 fa       	mov %d10,%d15
8000ce52:	40 e2       	mov.aa %a2,%a14
8000ce54:	4e ca       	jgtz %d12,8000ce68 <_dtoa_r+0xb2c>
8000ce56:	3c 1e       	j 8000ce92 <_dtoa_r+0xb56>
8000ce58:	19 a2 1c 00 	ld.w %d2,[%sp]28
8000ce5c:	a6 2b       	or %d11,%d2
8000ce5e:	df 0b 20 80 	jne %d11,0,8000ce9e <_dtoa_r+0xb62>
8000ce62:	df 0a 1e 80 	jne %d10,0,8000ce9e <_dtoa_r+0xb62>
8000ce66:	3c f5       	j 8000ce50 <_dtoa_r+0xb14>
8000ce68:	40 d4       	mov.aa %a4,%a13
8000ce6a:	40 e5       	mov.aa %a5,%a14
8000ce6c:	82 14       	mov %d4,1
8000ce6e:	6d 00 8c 02 	call 8000d386 <__lshift>
8000ce72:	40 c5       	mov.aa %a5,%a12
8000ce74:	40 24       	mov.aa %a4,%a2
8000ce76:	b5 a2 04 00 	st.a [%sp]4,%a2
8000ce7a:	6d 00 e3 02 	call 8000d440 <__mcmp>
8000ce7e:	99 a2 04 00 	ld.a %a2,[%sp]4
8000ce82:	4e 23       	jgtz %d2,8000ce88 <_dtoa_r+0xb4c>
8000ce84:	f6 27       	jnz %d2,8000ce92 <_dtoa_r+0xb56>
8000ce86:	2e 06       	jz.t %d15,0,8000ce92 <_dtoa_r+0xb56>
8000ce88:	8b 9f 03 32 	eq %d3,%d15,57
8000ce8c:	df 03 11 80 	jne %d3,0,8000ceae <_dtoa_r+0xb72>
8000ce90:	92 1a       	add %d10,%d15,1
8000ce92:	60 93       	mov.a %a3,%d9
8000ce94:	02 de       	mov %d14,%d13
8000ce96:	34 3a       	st.b [%a3],%d10
8000ce98:	40 2e       	mov.aa %a14,%a2
8000ce9a:	1d 00 90 00 	j 8000cfba <_dtoa_r+0xc7e>
8000ce9e:	bf 1c 11 00 	jlt %d12,1,8000cec0 <_dtoa_r+0xb84>
8000cea2:	8b 9f 23 32 	ne %d3,%d15,57
8000cea6:	40 e2       	mov.aa %a2,%a14
8000cea8:	02 de       	mov %d14,%d13
8000ceaa:	c2 1f       	add %d15,1
8000ceac:	f6 37       	jnz %d3,8000ceba <_dtoa_r+0xb7e>
8000ceae:	60 93       	mov.a %a3,%d9
8000ceb0:	da 39       	mov %d15,57
8000ceb2:	02 de       	mov %d14,%d13
8000ceb4:	2c 30       	st.b [%a3]0,%d15
8000ceb6:	40 2e       	mov.aa %a14,%a2
8000ceb8:	3c 5d       	j 8000cf72 <_dtoa_r+0xc36>
8000ceba:	60 92       	mov.a %a2,%d9
8000cebc:	2c 20       	st.b [%a2]0,%d15
8000cebe:	3c 7e       	j 8000cfba <_dtoa_r+0xc7e>
8000cec0:	60 93       	mov.a %a3,%d9
8000cec2:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000cec6:	02 d5       	mov %d5,%d13
8000cec8:	19 a3 10 00 	ld.w %d3,[%sp]16
8000cecc:	2c 30       	st.b [%a3]0,%d15
8000cece:	a2 25       	sub %d5,%d2
8000ced0:	02 de       	mov %d14,%d13
8000ced2:	5f 35 41 00 	jeq %d5,%d3,8000cf54 <_dtoa_r+0xc18>
8000ced6:	40 e5       	mov.aa %a5,%a14
8000ced8:	40 d4       	mov.aa %a4,%a13
8000ceda:	fb a0 00 40 	mov %e4,10
8000cede:	6d 00 ec 00 	call 8000d0b6 <__multadd>
8000cee2:	80 ff       	mov.d %d15,%a15
8000cee4:	40 2e       	mov.aa %a14,%a2
8000cee6:	40 d4       	mov.aa %a4,%a13
8000cee8:	40 f5       	mov.aa %a5,%a15
8000ceea:	fb a0 00 40 	mov %e4,10
8000ceee:	7e 86       	jne %d15,%d8,8000cefa <_dtoa_r+0xbbe>
8000cef0:	6d 00 e3 00 	call 8000d0b6 <__multadd>
8000cef4:	40 2f       	mov.aa %a15,%a2
8000cef6:	80 28       	mov.d %d8,%a2
8000cef8:	3c 0b       	j 8000cf0e <_dtoa_r+0xbd2>
8000cefa:	6d 00 de 00 	call 8000d0b6 <__multadd>
8000cefe:	60 85       	mov.a %a5,%d8
8000cf00:	40 d4       	mov.aa %a4,%a13
8000cf02:	fb a0 00 40 	mov %e4,10
8000cf06:	40 2f       	mov.aa %a15,%a2
8000cf08:	6d 00 d7 00 	call 8000d0b6 <__multadd>
8000cf0c:	80 28       	mov.d %d8,%a2
8000cf0e:	02 d9       	mov %d9,%d13
8000cf10:	1d ff 6c ff 	j 8000cde8 <_dtoa_r+0xaac>
8000cf14:	40 e5       	mov.aa %a5,%a14
8000cf16:	40 d4       	mov.aa %a4,%a13
8000cf18:	fb a0 00 40 	mov %e4,10
8000cf1c:	6d 00 cd 00 	call 8000d0b6 <__multadd>
8000cf20:	02 98       	mov %d8,%d9
8000cf22:	40 2e       	mov.aa %a14,%a2
8000cf24:	40 e4       	mov.aa %a4,%a14
8000cf26:	40 c5       	mov.aa %a5,%a12
8000cf28:	6d ff 7c f9 	call 8000c220 <quorem>
8000cf2c:	1b 18 00 90 	addi %d9,%d8,1
8000cf30:	1b 02 03 f0 	addi %d15,%d2,48
8000cf34:	60 82       	mov.a %a2,%d8
8000cf36:	19 a2 0c 00 	ld.w %d2,[%sp]12
8000cf3a:	02 95       	mov %d5,%d9
8000cf3c:	19 a3 10 00 	ld.w %d3,[%sp]16
8000cf40:	2c 20       	st.b [%a2]0,%d15
8000cf42:	a2 25       	sub %d5,%d2
8000cf44:	3f 35 e8 7f 	jlt %d5,%d3,8000cf14 <_dtoa_r+0xbd8>
8000cf48:	8b 13 40 33 	max %d3,%d3,1
8000cf4c:	02 2e       	mov %d14,%d2
8000cf4e:	80 f8       	mov.d %d8,%a15
8000cf50:	42 3e       	add %d14,%d3
8000cf52:	a0 0f       	mov.a %a15,0
8000cf54:	40 e5       	mov.aa %a5,%a14
8000cf56:	40 d4       	mov.aa %a4,%a13
8000cf58:	82 14       	mov %d4,1
8000cf5a:	6d 00 16 02 	call 8000d386 <__lshift>
8000cf5e:	40 c5       	mov.aa %a5,%a12
8000cf60:	40 2e       	mov.aa %a14,%a2
8000cf62:	40 24       	mov.aa %a4,%a2
8000cf64:	6d 00 6e 02 	call 8000d440 <__mcmp>
8000cf68:	4e 25       	jgtz %d2,8000cf72 <_dtoa_r+0xc36>
8000cf6a:	df 02 1e 80 	jne %d2,0,8000cfa6 <_dtoa_r+0xc6a>
8000cf6e:	6f 0f 1c 00 	jz.t %d15,0,8000cfa6 <_dtoa_r+0xc6a>
8000cf72:	58 03       	ld.w %d15,[%sp]12
8000cf74:	a2 ef       	sub %d15,%d14
8000cf76:	46 0f       	not %d15
8000cf78:	60 e2       	mov.a %a2,%d14
8000cf7a:	60 e3       	mov.a %a3,%d14
8000cf7c:	79 23 ff ff 	ld.b %d3,[%a2]-1
8000cf80:	b0 f3       	add.a %a3,-1
8000cf82:	8b 93 03 52 	eq %d5,%d3,57
8000cf86:	76 5d       	jz %d5,8000cfa0 <_dtoa_r+0xc64>
8000cf88:	9f 0f 0a 80 	jned %d15,0,8000cf9c <_dtoa_r+0xc60>
8000cf8c:	58 02       	ld.w %d15,[%sp]8
8000cf8e:	99 a3 0c 00 	ld.a %a3,[%sp]12
8000cf92:	c2 1f       	add %d15,1
8000cf94:	78 02       	st.w [%sp]8,%d15
8000cf96:	da 31       	mov %d15,49
8000cf98:	2c 30       	st.b [%a3]0,%d15
8000cf9a:	3c 10       	j 8000cfba <_dtoa_r+0xc7e>
8000cf9c:	80 3e       	mov.d %d14,%a3
8000cf9e:	3c ed       	j 8000cf78 <_dtoa_r+0xc3c>
8000cfa0:	c2 13       	add %d3,1
8000cfa2:	34 33       	st.b [%a3],%d3
8000cfa4:	3c 0b       	j 8000cfba <_dtoa_r+0xc7e>
8000cfa6:	60 e2       	mov.a %a2,%d14
8000cfa8:	60 e3       	mov.a %a3,%d14
8000cfaa:	79 2f ff ff 	ld.b %d15,[%a2]-1
8000cfae:	b0 f3       	add.a %a3,-1
8000cfb0:	8b 0f 03 f2 	eq %d15,%d15,48
8000cfb4:	6e 03       	jz %d15,8000cfba <_dtoa_r+0xc7e>
8000cfb6:	80 3e       	mov.d %d14,%a3
8000cfb8:	3c f7       	j 8000cfa6 <_dtoa_r+0xc6a>
8000cfba:	40 d4       	mov.aa %a4,%a13
8000cfbc:	40 c5       	mov.aa %a5,%a12
8000cfbe:	6d 00 73 00 	call 8000d0a4 <_Bfree>
8000cfc2:	df 08 13 00 	jeq %d8,0,8000cfe8 <_dtoa_r+0xcac>
8000cfc6:	80 f2       	mov.d %d2,%a15
8000cfc8:	8b 02 20 f2 	ne %d15,%d2,0
8000cfcc:	0b 82 10 f2 	and.ne %d15,%d2,%d8
8000cfd0:	6e 05       	jz %d15,8000cfda <_dtoa_r+0xc9e>
8000cfd2:	40 d4       	mov.aa %a4,%a13
8000cfd4:	40 f5       	mov.aa %a5,%a15
8000cfd6:	6d 00 67 00 	call 8000d0a4 <_Bfree>
8000cfda:	60 85       	mov.a %a5,%d8
8000cfdc:	40 d4       	mov.aa %a4,%a13
8000cfde:	6d 00 63 00 	call 8000d0a4 <_Bfree>
8000cfe2:	3c 03       	j 8000cfe8 <_dtoa_r+0xcac>
8000cfe4:	58 0c       	ld.w %d15,[%sp]48
8000cfe6:	78 02       	st.w [%sp]8,%d15
8000cfe8:	40 d4       	mov.aa %a4,%a13
8000cfea:	40 e5       	mov.aa %a5,%a14
8000cfec:	6d 00 5c 00 	call 8000d0a4 <_Bfree>
8000cff0:	60 e2       	mov.a %a2,%d14
8000cff2:	19 a2 08 00 	ld.w %d2,[%sp]8
8000cff6:	99 a3 08 10 	ld.a %a3,[%sp]72
8000cffa:	82 0f       	mov %d15,0
8000cffc:	d8 0e       	ld.a %a15,[%sp]56
8000cffe:	2c 20       	st.b [%a2]0,%d15
8000d000:	c2 12       	add %d2,1
8000d002:	74 32       	st.w [%a3],%d2
8000d004:	99 a2 0c 00 	ld.a %a2,[%sp]12
8000d008:	bc f2       	jz.a %a15,8000d00c <_dtoa_r+0xcd0>
8000d00a:	68 0e       	st.w [%a15]0,%d14
8000d00c:	00 90       	ret 
	...

8000d010 <_localeconv_r>:
8000d010:	91 00 00 28 	movh.a %a2,32768
8000d014:	d9 22 e0 a0 	lea %a2,[%a2]3744 <80000ea0 <lconv>>
8000d018:	00 90       	ret 

8000d01a <memchr>:
8000d01a:	8f f4 0f 41 	and %d4,%d4,255
8000d01e:	9f 05 04 80 	jned %d5,0,8000d026 <memchr+0xc>
8000d022:	a0 02       	mov.a %a2,0
8000d024:	00 90       	ret 
8000d026:	0c 40       	ld.bu %d15,[%a4]0
8000d028:	3e 43       	jeq %d15,%d4,8000d02e <memchr+0x14>
8000d02a:	b0 14       	add.a %a4,1
8000d02c:	3c f9       	j 8000d01e <memchr+0x4>
8000d02e:	40 42       	mov.aa %a2,%a4
8000d030:	00 90       	ret 

8000d032 <memcpy>:
8000d032:	40 42       	mov.aa %a2,%a4
8000d034:	a0 0f       	mov.a %a15,0
8000d036:	01 f2 10 40 	add.a %a4,%a2,%a15
8000d03a:	01 f5 10 30 	add.a %a3,%a5,%a15
8000d03e:	9f 04 03 80 	jned %d4,0,8000d044 <memcpy+0x12>
8000d042:	00 90       	ret 
8000d044:	79 3f 00 00 	ld.b %d15,[%a3]0
8000d048:	b0 1f       	add.a %a15,1
8000d04a:	2c 40       	st.b [%a4]0,%d15
8000d04c:	3c f5       	j 8000d036 <memcpy+0x4>

8000d04e <_Balloc>:
8000d04e:	19 42 0c 10 	ld.w %d2,[%a4]76
8000d052:	40 4f       	mov.aa %a15,%a4
8000d054:	02 4f       	mov %d15,%d4
8000d056:	76 29       	jz %d2,8000d068 <_Balloc+0x1a>
8000d058:	99 f3 0c 10 	ld.a %a3,[%a15]76
8000d05c:	90 33       	addsc.a %a3,%a3,%d15,2
8000d05e:	d4 32       	ld.a %a2,[%a3]
8000d060:	bc 2f       	jz.a %a2,8000d07e <_Balloc+0x30>
8000d062:	4c 20       	ld.w %d15,[%a2]0
8000d064:	6c 30       	st.w [%a3]0,%d15
8000d066:	3c 1b       	j 8000d09c <_Balloc+0x4e>
8000d068:	82 44       	mov %d4,4
8000d06a:	3b 10 02 50 	mov %d5,33
8000d06e:	6d 00 5c 03 	call 8000d726 <_calloc_r>
8000d072:	b5 f2 0c 10 	st.a [%a15]76,%a2
8000d076:	bd 02 f1 ff 	jnz.a %a2,8000d058 <_Balloc+0xa>
8000d07a:	a0 02       	mov.a %a2,0
8000d07c:	00 90       	ret 
8000d07e:	82 18       	mov %d8,1
8000d080:	0f f8 00 80 	sh %d8,%d8,%d15
8000d084:	1b 58 00 50 	addi %d5,%d8,5
8000d088:	40 f4       	mov.aa %a4,%a15
8000d08a:	82 14       	mov %d4,1
8000d08c:	06 25       	sh %d5,2
8000d08e:	6d 00 4c 03 	call 8000d726 <_calloc_r>
8000d092:	bd 02 f4 7f 	jz.a %a2,8000d07a <_Balloc+0x2c>
8000d096:	6c 21       	st.w [%a2]4,%d15
8000d098:	59 28 08 00 	st.w [%a2]8,%d8
8000d09c:	82 0f       	mov %d15,0
8000d09e:	6c 24       	st.w [%a2]16,%d15
8000d0a0:	6c 23       	st.w [%a2]12,%d15
8000d0a2:	00 90       	ret 

8000d0a4 <_Bfree>:
8000d0a4:	bc 58       	jz.a %a5,8000d0b4 <_Bfree+0x10>
8000d0a6:	99 4f 0c 10 	ld.a %a15,[%a4]76
8000d0aa:	4c 51       	ld.w %d15,[%a5]4
8000d0ac:	90 ff       	addsc.a %a15,%a15,%d15,2
8000d0ae:	4c f0       	ld.w %d15,[%a15]0
8000d0b0:	6c 50       	st.w [%a5]0,%d15
8000d0b2:	e8 05       	st.a [%a15]0,%a5
8000d0b4:	00 90       	ret 

8000d0b6 <__multadd>:
8000d0b6:	19 59 10 00 	ld.w %d9,[%a5]16
8000d0ba:	40 4c       	mov.aa %a12,%a4
8000d0bc:	9a f9       	add %d15,%d9,-1
8000d0be:	8b 19 80 22 	ge %d2,%d9,1
8000d0c2:	40 5f       	mov.aa %a15,%a5
8000d0c4:	02 58       	mov %d8,%d5
8000d0c6:	d9 53 14 00 	lea %a3,[%a5]20
8000d0ca:	ab 0f 80 22 	sel %d2,%d2,%d15,0
8000d0ce:	40 32       	mov.aa %a2,%a3
8000d0d0:	44 25       	ld.w %d5,[%a2+]
8000d0d2:	b7 05 10 38 	insert %d3,%d5,0,16,16
8000d0d6:	8f 05 1f f0 	sh %d15,%d5,-16
8000d0da:	03 43 0a 38 	madd %d3,%d8,%d3,%d4
8000d0de:	8f 03 1f 60 	sh %d6,%d3,-16
8000d0e2:	03 4f 0a f6 	madd %d15,%d6,%d15,%d4
8000d0e6:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000d0ea:	8f 0f 1f 80 	sh %d8,%d15,-16
8000d0ee:	74 33       	st.w [%a3],%d3
8000d0f0:	40 23       	mov.aa %a3,%a2
8000d0f2:	9f 02 ee ff 	jned %d2,0,8000d0ce <__multadd+0x18>
8000d0f6:	df 08 1f 00 	jeq %d8,0,8000d134 <__multadd+0x7e>
8000d0fa:	4c f2       	ld.w %d15,[%a15]8
8000d0fc:	3f f9 16 00 	jlt %d9,%d15,8000d128 <__multadd+0x72>
8000d100:	48 14       	ld.w %d4,[%a15]4
8000d102:	40 c4       	mov.aa %a4,%a12
8000d104:	c2 14       	add %d4,1
8000d106:	6d ff a4 ff 	call 8000d04e <_Balloc>
8000d10a:	48 44       	ld.w %d4,[%a15]16
8000d10c:	d9 f5 0c 00 	lea %a5,[%a15]12
8000d110:	c2 24       	add %d4,2
8000d112:	d9 24 0c 00 	lea %a4,[%a2]12
8000d116:	06 24       	sh %d4,2
8000d118:	40 2d       	mov.aa %a13,%a2
8000d11a:	6d ff 8c ff 	call 8000d032 <memcpy>
8000d11e:	40 f5       	mov.aa %a5,%a15
8000d120:	40 c4       	mov.aa %a4,%a12
8000d122:	6d ff c1 ff 	call 8000d0a4 <_Bfree>
8000d126:	40 df       	mov.aa %a15,%a13
8000d128:	01 f9 02 26 	addsc.a %a2,%a15,%d9,2
8000d12c:	c2 19       	add %d9,1
8000d12e:	59 28 14 00 	st.w [%a2]20,%d8
8000d132:	68 49       	st.w [%a15]16,%d9
8000d134:	40 f2       	mov.aa %a2,%a15
8000d136:	00 90       	ret 

8000d138 <__hi0bits>:
8000d138:	b7 04 10 f0 	insert %d15,%d4,0,0,16
8000d13c:	82 02       	mov %d2,0
8000d13e:	ee 05       	jnz %d15,8000d148 <__hi0bits+0x10>
8000d140:	8f 04 01 40 	sh %d4,%d4,16
8000d144:	3b 00 01 20 	mov %d2,16
8000d148:	b7 04 18 f0 	insert %d15,%d4,0,0,24
8000d14c:	ee 05       	jnz %d15,8000d156 <__hi0bits+0x1e>
8000d14e:	1b 82 00 20 	addi %d2,%d2,8
8000d152:	8f 84 00 40 	sh %d4,%d4,8
8000d156:	b7 04 1c f0 	insert %d15,%d4,0,0,28
8000d15a:	ee 03       	jnz %d15,8000d160 <__hi0bits+0x28>
8000d15c:	c2 42       	add %d2,4
8000d15e:	06 44       	sh %d4,4
8000d160:	b7 04 1e f0 	insert %d15,%d4,0,0,30
8000d164:	ee 03       	jnz %d15,8000d16a <__hi0bits+0x32>
8000d166:	c2 22       	add %d2,2
8000d168:	06 24       	sh %d4,2
8000d16a:	0e 47       	jltz %d4,8000d178 <__hi0bits+0x40>
8000d16c:	7b 00 00 f4 	movh %d15,16384
8000d170:	26 f4       	and %d4,%d15
8000d172:	c2 12       	add %d2,1
8000d174:	ab 02 82 24 	sel %d2,%d4,%d2,32
8000d178:	00 90       	ret 

8000d17a <__lo0bits>:
8000d17a:	54 43       	ld.w %d3,[%a4]
8000d17c:	8f 73 00 f1 	and %d15,%d3,7
8000d180:	6e 0e       	jz %d15,8000d19c <__lo0bits+0x22>
8000d182:	82 02       	mov %d2,0
8000d184:	6f 03 2d 80 	jnz.t %d3,0,8000d1de <__lo0bits+0x64>
8000d188:	6f 13 06 00 	jz.t %d3,1,8000d194 <__lo0bits+0x1a>
8000d18c:	06 f3       	sh %d3,-1
8000d18e:	74 43       	st.w [%a4],%d3
8000d190:	82 12       	mov %d2,1
8000d192:	00 90       	ret 
8000d194:	06 e3       	sh %d3,-2
8000d196:	74 43       	st.w [%a4],%d3
8000d198:	82 22       	mov %d2,2
8000d19a:	00 90       	ret 
8000d19c:	b7 03 10 f8 	insert %d15,%d3,0,16,16
8000d1a0:	82 04       	mov %d4,0
8000d1a2:	ee 05       	jnz %d15,8000d1ac <__lo0bits+0x32>
8000d1a4:	8f 03 1f 30 	sh %d3,%d3,-16
8000d1a8:	3b 00 01 40 	mov %d4,16
8000d1ac:	02 3f       	mov %d15,%d3
8000d1ae:	16 ff       	and %d15,255
8000d1b0:	ee 04       	jnz %d15,8000d1b8 <__lo0bits+0x3e>
8000d1b2:	1b 84 00 40 	addi %d4,%d4,8
8000d1b6:	06 83       	sh %d3,-8
8000d1b8:	8f f3 00 f1 	and %d15,%d3,15
8000d1bc:	ee 03       	jnz %d15,8000d1c2 <__lo0bits+0x48>
8000d1be:	c2 44       	add %d4,4
8000d1c0:	06 c3       	sh %d3,-4
8000d1c2:	8f 33 00 f1 	and %d15,%d3,3
8000d1c6:	ee 03       	jnz %d15,8000d1cc <__lo0bits+0x52>
8000d1c8:	c2 24       	add %d4,2
8000d1ca:	06 e3       	sh %d3,-2
8000d1cc:	6f 03 07 80 	jnz.t %d3,0,8000d1da <__lo0bits+0x60>
8000d1d0:	06 f3       	sh %d3,-1
8000d1d2:	3b 00 02 20 	mov %d2,32
8000d1d6:	76 34       	jz %d3,8000d1de <__lo0bits+0x64>
8000d1d8:	c2 14       	add %d4,1
8000d1da:	74 43       	st.w [%a4],%d3
8000d1dc:	02 42       	mov %d2,%d4
8000d1de:	00 90       	ret 

8000d1e0 <__i2b>:
8000d1e0:	02 4f       	mov %d15,%d4
8000d1e2:	82 14       	mov %d4,1
8000d1e4:	6d ff 35 ff 	call 8000d04e <_Balloc>
8000d1e8:	6c 25       	st.w [%a2]20,%d15
8000d1ea:	82 1f       	mov %d15,1
8000d1ec:	6c 24       	st.w [%a2]16,%d15
8000d1ee:	00 90       	ret 

8000d1f0 <__multiply>:
8000d1f0:	19 52 10 00 	ld.w %d2,[%a5]16
8000d1f4:	4c 64       	ld.w %d15,[%a6]16
8000d1f6:	40 5f       	mov.aa %a15,%a5
8000d1f8:	40 6c       	mov.aa %a12,%a6
8000d1fa:	7f f2 04 00 	jge %d2,%d15,8000d202 <__multiply+0x12>
8000d1fe:	40 6f       	mov.aa %a15,%a6
8000d200:	40 5c       	mov.aa %a12,%a5
8000d202:	48 4a       	ld.w %d10,[%a15]16
8000d204:	19 c9 10 00 	ld.w %d9,[%a12]16
8000d208:	4c f2       	ld.w %d15,[%a15]8
8000d20a:	0b 9a 00 80 	add %d8,%d10,%d9
8000d20e:	48 12       	ld.w %d2,[%a15]4
8000d210:	0b 8f 20 41 	lt %d4,%d15,%d8
8000d214:	42 24       	add %d4,%d2
8000d216:	6d ff 1c ff 	call 8000d04e <_Balloc>
8000d21a:	d9 23 14 00 	lea %a3,[%a2]20
8000d21e:	01 38 02 d6 	addsc.a %a13,%a3,%d8,2
8000d222:	40 34       	mov.aa %a4,%a3
8000d224:	82 0f       	mov %d15,0
8000d226:	80 43       	mov.d %d3,%a4
8000d228:	80 d2       	mov.d %d2,%a13
8000d22a:	7f 23 04 80 	jge.u %d3,%d2,8000d232 <__multiply+0x42>
8000d22e:	64 4f       	st.w [%a4+],%d15
8000d230:	3c fb       	j 8000d226 <__multiply+0x36>
8000d232:	d9 ff 14 00 	lea %a15,[%a15]20
8000d236:	d9 cc 14 00 	lea %a12,[%a12]20
8000d23a:	80 f3       	mov.d %d3,%a15
8000d23c:	80 cf       	mov.d %d15,%a12
8000d23e:	13 4a 20 43 	madd %d4,%d3,%d10,4
8000d242:	13 49 20 0f 	madd %d0,%d15,%d9,4
8000d246:	80 c2       	mov.d %d2,%a12
8000d248:	7f 02 54 80 	jge.u %d2,%d0,8000d2f0 <__multiply+0x100>
8000d24c:	b9 c2 00 00 	ld.hu %d2,[%a12]0
8000d250:	40 34       	mov.aa %a4,%a3
8000d252:	40 f6       	mov.aa %a6,%a15
8000d254:	82 03       	mov %d3,0
8000d256:	df 02 21 00 	jeq %d2,0,8000d298 <__multiply+0xa8>
8000d25a:	40 45       	mov.aa %a5,%a4
8000d25c:	44 67       	ld.w %d7,[%a6+]
8000d25e:	44 56       	ld.w %d6,[%a5+]
8000d260:	b7 07 10 18 	insert %d1,%d7,0,16,16
8000d264:	b7 06 10 58 	insert %d5,%d6,0,16,16
8000d268:	8f 07 1f 70 	sh %d7,%d7,-16
8000d26c:	03 21 0a 55 	madd %d5,%d5,%d1,%d2
8000d270:	8f 06 1f 60 	sh %d6,%d6,-16
8000d274:	03 27 0a 66 	madd %d6,%d6,%d7,%d2
8000d278:	42 35       	add %d5,%d3
8000d27a:	8f 05 1f 30 	sh %d3,%d5,-16
8000d27e:	1a 36       	add %d15,%d6,%d3
8000d280:	37 f5 10 58 	insert %d5,%d5,%d15,16,16
8000d284:	8f 0f 1f 30 	sh %d3,%d15,-16
8000d288:	80 6f       	mov.d %d15,%a6
8000d28a:	74 45       	st.w [%a4],%d5
8000d28c:	7f 4f 04 80 	jge.u %d15,%d4,8000d294 <__multiply+0xa4>
8000d290:	40 54       	mov.aa %a4,%a5
8000d292:	3c e4       	j 8000d25a <__multiply+0x6a>
8000d294:	59 43 04 00 	st.w [%a4]4,%d3
8000d298:	b9 c2 02 00 	ld.hu %d2,[%a12]2
8000d29c:	df 02 27 00 	jeq %d2,0,8000d2ea <__multiply+0xfa>
8000d2a0:	54 33       	ld.w %d3,[%a3]
8000d2a2:	40 34       	mov.aa %a4,%a3
8000d2a4:	40 f5       	mov.aa %a5,%a15
8000d2a6:	82 07       	mov %d7,0
8000d2a8:	40 56       	mov.aa %a6,%a5
8000d2aa:	44 66       	ld.w %d6,[%a6+]
8000d2ac:	40 47       	mov.aa %a7,%a4
8000d2ae:	44 75       	ld.w %d5,[%a7+]
8000d2b0:	b7 06 10 68 	insert %d6,%d6,0,16,16
8000d2b4:	8f 05 1f 50 	sh %d5,%d5,-16
8000d2b8:	03 26 0a f5 	madd %d15,%d5,%d6,%d2
8000d2bc:	42 7f       	add %d15,%d7
8000d2be:	37 f3 10 38 	insert %d3,%d3,%d15,16,16
8000d2c2:	8f 0f 1f f0 	sh %d15,%d15,-16
8000d2c6:	74 43       	st.w [%a4],%d3
8000d2c8:	b9 55 02 00 	ld.hu %d5,[%a5]2
8000d2cc:	b9 43 04 00 	ld.hu %d3,[%a4]4
8000d2d0:	40 65       	mov.aa %a5,%a6
8000d2d2:	03 25 0a 33 	madd %d3,%d3,%d5,%d2
8000d2d6:	42 f3       	add %d3,%d15
8000d2d8:	80 6f       	mov.d %d15,%a6
8000d2da:	8f 03 1f 70 	sh %d7,%d3,-16
8000d2de:	7f 4f 04 80 	jge.u %d15,%d4,8000d2e6 <__multiply+0xf6>
8000d2e2:	40 74       	mov.aa %a4,%a7
8000d2e4:	3c e2       	j 8000d2a8 <__multiply+0xb8>
8000d2e6:	59 43 04 00 	st.w [%a4]4,%d3
8000d2ea:	b0 4c       	add.a %a12,4
8000d2ec:	b0 43       	add.a %a3,4
8000d2ee:	3c ac       	j 8000d246 <__multiply+0x56>
8000d2f0:	8b 08 40 f3 	max %d15,%d8,0
8000d2f4:	9f 0f 05 80 	jned %d15,0,8000d2fe <__multiply+0x10e>
8000d2f8:	59 28 10 00 	st.w [%a2]16,%d8
8000d2fc:	00 90       	ret 
8000d2fe:	09 d2 3c f5 	ld.w %d2,[+%a13]-4
8000d302:	df 02 fb ff 	jne %d2,0,8000d2f8 <__multiply+0x108>
8000d306:	c2 f8       	add %d8,-1
8000d308:	3c f6       	j 8000d2f4 <__multiply+0x104>

8000d30a <__pow5mult>:
8000d30a:	8f 34 00 21 	and %d2,%d4,3
8000d30e:	40 4c       	mov.aa %a12,%a4
8000d310:	40 5d       	mov.aa %a13,%a5
8000d312:	02 4f       	mov %d15,%d4
8000d314:	76 2d       	jz %d2,8000d32e <__pow5mult+0x24>
8000d316:	91 00 00 f8 	movh.a %a15,32768
8000d31a:	d9 ff d8 b0 	lea %a15,[%a15]3800 <80000ed8 <p05.2553>>
8000d31e:	01 f2 02 f6 	addsc.a %a15,%a15,%d2,2
8000d322:	82 05       	mov %d5,0
8000d324:	19 f4 fc ff 	ld.w %d4,[%a15]-4
8000d328:	6d ff c7 fe 	call 8000d0b6 <__multadd>
8000d32c:	40 2d       	mov.aa %a13,%a2
8000d32e:	86 ef       	sha %d15,-2
8000d330:	6e 29       	jz %d15,8000d382 <__pow5mult+0x78>
8000d332:	99 cf 08 10 	ld.a %a15,[%a12]72
8000d336:	7c fb       	jnz.a %a15,8000d34c <__pow5mult+0x42>
8000d338:	40 c4       	mov.aa %a4,%a12
8000d33a:	3b 10 27 40 	mov %d4,625
8000d33e:	6d ff 51 ff 	call 8000d1e0 <__i2b>
8000d342:	82 02       	mov %d2,0
8000d344:	b5 c2 08 10 	st.a [%a12]72,%a2
8000d348:	40 2f       	mov.aa %a15,%a2
8000d34a:	74 22       	st.w [%a2],%d2
8000d34c:	82 08       	mov %d8,0
8000d34e:	2e 0c       	jz.t %d15,0,8000d366 <__pow5mult+0x5c>
8000d350:	40 d5       	mov.aa %a5,%a13
8000d352:	40 c4       	mov.aa %a4,%a12
8000d354:	40 f6       	mov.aa %a6,%a15
8000d356:	6d ff 4d ff 	call 8000d1f0 <__multiply>
8000d35a:	40 d5       	mov.aa %a5,%a13
8000d35c:	40 2e       	mov.aa %a14,%a2
8000d35e:	40 c4       	mov.aa %a4,%a12
8000d360:	6d ff a2 fe 	call 8000d0a4 <_Bfree>
8000d364:	40 ed       	mov.aa %a13,%a14
8000d366:	86 ff       	sha %d15,-1
8000d368:	6e 0d       	jz %d15,8000d382 <__pow5mult+0x78>
8000d36a:	c8 02       	ld.a %a2,[%a15]0
8000d36c:	bc 23       	jz.a %a2,8000d372 <__pow5mult+0x68>
8000d36e:	40 2f       	mov.aa %a15,%a2
8000d370:	3c ef       	j 8000d34e <__pow5mult+0x44>
8000d372:	40 c4       	mov.aa %a4,%a12
8000d374:	40 f5       	mov.aa %a5,%a15
8000d376:	40 f6       	mov.aa %a6,%a15
8000d378:	6d ff 3c ff 	call 8000d1f0 <__multiply>
8000d37c:	e8 02       	st.a [%a15]0,%a2
8000d37e:	74 28       	st.w [%a2],%d8
8000d380:	3c f7       	j 8000d36e <__pow5mult+0x64>
8000d382:	40 d2       	mov.aa %a2,%a13
8000d384:	00 90       	ret 

8000d386 <__lshift>:
8000d386:	19 5b 10 00 	ld.w %d11,[%a5]16
8000d38a:	8f b4 3f 80 	sha %d8,%d4,-5
8000d38e:	02 4a       	mov %d10,%d4
8000d390:	42 8b       	add %d11,%d8
8000d392:	19 54 04 00 	ld.w %d4,[%a5]4
8000d396:	4c 52       	ld.w %d15,[%a5]8
8000d398:	40 4e       	mov.aa %a14,%a4
8000d39a:	40 5c       	mov.aa %a12,%a5
8000d39c:	1b 1b 00 90 	addi %d9,%d11,1
8000d3a0:	7f 9f 05 00 	jge %d15,%d9,8000d3aa <__lshift+0x24>
8000d3a4:	c2 14       	add %d4,1
8000d3a6:	06 1f       	sh %d15,1
8000d3a8:	3c fc       	j 8000d3a0 <__lshift+0x1a>
8000d3aa:	40 e4       	mov.aa %a4,%a14
8000d3ac:	6d ff 51 fe 	call 8000d04e <_Balloc>
8000d3b0:	8b 08 40 f3 	max %d15,%d8,0
8000d3b4:	40 2d       	mov.aa %a13,%a2
8000d3b6:	d9 2f 14 00 	lea %a15,[%a2]20
8000d3ba:	d2 02       	mov %e2,0
8000d3bc:	01 f2 02 26 	addsc.a %a2,%a15,%d2,2
8000d3c0:	9f 0f 03 80 	jned %d15,0,8000d3c6 <__lshift+0x40>
8000d3c4:	3c 04       	j 8000d3cc <__lshift+0x46>
8000d3c6:	74 23       	st.w [%a2],%d3
8000d3c8:	c2 12       	add %d2,1
8000d3ca:	3c f9       	j 8000d3bc <__lshift+0x36>
8000d3cc:	8b 08 40 83 	max %d8,%d8,0
8000d3d0:	01 f8 02 36 	addsc.a %a3,%a15,%d8,2
8000d3d4:	d9 cf 14 00 	lea %a15,[%a12]20
8000d3d8:	19 c2 10 00 	ld.w %d2,[%a12]16
8000d3dc:	80 f3       	mov.d %d3,%a15
8000d3de:	8f fa 01 41 	and %d4,%d10,31
8000d3e2:	13 42 20 23 	madd %d2,%d3,%d2,4
8000d3e6:	8b 04 02 51 	rsub %d5,%d4,32
8000d3ea:	82 0f       	mov %d15,0
8000d3ec:	df 04 1a 00 	jeq %d4,0,8000d420 <__lshift+0x9a>
8000d3f0:	40 f5       	mov.aa %a5,%a15
8000d3f2:	44 53       	ld.w %d3,[%a5+]
8000d3f4:	d9 32 04 00 	lea %a2,[%a3]4
8000d3f8:	0f 43 00 30 	sh %d3,%d3,%d4
8000d3fc:	a6 3f       	or %d15,%d3
8000d3fe:	6c 30       	st.w [%a3]0,%d15
8000d400:	4c f0       	ld.w %d15,[%a15]0
8000d402:	8b 05 00 31 	rsub %d3,%d5,0
8000d406:	0f 3f 00 30 	sh %d3,%d15,%d3
8000d40a:	02 3f       	mov %d15,%d3
8000d40c:	80 53       	mov.d %d3,%a5
8000d40e:	40 5f       	mov.aa %a15,%a5
8000d410:	7f 23 04 80 	jge.u %d3,%d2,8000d418 <__lshift+0x92>
8000d414:	40 23       	mov.aa %a3,%a2
8000d416:	3c ed       	j 8000d3f0 <__lshift+0x6a>
8000d418:	c2 2b       	add %d11,2
8000d41a:	6c 31       	st.w [%a3]4,%d15
8000d41c:	2a b9       	cmov %d9,%d15,%d11
8000d41e:	3c 08       	j 8000d42e <__lshift+0xa8>
8000d420:	4c f0       	ld.w %d15,[%a15]0
8000d422:	b0 4f       	add.a %a15,4
8000d424:	80 f3       	mov.d %d3,%a15
8000d426:	6c 30       	st.w [%a3]0,%d15
8000d428:	b0 43       	add.a %a3,4
8000d42a:	3f 23 fb ff 	jlt.u %d3,%d2,8000d420 <__lshift+0x9a>
8000d42e:	c2 f9       	add %d9,-1
8000d430:	59 d9 10 00 	st.w [%a13]16,%d9
8000d434:	40 e4       	mov.aa %a4,%a14
8000d436:	40 c5       	mov.aa %a5,%a12
8000d438:	6d ff 36 fe 	call 8000d0a4 <_Bfree>
8000d43c:	40 d2       	mov.aa %a2,%a13
8000d43e:	00 90       	ret 

8000d440 <__mcmp>:
8000d440:	4c 54       	ld.w %d15,[%a5]16
8000d442:	19 42 10 00 	ld.w %d2,[%a4]16
8000d446:	a2 f2       	sub %d2,%d15
8000d448:	df 02 1c 80 	jne %d2,0,8000d480 <__mcmp+0x40>
8000d44c:	80 42       	mov.d %d2,%a4
8000d44e:	06 2f       	sh %d15,2
8000d450:	60 f2       	mov.a %a2,%d15
8000d452:	1b 42 01 30 	addi %d3,%d2,20
8000d456:	d9 55 14 00 	lea %a5,[%a5]20
8000d45a:	01 23 00 f6 	addsc.a %a15,%a2,%d3,0
8000d45e:	30 25       	add.a %a5,%a2
8000d460:	09 f2 3c f5 	ld.w %d2,[+%a15]-4
8000d464:	09 5f 3c f5 	ld.w %d15,[+%a5]-4
8000d468:	5f f2 08 00 	jeq %d2,%d15,8000d478 <__mcmp+0x38>
8000d46c:	0b f2 30 21 	lt.u %d2,%d2,%d15
8000d470:	82 f3       	mov %d3,-1
8000d472:	ab 13 80 22 	sel %d2,%d2,%d3,1
8000d476:	00 90       	ret 
8000d478:	80 ff       	mov.d %d15,%a15
8000d47a:	3f f3 f3 ff 	jlt.u %d3,%d15,8000d460 <__mcmp+0x20>
8000d47e:	82 02       	mov %d2,0
8000d480:	00 90       	ret 

8000d482 <__mdiff>:
8000d482:	40 4d       	mov.aa %a13,%a4
8000d484:	40 5f       	mov.aa %a15,%a5
8000d486:	40 54       	mov.aa %a4,%a5
8000d488:	40 65       	mov.aa %a5,%a6
8000d48a:	40 6c       	mov.aa %a12,%a6
8000d48c:	6d ff da ff 	call 8000d440 <__mcmp>
8000d490:	02 2f       	mov %d15,%d2
8000d492:	f6 2a       	jnz %d2,8000d4a6 <__mdiff+0x24>
8000d494:	40 d4       	mov.aa %a4,%a13
8000d496:	82 04       	mov %d4,0
8000d498:	6d ff db fd 	call 8000d04e <_Balloc>
8000d49c:	82 12       	mov %d2,1
8000d49e:	59 22 10 00 	st.w [%a2]16,%d2
8000d4a2:	6c 25       	st.w [%a2]20,%d15
8000d4a4:	00 90       	ret 
8000d4a6:	82 08       	mov %d8,0
8000d4a8:	ce 25       	jgez %d2,8000d4b2 <__mdiff+0x30>
8000d4aa:	40 f2       	mov.aa %a2,%a15
8000d4ac:	82 18       	mov %d8,1
8000d4ae:	40 cf       	mov.aa %a15,%a12
8000d4b0:	40 2c       	mov.aa %a12,%a2
8000d4b2:	40 d4       	mov.aa %a4,%a13
8000d4b4:	48 14       	ld.w %d4,[%a15]4
8000d4b6:	6d ff cc fd 	call 8000d04e <_Balloc>
8000d4ba:	48 42       	ld.w %d2,[%a15]16
8000d4bc:	d9 ff 14 00 	lea %a15,[%a15]20
8000d4c0:	80 ff       	mov.d %d15,%a15
8000d4c2:	d9 c4 14 00 	lea %a4,[%a12]20
8000d4c6:	13 42 20 7f 	madd %d7,%d15,%d2,4
8000d4ca:	19 c0 10 00 	ld.w %d0,[%a12]16
8000d4ce:	80 4f       	mov.d %d15,%a4
8000d4d0:	59 28 0c 00 	st.w [%a2]12,%d8
8000d4d4:	13 40 20 0f 	madd %d0,%d15,%d0,4
8000d4d8:	d9 25 14 00 	lea %a5,[%a2]20
8000d4dc:	82 03       	mov %d3,0
8000d4de:	44 f6       	ld.w %d6,[%a15+]
8000d4e0:	44 45       	ld.w %d5,[%a4+]
8000d4e2:	b7 06 10 48 	insert %d4,%d6,0,16,16
8000d4e6:	b7 05 10 18 	insert %d1,%d5,0,16,16
8000d4ea:	42 34       	add %d4,%d3
8000d4ec:	a2 14       	sub %d4,%d1
8000d4ee:	8f 06 1f 60 	sh %d6,%d6,-16
8000d4f2:	8f 05 1f 50 	sh %d5,%d5,-16
8000d4f6:	8f 04 3f 30 	sha %d3,%d4,-16
8000d4fa:	0b 56 80 50 	sub %d5,%d6,%d5
8000d4fe:	1a 35       	add %d15,%d5,%d3
8000d500:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000d504:	8f 0f 3f 30 	sha %d3,%d15,-16
8000d508:	80 4f       	mov.d %d15,%a4
8000d50a:	d9 53 04 00 	lea %a3,[%a5]4
8000d50e:	74 54       	st.w [%a5],%d4
8000d510:	40 35       	mov.aa %a5,%a3
8000d512:	3f 0f e6 ff 	jlt.u %d15,%d0,8000d4de <__mdiff+0x5c>
8000d516:	80 ff       	mov.d %d15,%a15
8000d518:	7f 7f 12 80 	jge.u %d15,%d7,8000d53c <__mdiff+0xba>
8000d51c:	44 f5       	ld.w %d5,[%a15+]
8000d51e:	b7 05 10 48 	insert %d4,%d5,0,16,16
8000d522:	8f 05 1f 50 	sh %d5,%d5,-16
8000d526:	42 34       	add %d4,%d3
8000d528:	8f 04 3f f0 	sha %d15,%d4,-16
8000d52c:	42 5f       	add %d15,%d5
8000d52e:	37 f4 10 48 	insert %d4,%d4,%d15,16,16
8000d532:	8f 0f 3f 30 	sha %d3,%d15,-16
8000d536:	74 34       	st.w [%a3],%d4
8000d538:	b0 43       	add.a %a3,4
8000d53a:	3c ee       	j 8000d516 <__mdiff+0x94>
8000d53c:	09 3f 3c f5 	ld.w %d15,[+%a3]-4
8000d540:	ee 03       	jnz %d15,8000d546 <__mdiff+0xc4>
8000d542:	c2 f2       	add %d2,-1
8000d544:	3c fc       	j 8000d53c <__mdiff+0xba>
8000d546:	59 22 10 00 	st.w [%a2]16,%d2
8000d54a:	00 90       	ret 

8000d54c <__d2b>:
8000d54c:	20 08       	sub.a %sp,8
8000d54e:	02 48       	mov %d8,%d4
8000d550:	82 14       	mov %d4,1
8000d552:	02 59       	mov %d9,%d5
8000d554:	40 5d       	mov.aa %a13,%a5
8000d556:	40 6c       	mov.aa %a12,%a6
8000d558:	6d ff 7b fd 	call 8000d04e <_Balloc>
8000d55c:	b7 09 0c 2a 	insert %d2,%d9,0,20,12
8000d560:	37 09 6b 9a 	extr.u %d9,%d9,20,11
8000d564:	40 2f       	mov.aa %a15,%a2
8000d566:	76 93       	jz %d9,8000d56c <__d2b+0x20>
8000d568:	b7 f2 01 2a 	insert %d2,%d2,15,20,1
8000d56c:	59 a2 04 00 	st.w [%sp]4,%d2
8000d570:	df 08 20 00 	jeq %d8,0,8000d5b0 <__d2b+0x64>
8000d574:	d9 a4 08 00 	lea %a4,[%sp]8
8000d578:	89 48 38 f5 	st.w [+%a4]-8,%d8
8000d57c:	40 a4       	mov.aa %a4,%sp
8000d57e:	6d ff fe fd 	call 8000d17a <__lo0bits>
8000d582:	58 00       	ld.w %d15,[%sp]0
8000d584:	76 2f       	jz %d2,8000d5a2 <__d2b+0x56>
8000d586:	19 a4 04 00 	ld.w %d4,[%sp]4
8000d58a:	8b 02 02 31 	rsub %d3,%d2,32
8000d58e:	0f 34 00 30 	sh %d3,%d4,%d3
8000d592:	a6 3f       	or %d15,%d3
8000d594:	68 5f       	st.w [%a15]20,%d15
8000d596:	8b 02 00 f1 	rsub %d15,%d2,0
8000d59a:	0f f4 00 f0 	sh %d15,%d4,%d15
8000d59e:	78 01       	st.w [%sp]4,%d15
8000d5a0:	3c 02       	j 8000d5a4 <__d2b+0x58>
8000d5a2:	68 5f       	st.w [%a15]20,%d15
8000d5a4:	58 01       	ld.w %d15,[%sp]4
8000d5a6:	82 28       	mov %d8,2
8000d5a8:	ea 18       	cmovn %d8,%d15,1
8000d5aa:	68 6f       	st.w [%a15]24,%d15
8000d5ac:	68 48       	st.w [%a15]16,%d8
8000d5ae:	3c 0c       	j 8000d5c6 <__d2b+0x7a>
8000d5b0:	d9 a4 04 00 	lea %a4,[%sp]4
8000d5b4:	6d ff e3 fd 	call 8000d17a <__lo0bits>
8000d5b8:	58 01       	ld.w %d15,[%sp]4
8000d5ba:	1b 02 02 20 	addi %d2,%d2,32
8000d5be:	68 5f       	st.w [%a15]20,%d15
8000d5c0:	82 1f       	mov %d15,1
8000d5c2:	68 4f       	st.w [%a15]16,%d15
8000d5c4:	82 18       	mov %d8,1
8000d5c6:	76 98       	jz %d9,8000d5d6 <__d2b+0x8a>
8000d5c8:	1b d9 bc 9f 	addi %d9,%d9,-1075
8000d5cc:	42 29       	add %d9,%d2
8000d5ce:	74 d9       	st.w [%a13],%d9
8000d5d0:	8b 52 03 21 	rsub %d2,%d2,53
8000d5d4:	3c 0d       	j 8000d5ee <__d2b+0xa2>
8000d5d6:	01 f8 02 26 	addsc.a %a2,%a15,%d8,2
8000d5da:	1b e2 bc 2f 	addi %d2,%d2,-1074
8000d5de:	74 d2       	st.w [%a13],%d2
8000d5e0:	19 24 10 00 	ld.w %d4,[%a2]16
8000d5e4:	6d ff aa fd 	call 8000d138 <__hi0bits>
8000d5e8:	06 58       	sh %d8,5
8000d5ea:	0b 28 80 20 	sub %d2,%d8,%d2
8000d5ee:	74 c2       	st.w [%a12],%d2
8000d5f0:	40 f2       	mov.aa %a2,%a15
8000d5f2:	00 90       	ret 

8000d5f4 <__fpclassifyd>:
8000d5f4:	0f 45 a0 f0 	or %d15,%d5,%d4
8000d5f8:	82 22       	mov %d2,2
8000d5fa:	6e 1d       	jz %d15,8000d634 <__fpclassifyd+0x40>
8000d5fc:	7b 00 00 38 	movh %d3,32768
8000d600:	3a 53       	eq %d15,%d3,%d5
8000d602:	8b 04 00 f4 	and.eq %d15,%d4,0
8000d606:	8b 04 00 62 	eq %d6,%d4,0
8000d60a:	ee 15       	jnz %d15,8000d634 <__fpclassifyd+0x40>
8000d60c:	b7 05 81 5f 	insert %d5,%d5,0,31,1
8000d610:	7b 00 fe f7 	movh %d15,32736
8000d614:	9b 05 ff 3f 	addih %d3,%d5,65520
8000d618:	82 42       	mov %d2,4
8000d61a:	3f f3 0d 80 	jlt.u %d3,%d15,8000d634 <__fpclassifyd+0x40>
8000d61e:	7b 00 01 f0 	movh %d15,16
8000d622:	82 32       	mov %d2,3
8000d624:	3f f5 08 80 	jlt.u %d5,%d15,8000d634 <__fpclassifyd+0x40>
8000d628:	7b 00 ff 27 	movh %d2,32752
8000d62c:	0b 25 00 51 	eq %d5,%d5,%d2
8000d630:	0f 56 80 20 	and %d2,%d6,%d5
8000d634:	00 90       	ret 

8000d636 <__ssprint_r>:
8000d636:	4c 62       	ld.w %d15,[%a6]8
8000d638:	20 08       	sub.a %sp,8
8000d63a:	40 4e       	mov.aa %a14,%a4
8000d63c:	40 5f       	mov.aa %a15,%a5
8000d63e:	40 6c       	mov.aa %a12,%a6
8000d640:	54 6c       	ld.w %d12,[%a6]
8000d642:	6e 30       	jz %d15,8000d6a2 <__ssprint_r+0x6c>
8000d644:	a0 02       	mov.a %a2,0
8000d646:	b5 a2 04 00 	st.a [%sp]4,%a2
8000d64a:	82 09       	mov %d9,0
8000d64c:	3b 00 48 e0 	mov %d14,1152
8000d650:	3b f0 b7 df 	mov %d13,-1153
8000d654:	3c 0a       	j 8000d668 <__ssprint_r+0x32>
8000d656:	60 c2       	mov.a %a2,%d12
8000d658:	d4 22       	ld.a %a2,[%a2]
8000d65a:	b5 a2 04 00 	st.a [%sp]4,%a2
8000d65e:	60 c2       	mov.a %a2,%d12
8000d660:	1b 8c 00 c0 	addi %d12,%d12,8
8000d664:	19 29 04 00 	ld.w %d9,[%a2]4
8000d668:	df 09 f7 7f 	jeq %d9,0,8000d656 <__ssprint_r+0x20>
8000d66c:	48 28       	ld.w %d8,[%a15]8
8000d66e:	3f 89 5a 80 	jlt.u %d9,%d8,8000d722 <__ssprint_r+0xec>
8000d672:	88 62       	ld.h %d2,[%a15]12
8000d674:	0f e2 80 f0 	and %d15,%d2,%d14
8000d678:	ee 19       	jnz %d15,8000d6aa <__ssprint_r+0x74>
8000d67a:	3f 89 54 80 	jlt.u %d9,%d8,8000d722 <__ssprint_r+0xec>
8000d67e:	c8 04       	ld.a %a4,[%a15]0
8000d680:	99 a5 04 00 	ld.a %a5,[%sp]4 <0 <NULL>>
8000d684:	02 84       	mov %d4,%d8
8000d686:	6d 00 81 00 	call 8000d788 <memmove>
8000d68a:	4c f2       	ld.w %d15,[%a15]8
8000d68c:	a2 8f       	sub %d15,%d8
8000d68e:	68 2f       	st.w [%a15]8,%d15
8000d690:	4c f0       	ld.w %d15,[%a15]0
8000d692:	42 f8       	add %d8,%d15
8000d694:	4c c2       	ld.w %d15,[%a12]8
8000d696:	68 08       	st.w [%a15]0,%d8
8000d698:	52 99       	sub %d9,%d15,%d9
8000d69a:	59 c9 08 00 	st.w [%a12]8,%d9
8000d69e:	df 09 dc ff 	jne %d9,0,8000d656 <__ssprint_r+0x20>
8000d6a2:	82 0f       	mov %d15,0
8000d6a4:	6c c1       	st.w [%a12]4,%d15
8000d6a6:	82 02       	mov %d2,0
8000d6a8:	00 90       	ret 
8000d6aa:	c8 45       	ld.a %a5,[%a15]16
8000d6ac:	48 5a       	ld.w %d10,[%a15]20
8000d6ae:	4c f0       	ld.w %d15,[%a15]0
8000d6b0:	80 53       	mov.d %d3,%a5
8000d6b2:	53 3a 20 a0 	mul %d10,%d10,3
8000d6b6:	a2 3f       	sub %d15,%d3
8000d6b8:	82 23       	mov %d3,2
8000d6ba:	4b 3a 01 a2 	div %e10,%d10,%d3
8000d6be:	92 13       	add %d3,%d15,1
8000d6c0:	42 93       	add %d3,%d9
8000d6c2:	0b 3a b0 a1 	max.u %d10,%d10,%d3
8000d6c6:	40 e4       	mov.aa %a4,%a14
8000d6c8:	02 a4       	mov %d4,%d10
8000d6ca:	6f a2 12 00 	jz.t %d2,10,8000d6ee <__ssprint_r+0xb8>
8000d6ce:	6d ff 0c e9 	call 8000a8e6 <_malloc_r>
8000d6d2:	40 2d       	mov.aa %a13,%a2
8000d6d4:	bd 02 15 00 	jz.a %a2,8000d6fe <__ssprint_r+0xc8>
8000d6d8:	c8 45       	ld.a %a5,[%a15]16
8000d6da:	40 24       	mov.aa %a4,%a2
8000d6dc:	02 f4       	mov %d4,%d15
8000d6de:	6d ff aa fc 	call 8000d032 <memcpy>
8000d6e2:	88 62       	ld.h %d2,[%a15]12
8000d6e4:	26 d2       	and %d2,%d13
8000d6e6:	8f 02 48 21 	or %d2,%d2,128
8000d6ea:	a8 62       	st.h [%a15]12,%d2
8000d6ec:	3c 13       	j 8000d712 <__ssprint_r+0xdc>
8000d6ee:	6d 00 7d 00 	call 8000d7e8 <_realloc_r>
8000d6f2:	40 2d       	mov.aa %a13,%a2
8000d6f4:	7c 2f       	jnz.a %a2,8000d712 <__ssprint_r+0xdc>
8000d6f6:	c8 45       	ld.a %a5,[%a15]16
8000d6f8:	40 e4       	mov.aa %a4,%a14
8000d6fa:	6d ff eb eb 	call 8000aed0 <_free_r>
8000d6fe:	da 0c       	mov %d15,12
8000d700:	6c e0       	st.w [%a14]0,%d15
8000d702:	8c f6       	ld.h %d15,[%a15]12
8000d704:	82 f2       	mov %d2,-1
8000d706:	96 40       	or %d15,64
8000d708:	a8 6f       	st.h [%a15]12,%d15
8000d70a:	82 0f       	mov %d15,0
8000d70c:	6c c2       	st.w [%a12]8,%d15
8000d70e:	6c c1       	st.w [%a12]4,%d15
8000d710:	00 90       	ret 
8000d712:	e8 4d       	st.a [%a15]16,%a13
8000d714:	10 dd       	addsc.a %a13,%a13,%d15,0
8000d716:	68 5a       	st.w [%a15]20,%d10
8000d718:	a2 fa       	sub %d10,%d15
8000d71a:	e8 0d       	st.a [%a15]0,%a13
8000d71c:	02 98       	mov %d8,%d9
8000d71e:	68 2a       	st.w [%a15]8,%d10
8000d720:	3c ad       	j 8000d67a <__ssprint_r+0x44>
8000d722:	02 98       	mov %d8,%d9
8000d724:	3c ad       	j 8000d67e <__ssprint_r+0x48>

8000d726 <_calloc_r>:
8000d726:	e2 54       	mul %d4,%d5
8000d728:	6d ff df e8 	call 8000a8e6 <_malloc_r>
8000d72c:	40 2f       	mov.aa %a15,%a2
8000d72e:	a0 02       	mov.a %a2,0
8000d730:	bd 0f 2b 00 	jz.a %a15,8000d786 <_calloc_r+0x60>
8000d734:	19 f5 fc ff 	ld.w %d5,[%a15]-4
8000d738:	8f 35 c0 51 	andn %d5,%d5,3
8000d73c:	c2 c5       	add %d5,-4
8000d73e:	8b 55 a2 f2 	ge.u %d15,%d5,37
8000d742:	ee 1d       	jnz %d15,8000d77c <_calloc_r+0x56>
8000d744:	8b 45 61 f2 	lt.u %d15,%d5,20
8000d748:	40 f2       	mov.aa %a2,%a15
8000d74a:	ee 14       	jnz %d15,8000d772 <_calloc_r+0x4c>
8000d74c:	82 0f       	mov %d15,0
8000d74e:	68 0f       	st.w [%a15]0,%d15
8000d750:	68 1f       	st.w [%a15]4,%d15
8000d752:	8b c5 a1 22 	ge.u %d2,%d5,28
8000d756:	d9 f2 08 00 	lea %a2,[%a15]8
8000d75a:	76 2c       	jz %d2,8000d772 <_calloc_r+0x4c>
8000d75c:	68 2f       	st.w [%a15]8,%d15
8000d75e:	68 3f       	st.w [%a15]12,%d15
8000d760:	8b 45 02 52 	eq %d5,%d5,36
8000d764:	d9 f2 10 00 	lea %a2,[%a15]16
8000d768:	76 55       	jz %d5,8000d772 <_calloc_r+0x4c>
8000d76a:	68 4f       	st.w [%a15]16,%d15
8000d76c:	d9 f2 18 00 	lea %a2,[%a15]24
8000d770:	68 5f       	st.w [%a15]20,%d15
8000d772:	82 0f       	mov %d15,0
8000d774:	6c 20       	st.w [%a2]0,%d15
8000d776:	6c 21       	st.w [%a2]4,%d15
8000d778:	6c 22       	st.w [%a2]8,%d15
8000d77a:	3c 05       	j 8000d784 <_calloc_r+0x5e>
8000d77c:	40 f4       	mov.aa %a4,%a15
8000d77e:	82 04       	mov %d4,0
8000d780:	6d 00 2c 00 	call 8000d7d8 <memset>
8000d784:	40 f2       	mov.aa %a2,%a15
8000d786:	00 90       	ret 

8000d788 <memmove>:
8000d788:	80 46       	mov.d %d6,%a4
8000d78a:	80 52       	mov.d %d2,%a5
8000d78c:	7f 62 16 80 	jge.u %d2,%d6,8000d7b8 <memmove+0x30>
8000d790:	0b 42 00 50 	add %d5,%d2,%d4
8000d794:	7f 56 12 80 	jge.u %d6,%d5,8000d7b8 <memmove+0x30>
8000d798:	60 4f       	mov.a %a15,%d4
8000d79a:	02 42       	mov %d2,%d4
8000d79c:	c2 f2       	add %d2,-1
8000d79e:	fd f0 03 00 	loop %a15,8000d7a4 <memmove+0x1c>
8000d7a2:	3c 19       	j 8000d7d4 <memmove+0x4c>
8000d7a4:	5a 42       	sub %d15,%d2,%d4
8000d7a6:	60 f2       	mov.a %a2,%d15
8000d7a8:	01 25 00 26 	addsc.a %a2,%a2,%d5,0
8000d7ac:	1a 62       	add %d15,%d2,%d6
8000d7ae:	79 23 00 00 	ld.b %d3,[%a2]0
8000d7b2:	60 f2       	mov.a %a2,%d15
8000d7b4:	34 23       	st.b [%a2],%d3
8000d7b6:	3c f3       	j 8000d79c <memmove+0x14>
8000d7b8:	60 4f       	mov.a %a15,%d4
8000d7ba:	a0 02       	mov.a %a2,0
8000d7bc:	01 26 00 46 	addsc.a %a4,%a2,%d6,0
8000d7c0:	01 22 00 36 	addsc.a %a3,%a2,%d2,0
8000d7c4:	fd f0 03 00 	loop %a15,8000d7ca <memmove+0x42>
8000d7c8:	3c 06       	j 8000d7d4 <memmove+0x4c>
8000d7ca:	79 33 00 00 	ld.b %d3,[%a3]0
8000d7ce:	b0 12       	add.a %a2,1
8000d7d0:	34 43       	st.b [%a4],%d3
8000d7d2:	3c f5       	j 8000d7bc <memmove+0x34>
8000d7d4:	60 62       	mov.a %a2,%d6
8000d7d6:	00 90       	ret 

8000d7d8 <memset>:
8000d7d8:	40 42       	mov.aa %a2,%a4
8000d7da:	40 4f       	mov.aa %a15,%a4
8000d7dc:	9f 05 03 80 	jned %d5,0,8000d7e2 <memset+0xa>
8000d7e0:	00 90       	ret 
8000d7e2:	28 04       	st.b [%a15]0,%d4
8000d7e4:	b0 1f       	add.a %a15,1
8000d7e6:	3c fb       	j 8000d7dc <memset+0x4>

8000d7e8 <_realloc_r>:
8000d7e8:	40 4d       	mov.aa %a13,%a4
8000d7ea:	40 5f       	mov.aa %a15,%a5
8000d7ec:	02 49       	mov %d9,%d4
8000d7ee:	7c 53       	jnz.a %a5,8000d7f4 <_realloc_r+0xc>
8000d7f0:	1d ff 7b e8 	j 8000a8e6 <_malloc_r>
8000d7f4:	6d ff c6 ea 	call 8000ad80 <__malloc_lock>
8000d7f8:	1b b9 00 20 	addi %d2,%d9,11
8000d7fc:	8b 72 61 f2 	lt.u %d15,%d2,23
8000d800:	8f 72 c0 21 	andn %d2,%d2,7
8000d804:	ab 02 a1 ff 	seln %d15,%d15,%d2,16
8000d808:	19 f3 fc ff 	ld.w %d3,[%a15]-4
8000d80c:	0b 9f 30 21 	lt.u %d2,%d15,%d9
8000d810:	8b 0f 20 25 	or.lt %d2,%d15,0
8000d814:	d9 fe f8 ff 	lea %a14,[%a15]-8
8000d818:	8f 33 c0 81 	andn %d8,%d3,3
8000d81c:	76 25       	jz %d2,8000d826 <_realloc_r+0x3e>
8000d81e:	da 0c       	mov %d15,12
8000d820:	6c d0       	st.w [%a13]0,%d15
8000d822:	1d 00 56 01 	j 8000dace <_realloc_r+0x2e6>
8000d826:	7f f8 ac 01 	jge %d8,%d15,8000db7e <_realloc_r+0x396>
8000d82a:	7b 00 00 c7 	movh %d12,28672
8000d82e:	60 c3       	mov.a %a3,%d12
8000d830:	01 e8 00 26 	addsc.a %a2,%a14,%d8,0
8000d834:	d9 34 38 30 	lea %a4,[%a3]248
8000d838:	99 43 08 00 	ld.a %a3,[%a4]8
8000d83c:	80 4c       	mov.d %d12,%a4
8000d83e:	19 2b 04 00 	ld.w %d11,[%a2]4
8000d842:	7d 32 0a 00 	jeq.a %a2,%a3,8000d856 <_realloc_r+0x6e>
8000d846:	8f 1b c0 21 	andn %d2,%d11,1
8000d84a:	01 22 00 46 	addsc.a %a4,%a2,%d2,0
8000d84e:	19 42 04 00 	ld.w %d2,[%a4]4
8000d852:	6f 02 2b 80 	jnz.t %d2,0,8000d8a8 <_realloc_r+0xc0>
8000d856:	8f 3b c0 b1 	andn %d11,%d11,3
8000d85a:	0b 8b 00 20 	add %d2,%d11,%d8
8000d85e:	7d 32 1b 80 	jne.a %a2,%a3,8000d894 <_realloc_r+0xac>
8000d862:	1b 0f 01 40 	addi %d4,%d15,16
8000d866:	3f 42 23 00 	jlt %d2,%d4,8000d8ac <_realloc_r+0xc4>
8000d86a:	10 ee       	addsc.a %a14,%a14,%d15,0
8000d86c:	60 c2       	mov.a %a2,%d12
8000d86e:	a2 f2       	sub %d2,%d15
8000d870:	b5 2e 08 00 	st.a [%a2]8,%a14
8000d874:	8f 12 40 21 	or %d2,%d2,1
8000d878:	59 e2 04 00 	st.w [%a14]4,%d2
8000d87c:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000d880:	40 d4       	mov.aa %a4,%a13
8000d882:	8f 12 00 21 	and %d2,%d2,1
8000d886:	a6 2f       	or %d15,%d2
8000d888:	59 ff fc ff 	st.w [%a15]-4,%d15
8000d88c:	6d ff 7b ea 	call 8000ad82 <__malloc_unlock>
8000d890:	40 f2       	mov.aa %a2,%a15
8000d892:	00 90       	ret 
8000d894:	3f f2 0c 00 	jlt %d2,%d15,8000d8ac <_realloc_r+0xc4>
8000d898:	cc 23       	ld.a %a15,[%a2]12
8000d89a:	99 22 08 00 	ld.a %a2,[%a2]8
8000d89e:	02 28       	mov %d8,%d2
8000d8a0:	ec 23       	st.a [%a2]12,%a15
8000d8a2:	e8 22       	st.a [%a15]8,%a2
8000d8a4:	1d 00 6d 01 	j 8000db7e <_realloc_r+0x396>
8000d8a8:	82 0b       	mov %d11,0
8000d8aa:	a0 02       	mov.a %a2,0
8000d8ac:	6f 03 08 81 	jnz.t %d3,0,8000dabc <_realloc_r+0x2d4>
8000d8b0:	99 fc f8 ff 	ld.a %a12,[%a15]-8
8000d8b4:	01 ce 20 c0 	sub.a %a12,%a14,%a12
8000d8b8:	19 ca 04 00 	ld.w %d10,[%a12]4
8000d8bc:	8f 3a c0 a1 	andn %d10,%d10,3
8000d8c0:	42 8a       	add %d10,%d8
8000d8c2:	bd 02 b3 00 	jz.a %a2,8000da28 <_realloc_r+0x240>
8000d8c6:	42 ab       	add %d11,%d10
8000d8c8:	7d 32 5f 80 	jne.a %a2,%a3,8000d986 <_realloc_r+0x19e>
8000d8cc:	1b 0f 01 20 	addi %d2,%d15,16
8000d8d0:	3f 2b ac 00 	jlt %d11,%d2,8000da28 <_realloc_r+0x240>
8000d8d4:	40 ce       	mov.aa %a14,%a12
8000d8d6:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000d8da:	09 e3 88 05 	ld.a %a3,[+%a14]8
8000d8de:	1b c8 ff 4f 	addi %d4,%d8,-4
8000d8e2:	8b 54 a2 22 	ge.u %d2,%d4,37
8000d8e6:	b5 32 0c 00 	st.a [%a3]12,%a2
8000d8ea:	b5 23 08 00 	st.a [%a2]8,%a3
8000d8ee:	df 02 36 80 	jne %d2,0,8000d95a <_realloc_r+0x172>
8000d8f2:	8b 44 61 22 	lt.u %d2,%d4,20
8000d8f6:	40 e3       	mov.aa %a3,%a14
8000d8f8:	df 02 28 80 	jne %d2,0,8000d948 <_realloc_r+0x160>
8000d8fc:	48 02       	ld.w %d2,[%a15]0
8000d8fe:	59 c2 08 00 	st.w [%a12]8,%d2
8000d902:	48 13       	ld.w %d3,[%a15]4
8000d904:	8b c4 a1 22 	ge.u %d2,%d4,28
8000d908:	59 c3 0c 00 	st.w [%a12]12,%d3
8000d90c:	f6 26       	jnz %d2,8000d918 <_realloc_r+0x130>
8000d90e:	d9 c3 10 00 	lea %a3,[%a12]16
8000d912:	d9 ff 08 00 	lea %a15,[%a15]8
8000d916:	3c 19       	j 8000d948 <_realloc_r+0x160>
8000d918:	48 22       	ld.w %d2,[%a15]8
8000d91a:	8b 44 02 82 	eq %d8,%d4,36
8000d91e:	59 c2 10 00 	st.w [%a12]16,%d2
8000d922:	48 33       	ld.w %d3,[%a15]12
8000d924:	59 c3 14 00 	st.w [%a12]20,%d3
8000d928:	f6 86       	jnz %d8,8000d934 <_realloc_r+0x14c>
8000d92a:	d9 c3 18 00 	lea %a3,[%a12]24
8000d92e:	d9 ff 10 00 	lea %a15,[%a15]16
8000d932:	3c 0b       	j 8000d948 <_realloc_r+0x160>
8000d934:	48 42       	ld.w %d2,[%a15]16
8000d936:	d9 c3 20 00 	lea %a3,[%a12]32
8000d93a:	59 c2 18 00 	st.w [%a12]24,%d2
8000d93e:	48 53       	ld.w %d3,[%a15]20
8000d940:	d9 ff 18 00 	lea %a15,[%a15]24
8000d944:	59 c3 1c 00 	st.w [%a12]28,%d3
8000d948:	48 02       	ld.w %d2,[%a15]0
8000d94a:	74 32       	st.w [%a3],%d2
8000d94c:	48 13       	ld.w %d3,[%a15]4
8000d94e:	59 33 04 00 	st.w [%a3]4,%d3
8000d952:	48 22       	ld.w %d2,[%a15]8
8000d954:	59 32 08 00 	st.w [%a3]8,%d2
8000d958:	3c 05       	j 8000d962 <_realloc_r+0x17a>
8000d95a:	40 e4       	mov.aa %a4,%a14
8000d95c:	40 f5       	mov.aa %a5,%a15
8000d95e:	6d ff 15 ff 	call 8000d788 <memmove>
8000d962:	10 cf       	addsc.a %a15,%a12,%d15,0
8000d964:	60 c2       	mov.a %a2,%d12
8000d966:	a2 fb       	sub %d11,%d15
8000d968:	ec 22       	st.a [%a2]8,%a15
8000d96a:	8f 1b 40 b1 	or %d11,%d11,1
8000d96e:	68 1b       	st.w [%a15]4,%d11
8000d970:	19 c2 04 00 	ld.w %d2,[%a12]4
8000d974:	40 d4       	mov.aa %a4,%a13
8000d976:	8f 12 00 21 	and %d2,%d2,1
8000d97a:	a6 2f       	or %d15,%d2
8000d97c:	6c c1       	st.w [%a12]4,%d15
8000d97e:	6d ff 02 ea 	call 8000ad82 <__malloc_unlock>
8000d982:	40 e2       	mov.aa %a2,%a14
8000d984:	00 90       	ret 
8000d986:	3f fb 51 00 	jlt %d11,%d15,8000da28 <_realloc_r+0x240>
8000d98a:	99 23 0c 00 	ld.a %a3,[%a2]12
8000d98e:	99 22 08 00 	ld.a %a2,[%a2]8
8000d992:	40 c4       	mov.aa %a4,%a12
8000d994:	1b c8 ff 4f 	addi %d4,%d8,-4
8000d998:	b5 23 0c 00 	st.a [%a2]12,%a3
8000d99c:	b5 32 08 00 	st.a [%a3]8,%a2
8000d9a0:	09 43 88 05 	ld.a %a3,[+%a4]8
8000d9a4:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000d9a8:	8b 54 a2 22 	ge.u %d2,%d4,37
8000d9ac:	b5 32 0c 00 	st.a [%a3]12,%a2
8000d9b0:	b5 23 08 00 	st.a [%a2]8,%a3
8000d9b4:	df 02 35 80 	jne %d2,0,8000da1e <_realloc_r+0x236>
8000d9b8:	8b 44 61 22 	lt.u %d2,%d4,20
8000d9bc:	df 02 28 80 	jne %d2,0,8000da0c <_realloc_r+0x224>
8000d9c0:	48 02       	ld.w %d2,[%a15]0
8000d9c2:	59 c2 08 00 	st.w [%a12]8,%d2
8000d9c6:	48 13       	ld.w %d3,[%a15]4
8000d9c8:	8b c4 a1 22 	ge.u %d2,%d4,28
8000d9cc:	59 c3 0c 00 	st.w [%a12]12,%d3
8000d9d0:	f6 26       	jnz %d2,8000d9dc <_realloc_r+0x1f4>
8000d9d2:	d9 c4 10 00 	lea %a4,[%a12]16
8000d9d6:	d9 ff 08 00 	lea %a15,[%a15]8
8000d9da:	3c 19       	j 8000da0c <_realloc_r+0x224>
8000d9dc:	48 22       	ld.w %d2,[%a15]8
8000d9de:	8b 44 02 82 	eq %d8,%d4,36
8000d9e2:	59 c2 10 00 	st.w [%a12]16,%d2
8000d9e6:	48 33       	ld.w %d3,[%a15]12
8000d9e8:	59 c3 14 00 	st.w [%a12]20,%d3
8000d9ec:	f6 86       	jnz %d8,8000d9f8 <_realloc_r+0x210>
8000d9ee:	d9 c4 18 00 	lea %a4,[%a12]24
8000d9f2:	d9 ff 10 00 	lea %a15,[%a15]16
8000d9f6:	3c 0b       	j 8000da0c <_realloc_r+0x224>
8000d9f8:	48 42       	ld.w %d2,[%a15]16
8000d9fa:	d9 c4 20 00 	lea %a4,[%a12]32
8000d9fe:	59 c2 18 00 	st.w [%a12]24,%d2
8000da02:	48 53       	ld.w %d3,[%a15]20
8000da04:	d9 ff 18 00 	lea %a15,[%a15]24
8000da08:	59 c3 1c 00 	st.w [%a12]28,%d3
8000da0c:	48 02       	ld.w %d2,[%a15]0
8000da0e:	74 42       	st.w [%a4],%d2
8000da10:	48 13       	ld.w %d3,[%a15]4
8000da12:	59 43 04 00 	st.w [%a4]4,%d3
8000da16:	48 22       	ld.w %d2,[%a15]8
8000da18:	59 42 08 00 	st.w [%a4]8,%d2
8000da1c:	3c 04       	j 8000da24 <_realloc_r+0x23c>
8000da1e:	40 f5       	mov.aa %a5,%a15
8000da20:	6d ff b4 fe 	call 8000d788 <memmove>
8000da24:	02 b8       	mov %d8,%d11
8000da26:	3c 45       	j 8000dab0 <_realloc_r+0x2c8>
8000da28:	3f fa 4a 00 	jlt %d10,%d15,8000dabc <_realloc_r+0x2d4>
8000da2c:	40 c4       	mov.aa %a4,%a12
8000da2e:	99 c2 0c 00 	ld.a %a2,[%a12]12
8000da32:	09 43 88 05 	ld.a %a3,[+%a4]8
8000da36:	1b c8 ff 4f 	addi %d4,%d8,-4
8000da3a:	8b 54 a2 22 	ge.u %d2,%d4,37
8000da3e:	b5 32 0c 00 	st.a [%a3]12,%a2
8000da42:	b5 23 08 00 	st.a [%a2]8,%a3
8000da46:	df 02 37 80 	jne %d2,0,8000dab4 <_realloc_r+0x2cc>
8000da4a:	8b 44 61 22 	lt.u %d2,%d4,20
8000da4e:	df 02 28 80 	jne %d2,0,8000da9e <_realloc_r+0x2b6>
8000da52:	48 03       	ld.w %d3,[%a15]0
8000da54:	59 c3 08 00 	st.w [%a12]8,%d3
8000da58:	48 12       	ld.w %d2,[%a15]4
8000da5a:	59 c2 0c 00 	st.w [%a12]12,%d2
8000da5e:	8b c4 a1 22 	ge.u %d2,%d4,28
8000da62:	f6 26       	jnz %d2,8000da6e <_realloc_r+0x286>
8000da64:	d9 c4 10 00 	lea %a4,[%a12]16
8000da68:	d9 ff 08 00 	lea %a15,[%a15]8
8000da6c:	3c 19       	j 8000da9e <_realloc_r+0x2b6>
8000da6e:	48 23       	ld.w %d3,[%a15]8
8000da70:	8b 44 02 82 	eq %d8,%d4,36
8000da74:	59 c3 10 00 	st.w [%a12]16,%d3
8000da78:	48 32       	ld.w %d2,[%a15]12
8000da7a:	59 c2 14 00 	st.w [%a12]20,%d2
8000da7e:	f6 86       	jnz %d8,8000da8a <_realloc_r+0x2a2>
8000da80:	d9 c4 18 00 	lea %a4,[%a12]24
8000da84:	d9 ff 10 00 	lea %a15,[%a15]16
8000da88:	3c 0b       	j 8000da9e <_realloc_r+0x2b6>
8000da8a:	48 43       	ld.w %d3,[%a15]16
8000da8c:	d9 c4 20 00 	lea %a4,[%a12]32
8000da90:	59 c3 18 00 	st.w [%a12]24,%d3
8000da94:	48 52       	ld.w %d2,[%a15]20
8000da96:	d9 ff 18 00 	lea %a15,[%a15]24
8000da9a:	59 c2 1c 00 	st.w [%a12]28,%d2
8000da9e:	48 03       	ld.w %d3,[%a15]0
8000daa0:	74 43       	st.w [%a4],%d3
8000daa2:	48 12       	ld.w %d2,[%a15]4
8000daa4:	59 42 04 00 	st.w [%a4]4,%d2
8000daa8:	48 23       	ld.w %d3,[%a15]8
8000daaa:	59 43 08 00 	st.w [%a4]8,%d3
8000daae:	02 a8       	mov %d8,%d10
8000dab0:	40 ce       	mov.aa %a14,%a12
8000dab2:	3c 66       	j 8000db7e <_realloc_r+0x396>
8000dab4:	40 f5       	mov.aa %a5,%a15
8000dab6:	6d ff 69 fe 	call 8000d788 <memmove>
8000daba:	3c fa       	j 8000daae <_realloc_r+0x2c6>
8000dabc:	40 d4       	mov.aa %a4,%a13
8000dabe:	02 94       	mov %d4,%d9
8000dac0:	6d ff 13 e7 	call 8000a8e6 <_malloc_r>
8000dac4:	40 2c       	mov.aa %a12,%a2
8000dac6:	7c 26       	jnz.a %a2,8000dad2 <_realloc_r+0x2ea>
8000dac8:	40 d4       	mov.aa %a4,%a13
8000daca:	6d ff 5c e9 	call 8000ad82 <__malloc_unlock>
8000dace:	a0 02       	mov.a %a2,0
8000dad0:	00 90       	ret 
8000dad2:	19 f2 fc ff 	ld.w %d2,[%a15]-4
8000dad6:	d9 23 f8 ff 	lea %a3,[%a2]-8
8000dada:	8f 12 c0 21 	andn %d2,%d2,1
8000dade:	01 e2 00 26 	addsc.a %a2,%a14,%d2,0
8000dae2:	80 32       	mov.d %d2,%a3
8000dae4:	80 23       	mov.d %d3,%a2
8000dae6:	5f 32 08 80 	jne %d2,%d3,8000daf6 <_realloc_r+0x30e>
8000daea:	19 c2 fc ff 	ld.w %d2,[%a12]-4
8000daee:	8f 32 c0 21 	andn %d2,%d2,3
8000daf2:	42 28       	add %d8,%d2
8000daf4:	3c 45       	j 8000db7e <_realloc_r+0x396>
8000daf6:	1b c8 ff 4f 	addi %d4,%d8,-4
8000dafa:	8b 54 a2 f2 	ge.u %d15,%d4,37
8000dafe:	ee 33       	jnz %d15,8000db64 <_realloc_r+0x37c>
8000db00:	8b 44 61 f2 	lt.u %d15,%d4,20
8000db04:	40 c3       	mov.aa %a3,%a12
8000db06:	40 f2       	mov.aa %a2,%a15
8000db08:	ee 23       	jnz %d15,8000db4e <_realloc_r+0x366>
8000db0a:	4c f0       	ld.w %d15,[%a15]0
8000db0c:	d9 c3 08 00 	lea %a3,[%a12]8
8000db10:	6c c0       	st.w [%a12]0,%d15
8000db12:	48 12       	ld.w %d2,[%a15]4
8000db14:	8b c4 a1 f2 	ge.u %d15,%d4,28
8000db18:	59 c2 04 00 	st.w [%a12]4,%d2
8000db1c:	d9 f2 08 00 	lea %a2,[%a15]8
8000db20:	6e 17       	jz %d15,8000db4e <_realloc_r+0x366>
8000db22:	48 23       	ld.w %d3,[%a15]8
8000db24:	8b 44 02 82 	eq %d8,%d4,36
8000db28:	59 c3 08 00 	st.w [%a12]8,%d3
8000db2c:	4c f3       	ld.w %d15,[%a15]12
8000db2e:	d9 c3 10 00 	lea %a3,[%a12]16
8000db32:	6c c3       	st.w [%a12]12,%d15
8000db34:	d9 f2 10 00 	lea %a2,[%a15]16
8000db38:	76 8b       	jz %d8,8000db4e <_realloc_r+0x366>
8000db3a:	48 42       	ld.w %d2,[%a15]16
8000db3c:	d9 c3 18 00 	lea %a3,[%a12]24
8000db40:	59 c2 10 00 	st.w [%a12]16,%d2
8000db44:	48 53       	ld.w %d3,[%a15]20
8000db46:	d9 f2 18 00 	lea %a2,[%a15]24
8000db4a:	59 c3 14 00 	st.w [%a12]20,%d3
8000db4e:	4c 20       	ld.w %d15,[%a2]0
8000db50:	6c 30       	st.w [%a3]0,%d15
8000db52:	19 22 04 00 	ld.w %d2,[%a2]4
8000db56:	59 32 04 00 	st.w [%a3]4,%d2
8000db5a:	19 23 08 00 	ld.w %d3,[%a2]8
8000db5e:	59 33 08 00 	st.w [%a3]8,%d3
8000db62:	3c 05       	j 8000db6c <_realloc_r+0x384>
8000db64:	40 c4       	mov.aa %a4,%a12
8000db66:	40 f5       	mov.aa %a5,%a15
8000db68:	6d ff 10 fe 	call 8000d788 <memmove>
8000db6c:	40 d4       	mov.aa %a4,%a13
8000db6e:	40 f5       	mov.aa %a5,%a15
8000db70:	6d ff b0 e9 	call 8000aed0 <_free_r>
8000db74:	40 d4       	mov.aa %a4,%a13
8000db76:	6d ff 06 e9 	call 8000ad82 <__malloc_unlock>
8000db7a:	40 c2       	mov.aa %a2,%a12
8000db7c:	00 90       	ret 
8000db7e:	0b f8 80 20 	sub %d2,%d8,%d15
8000db82:	8b 02 61 42 	lt.u %d4,%d2,16
8000db86:	19 e3 04 00 	ld.w %d3,[%a14]4
8000db8a:	df 04 16 80 	jne %d4,0,8000dbb6 <_realloc_r+0x3ce>
8000db8e:	8f 13 00 31 	and %d3,%d3,1
8000db92:	10 e5       	addsc.a %a5,%a14,%d15,0
8000db94:	a6 3f       	or %d15,%d3
8000db96:	6c e1       	st.w [%a14]4,%d15
8000db98:	01 52 00 f6 	addsc.a %a15,%a5,%d2,0
8000db9c:	8f 12 40 f1 	or %d15,%d2,1
8000dba0:	b7 10 21 20 	imask %e2,1,0,1
8000dba4:	6c 51       	st.w [%a5]4,%d15
8000dba6:	49 f2 44 08 	ldmst [%a15]4,%e2
8000dbaa:	40 d4       	mov.aa %a4,%a13
8000dbac:	d9 55 08 00 	lea %a5,[%a5]8
8000dbb0:	6d ff 90 e9 	call 8000aed0 <_free_r>
8000dbb4:	3c 0c       	j 8000dbcc <_realloc_r+0x3e4>
8000dbb6:	8f 13 00 31 	and %d3,%d3,1
8000dbba:	a6 83       	or %d3,%d8
8000dbbc:	59 e3 04 00 	st.w [%a14]4,%d3
8000dbc0:	01 e8 00 f6 	addsc.a %a15,%a14,%d8,0
8000dbc4:	b7 10 21 20 	imask %e2,1,0,1
8000dbc8:	49 f2 44 08 	ldmst [%a15]4,%e2
8000dbcc:	40 d4       	mov.aa %a4,%a13
8000dbce:	6d ff da e8 	call 8000ad82 <__malloc_unlock>
8000dbd2:	d9 e2 08 00 	lea %a2,[%a14]8
8000dbd6:	00 90       	ret 

8000dbd8 <_exit>:
8000dbd8:	76 43       	jz %d4,8000dbde <_exit+0x6>
8000dbda:	60 4e       	mov.a %a14,%d4
8000dbdc:	3c 04       	j 8000dbe4 <_exit+0xc>
8000dbde:	bb d0 00 f9 	mov.u %d15,36877
8000dbe2:	60 fe       	mov.a %a14,%d15
8000dbe4:	00 a0       	debug 
8000dbe6:	3c 00       	j 8000dbe6 <_exit+0xe>

8000dbe8 <sbrk>:
8000dbe8:	91 00 00 f7 	movh.a %a15,28672
8000dbec:	19 ff a8 40 	ld.w %d15,[%a15]2344 <70000928 <heap_top.2289>>
8000dbf0:	7b 00 00 27 	movh %d2,28672
8000dbf4:	42 f4       	add %d4,%d15
8000dbf6:	1b 02 c5 20 	addi %d2,%d2,3152
8000dbfa:	7f 42 09 80 	jge.u %d2,%d4,8000dc0c <sbrk+0x24>
8000dbfe:	6d 00 13 00 	call 8000dc24 <__errno>
8000dc02:	da 0c       	mov %d15,12
8000dc04:	6c 20       	st.w [%a2]0,%d15
8000dc06:	a0 02       	mov.a %a2,0
8000dc08:	b0 f2       	add.a %a2,-1
8000dc0a:	00 90       	ret 
8000dc0c:	7b 00 00 27 	movh %d2,28672
8000dc10:	1b 02 c5 20 	addi %d2,%d2,3152
8000dc14:	7f 24 04 80 	jge.u %d4,%d2,8000dc1c <sbrk+0x34>
8000dc18:	6d 00 0b 00 	call 8000dc2e <abort>
8000dc1c:	59 f4 a8 40 	st.w [%a15]2344,%d4
8000dc20:	60 f2       	mov.a %a2,%d15
8000dc22:	00 90       	ret 

8000dc24 <__errno>:
8000dc24:	91 00 00 27 	movh.a %a2,28672
8000dc28:	d9 22 c8 10 	lea %a2,[%a2]3144 <70000c48 <_my_errno>>
8000dc2c:	00 90       	ret 

8000dc2e <abort>:
8000dc2e:	00 a0       	debug 
8000dc30:	7b e0 ea fd 	movh %d15,57006
8000dc34:	1b ff ee fb 	addi %d15,%d15,-16657
8000dc38:	60 fe       	mov.a %a14,%d15
8000dc3a:	1d ff cf ff 	j 8000dbd8 <_exit>
8000dc3e:	3c 00       	j 8000dc3e <abort+0x10>

8000dc40 <__eqdf2>:
8000dc40:	20 38       	sub.a %sp,56
8000dc42:	40 a4       	mov.aa %a4,%sp
8000dc44:	d9 a5 10 00 	lea %a5,[%sp]16
8000dc48:	89 a4 40 09 	st.d [%sp],%e4
8000dc4c:	89 a6 48 09 	st.d [%sp]8,%e6
8000dc50:	6d ff 85 e5 	call 8000a75a <__unpack_d>
8000dc54:	d9 a4 08 00 	lea %a4,[%sp]8
8000dc58:	d9 a5 24 00 	lea %a5,[%sp]36
8000dc5c:	6d ff 7f e5 	call 8000a75a <__unpack_d>
8000dc60:	39 af 10 00 	ld.bu %d15,[%sp]16
8000dc64:	82 12       	mov %d2,1
8000dc66:	bf 2f 0c 80 	jlt.u %d15,2,8000dc7e <__eqdf2+0x3e>
8000dc6a:	39 af 24 00 	ld.bu %d15,[%sp]36
8000dc6e:	bf 2f 08 80 	jlt.u %d15,2,8000dc7e <__eqdf2+0x3e>
8000dc72:	d9 a4 10 00 	lea %a4,[%sp]16
8000dc76:	d9 a5 24 00 	lea %a5,[%sp]36
8000dc7a:	6d 00 0d 01 	call 8000de94 <__fpcmp_parts_d>
8000dc7e:	00 90       	ret 

8000dc80 <__nedf2>:
8000dc80:	20 38       	sub.a %sp,56
8000dc82:	40 a4       	mov.aa %a4,%sp
8000dc84:	d9 a5 10 00 	lea %a5,[%sp]16
8000dc88:	89 a4 40 09 	st.d [%sp],%e4
8000dc8c:	89 a6 48 09 	st.d [%sp]8,%e6
8000dc90:	6d ff 65 e5 	call 8000a75a <__unpack_d>
8000dc94:	d9 a4 08 00 	lea %a4,[%sp]8
8000dc98:	d9 a5 24 00 	lea %a5,[%sp]36
8000dc9c:	6d ff 5f e5 	call 8000a75a <__unpack_d>
8000dca0:	39 af 10 00 	ld.bu %d15,[%sp]16
8000dca4:	82 12       	mov %d2,1
8000dca6:	bf 2f 0c 80 	jlt.u %d15,2,8000dcbe <__nedf2+0x3e>
8000dcaa:	39 af 24 00 	ld.bu %d15,[%sp]36
8000dcae:	bf 2f 08 80 	jlt.u %d15,2,8000dcbe <__nedf2+0x3e>
8000dcb2:	d9 a4 10 00 	lea %a4,[%sp]16
8000dcb6:	d9 a5 24 00 	lea %a5,[%sp]36
8000dcba:	6d 00 ed 00 	call 8000de94 <__fpcmp_parts_d>
8000dcbe:	00 90       	ret 

8000dcc0 <__gtdf2>:
8000dcc0:	20 38       	sub.a %sp,56
8000dcc2:	40 a4       	mov.aa %a4,%sp
8000dcc4:	d9 a5 10 00 	lea %a5,[%sp]16
8000dcc8:	89 a4 40 09 	st.d [%sp],%e4
8000dccc:	89 a6 48 09 	st.d [%sp]8,%e6
8000dcd0:	6d ff 45 e5 	call 8000a75a <__unpack_d>
8000dcd4:	d9 a4 08 00 	lea %a4,[%sp]8
8000dcd8:	d9 a5 24 00 	lea %a5,[%sp]36
8000dcdc:	6d ff 3f e5 	call 8000a75a <__unpack_d>
8000dce0:	39 af 10 00 	ld.bu %d15,[%sp]16
8000dce4:	82 f2       	mov %d2,-1
8000dce6:	bf 2f 0c 80 	jlt.u %d15,2,8000dcfe <__gtdf2+0x3e>
8000dcea:	39 af 24 00 	ld.bu %d15,[%sp]36
8000dcee:	bf 2f 08 80 	jlt.u %d15,2,8000dcfe <__gtdf2+0x3e>
8000dcf2:	d9 a4 10 00 	lea %a4,[%sp]16
8000dcf6:	d9 a5 24 00 	lea %a5,[%sp]36
8000dcfa:	6d 00 cd 00 	call 8000de94 <__fpcmp_parts_d>
8000dcfe:	00 90       	ret 

8000dd00 <__gedf2>:
8000dd00:	20 38       	sub.a %sp,56
8000dd02:	40 a4       	mov.aa %a4,%sp
8000dd04:	d9 a5 10 00 	lea %a5,[%sp]16
8000dd08:	89 a4 40 09 	st.d [%sp],%e4
8000dd0c:	89 a6 48 09 	st.d [%sp]8,%e6
8000dd10:	6d ff 25 e5 	call 8000a75a <__unpack_d>
8000dd14:	d9 a4 08 00 	lea %a4,[%sp]8
8000dd18:	d9 a5 24 00 	lea %a5,[%sp]36
8000dd1c:	6d ff 1f e5 	call 8000a75a <__unpack_d>
8000dd20:	39 af 10 00 	ld.bu %d15,[%sp]16
8000dd24:	82 f2       	mov %d2,-1
8000dd26:	bf 2f 0c 80 	jlt.u %d15,2,8000dd3e <__gedf2+0x3e>
8000dd2a:	39 af 24 00 	ld.bu %d15,[%sp]36
8000dd2e:	bf 2f 08 80 	jlt.u %d15,2,8000dd3e <__gedf2+0x3e>
8000dd32:	d9 a4 10 00 	lea %a4,[%sp]16
8000dd36:	d9 a5 24 00 	lea %a5,[%sp]36
8000dd3a:	6d 00 ad 00 	call 8000de94 <__fpcmp_parts_d>
8000dd3e:	00 90       	ret 

8000dd40 <__ltdf2>:
8000dd40:	20 38       	sub.a %sp,56
8000dd42:	40 a4       	mov.aa %a4,%sp
8000dd44:	d9 a5 10 00 	lea %a5,[%sp]16
8000dd48:	89 a4 40 09 	st.d [%sp],%e4
8000dd4c:	89 a6 48 09 	st.d [%sp]8,%e6
8000dd50:	6d ff 05 e5 	call 8000a75a <__unpack_d>
8000dd54:	d9 a4 08 00 	lea %a4,[%sp]8
8000dd58:	d9 a5 24 00 	lea %a5,[%sp]36
8000dd5c:	6d ff ff e4 	call 8000a75a <__unpack_d>
8000dd60:	39 af 10 00 	ld.bu %d15,[%sp]16
8000dd64:	82 12       	mov %d2,1
8000dd66:	bf 2f 0c 80 	jlt.u %d15,2,8000dd7e <__ltdf2+0x3e>
8000dd6a:	39 af 24 00 	ld.bu %d15,[%sp]36
8000dd6e:	bf 2f 08 80 	jlt.u %d15,2,8000dd7e <__ltdf2+0x3e>
8000dd72:	d9 a4 10 00 	lea %a4,[%sp]16
8000dd76:	d9 a5 24 00 	lea %a5,[%sp]36
8000dd7a:	6d 00 8d 00 	call 8000de94 <__fpcmp_parts_d>
8000dd7e:	00 90       	ret 

8000dd80 <__fixdfsi>:
8000dd80:	20 20       	sub.a %sp,32
8000dd82:	d9 a4 20 00 	lea %a4,[%sp]32
8000dd86:	89 44 64 f5 	st.d [+%a4]-28,%e4
8000dd8a:	d9 a5 0c 00 	lea %a5,[%sp]12
8000dd8e:	6d ff e6 e4 	call 8000a75a <__unpack_d>
8000dd92:	0c ac       	ld.bu %d15,[%sp]12
8000dd94:	82 02       	mov %d2,0
8000dd96:	bf 3f 1b 80 	jlt.u %d15,3,8000ddcc <__fixdfsi+0x4c>
8000dd9a:	5e 48       	jne %d15,4,8000ddaa <__fixdfsi+0x2a>
8000dd9c:	7b 00 00 28 	movh %d2,32768
8000dda0:	58 04       	ld.w %d15,[%sp]16
8000dda2:	1b f2 ff 3f 	addi %d3,%d2,-1
8000dda6:	6a 32       	cmovn %d2,%d15,%d3
8000dda8:	00 90       	ret 
8000ddaa:	19 a6 14 00 	ld.w %d6,[%sp]20
8000ddae:	82 02       	mov %d2,0
8000ddb0:	0e 6e       	jltz %d6,8000ddcc <__fixdfsi+0x4c>
8000ddb2:	8b f6 81 f2 	ge %d15,%d6,31
8000ddb6:	ee f3       	jnz %d15,8000dd9c <__fixdfsi+0x1c>
8000ddb8:	09 a4 58 09 	ld.d %e4,[%sp]24
8000ddbc:	8b c6 03 61 	rsub %d6,%d6,60
8000ddc0:	6d ff cb e0 	call 80009f56 <__lshrdi3>
8000ddc4:	58 04       	ld.w %d15,[%sp]16
8000ddc6:	8b 02 00 41 	rsub %d4,%d2,0
8000ddca:	2a 42       	cmov %d2,%d15,%d4
8000ddcc:	00 90       	ret 

8000ddce <__udivdi3>:
8000ddce:	0f 67 a0 20 	or %d2,%d7,%d6
8000ddd2:	0b 45 10 a8 	mov %e10,%d5,%d4
8000ddd6:	02 6f       	mov %d15,%d6
8000ddd8:	02 7c       	mov %d12,%d7
8000ddda:	d2 f8       	mov %e8,-1
8000dddc:	df 02 46 00 	jeq %d2,0,8000de68 <__udivdi3+0x9a>
8000dde0:	8f 07 40 21 	or %d2,%d7,0
8000dde4:	f6 2d       	jnz %d2,8000ddfe <__udivdi3+0x30>
8000dde6:	4b 6b 11 82 	div.u %e8,%d11,%d6
8000ddea:	d2 04       	mov %e4,0
8000ddec:	02 a4       	mov %d4,%d10
8000ddee:	42 95       	add %d5,%d9
8000ddf0:	6d 00 a5 00 	call 8000df3a <__udiv6432>
8000ddf4:	82 04       	mov %d4,0
8000ddf6:	02 85       	mov %d5,%d8
8000ddf8:	13 12 40 84 	madd.u %e8,%e4,%d2,1
8000ddfc:	3c 36       	j 8000de68 <__udivdi3+0x9a>
8000ddfe:	0b 7b 00 21 	eq %d2,%d11,%d7
8000de02:	0b 64 30 22 	and.lt.u %d2,%d4,%d6
8000de06:	0b 7b a0 22 	or.lt.u %d2,%d11,%d7
8000de0a:	d2 08       	mov %e8,0
8000de0c:	df 02 2e 80 	jne %d2,0,8000de68 <__udivdi3+0x9a>
8000de10:	77 4b 80 5f 	dextr %d5,%d11,%d4,31
8000de14:	0f 07 b0 d1 	clz %d13,%d7
8000de18:	60 5f       	mov.a %a15,%d5
8000de1a:	0b 67 10 48 	mov %e4,%d7,%d6
8000de1e:	02 d6       	mov %d6,%d13
8000de20:	6d ff bf e3 	call 8000a59e <__ashldi3>
8000de24:	8f fb 1f e0 	sh %d14,%d11,-1
8000de28:	80 f4       	mov.d %d4,%a15
8000de2a:	02 36       	mov %d6,%d3
8000de2c:	02 e5       	mov %d5,%d14
8000de2e:	6d 00 86 00 	call 8000df3a <__udiv6432>
8000de32:	8b fd 01 d1 	rsub %d13,%d13,31
8000de36:	8b 0d 00 31 	rsub %d3,%d13,0
8000de3a:	0f 32 00 30 	sh %d3,%d2,%d3
8000de3e:	02 32       	mov %d2,%d3
8000de40:	8b f2 9f 80 	addx %d8,%d2,-1
8000de44:	23 f8 68 aa 	msub.u %e10,%e10,%d8,%d15
8000de48:	82 03       	mov %d3,0
8000de4a:	8b f3 bf 90 	addc %d9,%d3,-1
8000de4e:	23 c8 0a bb 	msub %d11,%d11,%d8,%d12
8000de52:	23 f9 0a bb 	msub %d11,%d11,%d9,%d15
8000de56:	0b cb 00 41 	eq %d4,%d11,%d12
8000de5a:	0b fa 30 42 	and.lt.u %d4,%d10,%d15
8000de5e:	0b cb a0 42 	or.lt.u %d4,%d11,%d12
8000de62:	f6 43       	jnz %d4,8000de68 <__udivdi3+0x9a>
8000de64:	0b 23 10 88 	mov %e8,%d3,%d2
8000de68:	0b 89 10 28 	mov %e2,%d9,%d8
8000de6c:	00 90       	ret 

8000de6e <__umoddi3>:
8000de6e:	0f 67 a0 90 	or %d9,%d7,%d6
8000de72:	02 6f       	mov %d15,%d6
8000de74:	d2 00       	mov %e0,0
8000de76:	76 9c       	jz %d9,8000de8e <__umoddi3+0x20>
8000de78:	02 7a       	mov %d10,%d7
8000de7a:	0b 45 10 88 	mov %e8,%d5,%d4
8000de7e:	6d ff a8 ff 	call 8000ddce <__udivdi3>
8000de82:	23 f2 68 08 	msub.u %e0,%e8,%d2,%d15
8000de86:	23 a2 0a 11 	msub %d1,%d1,%d2,%d10
8000de8a:	23 f3 0a 11 	msub %d1,%d1,%d3,%d15
8000de8e:	0b 01 10 28 	mov %e2,%d1,%d0
8000de92:	00 90       	ret 

8000de94 <__fpcmp_parts_d>:
8000de94:	14 43       	ld.bu %d3,[%a4]
8000de96:	82 12       	mov %d2,1
8000de98:	bf 23 50 80 	jlt.u %d3,2,8000df38 <__fpcmp_parts_d+0xa4>
8000de9c:	0c 50       	ld.bu %d15,[%a5]0
8000de9e:	bf 2f 4d 80 	jlt.u %d15,2,8000df38 <__fpcmp_parts_d+0xa4>
8000dea2:	8b 43 00 42 	eq %d4,%d3,4
8000dea6:	8b 4f 00 22 	eq %d2,%d15,4
8000deaa:	0f 24 80 50 	and %d5,%d4,%d2
8000deae:	76 56       	jz %d5,8000deba <__fpcmp_parts_d+0x26>
8000deb0:	19 52 04 00 	ld.w %d2,[%a5]4
8000deb4:	4c 41       	ld.w %d15,[%a4]4
8000deb6:	a2 f2       	sub %d2,%d15
8000deb8:	00 90       	ret 
8000deba:	76 47       	jz %d4,8000dec8 <__fpcmp_parts_d+0x34>
8000debc:	19 42 04 00 	ld.w %d2,[%a4]4
8000dec0:	82 1f       	mov %d15,1
8000dec2:	ab ff bf 22 	seln %d2,%d2,%d15,-1
8000dec6:	00 90       	ret 
8000dec8:	76 27       	jz %d2,8000ded6 <__fpcmp_parts_d+0x42>
8000deca:	19 52 04 00 	ld.w %d2,[%a5]4
8000dece:	82 ff       	mov %d15,-1
8000ded0:	ab 1f a0 22 	seln %d2,%d2,%d15,1
8000ded4:	00 90       	ret 
8000ded6:	df 23 06 80 	jne %d3,2,8000dee2 <__fpcmp_parts_d+0x4e>
8000deda:	82 02       	mov %d2,0
8000dedc:	df 2f f7 ff 	jne %d15,2,8000deca <__fpcmp_parts_d+0x36>
8000dee0:	00 90       	ret 
8000dee2:	df 2f ed 7f 	jeq %d15,2,8000debc <__fpcmp_parts_d+0x28>
8000dee6:	19 45 04 00 	ld.w %d5,[%a4]4
8000deea:	4c 51       	ld.w %d15,[%a5]4
8000deec:	5f f5 19 80 	jne %d5,%d15,8000df1e <__fpcmp_parts_d+0x8a>
8000def0:	19 42 08 00 	ld.w %d2,[%a4]8
8000def4:	4c 52       	ld.w %d15,[%a5]8
8000def6:	3f 2f 14 00 	jlt %d15,%d2,8000df1e <__fpcmp_parts_d+0x8a>
8000defa:	3f f2 1c 00 	jlt %d2,%d15,8000df32 <__fpcmp_parts_d+0x9e>
8000defe:	19 43 10 00 	ld.w %d3,[%a4]16
8000df02:	19 54 10 00 	ld.w %d4,[%a5]16
8000df06:	19 47 0c 00 	ld.w %d7,[%a4]12
8000df0a:	19 56 0c 00 	ld.w %d6,[%a5]12
8000df0e:	0b 43 00 21 	eq %d2,%d3,%d4
8000df12:	0b 76 50 22 	and.ge.u %d2,%d6,%d7
8000df16:	0b 43 a0 22 	or.lt.u %d2,%d3,%d4
8000df1a:	3a 43       	eq %d15,%d3,%d4
8000df1c:	f6 25       	jnz %d2,8000df26 <__fpcmp_parts_d+0x92>
8000df1e:	82 12       	mov %d2,1
8000df20:	ab f2 bf 25 	seln %d2,%d5,%d2,-1
8000df24:	00 90       	ret 
8000df26:	0b 67 50 f2 	and.ge.u %d15,%d7,%d6
8000df2a:	0b 34 a0 f2 	or.lt.u %d15,%d4,%d3
8000df2e:	82 02       	mov %d2,0
8000df30:	ee 04       	jnz %d15,8000df38 <__fpcmp_parts_d+0xa4>
8000df32:	82 f2       	mov %d2,-1
8000df34:	ab 12 a0 25 	seln %d2,%d5,%d2,1
8000df38:	00 90       	ret 

8000df3a <__udiv6432>:
8000df3a:	02 53       	mov %d3,%d5
8000df3c:	82 f2       	mov %d2,-1
8000df3e:	7f 65 4b 80 	jge.u %d5,%d6,8000dfd4 <__udiv6432+0x9a>
8000df42:	0f 06 b0 21 	clz %d2,%d6
8000df46:	0f 26 00 60 	sh %d6,%d6,%d2
8000df4a:	17 45 80 52 	dextr %d5,%d5,%d4,%d2
8000df4e:	2b 35 40 32 	sel %d3,%d2,%d5,%d3
8000df52:	8f 06 1f 70 	sh %d7,%d6,-16
8000df56:	4b 73 11 02 	div.u %e0,%d3,%d7
8000df5a:	b7 06 10 88 	insert %d8,%d6,0,16,16
8000df5e:	0f 24 00 20 	sh %d2,%d4,%d2
8000df62:	02 05       	mov %d5,%d0
8000df64:	23 07 0a 13 	msub %d1,%d3,%d7,%d0
8000df68:	e2 80       	mul %d0,%d8
8000df6a:	8f 02 1f b0 	sh %d11,%d2,-16
8000df6e:	b7 02 10 28 	insert %d2,%d2,0,16,16
8000df72:	82 0c       	mov %d12,0
8000df74:	7b 10 00 90 	movh %d9,1
8000df78:	7f 95 09 80 	jge.u %d5,%d9,8000df8a <__udiv6432+0x50>
8000df7c:	8f 01 01 f0 	sh %d15,%d1,16
8000df80:	0b 0c 00 a0 	add %d10,%d12,%d0
8000df84:	42 bf       	add %d15,%d11
8000df86:	7f af 07 80 	jge.u %d15,%d10,8000df94 <__udiv6432+0x5a>
8000df8a:	42 71       	add %d1,%d7
8000df8c:	c2 f5       	add %d5,-1
8000df8e:	a2 8c       	sub %d12,%d8
8000df90:	3f 91 f4 ff 	jlt.u %d1,%d9,8000df78 <__udiv6432+0x3e>
8000df94:	8f 03 01 30 	sh %d3,%d3,16
8000df98:	42 3b       	add %d11,%d3
8000df9a:	23 65 0a 6b 	msub %d6,%d11,%d5,%d6
8000df9e:	82 0a       	mov %d10,0
8000dfa0:	4b 76 11 02 	div.u %e0,%d6,%d7
8000dfa4:	7b 10 00 10 	movh %d1,1
8000dfa8:	02 03       	mov %d3,%d0
8000dfaa:	23 07 0a 66 	msub %d6,%d6,%d7,%d0
8000dfae:	e2 80       	mul %d0,%d8
8000dfb0:	7f 13 09 80 	jge.u %d3,%d1,8000dfc2 <__udiv6432+0x88>
8000dfb4:	8f 06 01 f0 	sh %d15,%d6,16
8000dfb8:	0b 0a 00 90 	add %d9,%d10,%d0
8000dfbc:	42 2f       	add %d15,%d2
8000dfbe:	7f 9f 07 80 	jge.u %d15,%d9,8000dfcc <__udiv6432+0x92>
8000dfc2:	42 76       	add %d6,%d7
8000dfc4:	c2 f3       	add %d3,-1
8000dfc6:	a2 8a       	sub %d10,%d8
8000dfc8:	3f 16 f4 ff 	jlt.u %d6,%d1,8000dfb0 <__udiv6432+0x76>
8000dfcc:	8f 05 01 50 	sh %d5,%d5,16
8000dfd0:	0b 53 00 20 	add %d2,%d3,%d5
8000dfd4:	00 90       	ret 
	...
